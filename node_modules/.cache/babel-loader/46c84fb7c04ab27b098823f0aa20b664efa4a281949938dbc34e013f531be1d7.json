{"ast":null,"code":"import { InvalidAddressError } from '../errors/address.js';\nimport { BaseError } from '../errors/base.js';\nimport { InvalidChainIdError } from '../errors/chain.js';\nimport { FeeCapTooHighError, TipAboveFeeCapError } from '../errors/node.js';\nimport { isAddress } from '../utils/address/isAddress.js';\nimport { concatHex } from '../utils/data/concat.js';\nimport { toHex } from '../utils/encoding/toHex.js';\nimport { toRlp } from '../utils/encoding/toRlp.js';\nimport { serializeAccessList } from '../utils/transaction/serializeAccessList.js';\nimport { serializeTransaction as serializeTransaction_, toYParitySignatureArray } from '../utils/transaction/serializeTransaction.js';\nimport { isCIP42, isCIP64, isEmpty, isPresent } from './utils.js';\nexport function serializeTransaction(transaction, signature) {\n  if (isCIP64(transaction)) return serializeTransactionCIP64(transaction, signature);\n  if (isCIP42(transaction)) return serializeTransactionCIP42(transaction, signature);\n  return serializeTransaction_(transaction, signature);\n}\nexport const serializers = {\n  transaction: serializeTransaction\n};\n// There shall be a typed transaction with the code 0x7c that has the following format:\n// 0x7c || rlp([chain_id, nonce, max_priority_fee_per_gas, max_fee_per_gas, gas_limit, feecurrency, gatewayFeeRecipient, gatewayfee, destination, amount, data, access_list, signature_y_parity, signature_r, signature_s]).\n// This will be in addition to the type 0x02 transaction as specified in EIP-1559.\nfunction serializeTransactionCIP42(transaction, signature) {\n  assertTransactionCIP42(transaction);\n  const {\n    chainId,\n    gas,\n    nonce,\n    to,\n    value,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    accessList,\n    feeCurrency,\n    gatewayFeeRecipient,\n    gatewayFee,\n    data\n  } = transaction;\n  const serializedTransaction = [toHex(chainId), nonce ? toHex(nonce) : '0x', maxPriorityFeePerGas ? toHex(maxPriorityFeePerGas) : '0x', maxFeePerGas ? toHex(maxFeePerGas) : '0x', gas ? toHex(gas) : '0x', feeCurrency ?? '0x', gatewayFeeRecipient ?? '0x', gatewayFee ? toHex(gatewayFee) : '0x', to ?? '0x', value ? toHex(value) : '0x', data ?? '0x', serializeAccessList(accessList), ...toYParitySignatureArray(transaction, signature)];\n  return concatHex(['0x7c', toRlp(serializedTransaction)]);\n}\nfunction serializeTransactionCIP64(transaction, signature) {\n  assertTransactionCIP64(transaction);\n  const {\n    chainId,\n    gas,\n    nonce,\n    to,\n    value,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    accessList,\n    feeCurrency,\n    data\n  } = transaction;\n  const serializedTransaction = [toHex(chainId), nonce ? toHex(nonce) : '0x', maxPriorityFeePerGas ? toHex(maxPriorityFeePerGas) : '0x', maxFeePerGas ? toHex(maxFeePerGas) : '0x', gas ? toHex(gas) : '0x', to ?? '0x', value ? toHex(value) : '0x', data ?? '0x', serializeAccessList(accessList), feeCurrency, ...toYParitySignatureArray(transaction, signature)];\n  return concatHex(['0x7b', toRlp(serializedTransaction)]);\n}\n// maxFeePerGas must be less than 2^256 - 1\nconst MAX_MAX_FEE_PER_GAS = 2n ** 256n - 1n;\nexport function assertTransactionCIP42(transaction) {\n  const {\n    chainId,\n    maxPriorityFeePerGas,\n    gasPrice,\n    maxFeePerGas,\n    to,\n    feeCurrency,\n    gatewayFee,\n    gatewayFeeRecipient\n  } = transaction;\n  if (chainId <= 0) throw new InvalidChainIdError({\n    chainId\n  });\n  if (to && !isAddress(to)) throw new InvalidAddressError({\n    address: to\n  });\n  if (gasPrice) throw new BaseError('`gasPrice` is not a valid CIP-42 Transaction attribute.');\n  if (isPresent(maxFeePerGas) && maxFeePerGas > MAX_MAX_FEE_PER_GAS) throw new FeeCapTooHighError({\n    maxFeePerGas\n  });\n  if (isPresent(maxPriorityFeePerGas) && isPresent(maxFeePerGas) && maxPriorityFeePerGas > maxFeePerGas) throw new TipAboveFeeCapError({\n    maxFeePerGas,\n    maxPriorityFeePerGas\n  });\n  if (isPresent(gatewayFee) && isEmpty(gatewayFeeRecipient) || isPresent(gatewayFeeRecipient) && isEmpty(gatewayFee)) {\n    throw new BaseError('`gatewayFee` and `gatewayFeeRecipient` must be provided together.');\n  }\n  if (isPresent(feeCurrency) && !isAddress(feeCurrency)) {\n    throw new BaseError('`feeCurrency` MUST be a token address for CIP-42 transactions.');\n  }\n  if (isPresent(gatewayFeeRecipient) && !isAddress(gatewayFeeRecipient)) {\n    throw new InvalidAddressError(gatewayFeeRecipient);\n  }\n  if (isEmpty(feeCurrency) && isEmpty(gatewayFeeRecipient)) {\n    throw new BaseError('Either `feeCurrency` or `gatewayFeeRecipient` must be provided for CIP-42 transactions.');\n  }\n}\nexport function assertTransactionCIP64(transaction) {\n  const {\n    chainId,\n    maxPriorityFeePerGas,\n    gasPrice,\n    maxFeePerGas,\n    to,\n    feeCurrency\n  } = transaction;\n  if (chainId <= 0) throw new InvalidChainIdError({\n    chainId\n  });\n  if (to && !isAddress(to)) throw new InvalidAddressError({\n    address: to\n  });\n  if (gasPrice) throw new BaseError('`gasPrice` is not a valid CIP-64 Transaction attribute.');\n  if (isPresent(maxFeePerGas) && maxFeePerGas > MAX_MAX_FEE_PER_GAS) throw new FeeCapTooHighError({\n    maxFeePerGas\n  });\n  if (isPresent(maxPriorityFeePerGas) && isPresent(maxFeePerGas) && maxPriorityFeePerGas > maxFeePerGas) throw new TipAboveFeeCapError({\n    maxFeePerGas,\n    maxPriorityFeePerGas\n  });\n  if (isPresent(feeCurrency) && !isAddress(feeCurrency)) {\n    throw new BaseError('`feeCurrency` MUST be a token address for CIP-64 transactions.');\n  }\n  if (isEmpty(feeCurrency)) {\n    throw new BaseError('`feeCurrency` must be provided for CIP-64 transactions.');\n  }\n}","map":{"version":3,"names":["InvalidAddressError","BaseError","InvalidChainIdError","FeeCapTooHighError","TipAboveFeeCapError","isAddress","concatHex","toHex","toRlp","serializeAccessList","serializeTransaction","serializeTransaction_","toYParitySignatureArray","isCIP42","isCIP64","isEmpty","isPresent","transaction","signature","serializeTransactionCIP64","serializeTransactionCIP42","serializers","assertTransactionCIP42","chainId","gas","nonce","to","value","maxFeePerGas","maxPriorityFeePerGas","accessList","feeCurrency","gatewayFeeRecipient","gatewayFee","data","serializedTransaction","assertTransactionCIP64","MAX_MAX_FEE_PER_GAS","gasPrice","address"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/viem/celo/serializers.ts"],"sourcesContent":["import { InvalidAddressError } from '../errors/address.js'\nimport { BaseError } from '../errors/base.js'\nimport { InvalidChainIdError } from '../errors/chain.js'\nimport { FeeCapTooHighError, TipAboveFeeCapError } from '../errors/node.js'\nimport type { ChainSerializers } from '../types/chain.js'\nimport type { Signature } from '../types/misc.js'\nimport { isAddress } from '../utils/address/isAddress.js'\nimport { concatHex } from '../utils/data/concat.js'\nimport { toHex } from '../utils/encoding/toHex.js'\nimport { toRlp } from '../utils/encoding/toRlp.js'\nimport { serializeAccessList } from '../utils/transaction/serializeAccessList.js'\nimport {\n  serializeTransaction as serializeTransaction_,\n  toYParitySignatureArray,\n} from '../utils/transaction/serializeTransaction.js'\nimport type {\n  CeloTransactionSerializable,\n  TransactionSerializableCIP42,\n  TransactionSerializableCIP64,\n  TransactionSerializedCIP42,\n  TransactionSerializedCIP64,\n} from './types.js'\nimport { isCIP42, isCIP64, isEmpty, isPresent } from './utils.js'\n\nexport function serializeTransaction(\n  transaction: CeloTransactionSerializable,\n  signature?: Signature | undefined,\n) {\n  if (isCIP64(transaction))\n    return serializeTransactionCIP64(transaction, signature)\n  if (isCIP42(transaction))\n    return serializeTransactionCIP42(transaction, signature)\n  return serializeTransaction_(transaction, signature)\n}\n\nexport const serializers = {\n  transaction: serializeTransaction,\n} as const satisfies ChainSerializers\n\n//////////////////////////////////////////////////////////////////////////////\n// Serializers\n\nexport type SerializeTransactionCIP42ReturnType = TransactionSerializedCIP42\nexport type SerializeTransactionCIP64ReturnType = TransactionSerializedCIP64\n\n// There shall be a typed transaction with the code 0x7c that has the following format:\n// 0x7c || rlp([chain_id, nonce, max_priority_fee_per_gas, max_fee_per_gas, gas_limit, feecurrency, gatewayFeeRecipient, gatewayfee, destination, amount, data, access_list, signature_y_parity, signature_r, signature_s]).\n// This will be in addition to the type 0x02 transaction as specified in EIP-1559.\nfunction serializeTransactionCIP42(\n  transaction: TransactionSerializableCIP42,\n  signature?: Signature | undefined,\n): SerializeTransactionCIP42ReturnType {\n  assertTransactionCIP42(transaction)\n  const {\n    chainId,\n    gas,\n    nonce,\n    to,\n    value,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    accessList,\n    feeCurrency,\n    gatewayFeeRecipient,\n    gatewayFee,\n    data,\n  } = transaction\n\n  const serializedTransaction = [\n    toHex(chainId),\n    nonce ? toHex(nonce) : '0x',\n    maxPriorityFeePerGas ? toHex(maxPriorityFeePerGas) : '0x',\n    maxFeePerGas ? toHex(maxFeePerGas) : '0x',\n    gas ? toHex(gas) : '0x',\n    feeCurrency ?? '0x',\n    gatewayFeeRecipient ?? '0x',\n    gatewayFee ? toHex(gatewayFee) : '0x',\n    to ?? '0x',\n    value ? toHex(value) : '0x',\n    data ?? '0x',\n    serializeAccessList(accessList),\n    ...toYParitySignatureArray(transaction, signature),\n  ]\n\n  return concatHex([\n    '0x7c',\n    toRlp(serializedTransaction),\n  ]) as SerializeTransactionCIP42ReturnType\n}\n\nfunction serializeTransactionCIP64(\n  transaction: TransactionSerializableCIP64,\n  signature?: Signature | undefined,\n): SerializeTransactionCIP64ReturnType {\n  assertTransactionCIP64(transaction)\n  const {\n    chainId,\n    gas,\n    nonce,\n    to,\n    value,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    accessList,\n    feeCurrency,\n    data,\n  } = transaction\n\n  const serializedTransaction = [\n    toHex(chainId),\n    nonce ? toHex(nonce) : '0x',\n    maxPriorityFeePerGas ? toHex(maxPriorityFeePerGas) : '0x',\n    maxFeePerGas ? toHex(maxFeePerGas) : '0x',\n    gas ? toHex(gas) : '0x',\n    to ?? '0x',\n    value ? toHex(value) : '0x',\n    data ?? '0x',\n    serializeAccessList(accessList),\n    feeCurrency!,\n    ...toYParitySignatureArray(transaction, signature),\n  ]\n\n  return concatHex([\n    '0x7b',\n    toRlp(serializedTransaction),\n  ]) as SerializeTransactionCIP64ReturnType\n}\n\n// maxFeePerGas must be less than 2^256 - 1\nconst MAX_MAX_FEE_PER_GAS = 2n ** 256n - 1n\n\nexport function assertTransactionCIP42(\n  transaction: TransactionSerializableCIP42,\n) {\n  const {\n    chainId,\n    maxPriorityFeePerGas,\n    gasPrice,\n    maxFeePerGas,\n    to,\n    feeCurrency,\n    gatewayFee,\n    gatewayFeeRecipient,\n  } = transaction\n  if (chainId <= 0) throw new InvalidChainIdError({ chainId })\n  if (to && !isAddress(to)) throw new InvalidAddressError({ address: to })\n  if (gasPrice)\n    throw new BaseError(\n      '`gasPrice` is not a valid CIP-42 Transaction attribute.',\n    )\n\n  if (isPresent(maxFeePerGas) && maxFeePerGas > MAX_MAX_FEE_PER_GAS)\n    throw new FeeCapTooHighError({ maxFeePerGas })\n\n  if (\n    isPresent(maxPriorityFeePerGas) &&\n    isPresent(maxFeePerGas) &&\n    maxPriorityFeePerGas > maxFeePerGas\n  )\n    throw new TipAboveFeeCapError({ maxFeePerGas, maxPriorityFeePerGas })\n\n  if (\n    (isPresent(gatewayFee) && isEmpty(gatewayFeeRecipient)) ||\n    (isPresent(gatewayFeeRecipient) && isEmpty(gatewayFee))\n  ) {\n    throw new BaseError(\n      '`gatewayFee` and `gatewayFeeRecipient` must be provided together.',\n    )\n  }\n\n  if (isPresent(feeCurrency) && !isAddress(feeCurrency)) {\n    throw new BaseError(\n      '`feeCurrency` MUST be a token address for CIP-42 transactions.',\n    )\n  }\n\n  if (isPresent(gatewayFeeRecipient) && !isAddress(gatewayFeeRecipient)) {\n    throw new InvalidAddressError(gatewayFeeRecipient)\n  }\n\n  if (isEmpty(feeCurrency) && isEmpty(gatewayFeeRecipient)) {\n    throw new BaseError(\n      'Either `feeCurrency` or `gatewayFeeRecipient` must be provided for CIP-42 transactions.',\n    )\n  }\n}\n\nexport function assertTransactionCIP64(\n  transaction: TransactionSerializableCIP64,\n) {\n  const {\n    chainId,\n    maxPriorityFeePerGas,\n    gasPrice,\n    maxFeePerGas,\n    to,\n    feeCurrency,\n  } = transaction\n\n  if (chainId <= 0) throw new InvalidChainIdError({ chainId })\n  if (to && !isAddress(to)) throw new InvalidAddressError({ address: to })\n\n  if (gasPrice)\n    throw new BaseError(\n      '`gasPrice` is not a valid CIP-64 Transaction attribute.',\n    )\n\n  if (isPresent(maxFeePerGas) && maxFeePerGas > MAX_MAX_FEE_PER_GAS)\n    throw new FeeCapTooHighError({ maxFeePerGas })\n  if (\n    isPresent(maxPriorityFeePerGas) &&\n    isPresent(maxFeePerGas) &&\n    maxPriorityFeePerGas > maxFeePerGas\n  )\n    throw new TipAboveFeeCapError({ maxFeePerGas, maxPriorityFeePerGas })\n\n  if (isPresent(feeCurrency) && !isAddress(feeCurrency)) {\n    throw new BaseError(\n      '`feeCurrency` MUST be a token address for CIP-64 transactions.',\n    )\n  }\n\n  if (isEmpty(feeCurrency)) {\n    throw new BaseError(\n      '`feeCurrency` must be provided for CIP-64 transactions.',\n    )\n  }\n}\n"],"mappings":"AAAA,SAASA,mBAAmB,QAAQ,sBAAsB;AAC1D,SAASC,SAAS,QAAQ,mBAAmB;AAC7C,SAASC,mBAAmB,QAAQ,oBAAoB;AACxD,SAASC,kBAAkB,EAAEC,mBAAmB,QAAQ,mBAAmB;AAG3E,SAASC,SAAS,QAAQ,+BAA+B;AACzD,SAASC,SAAS,QAAQ,yBAAyB;AACnD,SAASC,KAAK,QAAQ,4BAA4B;AAClD,SAASC,KAAK,QAAQ,4BAA4B;AAClD,SAASC,mBAAmB,QAAQ,6CAA6C;AACjF,SACEC,oBAAoB,IAAIC,qBAAqB,EAC7CC,uBAAuB,QAClB,8CAA8C;AAQrD,SAASC,OAAO,EAAEC,OAAO,EAAEC,OAAO,EAAEC,SAAS,QAAQ,YAAY;AAEjE,OAAM,SAAUN,oBAAoBA,CAClCO,WAAwC,EACxCC,SAAiC;EAEjC,IAAIJ,OAAO,CAACG,WAAW,CAAC,EACtB,OAAOE,yBAAyB,CAACF,WAAW,EAAEC,SAAS,CAAC;EAC1D,IAAIL,OAAO,CAACI,WAAW,CAAC,EACtB,OAAOG,yBAAyB,CAACH,WAAW,EAAEC,SAAS,CAAC;EAC1D,OAAOP,qBAAqB,CAACM,WAAW,EAAEC,SAAS,CAAC;AACtD;AAEA,OAAO,MAAMG,WAAW,GAAG;EACzBJ,WAAW,EAAEP;CACsB;AAQrC;AACA;AACA;AACA,SAASU,yBAAyBA,CAChCH,WAAyC,EACzCC,SAAiC;EAEjCI,sBAAsB,CAACL,WAAW,CAAC;EACnC,MAAM;IACJM,OAAO;IACPC,GAAG;IACHC,KAAK;IACLC,EAAE;IACFC,KAAK;IACLC,YAAY;IACZC,oBAAoB;IACpBC,UAAU;IACVC,WAAW;IACXC,mBAAmB;IACnBC,UAAU;IACVC;EAAI,CACL,GAAGjB,WAAW;EAEf,MAAMkB,qBAAqB,GAAG,CAC5B5B,KAAK,CAACgB,OAAO,CAAC,EACdE,KAAK,GAAGlB,KAAK,CAACkB,KAAK,CAAC,GAAG,IAAI,EAC3BI,oBAAoB,GAAGtB,KAAK,CAACsB,oBAAoB,CAAC,GAAG,IAAI,EACzDD,YAAY,GAAGrB,KAAK,CAACqB,YAAY,CAAC,GAAG,IAAI,EACzCJ,GAAG,GAAGjB,KAAK,CAACiB,GAAG,CAAC,GAAG,IAAI,EACvBO,WAAW,IAAI,IAAI,EACnBC,mBAAmB,IAAI,IAAI,EAC3BC,UAAU,GAAG1B,KAAK,CAAC0B,UAAU,CAAC,GAAG,IAAI,EACrCP,EAAE,IAAI,IAAI,EACVC,KAAK,GAAGpB,KAAK,CAACoB,KAAK,CAAC,GAAG,IAAI,EAC3BO,IAAI,IAAI,IAAI,EACZzB,mBAAmB,CAACqB,UAAU,CAAC,EAC/B,GAAGlB,uBAAuB,CAACK,WAAW,EAAEC,SAAS,CAAC,CACnD;EAED,OAAOZ,SAAS,CAAC,CACf,MAAM,EACNE,KAAK,CAAC2B,qBAAqB,CAAC,CAC7B,CAAwC;AAC3C;AAEA,SAAShB,yBAAyBA,CAChCF,WAAyC,EACzCC,SAAiC;EAEjCkB,sBAAsB,CAACnB,WAAW,CAAC;EACnC,MAAM;IACJM,OAAO;IACPC,GAAG;IACHC,KAAK;IACLC,EAAE;IACFC,KAAK;IACLC,YAAY;IACZC,oBAAoB;IACpBC,UAAU;IACVC,WAAW;IACXG;EAAI,CACL,GAAGjB,WAAW;EAEf,MAAMkB,qBAAqB,GAAG,CAC5B5B,KAAK,CAACgB,OAAO,CAAC,EACdE,KAAK,GAAGlB,KAAK,CAACkB,KAAK,CAAC,GAAG,IAAI,EAC3BI,oBAAoB,GAAGtB,KAAK,CAACsB,oBAAoB,CAAC,GAAG,IAAI,EACzDD,YAAY,GAAGrB,KAAK,CAACqB,YAAY,CAAC,GAAG,IAAI,EACzCJ,GAAG,GAAGjB,KAAK,CAACiB,GAAG,CAAC,GAAG,IAAI,EACvBE,EAAE,IAAI,IAAI,EACVC,KAAK,GAAGpB,KAAK,CAACoB,KAAK,CAAC,GAAG,IAAI,EAC3BO,IAAI,IAAI,IAAI,EACZzB,mBAAmB,CAACqB,UAAU,CAAC,EAC/BC,WAAY,EACZ,GAAGnB,uBAAuB,CAACK,WAAW,EAAEC,SAAS,CAAC,CACnD;EAED,OAAOZ,SAAS,CAAC,CACf,MAAM,EACNE,KAAK,CAAC2B,qBAAqB,CAAC,CAC7B,CAAwC;AAC3C;AAEA;AACA,MAAME,mBAAmB,GAAG,EAAE,IAAI,IAAI,GAAG,EAAE;AAE3C,OAAM,SAAUf,sBAAsBA,CACpCL,WAAyC;EAEzC,MAAM;IACJM,OAAO;IACPM,oBAAoB;IACpBS,QAAQ;IACRV,YAAY;IACZF,EAAE;IACFK,WAAW;IACXE,UAAU;IACVD;EAAmB,CACpB,GAAGf,WAAW;EACf,IAAIM,OAAO,IAAI,CAAC,EAAE,MAAM,IAAIrB,mBAAmB,CAAC;IAAEqB;EAAO,CAAE,CAAC;EAC5D,IAAIG,EAAE,IAAI,CAACrB,SAAS,CAACqB,EAAE,CAAC,EAAE,MAAM,IAAI1B,mBAAmB,CAAC;IAAEuC,OAAO,EAAEb;EAAE,CAAE,CAAC;EACxE,IAAIY,QAAQ,EACV,MAAM,IAAIrC,SAAS,CACjB,yDAAyD,CAC1D;EAEH,IAAIe,SAAS,CAACY,YAAY,CAAC,IAAIA,YAAY,GAAGS,mBAAmB,EAC/D,MAAM,IAAIlC,kBAAkB,CAAC;IAAEyB;EAAY,CAAE,CAAC;EAEhD,IACEZ,SAAS,CAACa,oBAAoB,CAAC,IAC/Bb,SAAS,CAACY,YAAY,CAAC,IACvBC,oBAAoB,GAAGD,YAAY,EAEnC,MAAM,IAAIxB,mBAAmB,CAAC;IAAEwB,YAAY;IAAEC;EAAoB,CAAE,CAAC;EAEvE,IACGb,SAAS,CAACiB,UAAU,CAAC,IAAIlB,OAAO,CAACiB,mBAAmB,CAAC,IACrDhB,SAAS,CAACgB,mBAAmB,CAAC,IAAIjB,OAAO,CAACkB,UAAU,CAAE,EACvD;IACA,MAAM,IAAIhC,SAAS,CACjB,mEAAmE,CACpE;EACH;EAEA,IAAIe,SAAS,CAACe,WAAW,CAAC,IAAI,CAAC1B,SAAS,CAAC0B,WAAW,CAAC,EAAE;IACrD,MAAM,IAAI9B,SAAS,CACjB,gEAAgE,CACjE;EACH;EAEA,IAAIe,SAAS,CAACgB,mBAAmB,CAAC,IAAI,CAAC3B,SAAS,CAAC2B,mBAAmB,CAAC,EAAE;IACrE,MAAM,IAAIhC,mBAAmB,CAACgC,mBAAmB,CAAC;EACpD;EAEA,IAAIjB,OAAO,CAACgB,WAAW,CAAC,IAAIhB,OAAO,CAACiB,mBAAmB,CAAC,EAAE;IACxD,MAAM,IAAI/B,SAAS,CACjB,yFAAyF,CAC1F;EACH;AACF;AAEA,OAAM,SAAUmC,sBAAsBA,CACpCnB,WAAyC;EAEzC,MAAM;IACJM,OAAO;IACPM,oBAAoB;IACpBS,QAAQ;IACRV,YAAY;IACZF,EAAE;IACFK;EAAW,CACZ,GAAGd,WAAW;EAEf,IAAIM,OAAO,IAAI,CAAC,EAAE,MAAM,IAAIrB,mBAAmB,CAAC;IAAEqB;EAAO,CAAE,CAAC;EAC5D,IAAIG,EAAE,IAAI,CAACrB,SAAS,CAACqB,EAAE,CAAC,EAAE,MAAM,IAAI1B,mBAAmB,CAAC;IAAEuC,OAAO,EAAEb;EAAE,CAAE,CAAC;EAExE,IAAIY,QAAQ,EACV,MAAM,IAAIrC,SAAS,CACjB,yDAAyD,CAC1D;EAEH,IAAIe,SAAS,CAACY,YAAY,CAAC,IAAIA,YAAY,GAAGS,mBAAmB,EAC/D,MAAM,IAAIlC,kBAAkB,CAAC;IAAEyB;EAAY,CAAE,CAAC;EAChD,IACEZ,SAAS,CAACa,oBAAoB,CAAC,IAC/Bb,SAAS,CAACY,YAAY,CAAC,IACvBC,oBAAoB,GAAGD,YAAY,EAEnC,MAAM,IAAIxB,mBAAmB,CAAC;IAAEwB,YAAY;IAAEC;EAAoB,CAAE,CAAC;EAEvE,IAAIb,SAAS,CAACe,WAAW,CAAC,IAAI,CAAC1B,SAAS,CAAC0B,WAAW,CAAC,EAAE;IACrD,MAAM,IAAI9B,SAAS,CACjB,gEAAgE,CACjE;EACH;EAEA,IAAIc,OAAO,CAACgB,WAAW,CAAC,EAAE;IACxB,MAAM,IAAI9B,SAAS,CACjB,yDAAyD,CAC1D;EACH;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}