{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.prepareTransactionRequest = void 0;\nconst parseAccount_js_1 = require(\"../../accounts/utils/parseAccount.js\");\nconst estimateFeesPerGas_js_1 = require(\"../../actions/public/estimateFeesPerGas.js\");\nconst estimateGas_js_1 = require(\"../../actions/public/estimateGas.js\");\nconst getBlock_js_1 = require(\"../../actions/public/getBlock.js\");\nconst getTransactionCount_js_1 = require(\"../../actions/public/getTransactionCount.js\");\nconst account_js_1 = require(\"../../errors/account.js\");\nconst fee_js_1 = require(\"../../errors/fee.js\");\nconst getAction_js_1 = require(\"../../utils/getAction.js\");\nconst assertRequest_js_1 = require(\"../../utils/transaction/assertRequest.js\");\nconst getTransactionType_js_1 = require(\"../../utils/transaction/getTransactionType.js\");\nasync function prepareTransactionRequest(client, args) {\n  const {\n    account: account_ = client.account,\n    chain,\n    gas,\n    nonce,\n    type\n  } = args;\n  if (!account_) throw new account_js_1.AccountNotFoundError();\n  const account = (0, parseAccount_js_1.parseAccount)(account_);\n  const block = await (0, getAction_js_1.getAction)(client, getBlock_js_1.getBlock, 'getBlock')({\n    blockTag: 'latest'\n  });\n  const request = {\n    ...args,\n    from: account.address\n  };\n  if (typeof nonce === 'undefined') request.nonce = await (0, getAction_js_1.getAction)(client, getTransactionCount_js_1.getTransactionCount, 'getTransactionCount')({\n    address: account.address,\n    blockTag: 'pending'\n  });\n  if (typeof type === 'undefined') {\n    try {\n      request.type = (0, getTransactionType_js_1.getTransactionType)(request);\n    } catch {\n      request.type = typeof block.baseFeePerGas === 'bigint' ? 'eip1559' : 'legacy';\n    }\n  }\n  if (request.type === 'eip1559') {\n    const {\n      maxFeePerGas,\n      maxPriorityFeePerGas\n    } = await (0, estimateFeesPerGas_js_1.internal_estimateFeesPerGas)(client, {\n      block,\n      chain,\n      request: request\n    });\n    if (typeof args.maxPriorityFeePerGas === 'undefined' && args.maxFeePerGas && args.maxFeePerGas < maxPriorityFeePerGas) throw new fee_js_1.MaxFeePerGasTooLowError({\n      maxPriorityFeePerGas\n    });\n    request.maxPriorityFeePerGas = maxPriorityFeePerGas;\n    request.maxFeePerGas = maxFeePerGas;\n  } else {\n    if (typeof args.maxFeePerGas !== 'undefined' || typeof args.maxPriorityFeePerGas !== 'undefined') throw new fee_js_1.Eip1559FeesNotSupportedError();\n    const {\n      gasPrice: gasPrice_\n    } = await (0, estimateFeesPerGas_js_1.internal_estimateFeesPerGas)(client, {\n      block,\n      chain,\n      request: request,\n      type: 'legacy'\n    });\n    request.gasPrice = gasPrice_;\n  }\n  if (typeof gas === 'undefined') request.gas = await (0, getAction_js_1.getAction)(client, estimateGas_js_1.estimateGas, 'estimateGas')({\n    ...request,\n    account: {\n      address: account.address,\n      type: 'json-rpc'\n    }\n  });\n  (0, assertRequest_js_1.assertRequest)(request);\n  return request;\n}\nexports.prepareTransactionRequest = prepareTransactionRequest;","map":{"version":3,"names":["parseAccount_js_1","require","estimateFeesPerGas_js_1","estimateGas_js_1","getBlock_js_1","getTransactionCount_js_1","account_js_1","fee_js_1","getAction_js_1","assertRequest_js_1","getTransactionType_js_1","prepareTransactionRequest","client","args","account","account_","chain","gas","nonce","type","AccountNotFoundError","parseAccount","block","getAction","getBlock","blockTag","request","from","address","getTransactionCount","getTransactionType","baseFeePerGas","maxFeePerGas","maxPriorityFeePerGas","internal_estimateFeesPerGas","MaxFeePerGasTooLowError","Eip1559FeesNotSupportedError","gasPrice","gasPrice_","estimateGas","assertRequest","exports"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/wallet/prepareTransactionRequest.ts"],"sourcesContent":["import type { Account } from '../../accounts/types.js'\nimport {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../../accounts/utils/parseAccount.js'\nimport {\n  type EstimateFeesPerGasErrorType,\n  internal_estimateFeesPerGas,\n} from '../../actions/public/estimateFeesPerGas.js'\nimport {\n  type EstimateGasErrorType,\n  type EstimateGasParameters,\n  estimateGas,\n} from '../../actions/public/estimateGas.js'\nimport {\n  type GetBlockErrorType,\n  getBlock,\n} from '../../actions/public/getBlock.js'\nimport {\n  type GetTransactionCountErrorType,\n  getTransactionCount,\n} from '../../actions/public/getTransactionCount.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport {\n  AccountNotFoundError,\n  type AccountNotFoundErrorType,\n} from '../../errors/account.js'\nimport {\n  Eip1559FeesNotSupportedError,\n  MaxFeePerGasTooLowError,\n} from '../../errors/fee.js'\nimport type { GetAccountParameter } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { GetChain } from '../../types/chain.js'\nimport type { TransactionSerializable } from '../../types/transaction.js'\nimport type { UnionOmit } from '../../types/utils.js'\nimport type { FormattedTransactionRequest } from '../../utils/formatters/transactionRequest.js'\nimport { getAction } from '../../utils/getAction.js'\nimport type {\n  AssertRequestErrorType,\n  AssertRequestParameters,\n} from '../../utils/transaction/assertRequest.js'\nimport { assertRequest } from '../../utils/transaction/assertRequest.js'\nimport { getTransactionType } from '../../utils/transaction/getTransactionType.js'\n\nexport type PrepareTransactionRequestParameters<\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends Account | undefined = Account | undefined,\n  TChainOverride extends Chain | undefined = Chain | undefined,\n> = UnionOmit<\n  FormattedTransactionRequest<\n    TChainOverride extends Chain ? TChainOverride : TChain\n  >,\n  'from'\n> &\n  GetAccountParameter<TAccount> &\n  GetChain<TChain, TChainOverride>\n\nexport type PrepareTransactionRequestReturnType<\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends Account | undefined = Account | undefined,\n  TChainOverride extends Chain | undefined = Chain | undefined,\n> = FormattedTransactionRequest<\n  TChainOverride extends Chain ? TChainOverride : TChain\n> &\n  GetAccountParameter<TAccount> &\n  GetChain<TChain, TChainOverride>\n\nexport type PrepareTransactionRequestErrorType =\n  | AccountNotFoundErrorType\n  | AssertRequestErrorType\n  | ParseAccountErrorType\n  | GetBlockErrorType\n  | GetTransactionCountErrorType\n  | EstimateGasErrorType\n  | EstimateFeesPerGasErrorType\n\n/**\n * Prepares a transaction request for signing.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/prepareTransactionRequest.html\n *\n * @param args - {@link PrepareTransactionRequestParameters}\n * @returns The transaction request. {@link PrepareTransactionRequestReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { prepareTransactionRequest } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const request = await prepareTransactionRequest(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: 1n,\n * })\n *\n * @example\n * // Account Hoisting\n * import { createWalletClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { prepareTransactionRequest } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0xâ€¦'),\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const request = await prepareTransactionRequest(client, {\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: 1n,\n * })\n */\nexport async function prepareTransactionRequest<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n  TChainOverride extends Chain | undefined = undefined,\n>(\n  client: Client<Transport, TChain, TAccount>,\n  args: PrepareTransactionRequestParameters<TChain, TAccount, TChainOverride>,\n): Promise<\n  PrepareTransactionRequestReturnType<TChain, TAccount, TChainOverride>\n> {\n  const { account: account_ = client.account, chain, gas, nonce, type } = args\n  if (!account_) throw new AccountNotFoundError()\n  const account = parseAccount(account_)\n\n  const block = await getAction(\n    client,\n    getBlock,\n    'getBlock',\n  )({ blockTag: 'latest' })\n\n  const request = { ...args, from: account.address }\n\n  if (typeof nonce === 'undefined')\n    request.nonce = await getAction(\n      client,\n      getTransactionCount,\n      'getTransactionCount',\n    )({\n      address: account.address,\n      blockTag: 'pending',\n    })\n\n  if (typeof type === 'undefined') {\n    try {\n      request.type = getTransactionType(\n        request as TransactionSerializable,\n      ) as any\n    } catch {\n      // infer type from block\n      request.type =\n        typeof block.baseFeePerGas === 'bigint' ? 'eip1559' : 'legacy'\n    }\n  }\n\n  if (request.type === 'eip1559') {\n    // EIP-1559 fees\n    const { maxFeePerGas, maxPriorityFeePerGas } =\n      await internal_estimateFeesPerGas(client, {\n        block,\n        chain,\n        request: request as PrepareTransactionRequestParameters,\n      })\n\n    if (\n      typeof args.maxPriorityFeePerGas === 'undefined' &&\n      args.maxFeePerGas &&\n      args.maxFeePerGas < maxPriorityFeePerGas\n    )\n      throw new MaxFeePerGasTooLowError({\n        maxPriorityFeePerGas,\n      })\n\n    request.maxPriorityFeePerGas = maxPriorityFeePerGas\n    request.maxFeePerGas = maxFeePerGas\n  } else {\n    // Legacy fees\n    if (\n      typeof args.maxFeePerGas !== 'undefined' ||\n      typeof args.maxPriorityFeePerGas !== 'undefined'\n    )\n      throw new Eip1559FeesNotSupportedError()\n\n    const { gasPrice: gasPrice_ } = await internal_estimateFeesPerGas(client, {\n      block,\n      chain,\n      request: request as PrepareTransactionRequestParameters,\n      type: 'legacy',\n    })\n    request.gasPrice = gasPrice_\n  }\n\n  if (typeof gas === 'undefined')\n    request.gas = await getAction(\n      client,\n      estimateGas,\n      'estimateGas',\n    )({\n      ...request,\n      account: { address: account.address, type: 'json-rpc' },\n    } as EstimateGasParameters)\n\n  assertRequest(request as AssertRequestParameters)\n\n  return request as unknown as PrepareTransactionRequestReturnType<\n    TChain,\n    TAccount,\n    TChainOverride\n  >\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}