{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getCallError = void 0;\nconst contract_js_1 = require(\"../../errors/contract.js\");\nconst node_js_1 = require(\"../../errors/node.js\");\nconst getNodeError_js_1 = require(\"./getNodeError.js\");\nfunction getCallError(err, {\n  docsPath,\n  ...args\n}) {\n  const cause = (() => {\n    const cause = (0, getNodeError_js_1.getNodeError)(err, args);\n    if (cause instanceof node_js_1.UnknownNodeError) return err;\n    return cause;\n  })();\n  return new contract_js_1.CallExecutionError(cause, {\n    docsPath,\n    ...args\n  });\n}\nexports.getCallError = getCallError;","map":{"version":3,"names":["contract_js_1","require","node_js_1","getNodeError_js_1","getCallError","err","docsPath","args","cause","getNodeError","UnknownNodeError","CallExecutionError","exports"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/errors/getCallError.ts"],"sourcesContent":["import type { CallParameters } from '../../actions/public/call.js'\nimport type { BaseError } from '../../errors/base.js'\nimport {\n  CallExecutionError,\n  type CallExecutionErrorType,\n} from '../../errors/contract.js'\nimport { UnknownNodeError } from '../../errors/node.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\n\nimport {\n  type GetNodeErrorParameters,\n  type GetNodeErrorReturnType,\n  getNodeError,\n} from './getNodeError.js'\n\nexport type GetCallErrorReturnType<cause = ErrorType> = Omit<\n  CallExecutionErrorType,\n  'cause'\n> & {\n  cause: cause | GetNodeErrorReturnType\n}\n\nexport function getCallError<err extends ErrorType<string>>(\n  err: err,\n  {\n    docsPath,\n    ...args\n  }: CallParameters & {\n    chain?: Chain\n    docsPath?: string\n  },\n): GetCallErrorReturnType<err> {\n  const cause = (() => {\n    const cause = getNodeError(\n      err as {} as BaseError,\n      args as GetNodeErrorParameters,\n    )\n    if (cause instanceof UnknownNodeError) return err as {} as BaseError\n    return cause\n  })()\n  return new CallExecutionError(cause, {\n    docsPath,\n    ...args,\n  }) as GetCallErrorReturnType<err>\n}\n"],"mappings":";;;;;;AAEA,MAAAA,aAAA,GAAAC,OAAA;AAIA,MAAAC,SAAA,GAAAD,OAAA;AAIA,MAAAE,iBAAA,GAAAF,OAAA;AAaA,SAAgBG,YAAYA,CAC1BC,GAAQ,EACR;EACEC,QAAQ;EACR,GAAGC;AAAI,CAIR;EAED,MAAMC,KAAK,GAAG,CAAC,MAAK;IAClB,MAAMA,KAAK,GAAG,IAAAL,iBAAA,CAAAM,YAAY,EACxBJ,GAAsB,EACtBE,IAA8B,CAC/B;IACD,IAAIC,KAAK,YAAYN,SAAA,CAAAQ,gBAAgB,EAAE,OAAOL,GAAsB;IACpE,OAAOG,KAAK;EACd,CAAC,EAAC,CAAE;EACJ,OAAO,IAAIR,aAAA,CAAAW,kBAAkB,CAACH,KAAK,EAAE;IACnCF,QAAQ;IACR,GAAGC;GACJ,CAAgC;AACnC;AAtBAK,OAAA,CAAAR,YAAA,GAAAA,YAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}