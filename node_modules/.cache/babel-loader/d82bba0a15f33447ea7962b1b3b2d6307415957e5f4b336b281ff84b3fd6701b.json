{"ast":null,"code":"import { InvalidLegacyVError } from '../../errors/transaction.js';\nimport { blobsToCommitments } from '../blob/blobsToCommitments.js';\nimport { blobsToProofs } from '../blob/blobsToProofs.js';\nimport { commitmentsToVersionedHashes } from '../blob/commitmentsToVersionedHashes.js';\nimport { toBlobSidecars } from '../blob/toBlobSidecars.js';\nimport { concatHex } from '../data/concat.js';\nimport { trim } from '../data/trim.js';\nimport { bytesToHex, toHex } from '../encoding/toHex.js';\nimport { toRlp } from '../encoding/toRlp.js';\nimport { assertTransactionEIP1559, assertTransactionEIP2930, assertTransactionEIP4844, assertTransactionLegacy } from './assertTransaction.js';\nimport { getTransactionType } from './getTransactionType.js';\nimport { serializeAccessList } from './serializeAccessList.js';\nexport function serializeTransaction(transaction, signature) {\n  const type = getTransactionType(transaction);\n  if (type === 'eip1559') return serializeTransactionEIP1559(transaction, signature);\n  if (type === 'eip2930') return serializeTransactionEIP2930(transaction, signature);\n  if (type === 'eip4844') return serializeTransactionEIP4844(transaction, signature);\n  return serializeTransactionLegacy(transaction, signature);\n}\nfunction serializeTransactionEIP4844(transaction, signature) {\n  const {\n    chainId,\n    gas,\n    nonce,\n    to,\n    value,\n    maxFeePerBlobGas,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    accessList,\n    data\n  } = transaction;\n  assertTransactionEIP4844(transaction);\n  let blobVersionedHashes = transaction.blobVersionedHashes;\n  let sidecars = transaction.sidecars;\n  // If `blobs` are passed, we will need to compute the KZG commitments & proofs.\n  if (transaction.blobs && (typeof blobVersionedHashes === 'undefined' || typeof sidecars === 'undefined')) {\n    const blobs = typeof transaction.blobs[0] === 'string' ? transaction.blobs : transaction.blobs.map(x => bytesToHex(x));\n    const kzg = transaction.kzg;\n    const commitments = blobsToCommitments({\n      blobs,\n      kzg\n    });\n    if (typeof blobVersionedHashes === 'undefined') blobVersionedHashes = commitmentsToVersionedHashes({\n      commitments\n    });\n    if (typeof sidecars === 'undefined') {\n      const proofs = blobsToProofs({\n        blobs,\n        commitments,\n        kzg\n      });\n      sidecars = toBlobSidecars({\n        blobs,\n        commitments,\n        proofs\n      });\n    }\n  }\n  const serializedAccessList = serializeAccessList(accessList);\n  const serializedTransaction = [toHex(chainId), nonce ? toHex(nonce) : '0x', maxPriorityFeePerGas ? toHex(maxPriorityFeePerGas) : '0x', maxFeePerGas ? toHex(maxFeePerGas) : '0x', gas ? toHex(gas) : '0x', to ?? '0x', value ? toHex(value) : '0x', data ?? '0x', serializedAccessList, maxFeePerBlobGas ? toHex(maxFeePerBlobGas) : '0x', blobVersionedHashes ?? [], ...toYParitySignatureArray(transaction, signature)];\n  const blobs = [];\n  const commitments = [];\n  const proofs = [];\n  if (sidecars) for (let i = 0; i < sidecars.length; i++) {\n    const {\n      blob,\n      commitment,\n      proof\n    } = sidecars[i];\n    blobs.push(blob);\n    commitments.push(commitment);\n    proofs.push(proof);\n  }\n  return concatHex(['0x03', sidecars ?\n  // If sidecars are enabled, envelope turns into a \"wrapper\":\n  toRlp([serializedTransaction, blobs, commitments, proofs]) :\n  // If sidecars are disabled, standard envelope is used:\n  toRlp(serializedTransaction)]);\n}\nfunction serializeTransactionEIP1559(transaction, signature) {\n  const {\n    chainId,\n    gas,\n    nonce,\n    to,\n    value,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    accessList,\n    data\n  } = transaction;\n  assertTransactionEIP1559(transaction);\n  const serializedAccessList = serializeAccessList(accessList);\n  const serializedTransaction = [toHex(chainId), nonce ? toHex(nonce) : '0x', maxPriorityFeePerGas ? toHex(maxPriorityFeePerGas) : '0x', maxFeePerGas ? toHex(maxFeePerGas) : '0x', gas ? toHex(gas) : '0x', to ?? '0x', value ? toHex(value) : '0x', data ?? '0x', serializedAccessList, ...toYParitySignatureArray(transaction, signature)];\n  return concatHex(['0x02', toRlp(serializedTransaction)]);\n}\nfunction serializeTransactionEIP2930(transaction, signature) {\n  const {\n    chainId,\n    gas,\n    data,\n    nonce,\n    to,\n    value,\n    accessList,\n    gasPrice\n  } = transaction;\n  assertTransactionEIP2930(transaction);\n  const serializedAccessList = serializeAccessList(accessList);\n  const serializedTransaction = [toHex(chainId), nonce ? toHex(nonce) : '0x', gasPrice ? toHex(gasPrice) : '0x', gas ? toHex(gas) : '0x', to ?? '0x', value ? toHex(value) : '0x', data ?? '0x', serializedAccessList, ...toYParitySignatureArray(transaction, signature)];\n  return concatHex(['0x01', toRlp(serializedTransaction)]);\n}\nfunction serializeTransactionLegacy(transaction, signature) {\n  const {\n    chainId = 0,\n    gas,\n    data,\n    nonce,\n    to,\n    value,\n    gasPrice\n  } = transaction;\n  assertTransactionLegacy(transaction);\n  let serializedTransaction = [nonce ? toHex(nonce) : '0x', gasPrice ? toHex(gasPrice) : '0x', gas ? toHex(gas) : '0x', to ?? '0x', value ? toHex(value) : '0x', data ?? '0x'];\n  if (signature) {\n    const v = (() => {\n      // EIP-155 (inferred chainId)\n      if (signature.v >= 35n) {\n        const inferredChainId = (signature.v - 35n) / 2n;\n        if (inferredChainId > 0) return signature.v;\n        return 27n + (signature.v === 35n ? 0n : 1n);\n      }\n      // EIP-155 (explicit chainId)\n      if (chainId > 0) return BigInt(chainId * 2) + BigInt(35n + signature.v - 27n);\n      // Pre-EIP-155 (no chainId)\n      const v = 27n + (signature.v === 27n ? 0n : 1n);\n      if (signature.v !== v) throw new InvalidLegacyVError({\n        v: signature.v\n      });\n      return v;\n    })();\n    serializedTransaction = [...serializedTransaction, toHex(v), signature.r, signature.s];\n  } else if (chainId > 0) {\n    serializedTransaction = [...serializedTransaction, toHex(chainId), '0x', '0x'];\n  }\n  return toRlp(serializedTransaction);\n}\nexport function toYParitySignatureArray(transaction, signature) {\n  const {\n    r,\n    s,\n    v,\n    yParity\n  } = signature ?? transaction;\n  if (typeof r === 'undefined') return [];\n  if (typeof s === 'undefined') return [];\n  if (typeof v === 'undefined' && typeof yParity === 'undefined') return [];\n  const yParity_ = (() => {\n    if (typeof yParity === 'number') return yParity ? toHex(1) : '0x';\n    if (v === 0n) return '0x';\n    if (v === 1n) return toHex(1);\n    return v === 27n ? '0x' : toHex(1);\n  })();\n  return [yParity_, trim(r), trim(s)];\n}","map":{"version":3,"names":["InvalidLegacyVError","blobsToCommitments","blobsToProofs","commitmentsToVersionedHashes","toBlobSidecars","concatHex","trim","bytesToHex","toHex","toRlp","assertTransactionEIP1559","assertTransactionEIP2930","assertTransactionEIP4844","assertTransactionLegacy","getTransactionType","serializeAccessList","serializeTransaction","transaction","signature","type","serializeTransactionEIP1559","serializeTransactionEIP2930","serializeTransactionEIP4844","serializeTransactionLegacy","chainId","gas","nonce","to","value","maxFeePerBlobGas","maxFeePerGas","maxPriorityFeePerGas","accessList","data","blobVersionedHashes","sidecars","blobs","map","x","kzg","commitments","proofs","serializedAccessList","serializedTransaction","toYParitySignatureArray","i","length","blob","commitment","proof","push","gasPrice","v","inferredChainId","BigInt","r","s","yParity","yParity_"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/viem/utils/transaction/serializeTransaction.ts"],"sourcesContent":["import {\n  InvalidLegacyVError,\n  type InvalidLegacyVErrorType,\n} from '../../errors/transaction.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type {\n  ByteArray,\n  Hex,\n  Signature,\n  SignatureLegacy,\n} from '../../types/misc.js'\nimport type {\n  TransactionSerializable,\n  TransactionSerializableEIP1559,\n  TransactionSerializableEIP2930,\n  TransactionSerializableEIP4844,\n  TransactionSerializableGeneric,\n  TransactionSerializableLegacy,\n  TransactionSerialized,\n  TransactionSerializedEIP1559,\n  TransactionSerializedEIP2930,\n  TransactionSerializedEIP4844,\n  TransactionSerializedLegacy,\n  TransactionType,\n} from '../../types/transaction.js'\nimport type { OneOf } from '../../types/utils.js'\nimport {\n  type BlobsToCommitmentsErrorType,\n  blobsToCommitments,\n} from '../blob/blobsToCommitments.js'\nimport {\n  blobsToProofs,\n  type blobsToProofsErrorType,\n} from '../blob/blobsToProofs.js'\nimport {\n  type CommitmentsToVersionedHashesErrorType,\n  commitmentsToVersionedHashes,\n} from '../blob/commitmentsToVersionedHashes.js'\nimport {\n  type ToBlobSidecarsErrorType,\n  toBlobSidecars,\n} from '../blob/toBlobSidecars.js'\nimport { type ConcatHexErrorType, concatHex } from '../data/concat.js'\nimport { trim } from '../data/trim.js'\nimport { type ToHexErrorType, bytesToHex, toHex } from '../encoding/toHex.js'\nimport { type ToRlpErrorType, toRlp } from '../encoding/toRlp.js'\n\nimport {\n  type AssertTransactionEIP1559ErrorType,\n  type AssertTransactionEIP2930ErrorType,\n  type AssertTransactionEIP4844ErrorType,\n  type AssertTransactionLegacyErrorType,\n  assertTransactionEIP1559,\n  assertTransactionEIP2930,\n  assertTransactionEIP4844,\n  assertTransactionLegacy,\n} from './assertTransaction.js'\nimport {\n  type GetTransactionType,\n  type GetTransationTypeErrorType,\n  getTransactionType,\n} from './getTransactionType.js'\nimport {\n  type SerializeAccessListErrorType,\n  serializeAccessList,\n} from './serializeAccessList.js'\n\nexport type SerializedTransactionReturnType<\n  transaction extends TransactionSerializable = TransactionSerializable,\n  ///\n  _transactionType extends TransactionType = GetTransactionType<transaction>,\n> = TransactionSerialized<_transactionType>\n\nexport type SerializeTransactionFn<\n  transaction extends TransactionSerializableGeneric = TransactionSerializable,\n  ///\n  _transactionType extends TransactionType = never,\n> = typeof serializeTransaction<\n  OneOf<TransactionSerializable | transaction>,\n  _transactionType\n>\n\nexport type SerializeTransactionErrorType =\n  | GetTransationTypeErrorType\n  | SerializeTransactionEIP1559ErrorType\n  | SerializeTransactionEIP2930ErrorType\n  | SerializeTransactionEIP4844ErrorType\n  | SerializeTransactionLegacyErrorType\n  | ErrorType\n\nexport function serializeTransaction<\n  const transaction extends TransactionSerializable,\n  ///\n  _transactionType extends TransactionType = GetTransactionType<transaction>,\n>(\n  transaction: transaction,\n  signature?: Signature | undefined,\n): SerializedTransactionReturnType<transaction, _transactionType> {\n  const type = getTransactionType(transaction) as GetTransactionType\n\n  if (type === 'eip1559')\n    return serializeTransactionEIP1559(\n      transaction as TransactionSerializableEIP1559,\n      signature,\n    ) as SerializedTransactionReturnType<transaction>\n\n  if (type === 'eip2930')\n    return serializeTransactionEIP2930(\n      transaction as TransactionSerializableEIP2930,\n      signature,\n    ) as SerializedTransactionReturnType<transaction>\n\n  if (type === 'eip4844')\n    return serializeTransactionEIP4844(\n      transaction as TransactionSerializableEIP4844,\n      signature,\n    ) as SerializedTransactionReturnType<transaction>\n\n  return serializeTransactionLegacy(\n    transaction as TransactionSerializableLegacy,\n    signature as SignatureLegacy,\n  ) as SerializedTransactionReturnType<transaction>\n}\n\ntype SerializeTransactionEIP4844ErrorType =\n  | AssertTransactionEIP4844ErrorType\n  | BlobsToCommitmentsErrorType\n  | CommitmentsToVersionedHashesErrorType\n  | blobsToProofsErrorType\n  | ToBlobSidecarsErrorType\n  | ConcatHexErrorType\n  | InvalidLegacyVErrorType\n  | ToHexErrorType\n  | ToRlpErrorType\n  | SerializeAccessListErrorType\n  | ErrorType\n\nfunction serializeTransactionEIP4844(\n  transaction: TransactionSerializableEIP4844,\n  signature?: Signature | undefined,\n): TransactionSerializedEIP4844 {\n  const {\n    chainId,\n    gas,\n    nonce,\n    to,\n    value,\n    maxFeePerBlobGas,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    accessList,\n    data,\n  } = transaction\n\n  assertTransactionEIP4844(transaction)\n\n  let blobVersionedHashes = transaction.blobVersionedHashes\n  let sidecars = transaction.sidecars\n  // If `blobs` are passed, we will need to compute the KZG commitments & proofs.\n  if (\n    transaction.blobs &&\n    (typeof blobVersionedHashes === 'undefined' ||\n      typeof sidecars === 'undefined')\n  ) {\n    const blobs = (\n      typeof transaction.blobs[0] === 'string'\n        ? transaction.blobs\n        : (transaction.blobs as ByteArray[]).map((x) => bytesToHex(x))\n    ) as Hex[]\n    const kzg = transaction.kzg!\n    const commitments = blobsToCommitments({\n      blobs,\n      kzg,\n    })\n\n    if (typeof blobVersionedHashes === 'undefined')\n      blobVersionedHashes = commitmentsToVersionedHashes({\n        commitments,\n      })\n    if (typeof sidecars === 'undefined') {\n      const proofs = blobsToProofs({ blobs, commitments, kzg })\n      sidecars = toBlobSidecars({ blobs, commitments, proofs })\n    }\n  }\n\n  const serializedAccessList = serializeAccessList(accessList)\n\n  const serializedTransaction = [\n    toHex(chainId),\n    nonce ? toHex(nonce) : '0x',\n    maxPriorityFeePerGas ? toHex(maxPriorityFeePerGas) : '0x',\n    maxFeePerGas ? toHex(maxFeePerGas) : '0x',\n    gas ? toHex(gas) : '0x',\n    to ?? '0x',\n    value ? toHex(value) : '0x',\n    data ?? '0x',\n    serializedAccessList,\n    maxFeePerBlobGas ? toHex(maxFeePerBlobGas) : '0x',\n    blobVersionedHashes ?? [],\n    ...toYParitySignatureArray(transaction, signature),\n  ] as const\n\n  const blobs: Hex[] = []\n  const commitments: Hex[] = []\n  const proofs: Hex[] = []\n  if (sidecars)\n    for (let i = 0; i < sidecars.length; i++) {\n      const { blob, commitment, proof } = sidecars[i]\n      blobs.push(blob)\n      commitments.push(commitment)\n      proofs.push(proof)\n    }\n\n  return concatHex([\n    '0x03',\n    sidecars\n      ? // If sidecars are enabled, envelope turns into a \"wrapper\":\n        toRlp([serializedTransaction, blobs, commitments, proofs])\n      : // If sidecars are disabled, standard envelope is used:\n        toRlp(serializedTransaction),\n  ]) as TransactionSerializedEIP4844\n}\n\ntype SerializeTransactionEIP1559ErrorType =\n  | AssertTransactionEIP1559ErrorType\n  | ConcatHexErrorType\n  | InvalidLegacyVErrorType\n  | ToHexErrorType\n  | ToRlpErrorType\n  | SerializeAccessListErrorType\n  | ErrorType\n\nfunction serializeTransactionEIP1559(\n  transaction: TransactionSerializableEIP1559,\n  signature?: Signature | undefined,\n): TransactionSerializedEIP1559 {\n  const {\n    chainId,\n    gas,\n    nonce,\n    to,\n    value,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    accessList,\n    data,\n  } = transaction\n\n  assertTransactionEIP1559(transaction)\n\n  const serializedAccessList = serializeAccessList(accessList)\n\n  const serializedTransaction = [\n    toHex(chainId),\n    nonce ? toHex(nonce) : '0x',\n    maxPriorityFeePerGas ? toHex(maxPriorityFeePerGas) : '0x',\n    maxFeePerGas ? toHex(maxFeePerGas) : '0x',\n    gas ? toHex(gas) : '0x',\n    to ?? '0x',\n    value ? toHex(value) : '0x',\n    data ?? '0x',\n    serializedAccessList,\n    ...toYParitySignatureArray(transaction, signature),\n  ]\n\n  return concatHex([\n    '0x02',\n    toRlp(serializedTransaction),\n  ]) as TransactionSerializedEIP1559\n}\n\ntype SerializeTransactionEIP2930ErrorType =\n  | AssertTransactionEIP2930ErrorType\n  | ConcatHexErrorType\n  | InvalidLegacyVErrorType\n  | ToHexErrorType\n  | ToRlpErrorType\n  | SerializeAccessListErrorType\n  | ErrorType\n\nfunction serializeTransactionEIP2930(\n  transaction: TransactionSerializableEIP2930,\n  signature?: Signature | undefined,\n): TransactionSerializedEIP2930 {\n  const { chainId, gas, data, nonce, to, value, accessList, gasPrice } =\n    transaction\n\n  assertTransactionEIP2930(transaction)\n\n  const serializedAccessList = serializeAccessList(accessList)\n\n  const serializedTransaction = [\n    toHex(chainId),\n    nonce ? toHex(nonce) : '0x',\n    gasPrice ? toHex(gasPrice) : '0x',\n    gas ? toHex(gas) : '0x',\n    to ?? '0x',\n    value ? toHex(value) : '0x',\n    data ?? '0x',\n    serializedAccessList,\n    ...toYParitySignatureArray(transaction, signature),\n  ]\n\n  return concatHex([\n    '0x01',\n    toRlp(serializedTransaction),\n  ]) as TransactionSerializedEIP2930\n}\n\ntype SerializeTransactionLegacyErrorType =\n  | AssertTransactionLegacyErrorType\n  | InvalidLegacyVErrorType\n  | ToHexErrorType\n  | ToRlpErrorType\n  | ErrorType\n\nfunction serializeTransactionLegacy(\n  transaction: TransactionSerializableLegacy,\n  signature?: SignatureLegacy | undefined,\n): TransactionSerializedLegacy {\n  const { chainId = 0, gas, data, nonce, to, value, gasPrice } = transaction\n\n  assertTransactionLegacy(transaction)\n\n  let serializedTransaction = [\n    nonce ? toHex(nonce) : '0x',\n    gasPrice ? toHex(gasPrice) : '0x',\n    gas ? toHex(gas) : '0x',\n    to ?? '0x',\n    value ? toHex(value) : '0x',\n    data ?? '0x',\n  ]\n\n  if (signature) {\n    const v = (() => {\n      // EIP-155 (inferred chainId)\n      if (signature.v >= 35n) {\n        const inferredChainId = (signature.v - 35n) / 2n\n        if (inferredChainId > 0) return signature.v\n        return 27n + (signature.v === 35n ? 0n : 1n)\n      }\n\n      // EIP-155 (explicit chainId)\n      if (chainId > 0)\n        return BigInt(chainId * 2) + BigInt(35n + signature.v - 27n)\n\n      // Pre-EIP-155 (no chainId)\n      const v = 27n + (signature.v === 27n ? 0n : 1n)\n      if (signature.v !== v) throw new InvalidLegacyVError({ v: signature.v })\n      return v\n    })()\n\n    serializedTransaction = [\n      ...serializedTransaction,\n      toHex(v),\n      signature.r,\n      signature.s,\n    ]\n  } else if (chainId > 0) {\n    serializedTransaction = [\n      ...serializedTransaction,\n      toHex(chainId),\n      '0x',\n      '0x',\n    ]\n  }\n\n  return toRlp(serializedTransaction) as TransactionSerializedLegacy\n}\n\nexport function toYParitySignatureArray(\n  transaction: TransactionSerializableGeneric,\n  signature?: Signature | undefined,\n) {\n  const { r, s, v, yParity } = signature ?? transaction\n  if (typeof r === 'undefined') return []\n  if (typeof s === 'undefined') return []\n  if (typeof v === 'undefined' && typeof yParity === 'undefined') return []\n\n  const yParity_ = (() => {\n    if (typeof yParity === 'number') return yParity ? toHex(1) : '0x'\n    if (v === 0n) return '0x'\n    if (v === 1n) return toHex(1)\n\n    return v === 27n ? '0x' : toHex(1)\n  })()\n  return [yParity_, trim(r), trim(s)]\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}