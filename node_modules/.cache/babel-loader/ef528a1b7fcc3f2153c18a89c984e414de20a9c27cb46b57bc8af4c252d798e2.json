{"ast":null,"code":"import '@coinbase/wallet-sdk';\nimport { ChainNotConfiguredError, createConnector } from '@wagmi/core';\nimport { SwitchChainError, UserRejectedRequestError, getAddress, numberToHex } from 'viem';\ncoinbaseWallet.type = 'coinbaseWallet';\nexport function coinbaseWallet(parameters) {\n  const reloadOnDisconnect = false;\n  let sdk;\n  let walletProvider;\n  let accountsChanged;\n  let chainChanged;\n  let disconnect;\n  return createConnector(config => ({\n    id: 'coinbaseWalletSDK',\n    name: 'Coinbase Wallet',\n    type: coinbaseWallet.type,\n    async connect({\n      chainId\n    } = {}) {\n      try {\n        const provider = await this.getProvider();\n        const accounts = (await provider.request({\n          method: 'eth_requestAccounts'\n        })).map(x => getAddress(x));\n        if (!accountsChanged) {\n          accountsChanged = this.onAccountsChanged.bind(this);\n          provider.on('accountsChanged', accountsChanged);\n        }\n        if (!chainChanged) {\n          chainChanged = this.onChainChanged.bind(this);\n          provider.on('chainChanged', chainChanged);\n        }\n        if (!disconnect) {\n          disconnect = this.onDisconnect.bind(this);\n          provider.on('disconnect', disconnect);\n        }\n        // Switch to chain if provided\n        let currentChainId = await this.getChainId();\n        if (chainId && currentChainId !== chainId) {\n          const chain = await this.switchChain({\n            chainId\n          }).catch(error => {\n            if (error.code === UserRejectedRequestError.code) throw error;\n            return {\n              id: currentChainId\n            };\n          });\n          currentChainId = chain?.id ?? currentChainId;\n        }\n        return {\n          accounts,\n          chainId: currentChainId\n        };\n      } catch (error) {\n        if (/(user closed modal|accounts received is empty|user denied account)/i.test(error.message)) throw new UserRejectedRequestError(error);\n        throw error;\n      }\n    },\n    async disconnect() {\n      const provider = await this.getProvider();\n      if (accountsChanged) {\n        provider.removeListener('accountsChanged', accountsChanged);\n        accountsChanged = undefined;\n      }\n      if (chainChanged) {\n        provider.removeListener('chainChanged', chainChanged);\n        chainChanged = undefined;\n      }\n      if (disconnect) {\n        provider.removeListener('disconnect', disconnect);\n        disconnect = undefined;\n      }\n      provider.disconnect();\n      provider.close();\n    },\n    async getAccounts() {\n      const provider = await this.getProvider();\n      return (await provider.request({\n        method: 'eth_accounts'\n      })).map(x => getAddress(x));\n    },\n    async getChainId() {\n      const provider = await this.getProvider();\n      const chainId = await provider.request({\n        method: 'eth_chainId'\n      });\n      return Number(chainId);\n    },\n    async getProvider() {\n      if (!walletProvider) {\n        const {\n          default: CoinbaseWalletSDK\n        } = await import('@coinbase/wallet-sdk');\n        let SDK;\n        if (typeof CoinbaseWalletSDK !== 'function' && typeof CoinbaseWalletSDK.default === 'function') SDK = CoinbaseWalletSDK.default;else SDK = CoinbaseWalletSDK;\n        sdk = new SDK({\n          reloadOnDisconnect,\n          ...parameters\n        });\n        // Force types to retrieve private `walletExtension` method from the Coinbase Wallet SDK.\n        const walletExtensionChainId = sdk.walletExtension?.getChainId();\n        const chain = config.chains.find(chain => parameters.chainId ? chain.id === parameters.chainId : chain.id === walletExtensionChainId) || config.chains[0];\n        const chainId = parameters.chainId || chain?.id;\n        const jsonRpcUrl = parameters.jsonRpcUrl || chain?.rpcUrls.default.http[0];\n        walletProvider = sdk.makeWeb3Provider(jsonRpcUrl, chainId);\n      }\n      return walletProvider;\n    },\n    async isAuthorized() {\n      try {\n        const accounts = await this.getAccounts();\n        return !!accounts.length;\n      } catch {\n        return false;\n      }\n    },\n    async switchChain({\n      chainId\n    }) {\n      const chain = config.chains.find(chain => chain.id === chainId);\n      if (!chain) throw new SwitchChainError(new ChainNotConfiguredError());\n      const provider = await this.getProvider();\n      const chainId_ = numberToHex(chain.id);\n      try {\n        await provider.request({\n          method: 'wallet_switchEthereumChain',\n          params: [{\n            chainId: chainId_\n          }]\n        });\n        return chain;\n      } catch (error) {\n        // Indicates chain is not added to provider\n        if (error.code === 4902) {\n          try {\n            await provider.request({\n              method: 'wallet_addEthereumChain',\n              params: [{\n                chainId: chainId_,\n                chainName: chain.name,\n                nativeCurrency: chain.nativeCurrency,\n                rpcUrls: [chain.rpcUrls.default?.http[0] ?? ''],\n                blockExplorerUrls: [chain.blockExplorers?.default.url]\n              }]\n            });\n            return chain;\n          } catch (error) {\n            throw new UserRejectedRequestError(error);\n          }\n        }\n        throw new SwitchChainError(error);\n      }\n    },\n    onAccountsChanged(accounts) {\n      if (accounts.length === 0) this.onDisconnect();else config.emitter.emit('change', {\n        accounts: accounts.map(x => getAddress(x))\n      });\n    },\n    onChainChanged(chain) {\n      const chainId = Number(chain);\n      config.emitter.emit('change', {\n        chainId\n      });\n    },\n    async onDisconnect(_error) {\n      config.emitter.emit('disconnect');\n      const provider = await this.getProvider();\n      if (accountsChanged) {\n        provider.removeListener('accountsChanged', accountsChanged);\n        accountsChanged = undefined;\n      }\n      if (chainChanged) {\n        provider.removeListener('chainChanged', chainChanged);\n        chainChanged = undefined;\n      }\n      if (disconnect) {\n        provider.removeListener('disconnect', disconnect);\n        disconnect = undefined;\n      }\n    }\n  }));\n}","map":{"version":3,"names":["ChainNotConfiguredError","createConnector","SwitchChainError","UserRejectedRequestError","getAddress","numberToHex","coinbaseWallet","type","parameters","reloadOnDisconnect","sdk","walletProvider","accountsChanged","chainChanged","disconnect","config","id","name","connect","chainId","provider","getProvider","accounts","request","method","map","x","onAccountsChanged","bind","on","onChainChanged","onDisconnect","currentChainId","getChainId","chain","switchChain","catch","error","code","test","message","removeListener","undefined","close","getAccounts","Number","default","CoinbaseWalletSDK","SDK","walletExtensionChainId","walletExtension","chains","find","jsonRpcUrl","rpcUrls","http","makeWeb3Provider","isAuthorized","length","chainId_","params","chainName","nativeCurrency","blockExplorerUrls","blockExplorers","url","emitter","emit","_error"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/wagmi/node_modules/@wagmi/connectors/src/coinbaseWallet.ts"],"sourcesContent":["import {\n  type CoinbaseWalletProvider,\n  type CoinbaseWalletSDK,\n} from '@coinbase/wallet-sdk'\nimport {\n  ChainNotConfiguredError,\n  type Connector,\n  createConnector,\n} from '@wagmi/core'\nimport type { Evaluate, Mutable, Omit } from '@wagmi/core/internal'\nimport {\n  type ProviderRpcError,\n  SwitchChainError,\n  UserRejectedRequestError,\n  getAddress,\n  numberToHex,\n} from 'viem'\n\n// TODO(@3): Set `enableMobileWalletLink` to `true`\nexport type CoinbaseWalletParameters = Evaluate<\n  Mutable<\n    Omit<\n      ConstructorParameters<typeof CoinbaseWalletSDK>[0],\n      'reloadOnDisconnect' // remove property since TSDoc says default is `true`\n    >\n  > & {\n    /**\n     * Fallback Ethereum JSON RPC URL\n     * @default \"\"\n     */\n    jsonRpcUrl?: string | undefined\n    /**\n     * Fallback Ethereum Chain ID\n     * @default 1\n     */\n    chainId?: number | undefined\n    /**\n     * Whether or not to reload dapp automatically after disconnect.\n     * @default false\n     */\n    reloadOnDisconnect?: boolean | undefined\n  }\n>\n\ncoinbaseWallet.type = 'coinbaseWallet' as const\nexport function coinbaseWallet(parameters: CoinbaseWalletParameters) {\n  const reloadOnDisconnect = false\n\n  type Provider = CoinbaseWalletProvider\n  type Properties = {}\n\n  let sdk: CoinbaseWalletSDK | undefined\n  let walletProvider: Provider | undefined\n\n  let accountsChanged: Connector['onAccountsChanged'] | undefined\n  let chainChanged: Connector['onChainChanged'] | undefined\n  let disconnect: Connector['onDisconnect'] | undefined\n\n  return createConnector<Provider, Properties>((config) => ({\n    id: 'coinbaseWalletSDK',\n    name: 'Coinbase Wallet',\n    type: coinbaseWallet.type,\n    async connect({ chainId } = {}) {\n      try {\n        const provider = await this.getProvider()\n        const accounts = (\n          (await provider.request({\n            method: 'eth_requestAccounts',\n          })) as string[]\n        ).map((x) => getAddress(x))\n\n        if (!accountsChanged) {\n          accountsChanged = this.onAccountsChanged.bind(this)\n          provider.on('accountsChanged', accountsChanged)\n        }\n        if (!chainChanged) {\n          chainChanged = this.onChainChanged.bind(this)\n          provider.on('chainChanged', chainChanged)\n        }\n        if (!disconnect) {\n          disconnect = this.onDisconnect.bind(this)\n          provider.on('disconnect', disconnect)\n        }\n\n        // Switch to chain if provided\n        let currentChainId = await this.getChainId()\n        if (chainId && currentChainId !== chainId) {\n          const chain = await this.switchChain!({ chainId }).catch((error) => {\n            if (error.code === UserRejectedRequestError.code) throw error\n            return { id: currentChainId }\n          })\n          currentChainId = chain?.id ?? currentChainId\n        }\n\n        return { accounts, chainId: currentChainId }\n      } catch (error) {\n        if (\n          /(user closed modal|accounts received is empty|user denied account)/i.test(\n            (error as Error).message,\n          )\n        )\n          throw new UserRejectedRequestError(error as Error)\n        throw error\n      }\n    },\n    async disconnect() {\n      const provider = await this.getProvider()\n\n      if (accountsChanged) {\n        provider.removeListener('accountsChanged', accountsChanged)\n        accountsChanged = undefined\n      }\n      if (chainChanged) {\n        provider.removeListener('chainChanged', chainChanged)\n        chainChanged = undefined\n      }\n      if (disconnect) {\n        provider.removeListener('disconnect', disconnect)\n        disconnect = undefined\n      }\n\n      provider.disconnect()\n      provider.close()\n    },\n    async getAccounts() {\n      const provider = await this.getProvider()\n      return (\n        await provider.request<string[]>({\n          method: 'eth_accounts',\n        })\n      ).map((x) => getAddress(x))\n    },\n    async getChainId() {\n      const provider = await this.getProvider()\n      const chainId = await provider.request<number>({ method: 'eth_chainId' })\n      return Number(chainId)\n    },\n    async getProvider() {\n      if (!walletProvider) {\n        const { default: CoinbaseWalletSDK } = await import(\n          '@coinbase/wallet-sdk'\n        )\n        let SDK: typeof CoinbaseWalletSDK.default\n        if (\n          typeof CoinbaseWalletSDK !== 'function' &&\n          typeof CoinbaseWalletSDK.default === 'function'\n        )\n          SDK = CoinbaseWalletSDK.default\n        else\n          SDK = CoinbaseWalletSDK as unknown as typeof CoinbaseWalletSDK.default\n        sdk = new SDK({ reloadOnDisconnect, ...parameters })\n\n        // Force types to retrieve private `walletExtension` method from the Coinbase Wallet SDK.\n        const walletExtensionChainId = (\n          sdk as unknown as {\n            get walletExtension(): { getChainId(): number } | undefined\n          }\n        ).walletExtension?.getChainId()\n\n        const chain =\n          config.chains.find((chain) =>\n            parameters.chainId\n              ? chain.id === parameters.chainId\n              : chain.id === walletExtensionChainId,\n          ) || config.chains[0]\n        const chainId = parameters.chainId || chain?.id\n        const jsonRpcUrl =\n          parameters.jsonRpcUrl || chain?.rpcUrls.default.http[0]\n\n        walletProvider = sdk.makeWeb3Provider(jsonRpcUrl, chainId)\n      }\n\n      return walletProvider\n    },\n    async isAuthorized() {\n      try {\n        const accounts = await this.getAccounts()\n        return !!accounts.length\n      } catch {\n        return false\n      }\n    },\n    async switchChain({ chainId }) {\n      const chain = config.chains.find((chain) => chain.id === chainId)\n      if (!chain) throw new SwitchChainError(new ChainNotConfiguredError())\n\n      const provider = await this.getProvider()\n      const chainId_ = numberToHex(chain.id)\n\n      try {\n        await provider.request({\n          method: 'wallet_switchEthereumChain',\n          params: [{ chainId: chainId_ }],\n        })\n        return chain\n      } catch (error) {\n        // Indicates chain is not added to provider\n        if ((error as ProviderRpcError).code === 4902) {\n          try {\n            await provider.request({\n              method: 'wallet_addEthereumChain',\n              params: [\n                {\n                  chainId: chainId_,\n                  chainName: chain.name,\n                  nativeCurrency: chain.nativeCurrency,\n                  rpcUrls: [chain.rpcUrls.default?.http[0] ?? ''],\n                  blockExplorerUrls: [chain.blockExplorers?.default.url],\n                },\n              ],\n            })\n            return chain\n          } catch (error) {\n            throw new UserRejectedRequestError(error as Error)\n          }\n        }\n\n        throw new SwitchChainError(error as Error)\n      }\n    },\n    onAccountsChanged(accounts) {\n      if (accounts.length === 0) this.onDisconnect()\n      else\n        config.emitter.emit('change', {\n          accounts: accounts.map((x) => getAddress(x)),\n        })\n    },\n    onChainChanged(chain) {\n      const chainId = Number(chain)\n      config.emitter.emit('change', { chainId })\n    },\n    async onDisconnect(_error) {\n      config.emitter.emit('disconnect')\n\n      const provider = await this.getProvider()\n      if (accountsChanged) {\n        provider.removeListener('accountsChanged', accountsChanged)\n        accountsChanged = undefined\n      }\n      if (chainChanged) {\n        provider.removeListener('chainChanged', chainChanged)\n        chainChanged = undefined\n      }\n      if (disconnect) {\n        provider.removeListener('disconnect', disconnect)\n        disconnect = undefined\n      }\n    },\n  }))\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}