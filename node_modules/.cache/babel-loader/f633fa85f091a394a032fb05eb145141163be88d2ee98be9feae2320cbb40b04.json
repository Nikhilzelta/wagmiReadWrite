{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/wagmi/node_modules/@wagmi/core/src/types/utils.ts"],"sourcesContent":["/** Combines members of an intersection into a readable type. */\n// https://twitter.com/mattpocockuk/status/1622730173446557697?s=20&t=NdpAcmEFXY01xkqU3KO0Mg\nexport type Evaluate<type> = { [key in keyof type]: type[key] } & unknown\n\n/**\n * Makes all properties of an object optional.\n *\n * Compatible with [`exactOptionalPropertyTypes`](https://www.typescriptlang.org/tsconfig#exactOptionalPropertyTypes).\n */\nexport type ExactPartial<type> = {\n  [key in keyof type]?: type[key] | undefined\n}\n\n/** Checks if {@link type} can be narrowed further than {@link type2} */\nexport type IsNarrowable<type, type2> = IsUnknown<type> extends true\n  ? false\n  : undefined extends type\n  ? false\n  : IsNever<\n      (type extends type2 ? true : false) & (type2 extends type ? false : true)\n    > extends true\n  ? false\n  : true\n\n/**\n * @internal\n * Checks if {@link type} is `never`\n */\nexport type IsNever<type> = [type] extends [never] ? true : false\n\n/**\n * @internal\n * Checks if {@link type} is `unknown`\n */\nexport type IsUnknown<type> = unknown extends type ? true : false\n\n/** Merges two object types into new type  */\nexport type Merge<obj1, obj2> = Evaluate<\n  LooseOmit<obj1, keyof obj2 extends infer key extends string ? key : never> &\n    obj2\n>\n\n/** Removes `readonly` from all properties of an object. */\nexport type Mutable<type extends object> = {\n  -readonly [key in keyof type]: type[key]\n}\n\n/** Strict version of built-in Omit type */\nexport type Omit<type, keys extends keyof type> = Pick<\n  type,\n  Exclude<keyof type, keys>\n>\n\n/** Makes objects destructurable. */\nexport type OneOf<\n  union extends object,\n  ///\n  keys extends KeyofUnion<union> = KeyofUnion<union>,\n> = union extends infer Item\n  ? Evaluate<Item & { [K in Exclude<keys, keyof Item>]?: undefined }>\n  : never\ntype KeyofUnion<type> = type extends type ? keyof type : never\n\n/** Makes {@link key} optional in {@link type} while preserving type inference. */\n// s/o trpc (https://github.com/trpc/trpc/blob/main/packages/server/src/types.ts#L6)\nexport type PartialBy<type, key extends keyof type> = ExactPartial<\n  Pick<type, key>\n> &\n  Omit<type, key>\n\n///////////////////////////////////////////////////////////////////////////\n// Loose types\n\n/** Loose version of {@link Omit} */\nexport type LooseOmit<type, keys extends string> = Pick<\n  type,\n  Exclude<keyof type, keys>\n>\n\n///////////////////////////////////////////////////////////////////////////\n// Union types\n\nexport type UnionEvaluate<type> = type extends object ? Evaluate<type> : type\n\nexport type UnionLooseOmit<type, keys extends string> = type extends any\n  ? LooseOmit<type, keys>\n  : never\n\nexport type UnionOmit<type, keys extends keyof type> = type extends any\n  ? Omit<type, keys>\n  : never\n\nexport type UnionPartial<type> = type extends object ? ExactPartial<type> : type\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}