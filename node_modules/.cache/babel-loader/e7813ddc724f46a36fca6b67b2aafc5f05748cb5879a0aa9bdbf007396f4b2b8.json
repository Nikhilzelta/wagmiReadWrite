{"ast":null,"code":"import { InvalidAddressError } from '../../errors/address.js';\nimport { InvalidLegacyVError, InvalidSerializedTransactionError } from '../../errors/transaction.js';\nimport { isAddress } from '../address/isAddress.js';\nimport { toBlobSidecars } from '../blob/toBlobSidecars.js';\nimport { isHex } from '../data/isHex.js';\nimport { padHex } from '../data/pad.js';\nimport { trim } from '../data/trim.js';\nimport { hexToBigInt, hexToNumber } from '../encoding/fromHex.js';\nimport { fromRlp } from '../encoding/fromRlp.js';\nimport { isHash } from '../hash/isHash.js';\nimport { assertTransactionEIP1559, assertTransactionEIP2930, assertTransactionEIP4844, assertTransactionLegacy } from './assertTransaction.js';\nimport { getSerializedTransactionType } from './getSerializedTransactionType.js';\nexport function parseTransaction(serializedTransaction) {\n  const type = getSerializedTransactionType(serializedTransaction);\n  if (type === 'eip1559') return parseTransactionEIP1559(serializedTransaction);\n  if (type === 'eip2930') return parseTransactionEIP2930(serializedTransaction);\n  if (type === 'eip4844') return parseTransactionEIP4844(serializedTransaction);\n  return parseTransactionLegacy(serializedTransaction);\n}\nfunction parseTransactionEIP4844(serializedTransaction) {\n  const transactionOrWrapperArray = toTransactionArray(serializedTransaction);\n  const hasNetworkWrapper = transactionOrWrapperArray.length === 4;\n  const transactionArray = hasNetworkWrapper ? transactionOrWrapperArray[0] : transactionOrWrapperArray;\n  const wrapperArray = hasNetworkWrapper ? transactionOrWrapperArray.slice(1) : [];\n  const [chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gas, to, value, data, accessList, maxFeePerBlobGas, blobVersionedHashes, v, r, s] = transactionArray;\n  const [blobs, commitments, proofs] = wrapperArray;\n  if (!(transactionArray.length === 11 || transactionArray.length === 14)) throw new InvalidSerializedTransactionError({\n    attributes: {\n      chainId,\n      nonce,\n      maxPriorityFeePerGas,\n      maxFeePerGas,\n      gas,\n      to,\n      value,\n      data,\n      accessList,\n      ...(transactionArray.length > 9 ? {\n        v,\n        r,\n        s\n      } : {})\n    },\n    serializedTransaction,\n    type: 'eip4844'\n  });\n  const transaction = {\n    blobVersionedHashes: blobVersionedHashes,\n    chainId: hexToNumber(chainId),\n    type: 'eip4844'\n  };\n  if (isHex(to) && to !== '0x') transaction.to = to;\n  if (isHex(gas) && gas !== '0x') transaction.gas = hexToBigInt(gas);\n  if (isHex(data) && data !== '0x') transaction.data = data;\n  if (isHex(nonce) && nonce !== '0x') transaction.nonce = hexToNumber(nonce);\n  if (isHex(value) && value !== '0x') transaction.value = hexToBigInt(value);\n  if (isHex(maxFeePerBlobGas) && maxFeePerBlobGas !== '0x') transaction.maxFeePerBlobGas = hexToBigInt(maxFeePerBlobGas);\n  if (isHex(maxFeePerGas) && maxFeePerGas !== '0x') transaction.maxFeePerGas = hexToBigInt(maxFeePerGas);\n  if (isHex(maxPriorityFeePerGas) && maxPriorityFeePerGas !== '0x') transaction.maxPriorityFeePerGas = hexToBigInt(maxPriorityFeePerGas);\n  if (accessList.length !== 0 && accessList !== '0x') transaction.accessList = parseAccessList(accessList);\n  if (blobs && commitments && proofs) transaction.sidecars = toBlobSidecars({\n    blobs: blobs,\n    commitments: commitments,\n    proofs: proofs\n  });\n  assertTransactionEIP4844(transaction);\n  const signature = transactionArray.length === 14 ? parseEIP155Signature(transactionArray) : undefined;\n  return {\n    ...signature,\n    ...transaction\n  };\n}\nfunction parseTransactionEIP1559(serializedTransaction) {\n  const transactionArray = toTransactionArray(serializedTransaction);\n  const [chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gas, to, value, data, accessList, v, r, s] = transactionArray;\n  if (!(transactionArray.length === 9 || transactionArray.length === 12)) throw new InvalidSerializedTransactionError({\n    attributes: {\n      chainId,\n      nonce,\n      maxPriorityFeePerGas,\n      maxFeePerGas,\n      gas,\n      to,\n      value,\n      data,\n      accessList,\n      ...(transactionArray.length > 9 ? {\n        v,\n        r,\n        s\n      } : {})\n    },\n    serializedTransaction,\n    type: 'eip1559'\n  });\n  const transaction = {\n    chainId: hexToNumber(chainId),\n    type: 'eip1559'\n  };\n  if (isHex(to) && to !== '0x') transaction.to = to;\n  if (isHex(gas) && gas !== '0x') transaction.gas = hexToBigInt(gas);\n  if (isHex(data) && data !== '0x') transaction.data = data;\n  if (isHex(nonce) && nonce !== '0x') transaction.nonce = hexToNumber(nonce);\n  if (isHex(value) && value !== '0x') transaction.value = hexToBigInt(value);\n  if (isHex(maxFeePerGas) && maxFeePerGas !== '0x') transaction.maxFeePerGas = hexToBigInt(maxFeePerGas);\n  if (isHex(maxPriorityFeePerGas) && maxPriorityFeePerGas !== '0x') transaction.maxPriorityFeePerGas = hexToBigInt(maxPriorityFeePerGas);\n  if (accessList.length !== 0 && accessList !== '0x') transaction.accessList = parseAccessList(accessList);\n  assertTransactionEIP1559(transaction);\n  const signature = transactionArray.length === 12 ? parseEIP155Signature(transactionArray) : undefined;\n  return {\n    ...signature,\n    ...transaction\n  };\n}\nfunction parseTransactionEIP2930(serializedTransaction) {\n  const transactionArray = toTransactionArray(serializedTransaction);\n  const [chainId, nonce, gasPrice, gas, to, value, data, accessList, v, r, s] = transactionArray;\n  if (!(transactionArray.length === 8 || transactionArray.length === 11)) throw new InvalidSerializedTransactionError({\n    attributes: {\n      chainId,\n      nonce,\n      gasPrice,\n      gas,\n      to,\n      value,\n      data,\n      accessList,\n      ...(transactionArray.length > 8 ? {\n        v,\n        r,\n        s\n      } : {})\n    },\n    serializedTransaction,\n    type: 'eip2930'\n  });\n  const transaction = {\n    chainId: hexToNumber(chainId),\n    type: 'eip2930'\n  };\n  if (isHex(to) && to !== '0x') transaction.to = to;\n  if (isHex(gas) && gas !== '0x') transaction.gas = hexToBigInt(gas);\n  if (isHex(data) && data !== '0x') transaction.data = data;\n  if (isHex(nonce) && nonce !== '0x') transaction.nonce = hexToNumber(nonce);\n  if (isHex(value) && value !== '0x') transaction.value = hexToBigInt(value);\n  if (isHex(gasPrice) && gasPrice !== '0x') transaction.gasPrice = hexToBigInt(gasPrice);\n  if (accessList.length !== 0 && accessList !== '0x') transaction.accessList = parseAccessList(accessList);\n  assertTransactionEIP2930(transaction);\n  const signature = transactionArray.length === 11 ? parseEIP155Signature(transactionArray) : undefined;\n  return {\n    ...signature,\n    ...transaction\n  };\n}\nfunction parseTransactionLegacy(serializedTransaction) {\n  const transactionArray = fromRlp(serializedTransaction, 'hex');\n  const [nonce, gasPrice, gas, to, value, data, chainIdOrV_, r, s] = transactionArray;\n  if (!(transactionArray.length === 6 || transactionArray.length === 9)) throw new InvalidSerializedTransactionError({\n    attributes: {\n      nonce,\n      gasPrice,\n      gas,\n      to,\n      value,\n      data,\n      ...(transactionArray.length > 6 ? {\n        v: chainIdOrV_,\n        r,\n        s\n      } : {})\n    },\n    serializedTransaction,\n    type: 'legacy'\n  });\n  const transaction = {\n    type: 'legacy'\n  };\n  if (isHex(to) && to !== '0x') transaction.to = to;\n  if (isHex(gas) && gas !== '0x') transaction.gas = hexToBigInt(gas);\n  if (isHex(data) && data !== '0x') transaction.data = data;\n  if (isHex(nonce) && nonce !== '0x') transaction.nonce = hexToNumber(nonce);\n  if (isHex(value) && value !== '0x') transaction.value = hexToBigInt(value);\n  if (isHex(gasPrice) && gasPrice !== '0x') transaction.gasPrice = hexToBigInt(gasPrice);\n  assertTransactionLegacy(transaction);\n  if (transactionArray.length === 6) return transaction;\n  const chainIdOrV = isHex(chainIdOrV_) && chainIdOrV_ !== '0x' ? hexToBigInt(chainIdOrV_) : 0n;\n  if (s === '0x' && r === '0x') {\n    if (chainIdOrV > 0) transaction.chainId = Number(chainIdOrV);\n    return transaction;\n  }\n  const v = chainIdOrV;\n  const chainId = Number((v - 35n) / 2n);\n  if (chainId > 0) transaction.chainId = chainId;else if (v !== 27n && v !== 28n) throw new InvalidLegacyVError({\n    v\n  });\n  delete transaction.yParity;\n  transaction.v = v;\n  transaction.s = s;\n  transaction.r = r;\n  return transaction;\n}\nexport function toTransactionArray(serializedTransaction) {\n  return fromRlp(`0x${serializedTransaction.slice(4)}`, 'hex');\n}\nexport function parseAccessList(accessList_) {\n  const accessList = [];\n  for (let i = 0; i < accessList_.length; i++) {\n    const [address, storageKeys] = accessList_[i];\n    if (!isAddress(address, {\n      strict: false\n    })) throw new InvalidAddressError({\n      address\n    });\n    accessList.push({\n      address: address,\n      storageKeys: storageKeys.map(key => isHash(key) ? key : trim(key))\n    });\n  }\n  return accessList;\n}\nfunction parseEIP155Signature(transactionArray) {\n  const signature = transactionArray.slice(-3);\n  const v = signature[0] === '0x' || hexToBigInt(signature[0]) === 0n ? 27n : 28n;\n  return {\n    r: padHex(signature[1], {\n      size: 32\n    }),\n    s: padHex(signature[2], {\n      size: 32\n    }),\n    v,\n    yParity: v === 27n ? 0 : 1\n  };\n}","map":{"version":3,"names":["InvalidAddressError","InvalidLegacyVError","InvalidSerializedTransactionError","isAddress","toBlobSidecars","isHex","padHex","trim","hexToBigInt","hexToNumber","fromRlp","isHash","assertTransactionEIP1559","assertTransactionEIP2930","assertTransactionEIP4844","assertTransactionLegacy","getSerializedTransactionType","parseTransaction","serializedTransaction","type","parseTransactionEIP1559","parseTransactionEIP2930","parseTransactionEIP4844","parseTransactionLegacy","transactionOrWrapperArray","toTransactionArray","hasNetworkWrapper","length","transactionArray","wrapperArray","slice","chainId","nonce","maxPriorityFeePerGas","maxFeePerGas","gas","to","value","data","accessList","maxFeePerBlobGas","blobVersionedHashes","v","r","s","blobs","commitments","proofs","attributes","transaction","parseAccessList","sidecars","signature","parseEIP155Signature","undefined","gasPrice","chainIdOrV_","chainIdOrV","Number","yParity","accessList_","i","address","storageKeys","strict","push","map","key","size"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/viem/utils/transaction/parseTransaction.ts"],"sourcesContent":["import {\n  InvalidAddressError,\n  type InvalidAddressErrorType,\n} from '../../errors/address.js'\nimport {\n  InvalidLegacyVError,\n  type InvalidLegacyVErrorType,\n  InvalidSerializedTransactionError,\n  type InvalidSerializedTransactionErrorType,\n} from '../../errors/transaction.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hex, Signature } from '../../types/misc.js'\nimport type {\n  AccessList,\n  TransactionRequestEIP2930,\n  TransactionRequestLegacy,\n  TransactionSerializable,\n  TransactionSerializableEIP1559,\n  TransactionSerializableEIP2930,\n  TransactionSerializableEIP4844,\n  TransactionSerializableLegacy,\n  TransactionSerialized,\n  TransactionSerializedEIP1559,\n  TransactionSerializedEIP2930,\n  TransactionSerializedEIP4844,\n  TransactionSerializedGeneric,\n  TransactionType,\n} from '../../types/transaction.js'\nimport type { IsNarrowable } from '../../types/utils.js'\nimport { type IsAddressErrorType, isAddress } from '../address/isAddress.js'\nimport { toBlobSidecars } from '../blob/toBlobSidecars.js'\nimport { type IsHexErrorType, isHex } from '../data/isHex.js'\nimport { type PadHexErrorType, padHex } from '../data/pad.js'\nimport { trim } from '../data/trim.js'\nimport {\n  type HexToBigIntErrorType,\n  type HexToNumberErrorType,\n  hexToBigInt,\n  hexToNumber,\n} from '../encoding/fromHex.js'\nimport { type FromRlpErrorType, fromRlp } from '../encoding/fromRlp.js'\nimport type { RecursiveArray } from '../encoding/toRlp.js'\nimport { isHash } from '../hash/isHash.js'\n\nimport {\n  type AssertTransactionEIP1559ErrorType,\n  type AssertTransactionEIP2930ErrorType,\n  type AssertTransactionEIP4844ErrorType,\n  type AssertTransactionLegacyErrorType,\n  assertTransactionEIP1559,\n  assertTransactionEIP2930,\n  assertTransactionEIP4844,\n  assertTransactionLegacy,\n} from './assertTransaction.js'\nimport {\n  type GetSerializedTransactionType,\n  type GetSerializedTransactionTypeErrorType,\n  getSerializedTransactionType,\n} from './getSerializedTransactionType.js'\n\nexport type ParseTransactionReturnType<\n  TSerialized extends TransactionSerializedGeneric = TransactionSerialized,\n  TType extends TransactionType = GetSerializedTransactionType<TSerialized>,\n> = IsNarrowable<TSerialized, Hex> extends true\n  ?\n      | (TType extends 'eip1559' ? TransactionSerializableEIP1559 : never)\n      | (TType extends 'eip2930' ? TransactionSerializableEIP2930 : never)\n      | (TType extends 'eip4844' ? TransactionSerializableEIP4844 : never)\n      | (TType extends 'legacy' ? TransactionSerializableLegacy : never)\n  : TransactionSerializable\n\nexport type ParseTransactionErrorType =\n  | GetSerializedTransactionTypeErrorType\n  | ParseTransactionEIP1559ErrorType\n  | ParseTransactionEIP2930ErrorType\n  | ParseTransactionEIP4844ErrorType\n  | ParseTransactionLegacyErrorType\n\nexport function parseTransaction<\n  const TSerialized extends TransactionSerializedGeneric,\n>(serializedTransaction: TSerialized): ParseTransactionReturnType<TSerialized> {\n  const type = getSerializedTransactionType(serializedTransaction)\n\n  if (type === 'eip1559')\n    return parseTransactionEIP1559(\n      serializedTransaction as TransactionSerializedEIP1559,\n    ) as ParseTransactionReturnType<TSerialized>\n\n  if (type === 'eip2930')\n    return parseTransactionEIP2930(\n      serializedTransaction as TransactionSerializedEIP2930,\n    ) as ParseTransactionReturnType<TSerialized>\n\n  if (type === 'eip4844')\n    return parseTransactionEIP4844(\n      serializedTransaction as TransactionSerializedEIP4844,\n    ) as ParseTransactionReturnType<TSerialized>\n\n  return parseTransactionLegacy(\n    serializedTransaction,\n  ) as ParseTransactionReturnType<TSerialized>\n}\n\ntype ParseTransactionEIP4844ErrorType =\n  | AssertTransactionEIP4844ErrorType\n  | ToTransactionArrayErrorType\n  | HexToBigIntErrorType\n  | HexToNumberErrorType\n  | InvalidLegacyVErrorType\n  | InvalidSerializedTransactionErrorType\n  | IsHexErrorType\n  | ParseEIP155SignatureErrorType\n  | ErrorType\n\nfunction parseTransactionEIP4844(\n  serializedTransaction: TransactionSerializedEIP4844,\n): TransactionSerializableEIP4844 {\n  const transactionOrWrapperArray = toTransactionArray(serializedTransaction)\n\n  const hasNetworkWrapper = transactionOrWrapperArray.length === 4\n\n  const transactionArray = hasNetworkWrapper\n    ? transactionOrWrapperArray[0]\n    : transactionOrWrapperArray\n  const wrapperArray = hasNetworkWrapper\n    ? transactionOrWrapperArray.slice(1)\n    : []\n\n  const [\n    chainId,\n    nonce,\n    maxPriorityFeePerGas,\n    maxFeePerGas,\n    gas,\n    to,\n    value,\n    data,\n    accessList,\n    maxFeePerBlobGas,\n    blobVersionedHashes,\n    v,\n    r,\n    s,\n  ] = transactionArray\n  const [blobs, commitments, proofs] = wrapperArray\n\n  if (!(transactionArray.length === 11 || transactionArray.length === 14))\n    throw new InvalidSerializedTransactionError({\n      attributes: {\n        chainId,\n        nonce,\n        maxPriorityFeePerGas,\n        maxFeePerGas,\n        gas,\n        to,\n        value,\n        data,\n        accessList,\n        ...(transactionArray.length > 9\n          ? {\n              v,\n              r,\n              s,\n            }\n          : {}),\n      },\n      serializedTransaction,\n      type: 'eip4844',\n    })\n\n  const transaction = {\n    blobVersionedHashes: blobVersionedHashes as Hex[],\n    chainId: hexToNumber(chainId as Hex),\n    type: 'eip4844',\n  } as TransactionSerializableEIP4844\n  if (isHex(to) && to !== '0x') transaction.to = to\n  if (isHex(gas) && gas !== '0x') transaction.gas = hexToBigInt(gas)\n  if (isHex(data) && data !== '0x') transaction.data = data\n  if (isHex(nonce) && nonce !== '0x') transaction.nonce = hexToNumber(nonce)\n  if (isHex(value) && value !== '0x') transaction.value = hexToBigInt(value)\n  if (isHex(maxFeePerBlobGas) && maxFeePerBlobGas !== '0x')\n    transaction.maxFeePerBlobGas = hexToBigInt(maxFeePerBlobGas)\n  if (isHex(maxFeePerGas) && maxFeePerGas !== '0x')\n    transaction.maxFeePerGas = hexToBigInt(maxFeePerGas)\n  if (isHex(maxPriorityFeePerGas) && maxPriorityFeePerGas !== '0x')\n    transaction.maxPriorityFeePerGas = hexToBigInt(maxPriorityFeePerGas)\n  if (accessList.length !== 0 && accessList !== '0x')\n    transaction.accessList = parseAccessList(accessList as RecursiveArray<Hex>)\n  if (blobs && commitments && proofs)\n    transaction.sidecars = toBlobSidecars({\n      blobs: blobs as Hex[],\n      commitments: commitments as Hex[],\n      proofs: proofs as Hex[],\n    })\n\n  assertTransactionEIP4844(transaction)\n\n  const signature =\n    transactionArray.length === 14\n      ? parseEIP155Signature(transactionArray as RecursiveArray<Hex>)\n      : undefined\n\n  return { ...signature, ...transaction }\n}\n\ntype ParseTransactionEIP1559ErrorType =\n  | AssertTransactionEIP1559ErrorType\n  | ToTransactionArrayErrorType\n  | HexToBigIntErrorType\n  | HexToNumberErrorType\n  | InvalidLegacyVErrorType\n  | InvalidSerializedTransactionErrorType\n  | IsHexErrorType\n  | ParseEIP155SignatureErrorType\n  | ErrorType\n\nfunction parseTransactionEIP1559(\n  serializedTransaction: TransactionSerializedEIP1559,\n): TransactionSerializableEIP1559 {\n  const transactionArray = toTransactionArray(serializedTransaction)\n\n  const [\n    chainId,\n    nonce,\n    maxPriorityFeePerGas,\n    maxFeePerGas,\n    gas,\n    to,\n    value,\n    data,\n    accessList,\n    v,\n    r,\n    s,\n  ] = transactionArray\n\n  if (!(transactionArray.length === 9 || transactionArray.length === 12))\n    throw new InvalidSerializedTransactionError({\n      attributes: {\n        chainId,\n        nonce,\n        maxPriorityFeePerGas,\n        maxFeePerGas,\n        gas,\n        to,\n        value,\n        data,\n        accessList,\n        ...(transactionArray.length > 9\n          ? {\n              v,\n              r,\n              s,\n            }\n          : {}),\n      },\n      serializedTransaction,\n      type: 'eip1559',\n    })\n\n  const transaction: TransactionSerializableEIP1559 = {\n    chainId: hexToNumber(chainId as Hex),\n    type: 'eip1559',\n  }\n  if (isHex(to) && to !== '0x') transaction.to = to\n  if (isHex(gas) && gas !== '0x') transaction.gas = hexToBigInt(gas)\n  if (isHex(data) && data !== '0x') transaction.data = data\n  if (isHex(nonce) && nonce !== '0x') transaction.nonce = hexToNumber(nonce)\n  if (isHex(value) && value !== '0x') transaction.value = hexToBigInt(value)\n  if (isHex(maxFeePerGas) && maxFeePerGas !== '0x')\n    transaction.maxFeePerGas = hexToBigInt(maxFeePerGas)\n  if (isHex(maxPriorityFeePerGas) && maxPriorityFeePerGas !== '0x')\n    transaction.maxPriorityFeePerGas = hexToBigInt(maxPriorityFeePerGas)\n  if (accessList.length !== 0 && accessList !== '0x')\n    transaction.accessList = parseAccessList(accessList as RecursiveArray<Hex>)\n\n  assertTransactionEIP1559(transaction)\n\n  const signature =\n    transactionArray.length === 12\n      ? parseEIP155Signature(transactionArray)\n      : undefined\n\n  return { ...signature, ...transaction }\n}\n\ntype ParseTransactionEIP2930ErrorType =\n  | AssertTransactionEIP2930ErrorType\n  | ToTransactionArrayErrorType\n  | HexToBigIntErrorType\n  | HexToNumberErrorType\n  | InvalidLegacyVErrorType\n  | InvalidSerializedTransactionErrorType\n  | IsHexErrorType\n  | ParseEIP155SignatureErrorType\n  | ErrorType\n\nfunction parseTransactionEIP2930(\n  serializedTransaction: TransactionSerializedEIP2930,\n): Omit<TransactionRequestEIP2930, 'from'> &\n  ({ chainId: number } | ({ chainId: number } & Signature)) {\n  const transactionArray = toTransactionArray(serializedTransaction)\n\n  const [chainId, nonce, gasPrice, gas, to, value, data, accessList, v, r, s] =\n    transactionArray\n\n  if (!(transactionArray.length === 8 || transactionArray.length === 11))\n    throw new InvalidSerializedTransactionError({\n      attributes: {\n        chainId,\n        nonce,\n        gasPrice,\n        gas,\n        to,\n        value,\n        data,\n        accessList,\n        ...(transactionArray.length > 8\n          ? {\n              v,\n              r,\n              s,\n            }\n          : {}),\n      },\n      serializedTransaction,\n      type: 'eip2930',\n    })\n\n  const transaction: TransactionSerializableEIP2930 = {\n    chainId: hexToNumber(chainId as Hex),\n    type: 'eip2930',\n  }\n  if (isHex(to) && to !== '0x') transaction.to = to\n  if (isHex(gas) && gas !== '0x') transaction.gas = hexToBigInt(gas)\n  if (isHex(data) && data !== '0x') transaction.data = data\n  if (isHex(nonce) && nonce !== '0x') transaction.nonce = hexToNumber(nonce)\n  if (isHex(value) && value !== '0x') transaction.value = hexToBigInt(value)\n  if (isHex(gasPrice) && gasPrice !== '0x')\n    transaction.gasPrice = hexToBigInt(gasPrice)\n  if (accessList.length !== 0 && accessList !== '0x')\n    transaction.accessList = parseAccessList(accessList as RecursiveArray<Hex>)\n\n  assertTransactionEIP2930(transaction)\n\n  const signature =\n    transactionArray.length === 11\n      ? parseEIP155Signature(transactionArray)\n      : undefined\n\n  return { ...signature, ...transaction }\n}\n\ntype ParseTransactionLegacyErrorType =\n  | AssertTransactionLegacyErrorType\n  | FromRlpErrorType\n  | HexToBigIntErrorType\n  | HexToNumberErrorType\n  | InvalidLegacyVErrorType\n  | InvalidSerializedTransactionErrorType\n  | IsHexErrorType\n  | ErrorType\n\nfunction parseTransactionLegacy(\n  serializedTransaction: Hex,\n): Omit<TransactionRequestLegacy, 'from'> &\n  ({ chainId?: number | undefined } | ({ chainId: number } & Signature)) {\n  const transactionArray = fromRlp(serializedTransaction, 'hex')\n\n  const [nonce, gasPrice, gas, to, value, data, chainIdOrV_, r, s] =\n    transactionArray\n\n  if (!(transactionArray.length === 6 || transactionArray.length === 9))\n    throw new InvalidSerializedTransactionError({\n      attributes: {\n        nonce,\n        gasPrice,\n        gas,\n        to,\n        value,\n        data,\n        ...(transactionArray.length > 6\n          ? {\n              v: chainIdOrV_,\n              r,\n              s,\n            }\n          : {}),\n      },\n      serializedTransaction,\n      type: 'legacy',\n    })\n\n  const transaction: TransactionSerializableLegacy = {\n    type: 'legacy',\n  }\n  if (isHex(to) && to !== '0x') transaction.to = to\n  if (isHex(gas) && gas !== '0x') transaction.gas = hexToBigInt(gas)\n  if (isHex(data) && data !== '0x') transaction.data = data\n  if (isHex(nonce) && nonce !== '0x') transaction.nonce = hexToNumber(nonce)\n  if (isHex(value) && value !== '0x') transaction.value = hexToBigInt(value)\n  if (isHex(gasPrice) && gasPrice !== '0x')\n    transaction.gasPrice = hexToBigInt(gasPrice)\n\n  assertTransactionLegacy(transaction)\n\n  if (transactionArray.length === 6) return transaction\n\n  const chainIdOrV =\n    isHex(chainIdOrV_) && chainIdOrV_ !== '0x'\n      ? hexToBigInt(chainIdOrV_ as Hex)\n      : 0n\n\n  if (s === '0x' && r === '0x') {\n    if (chainIdOrV > 0) transaction.chainId = Number(chainIdOrV)\n    return transaction\n  }\n\n  const v = chainIdOrV\n\n  const chainId: number | undefined = Number((v - 35n) / 2n)\n  if (chainId > 0) transaction.chainId = chainId\n  else if (v !== 27n && v !== 28n) throw new InvalidLegacyVError({ v })\n\n  delete transaction.yParity\n  transaction.v = v\n  transaction.s = s as Hex\n  transaction.r = r as Hex\n\n  return transaction\n}\n\nexport type ToTransactionArrayErrorType = FromRlpErrorType | ErrorType\n\nexport function toTransactionArray(serializedTransaction: string) {\n  return fromRlp(`0x${serializedTransaction.slice(4)}` as Hex, 'hex')\n}\n\nexport type ParseAccessListErrorType =\n  | InvalidAddressErrorType\n  | IsAddressErrorType\n  | ErrorType\n\nexport function parseAccessList(accessList_: RecursiveArray<Hex>): AccessList {\n  const accessList: AccessList = []\n  for (let i = 0; i < accessList_.length; i++) {\n    const [address, storageKeys] = accessList_[i] as [Hex, Hex[]]\n\n    if (!isAddress(address, { strict: false }))\n      throw new InvalidAddressError({ address })\n\n    accessList.push({\n      address: address,\n      storageKeys: storageKeys.map((key) => (isHash(key) ? key : trim(key))),\n    })\n  }\n  return accessList\n}\n\ntype ParseEIP155SignatureErrorType =\n  | HexToBigIntErrorType\n  | PadHexErrorType\n  | ErrorType\n\nfunction parseEIP155Signature(\n  transactionArray: RecursiveArray<Hex>,\n): Signature & { yParity: number } {\n  const signature = transactionArray.slice(-3)\n  const v =\n    signature[0] === '0x' || hexToBigInt(signature[0] as Hex) === 0n ? 27n : 28n\n  return {\n    r: padHex(signature[1] as Hex, { size: 32 }),\n    s: padHex(signature[2] as Hex, { size: 32 }),\n    v,\n    yParity: v === 27n ? 0 : 1,\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}