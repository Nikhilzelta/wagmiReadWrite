{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseAbiParameter = void 0;\nconst index_js_1 = require(\"../index.js\");\nconst signatures_js_1 = require(\"./runtime/signatures.js\");\nconst structs_js_1 = require(\"./runtime/structs.js\");\nconst utils_js_1 = require(\"./runtime/utils.js\");\nfunction parseAbiParameter(param) {\n  let abiParameter;\n  if (typeof param === 'string') abiParameter = (0, utils_js_1.parseAbiParameter)(param, {\n    modifiers: signatures_js_1.modifiers\n  });else {\n    const structs = (0, structs_js_1.parseStructs)(param);\n    const length = param.length;\n    for (let i = 0; i < length; i++) {\n      const signature = param[i];\n      if ((0, signatures_js_1.isStructSignature)(signature)) continue;\n      abiParameter = (0, utils_js_1.parseAbiParameter)(signature, {\n        modifiers: signatures_js_1.modifiers,\n        structs\n      });\n      break;\n    }\n  }\n  if (!abiParameter) throw new index_js_1.InvalidAbiParameterError({\n    param\n  });\n  return abiParameter;\n}\nexports.parseAbiParameter = parseAbiParameter;","map":{"version":3,"names":["index_js_1","require","signatures_js_1","structs_js_1","utils_js_1","parseAbiParameter","param","abiParameter","modifiers","structs","parseStructs","length","i","signature","isStructSignature","InvalidAbiParameterError","exports"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@safe-global/safe-apps-sdk/node_modules/abitype/src/human-readable/parseAbiParameter.ts"],"sourcesContent":["import type { AbiParameter } from '../abi.js'\nimport { InvalidAbiParameterError } from '../index.js'\nimport type { Narrow } from '../narrow.js'\nimport type { Error, Filter } from '../types.js'\nimport { isStructSignature, modifiers } from './runtime/signatures.js'\nimport { parseStructs } from './runtime/structs.js'\nimport { parseAbiParameter as parseAbiParameter_ } from './runtime/utils.js'\nimport type { IsStructSignature, Modifier } from './types/signatures.js'\nimport type { ParseStructs } from './types/structs.js'\nimport type { ParseAbiParameter as ParseAbiParameter_ } from './types/utils.js'\n\n/**\n * Parses human-readable ABI parameter into {@link AbiParameter}\n *\n * @param TParam - Human-readable ABI parameter\n * @returns Parsed {@link AbiParameter}\n *\n * @example\n * type Result = ParseAbiParameter<'address from'>\n * //   ^? type Result = { type: \"address\"; name: \"from\"; }\n *\n * @example\n * type Result = ParseAbiParameter<\n *   // ^? type Result = { type: \"tuple\"; components: [{ type: \"string\"; name:...\n *   ['Baz bar', 'struct Baz { string name; }']\n * >\n */\nexport type ParseAbiParameter<\n  TParam extends string | readonly string[] | readonly unknown[],\n> =\n  | (TParam extends string\n      ? TParam extends ''\n        ? never\n        : string extends TParam\n        ? AbiParameter\n        : ParseAbiParameter_<TParam, { Modifier: Modifier }>\n      : never)\n  | (TParam extends readonly string[]\n      ? string[] extends TParam\n        ? AbiParameter // Return generic AbiParameter item since type was no inferrable\n        : ParseStructs<TParam> extends infer Structs\n        ? {\n            [K in keyof TParam]: TParam[K] extends string\n              ? IsStructSignature<TParam[K]> extends true\n                ? never\n                : ParseAbiParameter_<\n                    TParam[K],\n                    { Modifier: Modifier; Structs: Structs }\n                  >\n              : never\n          } extends infer Mapped extends readonly unknown[]\n          ? Filter<Mapped, never>[0] extends infer Result\n            ? Result extends undefined\n              ? never\n              : Result\n            : never\n          : never\n        : never\n      : never)\n\n/**\n * Parses human-readable ABI parameter into {@link AbiParameter}\n *\n * @param param - Human-readable ABI parameter\n * @returns Parsed {@link AbiParameter}\n *\n * @example\n * const abiParameter = parseAbiParameter('address from')\n * //    ^? const abiParameter: { type: \"address\"; name: \"from\"; }\n *\n * @example\n * const abiParameter = parseAbiParameter([\n *   //  ^? const abiParameter: { type: \"tuple\"; components: [{ type: \"string\"; name:...\n *   'Baz bar',\n *   'struct Baz { string name; }',\n * ])\n */\nexport function parseAbiParameter<\n  TParam extends string | readonly string[] | readonly unknown[],\n>(\n  param: Narrow<TParam> &\n    (\n      | (TParam extends string\n          ? TParam extends ''\n            ? Error<'Empty string is not allowed.'>\n            : unknown\n          : never)\n      | (TParam extends readonly string[]\n          ? TParam extends readonly [] // empty array\n            ? Error<'At least one parameter required.'>\n            : string[] extends TParam\n            ? unknown\n            : unknown // TODO: Validate param string\n          : never)\n    ),\n): ParseAbiParameter<TParam> {\n  let abiParameter\n  if (typeof param === 'string')\n    abiParameter = parseAbiParameter_(param, {\n      modifiers,\n    }) as ParseAbiParameter<TParam>\n  else {\n    const structs = parseStructs(param as readonly string[])\n    const length = param.length as number\n    for (let i = 0; i < length; i++) {\n      const signature = (param as readonly string[])[i]!\n      if (isStructSignature(signature)) continue\n      abiParameter = parseAbiParameter_(signature, { modifiers, structs })\n      break\n    }\n  }\n\n  if (!abiParameter) throw new InvalidAbiParameterError({ param })\n\n  return abiParameter as ParseAbiParameter<TParam>\n}\n"],"mappings":";;;;;;AACA,MAAAA,UAAA,GAAAC,OAAA;AAGA,MAAAC,eAAA,GAAAD,OAAA;AACA,MAAAE,YAAA,GAAAF,OAAA;AACA,MAAAG,UAAA,GAAAH,OAAA;AAuEA,SAAgBI,iBAAiBA,CAG/BC,KAcG;EAEH,IAAIC,YAAY;EAChB,IAAI,OAAOD,KAAK,KAAK,QAAQ,EAC3BC,YAAY,GAAG,IAAAH,UAAA,CAAAC,iBAAkB,EAACC,KAAK,EAAE;IACvCE,SAAS,EAATN,eAAA,CAAAM;GACD,CAA8B,MAC5B;IACH,MAAMC,OAAO,GAAG,IAAAN,YAAA,CAAAO,YAAY,EAACJ,KAA0B,CAAC;IACxD,MAAMK,MAAM,GAAGL,KAAK,CAACK,MAAgB;IACrC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,MAAM,EAAEC,CAAC,EAAE,EAAE;MAC/B,MAAMC,SAAS,GAAIP,KAA2B,CAACM,CAAC,CAAE;MAClD,IAAI,IAAAV,eAAA,CAAAY,iBAAiB,EAACD,SAAS,CAAC,EAAE;MAClCN,YAAY,GAAG,IAAAH,UAAA,CAAAC,iBAAkB,EAACQ,SAAS,EAAE;QAAEL,SAAS,EAATN,eAAA,CAAAM,SAAS;QAAEC;MAAO,CAAE,CAAC;MACpE;;;EAIJ,IAAI,CAACF,YAAY,EAAE,MAAM,IAAIP,UAAA,CAAAe,wBAAwB,CAAC;IAAET;EAAK,CAAE,CAAC;EAEhE,OAAOC,YAAyC;AAClD;AAtCAS,OAAA,CAAAX,iBAAA,GAAAA,iBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}