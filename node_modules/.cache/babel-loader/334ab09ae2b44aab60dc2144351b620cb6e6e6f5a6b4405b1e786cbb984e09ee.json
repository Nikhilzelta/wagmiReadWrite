{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTransactionConfirmations = void 0;\nconst getAction_js_1 = require(\"../../utils/getAction.js\");\nconst getBlockNumber_js_1 = require(\"./getBlockNumber.js\");\nconst getTransaction_js_1 = require(\"./getTransaction.js\");\nasync function getTransactionConfirmations(client, {\n  hash,\n  transactionReceipt\n}) {\n  const [blockNumber, transaction] = await Promise.all([(0, getAction_js_1.getAction)(client, getBlockNumber_js_1.getBlockNumber, 'getBlockNumber')({}), hash ? (0, getAction_js_1.getAction)(client, getTransaction_js_1.getTransaction, 'getBlockNumber')({\n    hash\n  }) : undefined]);\n  const transactionBlockNumber = transactionReceipt?.blockNumber || transaction?.blockNumber;\n  if (!transactionBlockNumber) return 0n;\n  return blockNumber - transactionBlockNumber + 1n;\n}\nexports.getTransactionConfirmations = getTransactionConfirmations;","map":{"version":3,"names":["getAction_js_1","require","getBlockNumber_js_1","getTransaction_js_1","getTransactionConfirmations","client","hash","transactionReceipt","blockNumber","transaction","Promise","all","getAction","getBlockNumber","getTransaction","undefined","transactionBlockNumber","exports"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/public/getTransactionConfirmations.ts"],"sourcesContent":["import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hash } from '../../types/misc.js'\nimport type { FormattedTransactionReceipt } from '../../utils/formatters/transactionReceipt.js'\nimport { getAction } from '../../utils/getAction.js'\n\nimport {\n  type GetBlockNumberErrorType,\n  getBlockNumber,\n} from './getBlockNumber.js'\nimport {\n  type GetTransactionErrorType,\n  getTransaction,\n} from './getTransaction.js'\n\nexport type GetTransactionConfirmationsParameters<\n  TChain extends Chain | undefined = Chain,\n> =\n  | {\n      /** The transaction hash. */\n      hash: Hash\n      transactionReceipt?: never\n    }\n  | {\n      hash?: never\n      /** The transaction receipt. */\n      transactionReceipt: FormattedTransactionReceipt<TChain>\n    }\n\nexport type GetTransactionConfirmationsReturnType = bigint\n\nexport type GetTransactionConfirmationsErrorType =\n  | GetBlockNumberErrorType\n  | GetTransactionErrorType\n  | ErrorType\n\n/**\n * Returns the number of blocks passed (confirmations) since the transaction was processed on a block.\n *\n * - Docs: https://viem.sh/docs/actions/public/getTransactionConfirmations.html\n * - Example: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions/fetching-transactions\n * - JSON-RPC Methods: [`eth_getTransactionConfirmations`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getTransactionConfirmations)\n *\n * @param client - Client to use\n * @param parameters - {@link GetTransactionConfirmationsParameters}\n * @returns The number of blocks passed since the transaction was processed. If confirmations is 0, then the Transaction has not been confirmed & processed yet. {@link GetTransactionConfirmationsReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getTransactionConfirmations } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const confirmations = await getTransactionConfirmations(client, {\n *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n * })\n */\nexport async function getTransactionConfirmations<\n  TChain extends Chain | undefined,\n>(\n  client: Client<Transport, TChain>,\n  { hash, transactionReceipt }: GetTransactionConfirmationsParameters<TChain>,\n): Promise<GetTransactionConfirmationsReturnType> {\n  const [blockNumber, transaction] = await Promise.all([\n    getAction(client, getBlockNumber, 'getBlockNumber')({}),\n    hash\n      ? getAction(client, getTransaction, 'getBlockNumber')({ hash })\n      : undefined,\n  ])\n  const transactionBlockNumber =\n    transactionReceipt?.blockNumber || transaction?.blockNumber\n  if (!transactionBlockNumber) return 0n\n  return blockNumber - transactionBlockNumber! + 1n\n}\n"],"mappings":";;;;;;AAMA,MAAAA,cAAA,GAAAC,OAAA;AAEA,MAAAC,mBAAA,GAAAD,OAAA;AAIA,MAAAE,mBAAA,GAAAF,OAAA;AAkDO,eAAeG,2BAA2BA,CAG/CC,MAAiC,EACjC;EAAEC,IAAI;EAAEC;AAAkB,CAAiD;EAE3E,MAAM,CAACC,WAAW,EAAEC,WAAW,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CACnD,IAAAX,cAAA,CAAAY,SAAS,EAACP,MAAM,EAAEH,mBAAA,CAAAW,cAAc,EAAE,gBAAgB,CAAC,CAAC,EAAE,CAAC,EACvDP,IAAI,GACA,IAAAN,cAAA,CAAAY,SAAS,EAACP,MAAM,EAAEF,mBAAA,CAAAW,cAAc,EAAE,gBAAgB,CAAC,CAAC;IAAER;EAAI,CAAE,CAAC,GAC7DS,SAAS,CACd,CAAC;EACF,MAAMC,sBAAsB,GAC1BT,kBAAkB,EAAEC,WAAW,IAAIC,WAAW,EAAED,WAAW;EAC7D,IAAI,CAACQ,sBAAsB,EAAE,OAAO,EAAE;EACtC,OAAOR,WAAW,GAAGQ,sBAAuB,GAAG,EAAE;AACnD;AAhBAC,OAAA,CAAAb,2BAAA,GAAAA,2BAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}