{"ast":null,"code":"import { ContractFunctionExecutionError, formatUnits, hexToString, trim } from 'viem';\nimport { getBalance as viem_getBalance } from 'viem/actions';\nimport '../createConfig.js';\nimport '../types/properties.js';\nimport '../types/unit.js';\nimport '../types/utils.js';\nimport { getAction } from '../utils/getAction.js';\nimport { getUnit } from '../utils/getUnit.js';\nimport { readContracts } from './readContracts.js';\n/** https://wagmi.sh/core/api/actions/getBalance */\nexport async function getBalance(config, parameters) {\n  const {\n    address,\n    blockNumber,\n    blockTag,\n    chainId,\n    token: tokenAddress,\n    unit = 'ether'\n  } = parameters;\n  if (tokenAddress) {\n    try {\n      return getTokenBalance(config, {\n        balanceAddress: address,\n        chainId,\n        symbolType: 'string',\n        tokenAddress\n      });\n    } catch (error) {\n      // In the chance that there is an error upon decoding the contract result,\n      // it could be likely that the contract data is represented as bytes32 instead\n      // of a string.\n      if (error instanceof ContractFunctionExecutionError) {\n        const balance = await getTokenBalance(config, {\n          balanceAddress: address,\n          chainId,\n          symbolType: 'bytes32',\n          tokenAddress\n        });\n        const symbol = hexToString(trim(balance.symbol, {\n          dir: 'right'\n        }));\n        return {\n          ...balance,\n          symbol\n        };\n      }\n      throw error;\n    }\n  }\n  const client = config.getClient({\n    chainId\n  });\n  const action = getAction(client, viem_getBalance, 'getBalance');\n  const value = await action(blockNumber ? {\n    address,\n    blockNumber\n  } : {\n    address,\n    blockTag\n  });\n  const chain = config.chains.find(x => x.id === chainId) ?? client.chain;\n  return {\n    decimals: chain.nativeCurrency.decimals,\n    formatted: formatUnits(value, getUnit(unit)),\n    symbol: chain.nativeCurrency.symbol,\n    value\n  };\n}\nasync function getTokenBalance(config, parameters) {\n  const {\n    balanceAddress,\n    chainId,\n    symbolType,\n    tokenAddress,\n    unit\n  } = parameters;\n  const contract = {\n    abi: [{\n      type: 'function',\n      name: 'balanceOf',\n      stateMutability: 'view',\n      inputs: [{\n        type: 'address'\n      }],\n      outputs: [{\n        type: 'uint256'\n      }]\n    }, {\n      type: 'function',\n      name: 'decimals',\n      stateMutability: 'view',\n      inputs: [],\n      outputs: [{\n        type: 'uint8'\n      }]\n    }, {\n      type: 'function',\n      name: 'symbol',\n      stateMutability: 'view',\n      inputs: [],\n      outputs: [{\n        type: symbolType\n      }]\n    }],\n    address: tokenAddress\n  };\n  const [value, decimals, symbol] = await readContracts(config, {\n    allowFailure: false,\n    contracts: [{\n      ...contract,\n      functionName: 'balanceOf',\n      args: [balanceAddress],\n      chainId\n    }, {\n      ...contract,\n      functionName: 'decimals',\n      chainId\n    }, {\n      ...contract,\n      functionName: 'symbol',\n      chainId\n    }]\n  });\n  const formatted = formatUnits(value ?? '0', getUnit(unit ?? decimals));\n  return {\n    decimals,\n    formatted,\n    symbol,\n    value\n  };\n}","map":{"version":3,"names":["ContractFunctionExecutionError","formatUnits","hexToString","trim","getBalance","viem_getBalance","getAction","getUnit","readContracts","config","parameters","address","blockNumber","blockTag","chainId","token","tokenAddress","unit","getTokenBalance","balanceAddress","symbolType","error","balance","symbol","dir","client","getClient","action","value","chain","chains","find","x","id","decimals","nativeCurrency","formatted","contract","abi","type","name","stateMutability","inputs","outputs","allowFailure","contracts","functionName","args"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/wagmi/node_modules/@wagmi/core/src/actions/getBalance.ts"],"sourcesContent":["import {\n  type Address,\n  ContractFunctionExecutionError,\n  type Hex,\n  formatUnits,\n  hexToString,\n  trim,\n} from 'viem'\nimport {\n  type GetBalanceErrorType as viem_GetBalanceErrorType,\n  type GetBalanceParameters as viem_GetBalanceParameters,\n  getBalance as viem_getBalance,\n} from 'viem/actions'\n\nimport { type Config } from '../createConfig.js'\nimport { type ChainIdParameter } from '../types/properties.js'\nimport { type Unit } from '../types/unit.js'\nimport { type Evaluate } from '../types/utils.js'\nimport { getAction } from '../utils/getAction.js'\nimport { getUnit } from '../utils/getUnit.js'\nimport { readContracts } from './readContracts.js'\n\nexport type GetBalanceParameters<config extends Config = Config> = Evaluate<\n  ChainIdParameter<config> &\n    viem_GetBalanceParameters & {\n      /** @deprecated */\n      token?: Address | undefined\n      /** @deprecated */\n      unit?: Unit | undefined\n    }\n>\n\nexport type GetBalanceReturnType = {\n  decimals: number\n  /** @deprecated */\n  formatted: string\n  symbol: string\n  value: bigint\n}\n\nexport type GetBalanceErrorType = viem_GetBalanceErrorType\n\n/** https://wagmi.sh/core/api/actions/getBalance */\nexport async function getBalance<config extends Config>(\n  config: config,\n  parameters: GetBalanceParameters<config>,\n): Promise<GetBalanceReturnType> {\n  const {\n    address,\n    blockNumber,\n    blockTag,\n    chainId,\n    token: tokenAddress,\n    unit = 'ether',\n  } = parameters\n\n  if (tokenAddress) {\n    try {\n      return getTokenBalance(config, {\n        balanceAddress: address,\n        chainId,\n        symbolType: 'string',\n        tokenAddress,\n      })\n    } catch (error) {\n      // In the chance that there is an error upon decoding the contract result,\n      // it could be likely that the contract data is represented as bytes32 instead\n      // of a string.\n      if (error instanceof ContractFunctionExecutionError) {\n        const balance = await getTokenBalance(config, {\n          balanceAddress: address,\n          chainId,\n          symbolType: 'bytes32',\n          tokenAddress,\n        })\n        const symbol = hexToString(\n          trim(balance.symbol as Hex, { dir: 'right' }),\n        )\n        return { ...balance, symbol }\n      }\n      throw error\n    }\n  }\n\n  const client = config.getClient({ chainId })\n  const action = getAction(client, viem_getBalance, 'getBalance')\n  const value = await action(\n    blockNumber ? { address, blockNumber } : { address, blockTag },\n  )\n  const chain = config.chains.find((x) => x.id === chainId) ?? client.chain!\n  return {\n    decimals: chain.nativeCurrency.decimals,\n    formatted: formatUnits(value, getUnit(unit)),\n    symbol: chain.nativeCurrency.symbol,\n    value,\n  }\n}\n\ntype GetTokenBalanceParameters = {\n  balanceAddress: Address\n  chainId?: number | undefined\n  symbolType: 'bytes32' | 'string'\n  tokenAddress: Address\n  unit?: Unit | undefined\n}\n\nasync function getTokenBalance(\n  config: Config,\n  parameters: GetTokenBalanceParameters,\n) {\n  const { balanceAddress, chainId, symbolType, tokenAddress, unit } = parameters\n  const contract = {\n    abi: [\n      {\n        type: 'function',\n        name: 'balanceOf',\n        stateMutability: 'view',\n        inputs: [{ type: 'address' }],\n        outputs: [{ type: 'uint256' }],\n      },\n      {\n        type: 'function',\n        name: 'decimals',\n        stateMutability: 'view',\n        inputs: [],\n        outputs: [{ type: 'uint8' }],\n      },\n      {\n        type: 'function',\n        name: 'symbol',\n        stateMutability: 'view',\n        inputs: [],\n        outputs: [{ type: symbolType }],\n      },\n    ],\n    address: tokenAddress,\n  } as const\n  const [value, decimals, symbol] = await readContracts(config, {\n    allowFailure: false,\n    contracts: [\n      {\n        ...contract,\n        functionName: 'balanceOf',\n        args: [balanceAddress],\n        chainId,\n      },\n      { ...contract, functionName: 'decimals', chainId },\n      { ...contract, functionName: 'symbol', chainId },\n    ] as const,\n  })\n  const formatted = formatUnits(value ?? '0', getUnit(unit ?? decimals))\n  return { decimals, formatted, symbol, value }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}