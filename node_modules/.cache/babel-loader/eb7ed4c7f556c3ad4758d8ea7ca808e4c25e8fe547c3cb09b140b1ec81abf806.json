{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hashMessage = void 0;\nconst strings_js_1 = require(\"../../constants/strings.js\");\nconst concat_js_1 = require(\"../data/concat.js\");\nconst toBytes_js_1 = require(\"../encoding/toBytes.js\");\nconst keccak256_js_1 = require(\"../hash/keccak256.js\");\nfunction hashMessage(message, to_) {\n  const messageBytes = (() => {\n    if (typeof message === 'string') return (0, toBytes_js_1.stringToBytes)(message);\n    if (message.raw instanceof Uint8Array) return message.raw;\n    return (0, toBytes_js_1.toBytes)(message.raw);\n  })();\n  const prefixBytes = (0, toBytes_js_1.stringToBytes)(`${strings_js_1.presignMessagePrefix}${messageBytes.length}`);\n  return (0, keccak256_js_1.keccak256)((0, concat_js_1.concat)([prefixBytes, messageBytes]), to_);\n}\nexports.hashMessage = hashMessage;","map":{"version":3,"names":["strings_js_1","require","concat_js_1","toBytes_js_1","keccak256_js_1","hashMessage","message","to_","messageBytes","stringToBytes","raw","Uint8Array","toBytes","prefixBytes","presignMessagePrefix","length","keccak256","concat","exports"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/signature/hashMessage.ts"],"sourcesContent":["import { presignMessagePrefix } from '../../constants/strings.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex, SignableMessage } from '../../types/misc.js'\nimport { type ConcatErrorType, concat } from '../data/concat.js'\nimport {\n  type StringToBytesErrorType,\n  type ToBytesErrorType,\n  stringToBytes,\n  toBytes,\n} from '../encoding/toBytes.js'\nimport { type Keccak256ErrorType, keccak256 } from '../hash/keccak256.js'\n\ntype To = 'hex' | 'bytes'\n\nexport type HashMessage<TTo extends To> =\n  | (TTo extends 'bytes' ? ByteArray : never)\n  | (TTo extends 'hex' ? Hex : never)\n\nexport type HashMessageErrorType =\n  | ConcatErrorType\n  | Keccak256ErrorType\n  | StringToBytesErrorType\n  | ToBytesErrorType\n  | ErrorType\n\nexport function hashMessage<TTo extends To = 'hex'>(\n  message: SignableMessage,\n  to_?: TTo,\n): HashMessage<TTo> {\n  const messageBytes = (() => {\n    if (typeof message === 'string') return stringToBytes(message)\n    if (message.raw instanceof Uint8Array) return message.raw\n    return toBytes(message.raw)\n  })()\n  const prefixBytes = stringToBytes(\n    `${presignMessagePrefix}${messageBytes.length}`,\n  )\n  return keccak256(concat([prefixBytes, messageBytes]), to_)\n}\n"],"mappings":";;;;;;AAAA,MAAAA,YAAA,GAAAC,OAAA;AAGA,MAAAC,WAAA,GAAAD,OAAA;AACA,MAAAE,YAAA,GAAAF,OAAA;AAMA,MAAAG,cAAA,GAAAH,OAAA;AAeA,SAAgBI,WAAWA,CACzBC,OAAwB,EACxBC,GAAS;EAET,MAAMC,YAAY,GAAG,CAAC,MAAK;IACzB,IAAI,OAAOF,OAAO,KAAK,QAAQ,EAAE,OAAO,IAAAH,YAAA,CAAAM,aAAa,EAACH,OAAO,CAAC;IAC9D,IAAIA,OAAO,CAACI,GAAG,YAAYC,UAAU,EAAE,OAAOL,OAAO,CAACI,GAAG;IACzD,OAAO,IAAAP,YAAA,CAAAS,OAAO,EAACN,OAAO,CAACI,GAAG,CAAC;EAC7B,CAAC,EAAC,CAAE;EACJ,MAAMG,WAAW,GAAG,IAAAV,YAAA,CAAAM,aAAa,EAC/B,GAAGT,YAAA,CAAAc,oBAAoB,GAAGN,YAAY,CAACO,MAAM,EAAE,CAChD;EACD,OAAO,IAAAX,cAAA,CAAAY,SAAS,EAAC,IAAAd,WAAA,CAAAe,MAAM,EAAC,CAACJ,WAAW,EAAEL,YAAY,CAAC,CAAC,EAAED,GAAG,CAAC;AAC5D;AAbAW,OAAA,CAAAb,WAAA,GAAAA,WAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}