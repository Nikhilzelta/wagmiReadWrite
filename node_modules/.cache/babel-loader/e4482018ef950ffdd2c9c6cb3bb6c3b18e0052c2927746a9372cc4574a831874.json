{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.verifyMessage = void 0;\nconst index_js_1 = require(\"../../utils/index.js\");\nconst verifyHash_js_1 = require(\"./verifyHash.js\");\nasync function verifyMessage(client, {\n  address,\n  message,\n  signature,\n  ...callRequest\n}) {\n  const hash = (0, index_js_1.hashMessage)(message);\n  return (0, verifyHash_js_1.verifyHash)(client, {\n    address,\n    hash,\n    signature,\n    ...callRequest\n  });\n}\nexports.verifyMessage = verifyMessage;","map":{"version":3,"names":["index_js_1","require","verifyHash_js_1","verifyMessage","client","address","message","signature","callRequest","hash","hashMessage","verifyHash","exports"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/public/verifyMessage.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { ByteArray, Hex, SignableMessage } from '../../types/misc.js'\nimport { hashMessage } from '../../utils/index.js'\nimport type { HashMessageErrorType } from '../../utils/signature/hashMessage.js'\nimport {\n  type VerifyHashErrorType,\n  type VerifyHashParameters,\n  verifyHash,\n} from './verifyHash.js'\n\nexport type VerifyMessageParameters = Omit<VerifyHashParameters, 'hash'> & {\n  /** The address that signed the original message. */\n  address: Address\n  /** The message to be verified. */\n  message: SignableMessage\n  /** The signature that was generated by signing the message with the address's private key. */\n  signature: Hex | ByteArray\n}\n\nexport type VerifyMessageReturnType = boolean\n\nexport type VerifyMessageErrorType =\n  | HashMessageErrorType\n  | VerifyHashErrorType\n  | ErrorType\n\n/**\n * Verify that a message was signed by the provided address.\n *\n * Compatible with Smart Contract Accounts & Externally Owned Accounts via [ERC-6492](https://eips.ethereum.org/EIPS/eip-6492).\n *\n * - Docs {@link https://viem.sh/docs/actions/public/verifyMessage.html}\n *\n * @param client - Client to use.\n * @param parameters - {@link VerifyMessageParameters}\n * @returns Whether or not the signature is valid. {@link VerifyMessageReturnType}\n */\nexport async function verifyMessage<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  { address, message, signature, ...callRequest }: VerifyMessageParameters,\n): Promise<VerifyMessageReturnType> {\n  const hash = hashMessage(message)\n  return verifyHash(client, {\n    address,\n    hash,\n    signature,\n    ...callRequest,\n  })\n}\n"],"mappings":";;;;;;AAOA,MAAAA,UAAA,GAAAC,OAAA;AAEA,MAAAC,eAAA,GAAAD,OAAA;AAiCO,eAAeE,aAAaA,CACjCC,MAAiC,EACjC;EAAEC,OAAO;EAAEC,OAAO;EAAEC,SAAS;EAAE,GAAGC;AAAW,CAA2B;EAExE,MAAMC,IAAI,GAAG,IAAAT,UAAA,CAAAU,WAAW,EAACJ,OAAO,CAAC;EACjC,OAAO,IAAAJ,eAAA,CAAAS,UAAU,EAACP,MAAM,EAAE;IACxBC,OAAO;IACPI,IAAI;IACJF,SAAS;IACT,GAAGC;GACJ,CAAC;AACJ;AAXAI,OAAA,CAAAT,aAAA,GAAAA,aAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}