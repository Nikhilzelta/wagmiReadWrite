{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.watchContractEvent = void 0;\nconst observe_js_1 = require(\"../../utils/observe.js\");\nconst poll_js_1 = require(\"../../utils/poll.js\");\nconst stringify_js_1 = require(\"../../utils/stringify.js\");\nconst abi_js_1 = require(\"../../errors/abi.js\");\nconst rpc_js_1 = require(\"../../errors/rpc.js\");\nconst decodeEventLog_js_1 = require(\"../../utils/abi/decodeEventLog.js\");\nconst encodeEventTopics_js_1 = require(\"../../utils/abi/encodeEventTopics.js\");\nconst log_js_1 = require(\"../../utils/formatters/log.js\");\nconst getAction_js_1 = require(\"../../utils/getAction.js\");\nconst createContractEventFilter_js_1 = require(\"./createContractEventFilter.js\");\nconst getBlockNumber_js_1 = require(\"./getBlockNumber.js\");\nconst getContractEvents_js_1 = require(\"./getContractEvents.js\");\nconst getFilterChanges_js_1 = require(\"./getFilterChanges.js\");\nconst uninstallFilter_js_1 = require(\"./uninstallFilter.js\");\nfunction watchContractEvent(client, {\n  abi,\n  address,\n  args,\n  batch = true,\n  eventName,\n  onError,\n  onLogs,\n  poll: poll_,\n  pollingInterval = client.pollingInterval,\n  strict: strict_\n}) {\n  const enablePolling = typeof poll_ !== 'undefined' ? poll_ : client.transport.type !== 'webSocket';\n  const pollContractEvent = () => {\n    const observerId = (0, stringify_js_1.stringify)(['watchContractEvent', address, args, batch, client.uid, eventName, pollingInterval]);\n    const strict = strict_ ?? false;\n    return (0, observe_js_1.observe)(observerId, {\n      onLogs,\n      onError\n    }, emit => {\n      let previousBlockNumber;\n      let filter;\n      let initialized = false;\n      const unwatch = (0, poll_js_1.poll)(async () => {\n        if (!initialized) {\n          try {\n            filter = await (0, getAction_js_1.getAction)(client, createContractEventFilter_js_1.createContractEventFilter, 'createContractEventFilter')({\n              abi,\n              address,\n              args,\n              eventName,\n              strict\n            });\n          } catch {}\n          initialized = true;\n          return;\n        }\n        try {\n          let logs;\n          if (filter) {\n            logs = await (0, getAction_js_1.getAction)(client, getFilterChanges_js_1.getFilterChanges, 'getFilterChanges')({\n              filter\n            });\n          } else {\n            const blockNumber = await (0, getAction_js_1.getAction)(client, getBlockNumber_js_1.getBlockNumber, 'getBlockNumber')({});\n            if (previousBlockNumber && previousBlockNumber !== blockNumber) {\n              logs = await (0, getAction_js_1.getAction)(client, getContractEvents_js_1.getContractEvents, 'getContractEvents')({\n                abi,\n                address,\n                args,\n                eventName,\n                fromBlock: previousBlockNumber + 1n,\n                toBlock: blockNumber,\n                strict\n              });\n            } else {\n              logs = [];\n            }\n            previousBlockNumber = blockNumber;\n          }\n          if (logs.length === 0) return;\n          if (batch) emit.onLogs(logs);else for (const log of logs) emit.onLogs([log]);\n        } catch (err) {\n          if (filter && err instanceof rpc_js_1.InvalidInputRpcError) initialized = false;\n          emit.onError?.(err);\n        }\n      }, {\n        emitOnBegin: true,\n        interval: pollingInterval\n      });\n      return async () => {\n        if (filter) await (0, getAction_js_1.getAction)(client, uninstallFilter_js_1.uninstallFilter, 'uninstallFilter')({\n          filter\n        });\n        unwatch();\n      };\n    });\n  };\n  const subscribeContractEvent = () => {\n    let active = true;\n    let unsubscribe = () => active = false;\n    (async () => {\n      try {\n        const topics = eventName ? (0, encodeEventTopics_js_1.encodeEventTopics)({\n          abi: abi,\n          eventName: eventName,\n          args\n        }) : [];\n        const {\n          unsubscribe: unsubscribe_\n        } = await client.transport.subscribe({\n          params: ['logs', {\n            address,\n            topics\n          }],\n          onData(data) {\n            if (!active) return;\n            const log = data.result;\n            try {\n              const {\n                eventName,\n                args\n              } = (0, decodeEventLog_js_1.decodeEventLog)({\n                abi: abi,\n                data: log.data,\n                topics: log.topics,\n                strict: strict_\n              });\n              const formatted = (0, log_js_1.formatLog)(log, {\n                args,\n                eventName: eventName\n              });\n              onLogs([formatted]);\n            } catch (err) {\n              let eventName;\n              let isUnnamed;\n              if (err instanceof abi_js_1.DecodeLogDataMismatch || err instanceof abi_js_1.DecodeLogTopicsMismatch) {\n                if (strict_) return;\n                eventName = err.abiItem.name;\n                isUnnamed = err.abiItem.inputs?.some(x => !('name' in x && x.name));\n              }\n              const formatted = (0, log_js_1.formatLog)(log, {\n                args: isUnnamed ? [] : {},\n                eventName\n              });\n              onLogs([formatted]);\n            }\n          },\n          onError(error) {\n            onError?.(error);\n          }\n        });\n        unsubscribe = unsubscribe_;\n        if (!active) unsubscribe();\n      } catch (err) {\n        onError?.(err);\n      }\n    })();\n    return unsubscribe;\n  };\n  return enablePolling ? pollContractEvent() : subscribeContractEvent();\n}\nexports.watchContractEvent = watchContractEvent;","map":{"version":3,"names":["observe_js_1","require","poll_js_1","stringify_js_1","abi_js_1","rpc_js_1","decodeEventLog_js_1","encodeEventTopics_js_1","log_js_1","getAction_js_1","createContractEventFilter_js_1","getBlockNumber_js_1","getContractEvents_js_1","getFilterChanges_js_1","uninstallFilter_js_1","watchContractEvent","client","abi","address","args","batch","eventName","onError","onLogs","poll","poll_","pollingInterval","strict","strict_","enablePolling","transport","type","pollContractEvent","observerId","stringify","uid","observe","emit","previousBlockNumber","filter","initialized","unwatch","getAction","createContractEventFilter","logs","getFilterChanges","blockNumber","getBlockNumber","getContractEvents","fromBlock","toBlock","length","log","err","InvalidInputRpcError","emitOnBegin","interval","uninstallFilter","subscribeContractEvent","active","unsubscribe","topics","encodeEventTopics","unsubscribe_","subscribe","params","onData","data","result","decodeEventLog","formatted","formatLog","isUnnamed","DecodeLogDataMismatch","DecodeLogTopicsMismatch","abiItem","name","inputs","some","x","error","exports"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/public/watchContractEvent.ts"],"sourcesContent":["import type { Abi, Address, ExtractAbiEvent } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { GetEventArgs, InferEventName } from '../../types/contract.js'\nimport type { Filter } from '../../types/filter.js'\nimport type { Log } from '../../types/log.js'\nimport type { GetTransportConfig } from '../../types/transport.js'\n\nimport { type ObserveErrorType, observe } from '../../utils/observe.js'\nimport { poll } from '../../utils/poll.js'\nimport { type StringifyErrorType, stringify } from '../../utils/stringify.js'\n\nimport {\n  DecodeLogDataMismatch,\n  DecodeLogTopicsMismatch,\n} from '../../errors/abi.js'\nimport { InvalidInputRpcError } from '../../errors/rpc.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { LogTopic } from '../../types/misc.js'\nimport { decodeEventLog } from '../../utils/abi/decodeEventLog.js'\nimport {\n  type EncodeEventTopicsParameters,\n  encodeEventTopics,\n} from '../../utils/abi/encodeEventTopics.js'\nimport { formatLog } from '../../utils/formatters/log.js'\nimport { getAction } from '../../utils/getAction.js'\nimport {\n  type CreateContractEventFilterParameters,\n  createContractEventFilter,\n} from './createContractEventFilter.js'\nimport { getBlockNumber } from './getBlockNumber.js'\nimport {\n  type GetContractEventsParameters,\n  getContractEvents,\n} from './getContractEvents.js'\nimport { getFilterChanges } from './getFilterChanges.js'\nimport { uninstallFilter } from './uninstallFilter.js'\n\ntype PollOptions = {\n  /**\n   * Whether or not the transaction hashes should be batched on each invocation.\n   * @default true\n   */\n  batch?: boolean\n  /**\n   * Polling frequency (in ms). Defaults to Client's pollingInterval config.\n   * @default client.pollingInterval\n   */\n  pollingInterval?: number\n}\n\nexport type WatchContractEventOnLogsParameter<\n  TAbi extends Abi | readonly unknown[] = readonly unknown[],\n  TEventName extends string = string,\n  TStrict extends boolean | undefined = undefined,\n> = TAbi extends Abi\n  ? Log<bigint, number, false, ExtractAbiEvent<TAbi, TEventName>, TStrict>[]\n  : Log[]\nexport type WatchContractEventOnLogsFn<\n  TAbi extends Abi | readonly unknown[] = readonly unknown[],\n  TEventName extends string = string,\n  TStrict extends boolean | undefined = undefined,\n> = (logs: WatchContractEventOnLogsParameter<TAbi, TEventName, TStrict>) => void\n\nexport type WatchContractEventParameters<\n  TAbi extends Abi | readonly unknown[] = readonly unknown[],\n  TEventName extends string = string,\n  TStrict extends boolean | undefined = undefined,\n> = {\n  /** The address of the contract. */\n  address?: Address | Address[]\n  /** Contract ABI. */\n  abi: TAbi\n  args?: GetEventArgs<TAbi, TEventName>\n  /** Contract event. */\n  eventName?: InferEventName<TAbi, TEventName>\n  /** The callback to call when an error occurred when trying to get for a new block. */\n  onError?: (error: Error) => void\n  /** The callback to call when new event logs are received. */\n  onLogs: WatchContractEventOnLogsFn<TAbi, TEventName, TStrict>\n  /**\n   * Whether or not the logs must match the indexed/non-indexed arguments on `event`.\n   * @default false\n   */\n  strict?: TStrict\n} & (GetTransportConfig<Transport>['type'] extends 'webSocket'\n  ?\n      | {\n          batch?: never\n          /**\n           * Whether or not the WebSocket Transport should poll the JSON-RPC, rather than using `eth_subscribe`.\n           * @default false\n           */\n          poll?: false\n          pollingInterval?: never\n        }\n      | (PollOptions & {\n          /**\n           * Whether or not the WebSocket Transport should poll the JSON-RPC, rather than using `eth_subscribe`.\n           * @default true\n           */\n          poll?: true\n        })\n  : PollOptions & {\n      poll?: true\n    })\n\nexport type WatchContractEventReturnType = () => void\n\nexport type WatchContractEventErrorType =\n  | StringifyErrorType\n  | ObserveErrorType\n  | ErrorType\n\n/**\n * Watches and returns emitted contract event logs.\n *\n * - Docs: https://viem.sh/docs/contract/watchContractEvent.html\n *\n * This Action will batch up all the event logs found within the [`pollingInterval`](https://viem.sh/docs/contract/watchContractEvent.html#pollinginterval-optional), and invoke them via [`onLogs`](https://viem.sh/docs/contract/watchContractEvent.html#onLogs).\n *\n * `watchContractEvent` will attempt to create an [Event Filter](https://viem.sh/docs/contract/createContractEventFilter.html) and listen to changes to the Filter per polling interval, however, if the RPC Provider does not support Filters (e.g. `eth_newFilter`), then `watchContractEvent` will fall back to using [`getLogs`](https://viem.sh/docs/actions/public/getLogs) instead.\n *\n * @param client - Client to use\n * @param parameters - {@link WatchContractEventParameters}\n * @returns A function that can be invoked to stop watching for new event logs. {@link WatchContractEventReturnType}\n *\n * @example\n * import { createPublicClient, http, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { watchContractEvent } from 'viem/contract'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const unwatch = watchContractEvent(client, {\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *   abi: parseAbi(['event Transfer(address indexed from, address indexed to, uint256 value)']),\n *   eventName: 'Transfer',\n *   args: { from: '0xc961145a54C96E3aE9bAA048c4F4D6b04C13916b' },\n *   onLogs: (logs) => console.log(logs),\n * })\n */\nexport function watchContractEvent<\n  TChain extends Chain | undefined,\n  const TAbi extends Abi | readonly unknown[],\n  TEventName extends string,\n  TStrict extends boolean | undefined = undefined,\n>(\n  client: Client<Transport, TChain>,\n  {\n    abi,\n    address,\n    args,\n    batch = true,\n    eventName,\n    onError,\n    onLogs,\n    poll: poll_,\n    pollingInterval = client.pollingInterval,\n    strict: strict_,\n  }: WatchContractEventParameters<TAbi, TEventName, TStrict>,\n): WatchContractEventReturnType {\n  const enablePolling =\n    typeof poll_ !== 'undefined' ? poll_ : client.transport.type !== 'webSocket'\n\n  const pollContractEvent = () => {\n    const observerId = stringify([\n      'watchContractEvent',\n      address,\n      args,\n      batch,\n      client.uid,\n      eventName,\n      pollingInterval,\n    ])\n    const strict = strict_ ?? false\n\n    return observe(observerId, { onLogs, onError }, (emit) => {\n      let previousBlockNumber: bigint\n      let filter: Filter<'event', TAbi, TEventName> | undefined\n      let initialized = false\n\n      const unwatch = poll(\n        async () => {\n          if (!initialized) {\n            try {\n              filter = (await getAction(\n                client,\n                createContractEventFilter,\n                'createContractEventFilter',\n              )({\n                abi,\n                address,\n                args,\n                eventName,\n                strict,\n              } as unknown as CreateContractEventFilterParameters)) as Filter<\n                'event',\n                TAbi,\n                TEventName\n              >\n            } catch {}\n            initialized = true\n            return\n          }\n\n          try {\n            let logs: Log[]\n            if (filter) {\n              logs = await getAction(\n                client,\n                getFilterChanges,\n                'getFilterChanges',\n              )({ filter })\n            } else {\n              // If the filter doesn't exist, we will fall back to use `getLogs`.\n              // The fall back exists because some RPC Providers do not support filters.\n\n              // Fetch the block number to use for `getLogs`.\n              const blockNumber = await getAction(\n                client,\n                getBlockNumber,\n                'getBlockNumber',\n              )({})\n\n              // If the block number has changed, we will need to fetch the logs.\n              // If the block number doesn't exist, we are yet to reach the first poll interval,\n              // so do not emit any logs.\n              if (previousBlockNumber && previousBlockNumber !== blockNumber) {\n                logs = await getAction(\n                  client,\n                  getContractEvents,\n                  'getContractEvents',\n                )({\n                  abi,\n                  address,\n                  args,\n                  eventName,\n                  fromBlock: previousBlockNumber + 1n,\n                  toBlock: blockNumber,\n                  strict,\n                } as {} as GetContractEventsParameters)\n              } else {\n                logs = []\n              }\n              previousBlockNumber = blockNumber\n            }\n\n            if (logs.length === 0) return\n            if (batch) emit.onLogs(logs as any)\n            else for (const log of logs) emit.onLogs([log] as any)\n          } catch (err) {\n            // If a filter has been set and gets uninstalled, providers will throw an InvalidInput error.\n            // Reinitalize the filter when this occurs\n            if (filter && err instanceof InvalidInputRpcError)\n              initialized = false\n            emit.onError?.(err as Error)\n          }\n        },\n        {\n          emitOnBegin: true,\n          interval: pollingInterval,\n        },\n      )\n\n      return async () => {\n        if (filter)\n          await getAction(\n            client,\n            uninstallFilter,\n            'uninstallFilter',\n          )({ filter })\n        unwatch()\n      }\n    })\n  }\n\n  const subscribeContractEvent = () => {\n    let active = true\n    let unsubscribe = () => (active = false)\n    ;(async () => {\n      try {\n        const topics: LogTopic[] = eventName\n          ? encodeEventTopics({\n              abi: abi,\n              eventName: eventName,\n              args,\n            } as EncodeEventTopicsParameters)\n          : []\n\n        const { unsubscribe: unsubscribe_ } = await client.transport.subscribe({\n          params: ['logs', { address, topics }],\n          onData(data: any) {\n            if (!active) return\n            const log = data.result\n            try {\n              const { eventName, args } = decodeEventLog({\n                abi: abi,\n                data: log.data,\n                topics: log.topics as any,\n                strict: strict_,\n              })\n              const formatted = formatLog(log, {\n                args,\n                eventName: eventName as string,\n              })\n              onLogs([formatted] as any)\n            } catch (err) {\n              let eventName\n              let isUnnamed\n              if (\n                err instanceof DecodeLogDataMismatch ||\n                err instanceof DecodeLogTopicsMismatch\n              ) {\n                // If strict mode is on, and log data/topics do not match event definition, skip.\n                if (strict_) return\n                eventName = err.abiItem.name\n                isUnnamed = err.abiItem.inputs?.some(\n                  (x) => !('name' in x && x.name),\n                )\n              }\n\n              // Set args to empty if there is an error decoding (e.g. indexed/non-indexed params mismatch).\n              const formatted = formatLog(log, {\n                args: isUnnamed ? [] : {},\n                eventName,\n              })\n              onLogs([formatted] as any)\n            }\n          },\n          onError(error: Error) {\n            onError?.(error)\n          },\n        })\n        unsubscribe = unsubscribe_\n        if (!active) unsubscribe()\n      } catch (err) {\n        onError?.(err as Error)\n      }\n    })()\n    return unsubscribe\n  }\n\n  return enablePolling ? pollContractEvent() : subscribeContractEvent()\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}