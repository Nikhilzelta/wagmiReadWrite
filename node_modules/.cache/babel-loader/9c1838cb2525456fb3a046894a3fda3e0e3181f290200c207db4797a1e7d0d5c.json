{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTransactionError = void 0;\nconst node_js_1 = require(\"../../errors/node.js\");\nconst transaction_js_1 = require(\"../../errors/transaction.js\");\nconst getNodeError_js_1 = require(\"./getNodeError.js\");\nfunction getTransactionError(err, {\n  docsPath,\n  ...args\n}) {\n  const cause = (() => {\n    const cause = (0, getNodeError_js_1.getNodeError)(err, args);\n    if (cause instanceof node_js_1.UnknownNodeError) return err;\n    return cause;\n  })();\n  return new transaction_js_1.TransactionExecutionError(cause, {\n    docsPath,\n    ...args\n  });\n}\nexports.getTransactionError = getTransactionError;","map":{"version":3,"names":["node_js_1","require","transaction_js_1","getNodeError_js_1","getTransactionError","err","docsPath","args","cause","getNodeError","UnknownNodeError","TransactionExecutionError","exports"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/errors/getTransactionError.ts"],"sourcesContent":["import type { Account } from '../../accounts/types.js'\nimport type { SendTransactionParameters } from '../../actions/wallet/sendTransaction.js'\nimport type { BaseError } from '../../errors/base.js'\nimport { UnknownNodeError } from '../../errors/node.js'\nimport {\n  TransactionExecutionError,\n  type TransactionExecutionErrorType,\n} from '../../errors/transaction.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\n\nimport {\n  type GetNodeErrorParameters,\n  type GetNodeErrorReturnType,\n  getNodeError,\n} from './getNodeError.js'\n\nexport type GetTransactionErrorParameters = Omit<\n  SendTransactionParameters,\n  'account' | 'chain'\n> & {\n  account: Account\n  chain?: Chain\n  docsPath?: string\n}\n\nexport type GetTransactionErrorReturnType<cause = ErrorType> = Omit<\n  TransactionExecutionErrorType,\n  'cause'\n> & { cause: cause | GetNodeErrorReturnType }\n\nexport function getTransactionError<err extends ErrorType<string>>(\n  err: err,\n  { docsPath, ...args }: GetTransactionErrorParameters,\n): GetTransactionErrorReturnType<err> {\n  const cause = (() => {\n    const cause = getNodeError(\n      err as {} as BaseError,\n      args as GetNodeErrorParameters,\n    )\n    if (cause instanceof UnknownNodeError) return err as {} as BaseError\n    return cause\n  })()\n  return new TransactionExecutionError(cause, {\n    docsPath,\n    ...args,\n  }) as GetTransactionErrorReturnType<err>\n}\n"],"mappings":";;;;;;AAGA,MAAAA,SAAA,GAAAC,OAAA;AACA,MAAAC,gBAAA,GAAAD,OAAA;AAOA,MAAAE,iBAAA,GAAAF,OAAA;AAoBA,SAAgBG,mBAAmBA,CACjCC,GAAQ,EACR;EAAEC,QAAQ;EAAE,GAAGC;AAAI,CAAiC;EAEpD,MAAMC,KAAK,GAAG,CAAC,MAAK;IAClB,MAAMA,KAAK,GAAG,IAAAL,iBAAA,CAAAM,YAAY,EACxBJ,GAAsB,EACtBE,IAA8B,CAC/B;IACD,IAAIC,KAAK,YAAYR,SAAA,CAAAU,gBAAgB,EAAE,OAAOL,GAAsB;IACpE,OAAOG,KAAK;EACd,CAAC,EAAC,CAAE;EACJ,OAAO,IAAIN,gBAAA,CAAAS,yBAAyB,CAACH,KAAK,EAAE;IAC1CF,QAAQ;IACR,GAAGC;GACJ,CAAuC;AAC1C;AAhBAK,OAAA,CAAAR,mBAAA,GAAAA,mBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}