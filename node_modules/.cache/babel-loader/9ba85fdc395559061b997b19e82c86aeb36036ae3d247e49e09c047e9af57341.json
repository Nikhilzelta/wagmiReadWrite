{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sendUnsignedTransaction = void 0;\nconst extract_js_1 = require(\"../../utils/formatters/extract.js\");\nconst transactionRequest_js_1 = require(\"../../utils/formatters/transactionRequest.js\");\nasync function sendUnsignedTransaction(client, args) {\n  const {\n    accessList,\n    data,\n    from,\n    gas,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n    to,\n    value,\n    ...rest\n  } = args;\n  const chainFormat = client.chain?.formatters?.transactionRequest?.format;\n  const format = chainFormat || transactionRequest_js_1.formatTransactionRequest;\n  const request = format({\n    ...(0, extract_js_1.extract)(rest, {\n      format: chainFormat\n    }),\n    accessList,\n    data,\n    from,\n    gas,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n    to,\n    value\n  });\n  const hash = await client.request({\n    method: 'eth_sendUnsignedTransaction',\n    params: [request]\n  });\n  return hash;\n}\nexports.sendUnsignedTransaction = sendUnsignedTransaction;","map":{"version":3,"names":["extract_js_1","require","transactionRequest_js_1","sendUnsignedTransaction","client","args","accessList","data","from","gas","gasPrice","maxFeePerGas","maxPriorityFeePerGas","nonce","to","value","rest","chainFormat","chain","formatters","transactionRequest","format","formatTransactionRequest","request","extract","hash","method","params","exports"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/test/sendUnsignedTransaction.ts"],"sourcesContent":["import type {\n  TestClient,\n  TestClientMode,\n} from '../../clients/createTestClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hash } from '../../types/misc.js'\nimport type { TransactionRequest } from '../../types/transaction.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport { extract } from '../../utils/formatters/extract.js'\nimport {\n  type FormattedTransactionRequest,\n  formatTransactionRequest,\n} from '../../utils/formatters/transactionRequest.js'\n\nexport type SendUnsignedTransactionParameters<\n  TChain extends Chain | undefined = Chain | undefined,\n> = FormattedTransactionRequest<TChain>\n\nexport type SendUnsignedTransactionReturnType = Hash\n\nexport type SendUnsignedTransactionErrorType = RequestErrorType | ErrorType\n\n/**\n * Returns the details of all transactions currently pending for inclusion in the next block(s), as well as the ones that are being scheduled for future execution only.\n *\n * - Docs: https://viem.sh/docs/actions/test/getTxpoolContent.html\n *\n * @param client - Client to use\n * @param parameters â€“ {@link SendUnsignedTransactionParameters}\n * @returns The transaction hash. {@link SendUnsignedTransactionReturnType}\n *\n * @example\n * import { createTestClient, http } from 'viem'\n * import { foundry } from 'viem/chains'\n * import { sendUnsignedTransaction } from 'viem/test'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: 'foundry',\n *   transport: http(),\n * })\n * const hash = await sendUnsignedTransaction(client, {\n *   from: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n */\nexport async function sendUnsignedTransaction<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(\n  client: TestClient<TestClientMode, Transport, TChain, TAccount, false>,\n  args: SendUnsignedTransactionParameters<TChain>,\n): Promise<SendUnsignedTransactionReturnType> {\n  const {\n    accessList,\n    data,\n    from,\n    gas,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n    to,\n    value,\n    ...rest\n  } = args\n\n  const chainFormat = client.chain?.formatters?.transactionRequest?.format\n  const format = chainFormat || formatTransactionRequest\n\n  const request = format({\n    // Pick out extra data that might exist on the chain's transaction request type.\n    ...extract(rest, { format: chainFormat }),\n    accessList,\n    data,\n    from,\n    gas,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n    to,\n    value,\n  } as TransactionRequest)\n  const hash = await client.request({\n    method: 'eth_sendUnsignedTransaction',\n    params: [request],\n  })\n  return hash\n}\n"],"mappings":";;;;;;AAWA,MAAAA,YAAA,GAAAC,OAAA;AACA,MAAAC,uBAAA,GAAAD,OAAA;AAsCO,eAAeE,uBAAuBA,CAI3CC,MAAsE,EACtEC,IAA+C;EAE/C,MAAM;IACJC,UAAU;IACVC,IAAI;IACJC,IAAI;IACJC,GAAG;IACHC,QAAQ;IACRC,YAAY;IACZC,oBAAoB;IACpBC,KAAK;IACLC,EAAE;IACFC,KAAK;IACL,GAAGC;EAAI,CACR,GAAGX,IAAI;EAER,MAAMY,WAAW,GAAGb,MAAM,CAACc,KAAK,EAAEC,UAAU,EAAEC,kBAAkB,EAAEC,MAAM;EACxE,MAAMA,MAAM,GAAGJ,WAAW,IAAIf,uBAAA,CAAAoB,wBAAwB;EAEtD,MAAMC,OAAO,GAAGF,MAAM,CAAC;IAErB,GAAG,IAAArB,YAAA,CAAAwB,OAAO,EAACR,IAAI,EAAE;MAAEK,MAAM,EAAEJ;IAAW,CAAE,CAAC;IACzCX,UAAU;IACVC,IAAI;IACJC,IAAI;IACJC,GAAG;IACHC,QAAQ;IACRC,YAAY;IACZC,oBAAoB;IACpBC,KAAK;IACLC,EAAE;IACFC;GACqB,CAAC;EACxB,MAAMU,IAAI,GAAG,MAAMrB,MAAM,CAACmB,OAAO,CAAC;IAChCG,MAAM,EAAE,6BAA6B;IACrCC,MAAM,EAAE,CAACJ,OAAO;GACjB,CAAC;EACF,OAAOE,IAAI;AACb;AA3CAG,OAAA,CAAAzB,uBAAA,GAAAA,uBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}