{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createContractEventFilter = void 0;\nconst encodeEventTopics_js_1 = require(\"../../utils/abi/encodeEventTopics.js\");\nconst toHex_js_1 = require(\"../../utils/encoding/toHex.js\");\nconst createFilterRequestScope_js_1 = require(\"../../utils/filters/createFilterRequestScope.js\");\nasync function createContractEventFilter(client, {\n  address,\n  abi,\n  args,\n  eventName,\n  fromBlock,\n  strict,\n  toBlock\n}) {\n  const getRequest = (0, createFilterRequestScope_js_1.createFilterRequestScope)(client, {\n    method: 'eth_newFilter'\n  });\n  const topics = eventName ? (0, encodeEventTopics_js_1.encodeEventTopics)({\n    abi,\n    args,\n    eventName\n  }) : undefined;\n  const id = await client.request({\n    method: 'eth_newFilter',\n    params: [{\n      address,\n      fromBlock: typeof fromBlock === 'bigint' ? (0, toHex_js_1.numberToHex)(fromBlock) : fromBlock,\n      toBlock: typeof toBlock === 'bigint' ? (0, toHex_js_1.numberToHex)(toBlock) : toBlock,\n      topics\n    }]\n  });\n  return {\n    abi,\n    args,\n    eventName,\n    id,\n    request: getRequest(id),\n    strict,\n    type: 'event'\n  };\n}\nexports.createContractEventFilter = createContractEventFilter;","map":{"version":3,"names":["encodeEventTopics_js_1","require","toHex_js_1","createFilterRequestScope_js_1","createContractEventFilter","client","address","abi","args","eventName","fromBlock","strict","toBlock","getRequest","createFilterRequestScope","method","topics","encodeEventTopics","undefined","id","request","params","numberToHex","type","exports"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/public/createContractEventFilter.ts"],"sourcesContent":["import type { Abi, Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockNumber, BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type {\n  InferEventName,\n  MaybeExtractEventArgsFromAbi,\n} from '../../types/contract.js'\nimport type { Filter } from '../../types/filter.js'\nimport type { Hex } from '../../types/misc.js'\nimport {\n  type EncodeEventTopicsErrorType,\n  type EncodeEventTopicsParameters,\n  encodeEventTopics,\n} from '../../utils/abi/encodeEventTopics.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\nimport { createFilterRequestScope } from '../../utils/filters/createFilterRequestScope.js'\n\nexport type CreateContractEventFilterParameters<\n  TAbi extends Abi | readonly unknown[] = Abi,\n  TEventName extends string | undefined = undefined,\n  TArgs extends\n    | MaybeExtractEventArgsFromAbi<TAbi, TEventName>\n    | undefined = undefined,\n  TStrict extends boolean | undefined = undefined,\n  TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n> = {\n  address?: Address | Address[]\n  abi: TAbi\n  eventName?: InferEventName<TAbi, TEventName>\n  fromBlock?: TFromBlock | BlockNumber | BlockTag\n  /**\n   * Whether or not the logs must match the indexed/non-indexed arguments in the event ABI item.\n   * @default false\n   */\n  strict?: TStrict\n  toBlock?: TToBlock | BlockNumber | BlockTag\n} & (undefined extends TEventName\n  ? {\n      args?: never\n    }\n  : MaybeExtractEventArgsFromAbi<\n        TAbi,\n        TEventName\n      > extends infer TEventFilterArgs\n    ? {\n        args?:\n          | TEventFilterArgs\n          | (TArgs extends TEventFilterArgs ? TArgs : never)\n      }\n    : {\n        args?: never\n      })\n\nexport type CreateContractEventFilterReturnType<\n  TAbi extends Abi | readonly unknown[] = Abi,\n  TEventName extends string | undefined = undefined,\n  TArgs extends\n    | MaybeExtractEventArgsFromAbi<TAbi, TEventName>\n    | undefined = undefined,\n  TStrict extends boolean | undefined = undefined,\n  TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n> = Filter<'event', TAbi, TEventName, TArgs, TStrict, TFromBlock, TToBlock>\n\nexport type CreateContractEventFilterErrorType =\n  | EncodeEventTopicsErrorType\n  | RequestErrorType\n  | NumberToHexErrorType\n  | ErrorType\n\n/**\n * Creates a Filter to retrieve event logs that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges.html) or [`getFilterLogs`](https://viem.sh/docs/actions/public/getFilterLogs.html).\n *\n * - Docs: https://viem.sh/docs/contract/createContractEventFilter.html\n *\n * @param client - Client to use\n * @param parameters - {@link CreateContractEventFilterParameters}\n * @returns [`Filter`](https://viem.sh/docs/glossary/types.html#filter). {@link CreateContractEventFilterReturnType}\n *\n * @example\n * import { createPublicClient, http, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createContractEventFilter } from 'viem/contract'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const filter = await createContractEventFilter(client, {\n *   abi: parseAbi(['event Transfer(address indexed, address indexed, uint256)']),\n * })\n */\nexport async function createContractEventFilter<\n  TChain extends Chain | undefined,\n  const TAbi extends Abi | readonly unknown[],\n  TEventName extends string | undefined,\n  TArgs extends MaybeExtractEventArgsFromAbi<TAbi, TEventName> | undefined,\n  TStrict extends boolean | undefined = undefined,\n  TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n>(\n  client: Client<Transport, TChain>,\n  {\n    address,\n    abi,\n    args,\n    eventName,\n    fromBlock,\n    strict,\n    toBlock,\n  }: CreateContractEventFilterParameters<\n    TAbi,\n    TEventName,\n    TArgs,\n    TStrict,\n    TFromBlock,\n    TToBlock\n  >,\n): Promise<\n  CreateContractEventFilterReturnType<\n    TAbi,\n    TEventName,\n    TArgs,\n    TStrict,\n    TFromBlock,\n    TToBlock\n  >\n> {\n  const getRequest = createFilterRequestScope(client, {\n    method: 'eth_newFilter',\n  })\n\n  const topics = eventName\n    ? encodeEventTopics({\n        abi,\n        args,\n        eventName,\n      } as unknown as EncodeEventTopicsParameters)\n    : undefined\n  const id: Hex = await client.request({\n    method: 'eth_newFilter',\n    params: [\n      {\n        address,\n        fromBlock:\n          typeof fromBlock === 'bigint' ? numberToHex(fromBlock) : fromBlock,\n        toBlock: typeof toBlock === 'bigint' ? numberToHex(toBlock) : toBlock,\n        topics,\n      },\n    ],\n  })\n\n  return {\n    abi,\n    args,\n    eventName,\n    id,\n    request: getRequest(id),\n    strict,\n    type: 'event',\n  } as unknown as CreateContractEventFilterReturnType<\n    TAbi,\n    TEventName,\n    TArgs,\n    TStrict,\n    TFromBlock,\n    TToBlock\n  >\n}\n"],"mappings":";;;;;;AAaA,MAAAA,sBAAA,GAAAC,OAAA;AAMA,MAAAC,UAAA,GAAAD,OAAA;AAIA,MAAAE,6BAAA,GAAAF,OAAA;AA8EO,eAAeG,yBAAyBA,CAS7CC,MAAiC,EACjC;EACEC,OAAO;EACPC,GAAG;EACHC,IAAI;EACJC,SAAS;EACTC,SAAS;EACTC,MAAM;EACNC;AAAO,CAQR;EAWD,MAAMC,UAAU,GAAG,IAAAV,6BAAA,CAAAW,wBAAwB,EAACT,MAAM,EAAE;IAClDU,MAAM,EAAE;GACT,CAAC;EAEF,MAAMC,MAAM,GAAGP,SAAS,GACpB,IAAAT,sBAAA,CAAAiB,iBAAiB,EAAC;IAChBV,GAAG;IACHC,IAAI;IACJC;GACyC,CAAC,GAC5CS,SAAS;EACb,MAAMC,EAAE,GAAQ,MAAMd,MAAM,CAACe,OAAO,CAAC;IACnCL,MAAM,EAAE,eAAe;IACvBM,MAAM,EAAE,CACN;MACEf,OAAO;MACPI,SAAS,EACP,OAAOA,SAAS,KAAK,QAAQ,GAAG,IAAAR,UAAA,CAAAoB,WAAW,EAACZ,SAAS,CAAC,GAAGA,SAAS;MACpEE,OAAO,EAAE,OAAOA,OAAO,KAAK,QAAQ,GAAG,IAAAV,UAAA,CAAAoB,WAAW,EAACV,OAAO,CAAC,GAAGA,OAAO;MACrEI;KACD;GAEJ,CAAC;EAEF,OAAO;IACLT,GAAG;IACHC,IAAI;IACJC,SAAS;IACTU,EAAE;IACFC,OAAO,EAAEP,UAAU,CAACM,EAAE,CAAC;IACvBR,MAAM;IACNY,IAAI,EAAE;GAQP;AACH;AA5EAC,OAAA,CAAApB,yBAAA,GAAAA,yBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}