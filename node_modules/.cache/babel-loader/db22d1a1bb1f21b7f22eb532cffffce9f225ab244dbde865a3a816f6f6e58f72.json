{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.concatHex = exports.concatBytes = exports.concat = void 0;\nfunction concat(values) {\n  if (typeof values[0] === 'string') return concatHex(values);\n  return concatBytes(values);\n}\nexports.concat = concat;\nfunction concatBytes(values) {\n  let length = 0;\n  for (const arr of values) {\n    length += arr.length;\n  }\n  const result = new Uint8Array(length);\n  let offset = 0;\n  for (const arr of values) {\n    result.set(arr, offset);\n    offset += arr.length;\n  }\n  return result;\n}\nexports.concatBytes = concatBytes;\nfunction concatHex(values) {\n  return `0x${values.reduce((acc, x) => acc + x.replace('0x', ''), '')}`;\n}\nexports.concatHex = concatHex;","map":{"version":3,"names":["concat","values","concatHex","concatBytes","exports","length","arr","result","Uint8Array","offset","set","reduce","acc","x","replace"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/data/concat.ts"],"sourcesContent":["import type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\n\nexport type ConcatReturnType<TValue extends Hex | ByteArray> =\n  TValue extends Hex ? Hex : ByteArray\n\nexport type ConcatErrorType =\n  | ConcatBytesErrorType\n  | ConcatHexErrorType\n  | ErrorType\n\nexport function concat<TValue extends Hex | ByteArray>(\n  values: readonly TValue[],\n): ConcatReturnType<TValue> {\n  if (typeof values[0] === 'string')\n    return concatHex(values as readonly Hex[]) as ConcatReturnType<TValue>\n  return concatBytes(values as readonly ByteArray[]) as ConcatReturnType<TValue>\n}\n\nexport type ConcatBytesErrorType = ErrorType\n\nexport function concatBytes(values: readonly ByteArray[]): ByteArray {\n  let length = 0\n  for (const arr of values) {\n    length += arr.length\n  }\n  const result = new Uint8Array(length)\n  let offset = 0\n  for (const arr of values) {\n    result.set(arr, offset)\n    offset += arr.length\n  }\n  return result\n}\n\nexport type ConcatHexErrorType = ErrorType\n\nexport function concatHex(values: readonly Hex[]): Hex {\n  return `0x${(values as Hex[]).reduce(\n    (acc, x) => acc + x.replace('0x', ''),\n    '',\n  )}`\n}\n"],"mappings":";;;;;;AAWA,SAAgBA,MAAMA,CACpBC,MAAyB;EAEzB,IAAI,OAAOA,MAAM,CAAC,CAAC,CAAC,KAAK,QAAQ,EAC/B,OAAOC,SAAS,CAACD,MAAwB,CAA6B;EACxE,OAAOE,WAAW,CAACF,MAA8B,CAA6B;AAChF;AANAG,OAAA,CAAAJ,MAAA,GAAAA,MAAA;AAUA,SAAgBG,WAAWA,CAACF,MAA4B;EACtD,IAAII,MAAM,GAAG,CAAC;EACd,KAAK,MAAMC,GAAG,IAAIL,MAAM,EAAE;IACxBI,MAAM,IAAIC,GAAG,CAACD,MAAM;;EAEtB,MAAME,MAAM,GAAG,IAAIC,UAAU,CAACH,MAAM,CAAC;EACrC,IAAII,MAAM,GAAG,CAAC;EACd,KAAK,MAAMH,GAAG,IAAIL,MAAM,EAAE;IACxBM,MAAM,CAACG,GAAG,CAACJ,GAAG,EAAEG,MAAM,CAAC;IACvBA,MAAM,IAAIH,GAAG,CAACD,MAAM;;EAEtB,OAAOE,MAAM;AACf;AAZAH,OAAA,CAAAD,WAAA,GAAAA,WAAA;AAgBA,SAAgBD,SAASA,CAACD,MAAsB;EAC9C,OAAO,KAAMA,MAAgB,CAACU,MAAM,CAClC,CAACC,GAAG,EAAEC,CAAC,KAAKD,GAAG,GAAGC,CAAC,CAACC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,EACrC,EAAE,CACH,EAAE;AACL;AALAV,OAAA,CAAAF,SAAA,GAAAA,SAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}