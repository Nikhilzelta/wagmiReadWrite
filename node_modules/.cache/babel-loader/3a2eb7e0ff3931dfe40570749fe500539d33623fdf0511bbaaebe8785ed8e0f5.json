{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.watchBlockNumber = void 0;\nconst fromHex_js_1 = require(\"../../utils/encoding/fromHex.js\");\nconst getAction_js_1 = require(\"../../utils/getAction.js\");\nconst observe_js_1 = require(\"../../utils/observe.js\");\nconst poll_js_1 = require(\"../../utils/poll.js\");\nconst stringify_js_1 = require(\"../../utils/stringify.js\");\nconst getBlockNumber_js_1 = require(\"./getBlockNumber.js\");\nfunction watchBlockNumber(client, {\n  emitOnBegin = false,\n  emitMissed = false,\n  onBlockNumber,\n  onError,\n  poll: poll_,\n  pollingInterval = client.pollingInterval\n}) {\n  const enablePolling = typeof poll_ !== 'undefined' ? poll_ : client.transport.type !== 'webSocket';\n  let prevBlockNumber;\n  const pollBlockNumber = () => {\n    const observerId = (0, stringify_js_1.stringify)(['watchBlockNumber', client.uid, emitOnBegin, emitMissed, pollingInterval]);\n    return (0, observe_js_1.observe)(observerId, {\n      onBlockNumber,\n      onError\n    }, emit => (0, poll_js_1.poll)(async () => {\n      try {\n        const blockNumber = await (0, getAction_js_1.getAction)(client, getBlockNumber_js_1.getBlockNumber, 'getBlockNumber')({\n          cacheTime: 0\n        });\n        if (prevBlockNumber) {\n          if (blockNumber === prevBlockNumber) return;\n          if (blockNumber - prevBlockNumber > 1 && emitMissed) {\n            for (let i = prevBlockNumber + 1n; i < blockNumber; i++) {\n              emit.onBlockNumber(i, prevBlockNumber);\n              prevBlockNumber = i;\n            }\n          }\n        }\n        if (!prevBlockNumber || blockNumber > prevBlockNumber) {\n          emit.onBlockNumber(blockNumber, prevBlockNumber);\n          prevBlockNumber = blockNumber;\n        }\n      } catch (err) {\n        emit.onError?.(err);\n      }\n    }, {\n      emitOnBegin,\n      interval: pollingInterval\n    }));\n  };\n  const subscribeBlockNumber = () => {\n    let active = true;\n    let unsubscribe = () => active = false;\n    (async () => {\n      try {\n        const {\n          unsubscribe: unsubscribe_\n        } = await client.transport.subscribe({\n          params: ['newHeads'],\n          onData(data) {\n            if (!active) return;\n            const blockNumber = (0, fromHex_js_1.hexToBigInt)(data.result?.number);\n            onBlockNumber(blockNumber, prevBlockNumber);\n            prevBlockNumber = blockNumber;\n          },\n          onError(error) {\n            onError?.(error);\n          }\n        });\n        unsubscribe = unsubscribe_;\n        if (!active) unsubscribe();\n      } catch (err) {\n        onError?.(err);\n      }\n    })();\n    return unsubscribe;\n  };\n  return enablePolling ? pollBlockNumber() : subscribeBlockNumber();\n}\nexports.watchBlockNumber = watchBlockNumber;","map":{"version":3,"names":["fromHex_js_1","require","getAction_js_1","observe_js_1","poll_js_1","stringify_js_1","getBlockNumber_js_1","watchBlockNumber","client","emitOnBegin","emitMissed","onBlockNumber","onError","poll","poll_","pollingInterval","enablePolling","transport","type","prevBlockNumber","pollBlockNumber","observerId","stringify","uid","observe","emit","blockNumber","getAction","getBlockNumber","cacheTime","i","err","interval","subscribeBlockNumber","active","unsubscribe","unsubscribe_","subscribe","params","onData","data","hexToBigInt","result","number","error","exports"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/public/watchBlockNumber.ts"],"sourcesContent":["import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { GetTransportConfig } from '../../types/transport.js'\nimport { hexToBigInt } from '../../utils/encoding/fromHex.js'\nimport { getAction } from '../../utils/getAction.js'\nimport { observe } from '../../utils/observe.js'\nimport { type PollErrorType, poll } from '../../utils/poll.js'\nimport { stringify } from '../../utils/stringify.js'\n\nimport {\n  type GetBlockNumberReturnType,\n  getBlockNumber,\n} from './getBlockNumber.js'\n\nexport type OnBlockNumberParameter = GetBlockNumberReturnType\nexport type OnBlockNumberFn = (\n  blockNumber: OnBlockNumberParameter,\n  prevBlockNumber: OnBlockNumberParameter | undefined,\n) => void\n\nexport type PollOptions = {\n  /** Whether or not to emit the missed block numbers to the callback. */\n  emitMissed?: boolean\n  /** Whether or not to emit the latest block number to the callback when the subscription opens. */\n  emitOnBegin?: boolean\n  /** Polling frequency (in ms). Defaults to Client's pollingInterval config. */\n  pollingInterval?: number\n}\n\nexport type WatchBlockNumberParameters<\n  TTransport extends Transport = Transport,\n> = {\n  /** The callback to call when a new block number is received. */\n  onBlockNumber: OnBlockNumberFn\n  /** The callback to call when an error occurred when trying to get for a new block. */\n  onError?: (error: Error) => void\n} & (GetTransportConfig<TTransport>['type'] extends 'webSocket'\n  ?\n      | {\n          emitMissed?: never\n          emitOnBegin?: never\n          /** Whether or not the WebSocket Transport should poll the JSON-RPC, rather than using `eth_subscribe`. */\n          poll?: false\n          pollingInterval?: never\n        }\n      | (PollOptions & { poll: true })\n  : PollOptions & { poll?: true })\n\nexport type WatchBlockNumberReturnType = () => void\n\nexport type WatchBlockNumberErrorType = PollErrorType | ErrorType\n\n/**\n * Watches and returns incoming block numbers.\n *\n * - Docs: https://viem.sh/docs/actions/public/watchBlockNumber.html\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/blocks/watching-blocks\n * - JSON-RPC Methods:\n *   - When `poll: true`, calls [`eth_blockNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_blocknumber) on a polling interval.\n *   - When `poll: false` & WebSocket Transport, uses a WebSocket subscription via [`eth_subscribe`](https://docs.alchemy.com/reference/eth-subscribe-polygon) and the `\"newHeads\"` event.\n *\n * @param client - Client to use\n * @param parameters - {@link WatchBlockNumberParameters}\n * @returns A function that can be invoked to stop watching for new block numbers. {@link WatchBlockNumberReturnType}\n *\n * @example\n * import { createPublicClient, watchBlockNumber, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const unwatch = watchBlockNumber(client, {\n *   onBlockNumber: (blockNumber) => console.log(blockNumber),\n * })\n */\nexport function watchBlockNumber<\n  TChain extends Chain | undefined,\n  TTransport extends Transport,\n>(\n  client: Client<TTransport, TChain>,\n  {\n    emitOnBegin = false,\n    emitMissed = false,\n    onBlockNumber,\n    onError,\n    poll: poll_,\n    pollingInterval = client.pollingInterval,\n  }: WatchBlockNumberParameters<TTransport>,\n): WatchBlockNumberReturnType {\n  const enablePolling =\n    typeof poll_ !== 'undefined' ? poll_ : client.transport.type !== 'webSocket'\n\n  let prevBlockNumber: GetBlockNumberReturnType | undefined\n\n  const pollBlockNumber = () => {\n    const observerId = stringify([\n      'watchBlockNumber',\n      client.uid,\n      emitOnBegin,\n      emitMissed,\n      pollingInterval,\n    ])\n\n    return observe(observerId, { onBlockNumber, onError }, (emit) =>\n      poll(\n        async () => {\n          try {\n            const blockNumber = await getAction(\n              client,\n              getBlockNumber,\n              'getBlockNumber',\n            )({ cacheTime: 0 })\n\n            if (prevBlockNumber) {\n              // If the current block number is the same as the previous,\n              // we can skip.\n              if (blockNumber === prevBlockNumber) return\n\n              // If we have missed out on some previous blocks, and the\n              // `emitMissed` flag is truthy, let's emit those blocks.\n              if (blockNumber - prevBlockNumber > 1 && emitMissed) {\n                for (let i = prevBlockNumber + 1n; i < blockNumber; i++) {\n                  emit.onBlockNumber(i, prevBlockNumber)\n                  prevBlockNumber = i\n                }\n              }\n            }\n\n            // If the next block number is greater than the previous,\n            // it is not in the past, and we can emit the new block number.\n            if (!prevBlockNumber || blockNumber > prevBlockNumber) {\n              emit.onBlockNumber(blockNumber, prevBlockNumber)\n              prevBlockNumber = blockNumber\n            }\n          } catch (err) {\n            emit.onError?.(err as Error)\n          }\n        },\n        {\n          emitOnBegin,\n          interval: pollingInterval,\n        },\n      ),\n    )\n  }\n\n  const subscribeBlockNumber = () => {\n    let active = true\n    let unsubscribe = () => (active = false)\n    ;(async () => {\n      try {\n        const { unsubscribe: unsubscribe_ } = await client.transport.subscribe({\n          params: ['newHeads'],\n          onData(data: any) {\n            if (!active) return\n            const blockNumber = hexToBigInt(data.result?.number)\n            onBlockNumber(blockNumber, prevBlockNumber)\n            prevBlockNumber = blockNumber\n          },\n          onError(error: Error) {\n            onError?.(error)\n          },\n        })\n        unsubscribe = unsubscribe_\n        if (!active) unsubscribe()\n      } catch (err) {\n        onError?.(err as Error)\n      }\n    })()\n    return unsubscribe\n  }\n\n  return enablePolling ? pollBlockNumber() : subscribeBlockNumber()\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}