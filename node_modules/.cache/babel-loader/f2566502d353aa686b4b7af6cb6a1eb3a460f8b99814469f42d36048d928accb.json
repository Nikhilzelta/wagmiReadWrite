{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getLogs = void 0;\nconst abi_js_1 = require(\"../../errors/abi.js\");\nconst decodeEventLog_js_1 = require(\"../../utils/abi/decodeEventLog.js\");\nconst encodeEventTopics_js_1 = require(\"../../utils/abi/encodeEventTopics.js\");\nconst toHex_js_1 = require(\"../../utils/encoding/toHex.js\");\nconst log_js_1 = require(\"../../utils/formatters/log.js\");\nasync function getLogs(client, {\n  address,\n  blockHash,\n  fromBlock,\n  toBlock,\n  event,\n  events: events_,\n  args,\n  strict: strict_\n} = {}) {\n  const strict = strict_ ?? false;\n  const events = events_ ?? (event ? [event] : undefined);\n  let topics = [];\n  if (events) {\n    topics = [events.flatMap(event => (0, encodeEventTopics_js_1.encodeEventTopics)({\n      abi: [event],\n      eventName: event.name,\n      args\n    }))];\n    if (event) topics = topics[0];\n  }\n  let logs;\n  if (blockHash) {\n    logs = await client.request({\n      method: 'eth_getLogs',\n      params: [{\n        address,\n        topics,\n        blockHash\n      }]\n    });\n  } else {\n    logs = await client.request({\n      method: 'eth_getLogs',\n      params: [{\n        address,\n        topics,\n        fromBlock: typeof fromBlock === 'bigint' ? (0, toHex_js_1.numberToHex)(fromBlock) : fromBlock,\n        toBlock: typeof toBlock === 'bigint' ? (0, toHex_js_1.numberToHex)(toBlock) : toBlock\n      }]\n    });\n  }\n  return logs.map(log => {\n    try {\n      const {\n        eventName,\n        args\n      } = events ? (0, decodeEventLog_js_1.decodeEventLog)({\n        abi: events,\n        data: log.data,\n        topics: log.topics,\n        strict\n      }) : {\n        eventName: undefined,\n        args: undefined\n      };\n      return (0, log_js_1.formatLog)(log, {\n        args,\n        eventName: eventName\n      });\n    } catch (err) {\n      let eventName;\n      let isUnnamed;\n      if (err instanceof abi_js_1.DecodeLogDataMismatch || err instanceof abi_js_1.DecodeLogTopicsMismatch) {\n        if (strict) return;\n        eventName = err.abiItem.name;\n        isUnnamed = err.abiItem.inputs?.some(x => !('name' in x && x.name));\n      }\n      return (0, log_js_1.formatLog)(log, {\n        args: isUnnamed ? [] : {},\n        eventName\n      });\n    }\n  }).filter(Boolean);\n}\nexports.getLogs = getLogs;","map":{"version":3,"names":["abi_js_1","require","decodeEventLog_js_1","encodeEventTopics_js_1","toHex_js_1","log_js_1","getLogs","client","address","blockHash","fromBlock","toBlock","event","events","events_","args","strict","strict_","undefined","topics","flatMap","encodeEventTopics","abi","eventName","name","logs","request","method","params","numberToHex","map","log","decodeEventLog","data","formatLog","err","isUnnamed","DecodeLogDataMismatch","DecodeLogTopicsMismatch","abiItem","inputs","some","x","filter","Boolean","exports"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/public/getLogs.ts"],"sourcesContent":["import type { Abi, AbiEvent, Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport {\n  DecodeLogDataMismatch,\n  DecodeLogTopicsMismatch,\n} from '../../errors/abi.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockNumber, BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type {\n  MaybeAbiEventName,\n  MaybeExtractEventArgsFromAbi,\n} from '../../types/contract.js'\nimport type { Log } from '../../types/log.js'\nimport type { Hash, LogTopic } from '../../types/misc.js'\nimport type { RpcLog } from '../../types/rpc.js'\nimport {\n  type DecodeEventLogErrorType,\n  decodeEventLog,\n} from '../../utils/abi/decodeEventLog.js'\nimport {\n  type EncodeEventTopicsErrorType,\n  type EncodeEventTopicsParameters,\n  encodeEventTopics,\n} from '../../utils/abi/encodeEventTopics.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\nimport {\n  type FormatLogErrorType,\n  formatLog,\n} from '../../utils/formatters/log.js'\n\nexport type GetLogsParameters<\n  TAbiEvent extends AbiEvent | undefined = undefined,\n  TAbiEvents extends\n    | readonly AbiEvent[]\n    | readonly unknown[]\n    | undefined = TAbiEvent extends AbiEvent ? [TAbiEvent] : undefined,\n  TStrict extends boolean | undefined = undefined,\n  TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n  _EventName extends string | undefined = MaybeAbiEventName<TAbiEvent>,\n> = {\n  /** Address or list of addresses from which logs originated */\n  address?: Address | Address[]\n} & (\n  | {\n      event: TAbiEvent\n      events?: never\n      args?: MaybeExtractEventArgsFromAbi<TAbiEvents, _EventName>\n      /**\n       * Whether or not the logs must match the indexed/non-indexed arguments on `event`.\n       * @default false\n       */\n      strict?: TStrict\n    }\n  | {\n      event?: never\n      events: TAbiEvents\n      args?: never\n      /**\n       * Whether or not the logs must match the indexed/non-indexed arguments on `event`.\n       * @default false\n       */\n      strict?: TStrict\n    }\n  | {\n      event?: never\n      events?: never\n      args?: never\n      strict?: never\n    }\n) &\n  (\n    | {\n        /** Block number or tag after which to include logs */\n        fromBlock?: TFromBlock | BlockNumber | BlockTag\n        /** Block number or tag before which to include logs */\n        toBlock?: TToBlock | BlockNumber | BlockTag\n        blockHash?: never\n      }\n    | {\n        fromBlock?: never\n        toBlock?: never\n        /** Hash of block to include logs from */\n        blockHash?: Hash\n      }\n  )\n\nexport type GetLogsReturnType<\n  TAbiEvent extends AbiEvent | undefined = undefined,\n  TAbiEvents extends\n    | readonly AbiEvent[]\n    | readonly unknown[]\n    | undefined = TAbiEvent extends AbiEvent ? [TAbiEvent] : undefined,\n  TStrict extends boolean | undefined = undefined,\n  TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n  _EventName extends string | undefined = MaybeAbiEventName<TAbiEvent>,\n  _Pending extends boolean =\n    | (TFromBlock extends 'pending' ? true : false)\n    | (TToBlock extends 'pending' ? true : false),\n> = Log<bigint, number, _Pending, TAbiEvent, TStrict, TAbiEvents, _EventName>[]\n\nexport type GetLogsErrorType =\n  | DecodeEventLogErrorType\n  | EncodeEventTopicsErrorType\n  | FormatLogErrorType\n  | NumberToHexErrorType\n  | RequestErrorType\n  | ErrorType\n\n/**\n * Returns a list of event logs matching the provided parameters.\n *\n * - Docs: https://viem.sh/docs/actions/public/getLogs.html\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/filters-and-logs/event-logs\n * - JSON-RPC Methods: [`eth_getLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getlogs)\n *\n * @param client - Client to use\n * @param parameters - {@link GetLogsParameters}\n * @returns A list of event logs. {@link GetLogsReturnType}\n *\n * @example\n * import { createPublicClient, http, parseAbiItem } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getLogs } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const logs = await getLogs(client)\n */\nexport async function getLogs<\n  TChain extends Chain | undefined,\n  const TAbiEvent extends AbiEvent | undefined = undefined,\n  const TAbiEvents extends\n    | readonly AbiEvent[]\n    | readonly unknown[]\n    | undefined = TAbiEvent extends AbiEvent ? [TAbiEvent] : undefined,\n  TStrict extends boolean | undefined = undefined,\n  TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n>(\n  client: Client<Transport, TChain>,\n  {\n    address,\n    blockHash,\n    fromBlock,\n    toBlock,\n    event,\n    events: events_,\n    args,\n    strict: strict_,\n  }: GetLogsParameters<\n    TAbiEvent,\n    TAbiEvents,\n    TStrict,\n    TFromBlock,\n    TToBlock\n  > = {},\n): Promise<\n  GetLogsReturnType<TAbiEvent, TAbiEvents, TStrict, TFromBlock, TToBlock>\n> {\n  const strict = strict_ ?? false\n  const events = events_ ?? (event ? [event] : undefined)\n\n  let topics: LogTopic[] = []\n  if (events) {\n    topics = [\n      (events as AbiEvent[]).flatMap((event) =>\n        encodeEventTopics({\n          abi: [event],\n          eventName: (event as AbiEvent).name,\n          args,\n        } as EncodeEventTopicsParameters),\n      ),\n    ]\n    if (event) topics = topics[0] as LogTopic[]\n  }\n\n  let logs: RpcLog[]\n  if (blockHash) {\n    logs = await client.request({\n      method: 'eth_getLogs',\n      params: [{ address, topics, blockHash }],\n    })\n  } else {\n    logs = await client.request({\n      method: 'eth_getLogs',\n      params: [\n        {\n          address,\n          topics,\n          fromBlock:\n            typeof fromBlock === 'bigint' ? numberToHex(fromBlock) : fromBlock,\n          toBlock: typeof toBlock === 'bigint' ? numberToHex(toBlock) : toBlock,\n        },\n      ],\n    })\n  }\n\n  return logs\n    .map((log) => {\n      try {\n        const { eventName, args } = events\n          ? decodeEventLog({\n              abi: events as Abi,\n              data: log.data,\n              topics: log.topics as any,\n              strict,\n            })\n          : { eventName: undefined, args: undefined }\n        return formatLog(log, { args, eventName: eventName as string })\n      } catch (err) {\n        let eventName\n        let isUnnamed\n        if (\n          err instanceof DecodeLogDataMismatch ||\n          err instanceof DecodeLogTopicsMismatch\n        ) {\n          // If strict mode is on, and log data/topics do not match event definition, skip.\n          if (strict) return\n          eventName = err.abiItem.name\n          isUnnamed = err.abiItem.inputs?.some((x) => !('name' in x && x.name))\n        }\n\n        // Set args to empty if there is an error decoding (e.g. indexed/non-indexed params mismatch).\n        return formatLog(log, { args: isUnnamed ? [] : {}, eventName })\n      }\n    })\n    .filter(Boolean) as unknown as GetLogsReturnType<\n    TAbiEvent,\n    TAbiEvents,\n    TStrict,\n    TFromBlock,\n    TToBlock\n  >\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}