{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.estimateContractGas = void 0;\nconst parseAccount_js_1 = require(\"../../accounts/utils/parseAccount.js\");\nconst encodeFunctionData_js_1 = require(\"../../utils/abi/encodeFunctionData.js\");\nconst getContractError_js_1 = require(\"../../utils/errors/getContractError.js\");\nconst getAction_js_1 = require(\"../../utils/getAction.js\");\nconst estimateGas_js_1 = require(\"./estimateGas.js\");\nasync function estimateContractGas(client, {\n  abi,\n  address,\n  args,\n  functionName,\n  ...request\n}) {\n  const data = (0, encodeFunctionData_js_1.encodeFunctionData)({\n    abi,\n    args,\n    functionName\n  });\n  try {\n    const gas = await (0, getAction_js_1.getAction)(client, estimateGas_js_1.estimateGas, 'estimateGas')({\n      data,\n      to: address,\n      ...request\n    });\n    return gas;\n  } catch (err) {\n    const account = request.account ? (0, parseAccount_js_1.parseAccount)(request.account) : undefined;\n    throw (0, getContractError_js_1.getContractError)(err, {\n      abi: abi,\n      address,\n      args,\n      docsPath: '/docs/contract/estimateContractGas',\n      functionName,\n      sender: account?.address\n    });\n  }\n}\nexports.estimateContractGas = estimateContractGas;","map":{"version":3,"names":["parseAccount_js_1","require","encodeFunctionData_js_1","getContractError_js_1","getAction_js_1","estimateGas_js_1","estimateContractGas","client","abi","address","args","functionName","request","data","encodeFunctionData","gas","getAction","estimateGas","to","err","account","parseAccount","undefined","getContractError","docsPath","sender","exports"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/public/estimateContractGas.ts"],"sourcesContent":["import type { Abi } from 'abitype'\n\nimport type { Account } from '../../accounts/types.js'\nimport {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../../accounts/utils/parseAccount.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { BaseError } from '../../errors/base.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { ContractFunctionConfig, GetValue } from '../../types/contract.js'\nimport type { UnionOmit } from '../../types/utils.js'\nimport {\n  type EncodeFunctionDataErrorType,\n  type EncodeFunctionDataParameters,\n  encodeFunctionData,\n} from '../../utils/abi/encodeFunctionData.js'\nimport {\n  type GetContractErrorReturnType,\n  getContractError,\n} from '../../utils/errors/getContractError.js'\nimport { getAction } from '../../utils/getAction.js'\nimport {\n  type EstimateGasErrorType,\n  type EstimateGasParameters,\n  estimateGas,\n} from './estimateGas.js'\n\nexport type EstimateContractGasParameters<\n  TAbi extends Abi | readonly unknown[] = Abi,\n  TFunctionName extends string = string,\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends Account | undefined = undefined,\n> = ContractFunctionConfig<TAbi, TFunctionName, 'payable' | 'nonpayable'> &\n  UnionOmit<EstimateGasParameters<TChain, TAccount>, 'data' | 'to' | 'value'> &\n  GetValue<\n    TAbi,\n    TFunctionName,\n    EstimateGasParameters<TChain> extends EstimateGasParameters\n      ? EstimateGasParameters<TChain>['value']\n      : EstimateGasParameters['value']\n  >\n\nexport type EstimateContractGasReturnType = bigint\n\nexport type EstimateContractGasErrorType = GetContractErrorReturnType<\n  EncodeFunctionDataErrorType | EstimateGasErrorType | ParseAccountErrorType\n>\n\n/**\n * Estimates the gas required to successfully execute a contract write function call.\n *\n * - Docs: https://viem.sh/docs/contract/estimateContractGas.html\n *\n * Internally, uses a [Public Client](https://viem.sh/docs/clients/public.html) to call the [`estimateGas` action](https://viem.sh/docs/actions/public/estimateGas.html) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData.html).\n *\n * @param client - Client to use\n * @param parameters - {@link EstimateContractGasParameters}\n * @returns The gas estimate (in wei). {@link EstimateContractGasReturnType}\n *\n * @example\n * import { createPublicClient, http, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { estimateContractGas } from 'viem/contract'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const gas = await estimateContractGas(client, {\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *   abi: parseAbi(['function mint() public']),\n *   functionName: 'mint',\n *   account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n * })\n */\nexport async function estimateContractGas<\n  const TAbi extends Abi | readonly unknown[],\n  TFunctionName extends string,\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined = undefined,\n>(\n  client: Client<Transport, TChain, TAccount>,\n  {\n    abi,\n    address,\n    args,\n    functionName,\n    ...request\n  }: EstimateContractGasParameters<TAbi, TFunctionName, TChain, TAccount>,\n): Promise<EstimateContractGasReturnType> {\n  const data = encodeFunctionData({\n    abi,\n    args,\n    functionName,\n  } as unknown as EncodeFunctionDataParameters<TAbi, TFunctionName>)\n  try {\n    const gas = await getAction(\n      client,\n      estimateGas,\n      'estimateGas',\n    )({\n      data,\n      to: address,\n      ...request,\n    } as unknown as EstimateGasParameters<TChain>)\n    return gas\n  } catch (err) {\n    const account = request.account ? parseAccount(request.account) : undefined\n    throw getContractError(err as BaseError, {\n      abi: abi as Abi,\n      address,\n      args,\n      docsPath: '/docs/contract/estimateContractGas',\n      functionName,\n      sender: account?.address,\n    })\n  }\n}\n"],"mappings":";;;;;;AAGA,MAAAA,iBAAA,GAAAC,OAAA;AAUA,MAAAC,uBAAA,GAAAD,OAAA;AAKA,MAAAE,qBAAA,GAAAF,OAAA;AAIA,MAAAG,cAAA,GAAAH,OAAA;AACA,MAAAI,gBAAA,GAAAJ,OAAA;AAsDO,eAAeK,mBAAmBA,CAMvCC,MAA2C,EAC3C;EACEC,GAAG;EACHC,OAAO;EACPC,IAAI;EACJC,YAAY;EACZ,GAAGC;AAAO,CAC2D;EAEvE,MAAMC,IAAI,GAAG,IAAAX,uBAAA,CAAAY,kBAAkB,EAAC;IAC9BN,GAAG;IACHE,IAAI;IACJC;GAC+D,CAAC;EAClE,IAAI;IACF,MAAMI,GAAG,GAAG,MAAM,IAAAX,cAAA,CAAAY,SAAS,EACzBT,MAAM,EACNF,gBAAA,CAAAY,WAAW,EACX,aAAa,CACd,CAAC;MACAJ,IAAI;MACJK,EAAE,EAAET,OAAO;MACX,GAAGG;KACwC,CAAC;IAC9C,OAAOG,GAAG;GACX,CAAC,OAAOI,GAAG,EAAE;IACZ,MAAMC,OAAO,GAAGR,OAAO,CAACQ,OAAO,GAAG,IAAApB,iBAAA,CAAAqB,YAAY,EAACT,OAAO,CAACQ,OAAO,CAAC,GAAGE,SAAS;IAC3E,MAAM,IAAAnB,qBAAA,CAAAoB,gBAAgB,EAACJ,GAAgB,EAAE;MACvCX,GAAG,EAAEA,GAAU;MACfC,OAAO;MACPC,IAAI;MACJc,QAAQ,EAAE,oCAAoC;MAC9Cb,YAAY;MACZc,MAAM,EAAEL,OAAO,EAAEX;KAClB,CAAC;;AAEN;AA1CAiB,OAAA,CAAApB,mBAAA,GAAAA,mBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}