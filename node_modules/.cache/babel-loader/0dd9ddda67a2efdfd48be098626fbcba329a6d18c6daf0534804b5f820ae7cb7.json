{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getArrayComponents = exports.encodeAbiParameters = void 0;\nconst abi_js_1 = require(\"../../errors/abi.js\");\nconst address_js_1 = require(\"../../errors/address.js\");\nconst isAddress_js_1 = require(\"../address/isAddress.js\");\nconst concat_js_1 = require(\"../data/concat.js\");\nconst pad_js_1 = require(\"../data/pad.js\");\nconst size_js_1 = require(\"../data/size.js\");\nconst slice_js_1 = require(\"../data/slice.js\");\nconst toHex_js_1 = require(\"../encoding/toHex.js\");\nfunction encodeAbiParameters(params, values) {\n  if (params.length !== values.length) throw new abi_js_1.AbiEncodingLengthMismatchError({\n    expectedLength: params.length,\n    givenLength: values.length\n  });\n  const preparedParams = prepareParams({\n    params: params,\n    values\n  });\n  const data = encodeParams(preparedParams);\n  if (data.length === 0) return '0x';\n  return data;\n}\nexports.encodeAbiParameters = encodeAbiParameters;\nfunction prepareParams({\n  params,\n  values\n}) {\n  const preparedParams = [];\n  for (let i = 0; i < params.length; i++) {\n    preparedParams.push(prepareParam({\n      param: params[i],\n      value: values[i]\n    }));\n  }\n  return preparedParams;\n}\nfunction prepareParam({\n  param,\n  value\n}) {\n  const arrayComponents = getArrayComponents(param.type);\n  if (arrayComponents) {\n    const [length, type] = arrayComponents;\n    return encodeArray(value, {\n      length,\n      param: {\n        ...param,\n        type\n      }\n    });\n  }\n  if (param.type === 'tuple') {\n    return encodeTuple(value, {\n      param: param\n    });\n  }\n  if (param.type === 'address') {\n    return encodeAddress(value);\n  }\n  if (param.type === 'bool') {\n    return encodeBool(value);\n  }\n  if (param.type.startsWith('uint') || param.type.startsWith('int')) {\n    const signed = param.type.startsWith('int');\n    return encodeNumber(value, {\n      signed\n    });\n  }\n  if (param.type.startsWith('bytes')) {\n    return encodeBytes(value, {\n      param\n    });\n  }\n  if (param.type === 'string') {\n    return encodeString(value);\n  }\n  throw new abi_js_1.InvalidAbiEncodingTypeError(param.type, {\n    docsPath: '/docs/contract/encodeAbiParameters'\n  });\n}\nfunction encodeParams(preparedParams) {\n  let staticSize = 0;\n  for (let i = 0; i < preparedParams.length; i++) {\n    const {\n      dynamic,\n      encoded\n    } = preparedParams[i];\n    if (dynamic) staticSize += 32;else staticSize += (0, size_js_1.size)(encoded);\n  }\n  const staticParams = [];\n  const dynamicParams = [];\n  let dynamicSize = 0;\n  for (let i = 0; i < preparedParams.length; i++) {\n    const {\n      dynamic,\n      encoded\n    } = preparedParams[i];\n    if (dynamic) {\n      staticParams.push((0, toHex_js_1.numberToHex)(staticSize + dynamicSize, {\n        size: 32\n      }));\n      dynamicParams.push(encoded);\n      dynamicSize += (0, size_js_1.size)(encoded);\n    } else {\n      staticParams.push(encoded);\n    }\n  }\n  return (0, concat_js_1.concat)([...staticParams, ...dynamicParams]);\n}\nfunction encodeAddress(value) {\n  if (!(0, isAddress_js_1.isAddress)(value)) throw new address_js_1.InvalidAddressError({\n    address: value\n  });\n  return {\n    dynamic: false,\n    encoded: (0, pad_js_1.padHex)(value.toLowerCase())\n  };\n}\nfunction encodeArray(value, {\n  length,\n  param\n}) {\n  const dynamic = length === null;\n  if (!Array.isArray(value)) throw new abi_js_1.InvalidArrayError(value);\n  if (!dynamic && value.length !== length) throw new abi_js_1.AbiEncodingArrayLengthMismatchError({\n    expectedLength: length,\n    givenLength: value.length,\n    type: `${param.type}[${length}]`\n  });\n  let dynamicChild = false;\n  const preparedParams = [];\n  for (let i = 0; i < value.length; i++) {\n    const preparedParam = prepareParam({\n      param,\n      value: value[i]\n    });\n    if (preparedParam.dynamic) dynamicChild = true;\n    preparedParams.push(preparedParam);\n  }\n  if (dynamic || dynamicChild) {\n    const data = encodeParams(preparedParams);\n    if (dynamic) {\n      const length = (0, toHex_js_1.numberToHex)(preparedParams.length, {\n        size: 32\n      });\n      return {\n        dynamic: true,\n        encoded: preparedParams.length > 0 ? (0, concat_js_1.concat)([length, data]) : length\n      };\n    }\n    if (dynamicChild) return {\n      dynamic: true,\n      encoded: data\n    };\n  }\n  return {\n    dynamic: false,\n    encoded: (0, concat_js_1.concat)(preparedParams.map(({\n      encoded\n    }) => encoded))\n  };\n}\nfunction encodeBytes(value, {\n  param\n}) {\n  const [, paramSize] = param.type.split('bytes');\n  const bytesSize = (0, size_js_1.size)(value);\n  if (!paramSize) {\n    let value_ = value;\n    if (bytesSize % 32 !== 0) value_ = (0, pad_js_1.padHex)(value_, {\n      dir: 'right',\n      size: Math.ceil((value.length - 2) / 2 / 32) * 32\n    });\n    return {\n      dynamic: true,\n      encoded: (0, concat_js_1.concat)([(0, pad_js_1.padHex)((0, toHex_js_1.numberToHex)(bytesSize, {\n        size: 32\n      })), value_])\n    };\n  }\n  if (bytesSize !== parseInt(paramSize)) throw new abi_js_1.AbiEncodingBytesSizeMismatchError({\n    expectedSize: parseInt(paramSize),\n    value\n  });\n  return {\n    dynamic: false,\n    encoded: (0, pad_js_1.padHex)(value, {\n      dir: 'right'\n    })\n  };\n}\nfunction encodeBool(value) {\n  return {\n    dynamic: false,\n    encoded: (0, pad_js_1.padHex)((0, toHex_js_1.boolToHex)(value))\n  };\n}\nfunction encodeNumber(value, {\n  signed\n}) {\n  return {\n    dynamic: false,\n    encoded: (0, toHex_js_1.numberToHex)(value, {\n      size: 32,\n      signed\n    })\n  };\n}\nfunction encodeString(value) {\n  const hexValue = (0, toHex_js_1.stringToHex)(value);\n  const partsLength = Math.ceil((0, size_js_1.size)(hexValue) / 32);\n  const parts = [];\n  for (let i = 0; i < partsLength; i++) {\n    parts.push((0, pad_js_1.padHex)((0, slice_js_1.slice)(hexValue, i * 32, (i + 1) * 32), {\n      dir: 'right'\n    }));\n  }\n  return {\n    dynamic: true,\n    encoded: (0, concat_js_1.concat)([(0, pad_js_1.padHex)((0, toHex_js_1.numberToHex)((0, size_js_1.size)(hexValue), {\n      size: 32\n    })), ...parts])\n  };\n}\nfunction encodeTuple(value, {\n  param\n}) {\n  let dynamic = false;\n  const preparedParams = [];\n  for (let i = 0; i < param.components.length; i++) {\n    const param_ = param.components[i];\n    const index = Array.isArray(value) ? i : param_.name;\n    const preparedParam = prepareParam({\n      param: param_,\n      value: value[index]\n    });\n    preparedParams.push(preparedParam);\n    if (preparedParam.dynamic) dynamic = true;\n  }\n  return {\n    dynamic,\n    encoded: dynamic ? encodeParams(preparedParams) : (0, concat_js_1.concat)(preparedParams.map(({\n      encoded\n    }) => encoded))\n  };\n}\nfunction getArrayComponents(type) {\n  const matches = type.match(/^(.*)\\[(\\d+)?\\]$/);\n  return matches ? [matches[2] ? Number(matches[2]) : null, matches[1]] : undefined;\n}\nexports.getArrayComponents = getArrayComponents;","map":{"version":3,"names":["abi_js_1","require","address_js_1","isAddress_js_1","concat_js_1","pad_js_1","size_js_1","slice_js_1","toHex_js_1","encodeAbiParameters","params","values","length","AbiEncodingLengthMismatchError","expectedLength","givenLength","preparedParams","prepareParams","data","encodeParams","exports","i","push","prepareParam","param","value","arrayComponents","getArrayComponents","type","encodeArray","encodeTuple","encodeAddress","encodeBool","startsWith","signed","encodeNumber","encodeBytes","encodeString","InvalidAbiEncodingTypeError","docsPath","staticSize","dynamic","encoded","size","staticParams","dynamicParams","dynamicSize","numberToHex","concat","isAddress","InvalidAddressError","address","padHex","toLowerCase","Array","isArray","InvalidArrayError","AbiEncodingArrayLengthMismatchError","dynamicChild","preparedParam","map","paramSize","split","bytesSize","value_","dir","Math","ceil","parseInt","AbiEncodingBytesSizeMismatchError","expectedSize","boolToHex","hexValue","stringToHex","partsLength","parts","slice","components","param_","index","name","matches","match","Number","undefined"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/abi/encodeAbiParameters.ts"],"sourcesContent":["import type {\n  AbiParameter,\n  AbiParameterToPrimitiveType,\n  AbiParametersToPrimitiveTypes,\n} from 'abitype'\n\nimport {\n  AbiEncodingArrayLengthMismatchError,\n  type AbiEncodingArrayLengthMismatchErrorType,\n  AbiEncodingBytesSizeMismatchError,\n  type AbiEncodingBytesSizeMismatchErrorType,\n  AbiEncodingLengthMismatchError,\n  type AbiEncodingLengthMismatchErrorType,\n  InvalidAbiEncodingTypeError,\n  type InvalidAbiEncodingTypeErrorType,\n  InvalidArrayError,\n  type InvalidArrayErrorType,\n} from '../../errors/abi.js'\nimport {\n  InvalidAddressError,\n  type InvalidAddressErrorType,\n} from '../../errors/address.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hex } from '../../types/misc.js'\nimport { type IsAddressErrorType, isAddress } from '../address/isAddress.js'\nimport { type ConcatErrorType, concat } from '../data/concat.js'\nimport { type PadHexErrorType, padHex } from '../data/pad.js'\nimport { type SizeErrorType, size } from '../data/size.js'\nimport { type SliceErrorType, slice } from '../data/slice.js'\nimport {\n  type BoolToHexErrorType,\n  type NumberToHexErrorType,\n  type StringToHexErrorType,\n  boolToHex,\n  numberToHex,\n  stringToHex,\n} from '../encoding/toHex.js'\n\nexport type EncodeAbiParametersReturnType = Hex\n\nexport type EncodeAbiParametersErrorType =\n  | AbiEncodingLengthMismatchErrorType\n  | PrepareParamsErrorType\n  | EncodeParamsErrorType\n  | ErrorType\n\n/**\n * @description Encodes a list of primitive values into an ABI-encoded hex value.\n */\nexport function encodeAbiParameters<\n  const TParams extends readonly AbiParameter[] | readonly unknown[],\n>(\n  params: TParams,\n  values: TParams extends readonly AbiParameter[]\n    ? AbiParametersToPrimitiveTypes<TParams>\n    : never,\n): EncodeAbiParametersReturnType {\n  if (params.length !== values.length)\n    throw new AbiEncodingLengthMismatchError({\n      expectedLength: params.length as number,\n      givenLength: values.length,\n    })\n  // Prepare the parameters to determine dynamic types to encode.\n  const preparedParams = prepareParams({\n    params: params as readonly AbiParameter[],\n    values,\n  })\n  const data = encodeParams(preparedParams)\n  if (data.length === 0) return '0x'\n  return data\n}\n\n/////////////////////////////////////////////////////////////////\n\ntype PreparedParam = { dynamic: boolean; encoded: Hex }\n\ntype TupleAbiParameter = AbiParameter & { components: readonly AbiParameter[] }\ntype Tuple = AbiParameterToPrimitiveType<TupleAbiParameter>\n\nexport type PrepareParamsErrorType = ErrorType\n\nfunction prepareParams<const TParams extends readonly AbiParameter[]>({\n  params,\n  values,\n}: {\n  params: TParams\n  values: AbiParametersToPrimitiveTypes<TParams>\n}) {\n  const preparedParams: PreparedParam[] = []\n  for (let i = 0; i < params.length; i++) {\n    preparedParams.push(prepareParam({ param: params[i], value: values[i] }))\n  }\n  return preparedParams\n}\n\nexport type PrepareParamErrorType =\n  | GetArrayComponentsErrorType\n  | InvalidAbiEncodingTypeErrorType\n  | ErrorType\n\nfunction prepareParam<const TParam extends AbiParameter>({\n  param,\n  value,\n}: {\n  param: TParam\n  value: AbiParameterToPrimitiveType<TParam>\n}): PreparedParam {\n  const arrayComponents = getArrayComponents(param.type)\n  if (arrayComponents) {\n    const [length, type] = arrayComponents\n    return encodeArray(value, { length, param: { ...param, type } })\n  }\n  if (param.type === 'tuple') {\n    return encodeTuple(value as unknown as Tuple, {\n      param: param as TupleAbiParameter,\n    })\n  }\n  if (param.type === 'address') {\n    return encodeAddress(value as unknown as Hex)\n  }\n  if (param.type === 'bool') {\n    return encodeBool(value as unknown as boolean)\n  }\n  if (param.type.startsWith('uint') || param.type.startsWith('int')) {\n    const signed = param.type.startsWith('int')\n    return encodeNumber(value as unknown as number, { signed })\n  }\n  if (param.type.startsWith('bytes')) {\n    return encodeBytes(value as unknown as Hex, { param })\n  }\n  if (param.type === 'string') {\n    return encodeString(value as unknown as string)\n  }\n  throw new InvalidAbiEncodingTypeError(param.type, {\n    docsPath: '/docs/contract/encodeAbiParameters',\n  })\n}\n\n/////////////////////////////////////////////////////////////////\n\nexport type EncodeParamsErrorType =\n  | NumberToHexErrorType\n  | SizeErrorType\n  | ErrorType\n\nfunction encodeParams(preparedParams: PreparedParam[]): Hex {\n  // 1. Compute the size of the static part of the parameters.\n  let staticSize = 0\n  for (let i = 0; i < preparedParams.length; i++) {\n    const { dynamic, encoded } = preparedParams[i]\n    if (dynamic) staticSize += 32\n    else staticSize += size(encoded)\n  }\n\n  // 2. Split the parameters into static and dynamic parts.\n  const staticParams: Hex[] = []\n  const dynamicParams: Hex[] = []\n  let dynamicSize = 0\n  for (let i = 0; i < preparedParams.length; i++) {\n    const { dynamic, encoded } = preparedParams[i]\n    if (dynamic) {\n      staticParams.push(numberToHex(staticSize + dynamicSize, { size: 32 }))\n      dynamicParams.push(encoded)\n      dynamicSize += size(encoded)\n    } else {\n      staticParams.push(encoded)\n    }\n  }\n\n  // 3. Concatenate static and dynamic parts.\n  return concat([...staticParams, ...dynamicParams])\n}\n\n/////////////////////////////////////////////////////////////////\n\nexport type EncodeAddressErrorType =\n  | InvalidAddressErrorType\n  | IsAddressErrorType\n  | ErrorType\n\nfunction encodeAddress(value: Hex): PreparedParam {\n  if (!isAddress(value)) throw new InvalidAddressError({ address: value })\n  return { dynamic: false, encoded: padHex(value.toLowerCase() as Hex) }\n}\n\nexport type EncodeArrayErrorType =\n  | AbiEncodingArrayLengthMismatchErrorType\n  | ConcatErrorType\n  | EncodeParamsErrorType\n  | InvalidArrayErrorType\n  | NumberToHexErrorType\n  | PrepareParamErrorType\n  | ErrorType\n\nfunction encodeArray<const TParam extends AbiParameter>(\n  value: AbiParameterToPrimitiveType<TParam>,\n  {\n    length,\n    param,\n  }: {\n    length: number | null\n    param: TParam\n  },\n): PreparedParam {\n  const dynamic = length === null\n\n  if (!Array.isArray(value)) throw new InvalidArrayError(value)\n  if (!dynamic && value.length !== length)\n    throw new AbiEncodingArrayLengthMismatchError({\n      expectedLength: length!,\n      givenLength: value.length,\n      type: `${param.type}[${length}]`,\n    })\n\n  let dynamicChild = false\n  const preparedParams: PreparedParam[] = []\n  for (let i = 0; i < value.length; i++) {\n    const preparedParam = prepareParam({ param, value: value[i] })\n    if (preparedParam.dynamic) dynamicChild = true\n    preparedParams.push(preparedParam)\n  }\n\n  if (dynamic || dynamicChild) {\n    const data = encodeParams(preparedParams)\n    if (dynamic) {\n      const length = numberToHex(preparedParams.length, { size: 32 })\n      return {\n        dynamic: true,\n        encoded: preparedParams.length > 0 ? concat([length, data]) : length,\n      }\n    }\n    if (dynamicChild) return { dynamic: true, encoded: data }\n  }\n  return {\n    dynamic: false,\n    encoded: concat(preparedParams.map(({ encoded }) => encoded)),\n  }\n}\n\nexport type EncodeBytesErrorType =\n  | AbiEncodingBytesSizeMismatchErrorType\n  | ConcatErrorType\n  | PadHexErrorType\n  | NumberToHexErrorType\n  | SizeErrorType\n  | ErrorType\n\nfunction encodeBytes<const TParam extends AbiParameter>(\n  value: Hex,\n  { param }: { param: TParam },\n): PreparedParam {\n  const [, paramSize] = param.type.split('bytes')\n  const bytesSize = size(value)\n  if (!paramSize) {\n    let value_ = value\n    // If the size is not divisible by 32 bytes, pad the end\n    // with empty bytes to the ceiling 32 bytes.\n    if (bytesSize % 32 !== 0)\n      value_ = padHex(value_, {\n        dir: 'right',\n        size: Math.ceil((value.length - 2) / 2 / 32) * 32,\n      })\n    return {\n      dynamic: true,\n      encoded: concat([padHex(numberToHex(bytesSize, { size: 32 })), value_]),\n    }\n  }\n  if (bytesSize !== parseInt(paramSize))\n    throw new AbiEncodingBytesSizeMismatchError({\n      expectedSize: parseInt(paramSize),\n      value,\n    })\n  return { dynamic: false, encoded: padHex(value, { dir: 'right' }) }\n}\n\nexport type EncodeBoolErrorType =\n  | PadHexErrorType\n  | BoolToHexErrorType\n  | ErrorType\n\nfunction encodeBool(value: boolean): PreparedParam {\n  return { dynamic: false, encoded: padHex(boolToHex(value)) }\n}\n\nexport type EncodeNumberErrorType = NumberToHexErrorType | ErrorType\n\nfunction encodeNumber(\n  value: number,\n  { signed }: { signed: boolean },\n): PreparedParam {\n  return {\n    dynamic: false,\n    encoded: numberToHex(value, {\n      size: 32,\n      signed,\n    }),\n  }\n}\n\nexport type EncodeStringErrorType =\n  | ConcatErrorType\n  | NumberToHexErrorType\n  | PadHexErrorType\n  | SizeErrorType\n  | SliceErrorType\n  | StringToHexErrorType\n  | ErrorType\n\nfunction encodeString(value: string): PreparedParam {\n  const hexValue = stringToHex(value)\n  const partsLength = Math.ceil(size(hexValue) / 32)\n  const parts: Hex[] = []\n  for (let i = 0; i < partsLength; i++) {\n    parts.push(\n      padHex(slice(hexValue, i * 32, (i + 1) * 32), {\n        dir: 'right',\n      }),\n    )\n  }\n  return {\n    dynamic: true,\n    encoded: concat([\n      padHex(numberToHex(size(hexValue), { size: 32 })),\n      ...parts,\n    ]),\n  }\n}\n\nexport type EncodeTupleErrorType =\n  | ConcatErrorType\n  | EncodeParamsErrorType\n  | PrepareParamErrorType\n  | ErrorType\n\nfunction encodeTuple<\n  const TParam extends AbiParameter & { components: readonly AbiParameter[] },\n>(\n  value: AbiParameterToPrimitiveType<TParam>,\n  { param }: { param: TParam },\n): PreparedParam {\n  let dynamic = false\n  const preparedParams: PreparedParam[] = []\n  for (let i = 0; i < param.components.length; i++) {\n    const param_ = param.components[i]\n    const index = Array.isArray(value) ? i : param_.name\n    const preparedParam = prepareParam({\n      param: param_,\n      value: (value as any)[index!] as readonly unknown[],\n    })\n    preparedParams.push(preparedParam)\n    if (preparedParam.dynamic) dynamic = true\n  }\n  return {\n    dynamic,\n    encoded: dynamic\n      ? encodeParams(preparedParams)\n      : concat(preparedParams.map(({ encoded }) => encoded)),\n  }\n}\n\nexport type GetArrayComponentsErrorType = ErrorType\n\nexport function getArrayComponents(\n  type: string,\n): [length: number | null, innerType: string] | undefined {\n  const matches = type.match(/^(.*)\\[(\\d+)?\\]$/)\n  return matches\n    ? // Return `null` if the array is dynamic.\n      [matches[2] ? Number(matches[2]) : null, matches[1]]\n    : undefined\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}