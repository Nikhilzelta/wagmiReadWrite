{"ast":null,"code":"import { concatHex } from '../utils/data/concat.js';\nimport { toHex } from '../utils/encoding/toHex.js';\nimport { toRlp } from '../utils/encoding/toRlp.js';\nimport { serializeTransaction as serializeTransaction_ } from '../utils/transaction/serializeTransaction.js';\nimport { assertEip712Transaction } from './utils/assertEip712Transaction.js';\nimport { isEIP712Transaction } from './utils/isEip712Transaction.js';\nexport function serializeTransaction(transaction, signature) {\n  if (isEIP712Transaction(transaction)) return serializeTransactionEIP712(transaction);\n  return serializeTransaction_(transaction, signature);\n}\nexport const serializers = {\n  transaction: serializeTransaction\n};\nfunction serializeTransactionEIP712(transaction) {\n  const {\n    chainId,\n    gas,\n    nonce,\n    to,\n    from,\n    value,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    customSignature,\n    factoryDeps,\n    paymaster,\n    paymasterInput,\n    gasPerPubdata,\n    data\n  } = transaction;\n  assertEip712Transaction(transaction);\n  const serializedTransaction = [nonce ? toHex(nonce) : '0x', maxPriorityFeePerGas ? toHex(maxPriorityFeePerGas) : '0x', maxFeePerGas ? toHex(maxFeePerGas) : '0x', gas ? toHex(gas) : '0x', to ?? '0x', value ? toHex(value) : '0x', data ?? '0x0', toHex(chainId), toHex(''), toHex(''), toHex(chainId), from ?? '0x', gasPerPubdata ? toHex(gasPerPubdata) : '0x', factoryDeps ?? [], customSignature ?? '0x',\n  // EIP712 signature\n  paymaster && paymasterInput ? [paymaster, paymasterInput] : []];\n  return concatHex(['0x71', toRlp(serializedTransaction)]);\n}","map":{"version":3,"names":["concatHex","toHex","toRlp","serializeTransaction","serializeTransaction_","assertEip712Transaction","isEIP712Transaction","transaction","signature","serializeTransactionEIP712","serializers","chainId","gas","nonce","to","from","value","maxFeePerGas","maxPriorityFeePerGas","customSignature","factoryDeps","paymaster","paymasterInput","gasPerPubdata","data","serializedTransaction"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/viem/zksync/serializers.ts"],"sourcesContent":["import type { Signature } from '../index.js'\nimport type { ChainSerializers } from '../types/chain.js'\nimport type { TransactionSerializable } from '../types/transaction.js'\nimport { concatHex } from '../utils/data/concat.js'\nimport { toHex } from '../utils/encoding/toHex.js'\nimport { toRlp } from '../utils/encoding/toRlp.js'\nimport { serializeTransaction as serializeTransaction_ } from '../utils/transaction/serializeTransaction.js'\nimport type {\n  ZkSyncTransactionSerializable,\n  ZkSyncTransactionSerializableEIP712,\n  ZkSyncTransactionSerializedEIP712,\n} from './types/transaction.js'\nimport { assertEip712Transaction } from './utils/assertEip712Transaction.js'\nimport { isEIP712Transaction } from './utils/isEip712Transaction.js'\n\nexport function serializeTransaction(\n  transaction: ZkSyncTransactionSerializable,\n  signature?: Signature | undefined,\n) {\n  if (isEIP712Transaction(transaction))\n    return serializeTransactionEIP712(\n      transaction as ZkSyncTransactionSerializableEIP712,\n    )\n  return serializeTransaction_(\n    transaction as TransactionSerializable,\n    signature,\n  )\n}\n\nexport const serializers = {\n  transaction: serializeTransaction,\n} as const satisfies ChainSerializers\n\nexport type SerializeTransactionEIP712ReturnType =\n  ZkSyncTransactionSerializedEIP712\n\nfunction serializeTransactionEIP712(\n  transaction: ZkSyncTransactionSerializableEIP712,\n): SerializeTransactionEIP712ReturnType {\n  const {\n    chainId,\n    gas,\n    nonce,\n    to,\n    from,\n    value,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    customSignature,\n    factoryDeps,\n    paymaster,\n    paymasterInput,\n    gasPerPubdata,\n    data,\n  } = transaction\n\n  assertEip712Transaction(transaction)\n\n  const serializedTransaction = [\n    nonce ? toHex(nonce) : '0x',\n    maxPriorityFeePerGas ? toHex(maxPriorityFeePerGas) : '0x',\n    maxFeePerGas ? toHex(maxFeePerGas) : '0x',\n    gas ? toHex(gas) : '0x',\n    to ?? '0x',\n    value ? toHex(value) : '0x',\n    data ?? '0x0',\n    toHex(chainId),\n    toHex(''),\n    toHex(''),\n    toHex(chainId),\n    from ?? '0x',\n    gasPerPubdata ? toHex(gasPerPubdata) : '0x',\n    factoryDeps ?? [],\n    customSignature ?? '0x', // EIP712 signature\n    paymaster && paymasterInput ? [paymaster, paymasterInput] : [],\n  ]\n\n  return concatHex([\n    '0x71',\n    toRlp(serializedTransaction),\n  ]) as SerializeTransactionEIP712ReturnType\n}\n"],"mappings":"AAGA,SAASA,SAAS,QAAQ,yBAAyB;AACnD,SAASC,KAAK,QAAQ,4BAA4B;AAClD,SAASC,KAAK,QAAQ,4BAA4B;AAClD,SAASC,oBAAoB,IAAIC,qBAAqB,QAAQ,8CAA8C;AAM5G,SAASC,uBAAuB,QAAQ,oCAAoC;AAC5E,SAASC,mBAAmB,QAAQ,gCAAgC;AAEpE,OAAM,SAAUH,oBAAoBA,CAClCI,WAA0C,EAC1CC,SAAiC;EAEjC,IAAIF,mBAAmB,CAACC,WAAW,CAAC,EAClC,OAAOE,0BAA0B,CAC/BF,WAAkD,CACnD;EACH,OAAOH,qBAAqB,CAC1BG,WAAsC,EACtCC,SAAS,CACV;AACH;AAEA,OAAO,MAAME,WAAW,GAAG;EACzBH,WAAW,EAAEJ;CACsB;AAKrC,SAASM,0BAA0BA,CACjCF,WAAgD;EAEhD,MAAM;IACJI,OAAO;IACPC,GAAG;IACHC,KAAK;IACLC,EAAE;IACFC,IAAI;IACJC,KAAK;IACLC,YAAY;IACZC,oBAAoB;IACpBC,eAAe;IACfC,WAAW;IACXC,SAAS;IACTC,cAAc;IACdC,aAAa;IACbC;EAAI,CACL,GAAGjB,WAAW;EAEfF,uBAAuB,CAACE,WAAW,CAAC;EAEpC,MAAMkB,qBAAqB,GAAG,CAC5BZ,KAAK,GAAGZ,KAAK,CAACY,KAAK,CAAC,GAAG,IAAI,EAC3BK,oBAAoB,GAAGjB,KAAK,CAACiB,oBAAoB,CAAC,GAAG,IAAI,EACzDD,YAAY,GAAGhB,KAAK,CAACgB,YAAY,CAAC,GAAG,IAAI,EACzCL,GAAG,GAAGX,KAAK,CAACW,GAAG,CAAC,GAAG,IAAI,EACvBE,EAAE,IAAI,IAAI,EACVE,KAAK,GAAGf,KAAK,CAACe,KAAK,CAAC,GAAG,IAAI,EAC3BQ,IAAI,IAAI,KAAK,EACbvB,KAAK,CAACU,OAAO,CAAC,EACdV,KAAK,CAAC,EAAE,CAAC,EACTA,KAAK,CAAC,EAAE,CAAC,EACTA,KAAK,CAACU,OAAO,CAAC,EACdI,IAAI,IAAI,IAAI,EACZQ,aAAa,GAAGtB,KAAK,CAACsB,aAAa,CAAC,GAAG,IAAI,EAC3CH,WAAW,IAAI,EAAE,EACjBD,eAAe,IAAI,IAAI;EAAE;EACzBE,SAAS,IAAIC,cAAc,GAAG,CAACD,SAAS,EAAEC,cAAc,CAAC,GAAG,EAAE,CAC/D;EAED,OAAOtB,SAAS,CAAC,CACf,MAAM,EACNE,KAAK,CAACuB,qBAAqB,CAAC,CAC7B,CAAyC;AAC5C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}