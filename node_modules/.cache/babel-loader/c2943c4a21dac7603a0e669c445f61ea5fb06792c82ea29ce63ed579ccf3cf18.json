{"ast":null,"code":"'use client';\n\nimport { watchContractEvent } from '@wagmi/core';\nimport '@wagmi/core/internal';\nimport { useEffect } from 'react';\nimport { useChainId } from './useChainId.js';\nimport { useConfig } from './useConfig.js';\n/** https://wagmi.sh/react/api/hooks/useWatchContractEvent */\nexport function useWatchContractEvent(parameters = {}) {\n  const {\n    enabled = true,\n    onLogs,\n    config: _,\n    ...rest\n  } = parameters;\n  const config = useConfig(parameters);\n  const configChainId = useChainId({\n    config\n  });\n  const chainId = parameters.chainId ?? configChainId;\n  useEffect(() => {\n    if (!enabled) return;\n    if (!onLogs) return;\n    return watchContractEvent(config, {\n      ...rest,\n      chainId,\n      onLogs\n    });\n  }, [chainId, config, enabled, rest, onLogs]);\n}","map":{"version":3,"names":["watchContractEvent","useEffect","useChainId","useConfig","useWatchContractEvent","parameters","enabled","onLogs","config","_","rest","configChainId","chainId"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/wagmi/src/hooks/useWatchContractEvent.ts"],"sourcesContent":["'use client'\n\nimport {\n  type Config,\n  type ResolvedRegister,\n  type WatchContractEventParameters,\n  watchContractEvent,\n} from '@wagmi/core'\nimport { type UnionEvaluate, type UnionPartial } from '@wagmi/core/internal'\nimport { useEffect } from 'react'\n\nimport type { Abi, ContractEventName } from 'viem'\nimport type { ConfigParameter, EnabledParameter } from '../types/properties.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseWatchContractEventParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  eventName extends ContractEventName<abi> = ContractEventName<abi>,\n  strict extends boolean | undefined = undefined,\n  config extends Config = Config,\n  chainId extends config['chains'][number]['id'] = config['chains'][number]['id'],\n> = UnionEvaluate<\n  UnionPartial<\n    WatchContractEventParameters<abi, eventName, strict, config, chainId>\n  > &\n    ConfigParameter<config> &\n    EnabledParameter\n>\n\nexport type UseWatchContractEventReturnType = void\n\n/** https://wagmi.sh/react/api/hooks/useWatchContractEvent */\nexport function useWatchContractEvent<\n  const abi extends Abi | readonly unknown[],\n  eventName extends ContractEventName<abi>,\n  strict extends boolean | undefined = undefined,\n  config extends Config = ResolvedRegister['config'],\n  chainId extends config['chains'][number]['id'] = config['chains'][number]['id'],\n>(\n  parameters: UseWatchContractEventParameters<\n    abi,\n    eventName,\n    strict,\n    config,\n    chainId\n  > = {} as any,\n): UseWatchContractEventReturnType {\n  const { enabled = true, onLogs, config: _, ...rest } = parameters\n\n  const config = useConfig(parameters)\n  const configChainId = useChainId({ config })\n  const chainId = parameters.chainId ?? configChainId\n\n  useEffect(() => {\n    if (!enabled) return\n    if (!onLogs) return\n    return watchContractEvent(config, {\n      ...(rest as any),\n      chainId,\n      onLogs,\n    })\n  }, [chainId, config, enabled, rest, onLogs])\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,SAIEA,kBAAkB,QACb,aAAa;AACpB,OAAsD,sBAAsB;AAC5E,SAASC,SAAS,QAAQ,OAAO;AAIjC,SAASC,UAAU,QAAQ,iBAAiB;AAC5C,SAASC,SAAS,QAAQ,gBAAgB;AAkB1C;AACA,OAAM,SAAUC,qBAAqBA,CAOnCC,UAAA,GAMI,EAAS;EAEb,MAAM;IAAEC,OAAO,GAAG,IAAI;IAAEC,MAAM;IAAEC,MAAM,EAAEC,CAAC;IAAE,GAAGC;EAAI,CAAE,GAAGL,UAAU;EAEjE,MAAMG,MAAM,GAAGL,SAAS,CAACE,UAAU,CAAC;EACpC,MAAMM,aAAa,GAAGT,UAAU,CAAC;IAAEM;EAAM,CAAE,CAAC;EAC5C,MAAMI,OAAO,GAAGP,UAAU,CAACO,OAAO,IAAID,aAAa;EAEnDV,SAAS,CAAC,MAAK;IACb,IAAI,CAACK,OAAO,EAAE;IACd,IAAI,CAACC,MAAM,EAAE;IACb,OAAOP,kBAAkB,CAACQ,MAAM,EAAE;MAChC,GAAIE,IAAY;MAChBE,OAAO;MACPL;KACD,CAAC;EACJ,CAAC,EAAE,CAACK,OAAO,EAAEJ,MAAM,EAAEF,OAAO,EAAEI,IAAI,EAAEH,MAAM,CAAC,CAAC;AAC9C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}