{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.narrow = void 0;\nfunction narrow(value) {\n  return value;\n}\nexports.narrow = narrow;","map":{"version":3,"names":["narrow","value","exports"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@safe-global/safe-apps-sdk/node_modules/abitype/src/narrow.ts"],"sourcesContent":["/**\n * Infers embedded primitive type of any type\n *\n * @param T - Type to infer\n * @returns Embedded type of {@link TType}\n *\n * @example\n * type Result = Narrow<['foo', 'bar', 1]>\n */\n// s/o https://twitter.com/hd_nvim/status/1578567206190780417\nexport type Narrow<TType> =\n  | (unknown extends TType ? unknown : never)\n  | (TType extends Function ? TType : never)\n  | (TType extends bigint | boolean | number | string ? TType : never)\n  | (TType extends [] ? [] : never)\n  | { [K in keyof TType]: Narrow<TType[K]> }\n\n/**\n * Infers embedded primitive type of any type\n * Same as `as const` but without setting the object as readonly and without needing the user to use it.\n *\n * @param value - Value to infer\n * @returns Value with embedded type inferred\n *\n * @example\n * const result = narrow(['foo', 'bar', 1])\n */\nexport function narrow<TType>(value: Narrow<TType>) {\n  return value\n}\n"],"mappings":";;;;;;AA2BA,SAAgBA,MAAMA,CAAQC,KAAoB;EAChD,OAAOA,KAAK;AACd;AAFAC,OAAA,CAAAF,MAAA,GAAAA,MAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}