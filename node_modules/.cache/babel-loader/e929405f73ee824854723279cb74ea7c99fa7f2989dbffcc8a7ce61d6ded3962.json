{"ast":null,"code":"import '@tanstack/query-core';\nimport { getToken } from '../actions/getToken.js';\nimport '../createConfig.js';\nimport { filterQueryOptions } from './utils.js';\nexport function getTokenQueryOptions(config, options = {}) {\n  return {\n    async queryFn({\n      queryKey\n    }) {\n      const {\n        address,\n        scopeKey: _,\n        ...parameters\n      } = queryKey[1];\n      if (!address) throw new Error('address is required');\n      return getToken(config, {\n        ...parameters,\n        address\n      });\n    },\n    queryKey: getTokenQueryKey(options)\n  };\n}\nexport function getTokenQueryKey(options = {}) {\n  return ['token', filterQueryOptions(options)];\n}","map":{"version":3,"names":["getToken","filterQueryOptions","getTokenQueryOptions","config","options","queryFn","queryKey","address","scopeKey","_","parameters","Error","getTokenQueryKey"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/wagmi/node_modules/@wagmi/core/src/query/getToken.ts"],"sourcesContent":["import { type QueryOptions } from '@tanstack/query-core'\n\nimport {\n  type GetTokenErrorType,\n  type GetTokenParameters,\n  type GetTokenReturnType,\n  getToken,\n} from '../actions/getToken.js'\nimport { type Config } from '../createConfig.js'\nimport type { ScopeKeyParameter } from '../types/properties.js'\nimport type { Evaluate, ExactPartial } from '../types/utils.js'\nimport { filterQueryOptions } from './utils.js'\n\nexport type GetTokenOptions<config extends Config> = Evaluate<\n  ExactPartial<GetTokenParameters<config>> & ScopeKeyParameter\n>\n\nexport function getTokenQueryOptions<config extends Config>(\n  config: config,\n  options: GetTokenOptions<config> = {},\n) {\n  return {\n    async queryFn({ queryKey }) {\n      const { address, scopeKey: _, ...parameters } = queryKey[1]\n      if (!address) throw new Error('address is required')\n      return getToken(config, { ...parameters, address })\n    },\n    queryKey: getTokenQueryKey(options),\n  } as const satisfies QueryOptions<\n    GetTokenQueryFnData,\n    GetTokenErrorType,\n    GetTokenData,\n    GetTokenQueryKey<config>\n  >\n}\n\nexport type GetTokenQueryFnData = GetTokenReturnType\n\nexport type GetTokenData = GetTokenQueryFnData\n\nexport function getTokenQueryKey<config extends Config>(\n  options: GetTokenOptions<config> = {},\n) {\n  return ['token', filterQueryOptions(options)] as const\n}\n\nexport type GetTokenQueryKey<config extends Config> = ReturnType<\n  typeof getTokenQueryKey<config>\n>\n"],"mappings":"AAAA,OAAkC,sBAAsB;AAExD,SAIEA,QAAQ,QACH,wBAAwB;AAC/B,OAA4B,oBAAoB;AAGhD,SAASC,kBAAkB,QAAQ,YAAY;AAM/C,OAAM,SAAUC,oBAAoBA,CAClCC,MAAc,EACdC,OAAA,GAAmC,EAAE;EAErC,OAAO;IACL,MAAMC,OAAOA,CAAC;MAAEC;IAAQ,CAAE;MACxB,MAAM;QAAEC,OAAO;QAAEC,QAAQ,EAAEC,CAAC;QAAE,GAAGC;MAAU,CAAE,GAAGJ,QAAQ,CAAC,CAAC,CAAC;MAC3D,IAAI,CAACC,OAAO,EAAE,MAAM,IAAII,KAAK,CAAC,qBAAqB,CAAC;MACpD,OAAOX,QAAQ,CAACG,MAAM,EAAE;QAAE,GAAGO,UAAU;QAAEH;MAAO,CAAE,CAAC;IACrD,CAAC;IACDD,QAAQ,EAAEM,gBAAgB,CAACR,OAAO;GAMnC;AACH;AAMA,OAAM,SAAUQ,gBAAgBA,CAC9BR,OAAA,GAAmC,EAAE;EAErC,OAAO,CAAC,OAAO,EAAEH,kBAAkB,CAACG,OAAO,CAAC,CAAU;AACxD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}