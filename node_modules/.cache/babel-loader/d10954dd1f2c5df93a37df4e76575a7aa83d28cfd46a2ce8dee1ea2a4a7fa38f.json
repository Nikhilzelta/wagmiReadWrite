{"ast":null,"code":"import { parseAccount } from '../../accounts/utils/parseAccount.js';\nimport { AccountNotFoundError } from '../../errors/account.js';\nimport { assertCurrentChain } from '../../utils/chain/assertCurrentChain.js';\nimport { getTransactionError } from '../../utils/errors/getTransactionError.js';\nimport { extract } from '../../utils/formatters/extract.js';\nimport { formatTransactionRequest } from '../../utils/formatters/transactionRequest.js';\nimport { getAction } from '../../utils/getAction.js';\nimport { assertRequest } from '../../utils/transaction/assertRequest.js';\nimport { getChainId } from '../public/getChainId.js';\nimport { defaultParameters, prepareTransactionRequest } from './prepareTransactionRequest.js';\nimport { sendRawTransaction } from './sendRawTransaction.js';\n/**\n * Creates, signs, and sends a new transaction to the network.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/sendTransaction\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions/sending-transactions\n * - JSON-RPC Methods:\n *   - JSON-RPC Accounts: [`eth_sendTransaction`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendtransaction)\n *   - Local Accounts: [`eth_sendRawTransaction`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendrawtransaction)\n *\n * @param client - Client to use\n * @param parameters - {@link SendTransactionParameters}\n * @returns The [Transaction](https://viem.sh/docs/glossary/terms#transaction) hash. {@link SendTransactionReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { sendTransaction } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const hash = await sendTransaction(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n *\n * @example\n * // Account Hoisting\n * import { createWalletClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { sendTransaction } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0xâ€¦'),\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const hash = await sendTransaction(client, {\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n */\nexport async function sendTransaction(client, parameters) {\n  const {\n    account: account_ = client.account,\n    chain = client.chain,\n    accessList,\n    blobs,\n    data,\n    gas,\n    gasPrice,\n    maxFeePerBlobGas,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n    to,\n    value,\n    ...rest\n  } = parameters;\n  if (!account_) throw new AccountNotFoundError({\n    docsPath: '/docs/actions/wallet/sendTransaction'\n  });\n  const account = parseAccount(account_);\n  try {\n    assertRequest(parameters);\n    let chainId;\n    if (chain !== null) {\n      chainId = await getAction(client, getChainId, 'getChainId')({});\n      assertCurrentChain({\n        currentChainId: chainId,\n        chain\n      });\n    }\n    if (account.type === 'local') {\n      // Prepare the request for signing (assign appropriate fees, etc.)\n      const request = await getAction(client, prepareTransactionRequest, 'prepareTransactionRequest')({\n        account,\n        accessList,\n        blobs,\n        chain,\n        chainId,\n        data,\n        gas,\n        gasPrice,\n        maxFeePerBlobGas,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        parameters: [...defaultParameters, 'sidecars'],\n        to,\n        value,\n        ...rest\n      });\n      const serializer = chain?.serializers?.transaction;\n      const serializedTransaction = await account.signTransaction(request, {\n        serializer\n      });\n      return await getAction(client, sendRawTransaction, 'sendRawTransaction')({\n        serializedTransaction\n      });\n    }\n    const chainFormat = client.chain?.formatters?.transactionRequest?.format;\n    const format = chainFormat || formatTransactionRequest;\n    const request = format({\n      // Pick out extra data that might exist on the chain's transaction request type.\n      ...extract(rest, {\n        format: chainFormat\n      }),\n      accessList,\n      blobs,\n      data,\n      from: account.address,\n      gas,\n      gasPrice,\n      maxFeePerBlobGas,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value\n    });\n    return await client.request({\n      method: 'eth_sendTransaction',\n      params: [request]\n    }, {\n      retryCount: 0\n    });\n  } catch (err) {\n    throw getTransactionError(err, {\n      ...parameters,\n      account,\n      chain: parameters.chain || undefined\n    });\n  }\n}","map":{"version":3,"names":["parseAccount","AccountNotFoundError","assertCurrentChain","getTransactionError","extract","formatTransactionRequest","getAction","assertRequest","getChainId","defaultParameters","prepareTransactionRequest","sendRawTransaction","sendTransaction","client","parameters","account","account_","chain","accessList","blobs","data","gas","gasPrice","maxFeePerBlobGas","maxFeePerGas","maxPriorityFeePerGas","nonce","to","value","rest","docsPath","chainId","currentChainId","type","request","serializer","serializers","transaction","serializedTransaction","signTransaction","chainFormat","formatters","transactionRequest","format","from","address","method","params","retryCount","err","undefined"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/viem/actions/wallet/sendTransaction.ts"],"sourcesContent":["import type { Account } from '../../accounts/types.js'\nimport {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../../accounts/utils/parseAccount.js'\nimport type { SignTransactionErrorType } from '../../accounts/utils/signTransaction.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { AccountNotFoundError } from '../../errors/account.js'\nimport type { BaseError } from '../../errors/base.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { GetAccountParameter } from '../../types/account.js'\nimport type { Chain, DeriveChain } from '../../types/chain.js'\nimport type { GetChainParameter } from '../../types/chain.js'\nimport type { GetTransactionRequestKzgParameter } from '../../types/kzg.js'\nimport type { Hash } from '../../types/misc.js'\nimport type { TransactionRequest } from '../../types/transaction.js'\nimport type { UnionOmit } from '../../types/utils.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type AssertCurrentChainErrorType,\n  assertCurrentChain,\n} from '../../utils/chain/assertCurrentChain.js'\nimport {\n  type GetTransactionErrorReturnType,\n  getTransactionError,\n} from '../../utils/errors/getTransactionError.js'\nimport { extract } from '../../utils/formatters/extract.js'\nimport {\n  type FormattedTransactionRequest,\n  formatTransactionRequest,\n} from '../../utils/formatters/transactionRequest.js'\nimport { getAction } from '../../utils/getAction.js'\nimport {\n  type AssertRequestErrorType,\n  type AssertRequestParameters,\n  assertRequest,\n} from '../../utils/transaction/assertRequest.js'\nimport { type GetChainIdErrorType, getChainId } from '../public/getChainId.js'\nimport {\n  type PrepareTransactionRequestErrorType,\n  defaultParameters,\n  prepareTransactionRequest,\n} from './prepareTransactionRequest.js'\nimport {\n  type SendRawTransactionErrorType,\n  sendRawTransaction,\n} from './sendRawTransaction.js'\n\nexport type SendTransactionRequest<\n  chain extends Chain | undefined = Chain | undefined,\n  chainOverride extends Chain | undefined = Chain | undefined,\n  ///\n  _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>,\n> = UnionOmit<FormattedTransactionRequest<_derivedChain>, 'from'> &\n  GetTransactionRequestKzgParameter\n\nexport type SendTransactionParameters<\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n  chainOverride extends Chain | undefined = Chain | undefined,\n  request extends SendTransactionRequest<\n    chain,\n    chainOverride\n  > = SendTransactionRequest<chain, chainOverride>,\n> = request &\n  GetAccountParameter<account> &\n  GetChainParameter<chain, chainOverride> &\n  GetTransactionRequestKzgParameter<request>\n\nexport type SendTransactionReturnType = Hash\n\nexport type SendTransactionErrorType =\n  | ParseAccountErrorType\n  | GetTransactionErrorReturnType<\n      | AssertCurrentChainErrorType\n      | AssertRequestErrorType\n      | GetChainIdErrorType\n      | PrepareTransactionRequestErrorType\n      | SendRawTransactionErrorType\n      | SignTransactionErrorType\n      | RequestErrorType\n    >\n  | ErrorType\n\n/**\n * Creates, signs, and sends a new transaction to the network.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/sendTransaction\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions/sending-transactions\n * - JSON-RPC Methods:\n *   - JSON-RPC Accounts: [`eth_sendTransaction`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendtransaction)\n *   - Local Accounts: [`eth_sendRawTransaction`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendrawtransaction)\n *\n * @param client - Client to use\n * @param parameters - {@link SendTransactionParameters}\n * @returns The [Transaction](https://viem.sh/docs/glossary/terms#transaction) hash. {@link SendTransactionReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { sendTransaction } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const hash = await sendTransaction(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n *\n * @example\n * // Account Hoisting\n * import { createWalletClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { sendTransaction } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0xâ€¦'),\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const hash = await sendTransaction(client, {\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n */\nexport async function sendTransaction<\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n  const request extends SendTransactionRequest<chain, chainOverride>,\n  chainOverride extends Chain | undefined = undefined,\n>(\n  client: Client<Transport, chain, account>,\n  parameters: SendTransactionParameters<chain, account, chainOverride, request>,\n): Promise<SendTransactionReturnType> {\n  const {\n    account: account_ = client.account,\n    chain = client.chain,\n    accessList,\n    blobs,\n    data,\n    gas,\n    gasPrice,\n    maxFeePerBlobGas,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n    to,\n    value,\n    ...rest\n  } = parameters\n\n  if (!account_)\n    throw new AccountNotFoundError({\n      docsPath: '/docs/actions/wallet/sendTransaction',\n    })\n  const account = parseAccount(account_)\n\n  try {\n    assertRequest(parameters as AssertRequestParameters)\n\n    let chainId: number | undefined\n    if (chain !== null) {\n      chainId = await getAction(client, getChainId, 'getChainId')({})\n      assertCurrentChain({\n        currentChainId: chainId,\n        chain,\n      })\n    }\n\n    if (account.type === 'local') {\n      // Prepare the request for signing (assign appropriate fees, etc.)\n      const request = await getAction(\n        client,\n        prepareTransactionRequest,\n        'prepareTransactionRequest',\n      )({\n        account,\n        accessList,\n        blobs,\n        chain,\n        chainId,\n        data,\n        gas,\n        gasPrice,\n        maxFeePerBlobGas,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        parameters: [...defaultParameters, 'sidecars'],\n        to,\n        value,\n        ...rest,\n      } as any)\n\n      const serializer = chain?.serializers?.transaction\n      const serializedTransaction = (await account.signTransaction(request, {\n        serializer,\n      })) as Hash\n      return await getAction(\n        client,\n        sendRawTransaction,\n        'sendRawTransaction',\n      )({\n        serializedTransaction,\n      })\n    }\n\n    const chainFormat = client.chain?.formatters?.transactionRequest?.format\n    const format = chainFormat || formatTransactionRequest\n\n    const request = format({\n      // Pick out extra data that might exist on the chain's transaction request type.\n      ...extract(rest, { format: chainFormat }),\n      accessList,\n      blobs,\n      data,\n      from: account.address,\n      gas,\n      gasPrice,\n      maxFeePerBlobGas,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value,\n    } as TransactionRequest)\n    return await client.request(\n      {\n        method: 'eth_sendTransaction',\n        params: [request],\n      },\n      { retryCount: 0 },\n    )\n  } catch (err) {\n    throw getTransactionError(err as BaseError, {\n      ...parameters,\n      account,\n      chain: parameters.chain || undefined,\n    })\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}