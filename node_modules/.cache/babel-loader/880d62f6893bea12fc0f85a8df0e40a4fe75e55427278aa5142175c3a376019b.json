{"ast":null,"code":"import '../index.js';\nimport { formatters } from './formatters.js';\nexport const fees = {\n  /*\n   * Estimates the fees per gas for a transaction.\n      * If the transaction is to be paid in a token (feeCurrency is present) then the fees\n   * are estimated in the value of the token. Otherwise falls back to the default\n   * estimation by returning null.\n   *\n   * @param params fee estimation function parameters\n   */\n  estimateFeesPerGas: async params => {\n    if (!params.request?.feeCurrency) return null;\n    const [maxFeePerGas, maxPriorityFeePerGas] = await Promise.all([estimateFeePerGasInFeeCurrency(params.client, params.request.feeCurrency), estimateMaxPriorityFeePerGasInFeeCurrency(params.client, params.request.feeCurrency)]);\n    return {\n      maxFeePerGas,\n      maxPriorityFeePerGas\n    };\n  }\n};\n/*\n * Estimate the fee per gas in the value of the fee token\n\n *\n * @param client - Client to use\n * @param feeCurrency -  Address of a whitelisted fee token\n * @returns The fee per gas in wei in the value of the  fee token\n *\n */\nasync function estimateFeePerGasInFeeCurrency(client, feeCurrency) {\n  const fee = await client.request({\n    method: 'eth_gasPrice',\n    params: [feeCurrency]\n  });\n  return BigInt(fee);\n}\n/*\n * Estimate the max priority fee per gas in the value of the fee token\n\n *\n * @param client - Client to use\n * @param feeCurrency -  Address of a whitelisted fee token\n * @returns The fee per gas in wei in the value of the  fee token\n *\n */\nasync function estimateMaxPriorityFeePerGasInFeeCurrency(client, feeCurrency) {\n  const feesPerGas = await client.request({\n    method: 'eth_maxPriorityFeePerGas',\n    params: [feeCurrency]\n  });\n  return BigInt(feesPerGas);\n}","map":{"version":3,"names":["formatters","fees","estimateFeesPerGas","params","request","feeCurrency","maxFeePerGas","maxPriorityFeePerGas","Promise","all","estimateFeePerGasInFeeCurrency","client","estimateMaxPriorityFeePerGasInFeeCurrency","fee","method","BigInt","feesPerGas"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/viem/celo/fees.ts"],"sourcesContent":["import type { Client } from '../clients/createClient.js'\nimport {\n  type Address,\n  type ChainEstimateFeesPerGasFnParameters,\n  type ChainFees,\n  type Hex,\n} from '../index.js'\n\nimport { formatters } from './formatters.js'\n\nexport const fees: ChainFees<typeof formatters> = {\n  /*\n   * Estimates the fees per gas for a transaction.\n\n   * If the transaction is to be paid in a token (feeCurrency is present) then the fees \n   * are estimated in the value of the token. Otherwise falls back to the default\n   * estimation by returning null.\n   * \n   * @param params fee estimation function parameters\n   */\n  estimateFeesPerGas: async (\n    params: ChainEstimateFeesPerGasFnParameters<typeof formatters>,\n  ) => {\n    if (!params.request?.feeCurrency) return null\n\n    const [maxFeePerGas, maxPriorityFeePerGas] = await Promise.all([\n      estimateFeePerGasInFeeCurrency(params.client, params.request.feeCurrency),\n      estimateMaxPriorityFeePerGasInFeeCurrency(\n        params.client,\n        params.request.feeCurrency,\n      ),\n    ])\n\n    return {\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n    }\n  },\n}\n\ntype RequestGasPriceInFeeCurrencyParams = {\n  Method: 'eth_gasPrice'\n  Parameters: [Address]\n  ReturnType: Hex\n}\n\n/*\n * Estimate the fee per gas in the value of the fee token\n\n *\n * @param client - Client to use\n * @param feeCurrency -  Address of a whitelisted fee token\n * @returns The fee per gas in wei in the value of the  fee token\n *\n */\nasync function estimateFeePerGasInFeeCurrency(\n  client: Client,\n  feeCurrency: Address,\n) {\n  const fee = await client.request<RequestGasPriceInFeeCurrencyParams>({\n    method: 'eth_gasPrice',\n    params: [feeCurrency],\n  })\n  return BigInt(fee)\n}\n\ntype RequestMaxGasPriceInFeeCurrencyParams = {\n  Method: 'eth_maxPriorityFeePerGas'\n  Parameters: [Address]\n  ReturnType: Hex\n}\n\n/*\n * Estimate the max priority fee per gas in the value of the fee token\n\n *\n * @param client - Client to use\n * @param feeCurrency -  Address of a whitelisted fee token\n * @returns The fee per gas in wei in the value of the  fee token\n *\n */\nasync function estimateMaxPriorityFeePerGasInFeeCurrency(\n  client: Client,\n  feeCurrency: Address,\n) {\n  const feesPerGas =\n    await client.request<RequestMaxGasPriceInFeeCurrencyParams>({\n      method: 'eth_maxPriorityFeePerGas',\n      params: [feeCurrency],\n    })\n  return BigInt(feesPerGas)\n}\n"],"mappings":"AACA,OAKO,aAAa;AAEpB,SAASA,UAAU,QAAQ,iBAAiB;AAE5C,OAAO,MAAMC,IAAI,GAAiC;EAChD;;;;;;;;EASAC,kBAAkB,EAAE,MAClBC,MAA8D,IAC5D;IACF,IAAI,CAACA,MAAM,CAACC,OAAO,EAAEC,WAAW,EAAE,OAAO,IAAI;IAE7C,MAAM,CAACC,YAAY,EAAEC,oBAAoB,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CAC7DC,8BAA8B,CAACP,MAAM,CAACQ,MAAM,EAAER,MAAM,CAACC,OAAO,CAACC,WAAW,CAAC,EACzEO,yCAAyC,CACvCT,MAAM,CAACQ,MAAM,EACbR,MAAM,CAACC,OAAO,CAACC,WAAW,CAC3B,CACF,CAAC;IAEF,OAAO;MACLC,YAAY;MACZC;KACD;EACH;CACD;AAQD;;;;;;;;;AASA,eAAeG,8BAA8BA,CAC3CC,MAAc,EACdN,WAAoB;EAEpB,MAAMQ,GAAG,GAAG,MAAMF,MAAM,CAACP,OAAO,CAAqC;IACnEU,MAAM,EAAE,cAAc;IACtBX,MAAM,EAAE,CAACE,WAAW;GACrB,CAAC;EACF,OAAOU,MAAM,CAACF,GAAG,CAAC;AACpB;AAQA;;;;;;;;;AASA,eAAeD,yCAAyCA,CACtDD,MAAc,EACdN,WAAoB;EAEpB,MAAMW,UAAU,GACd,MAAML,MAAM,CAACP,OAAO,CAAwC;IAC1DU,MAAM,EAAE,0BAA0B;IAClCX,MAAM,EAAE,CAACE,WAAW;GACrB,CAAC;EACJ,OAAOU,MAAM,CAACC,UAAU,CAAC;AAC3B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}