{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.padBytes = exports.padHex = exports.pad = void 0;\nconst data_js_1 = require(\"../../errors/data.js\");\nfunction pad(hexOrBytes, {\n  dir,\n  size = 32\n} = {}) {\n  if (typeof hexOrBytes === 'string') return padHex(hexOrBytes, {\n    dir,\n    size\n  });\n  return padBytes(hexOrBytes, {\n    dir,\n    size\n  });\n}\nexports.pad = pad;\nfunction padHex(hex_, {\n  dir,\n  size = 32\n} = {}) {\n  if (size === null) return hex_;\n  const hex = hex_.replace('0x', '');\n  if (hex.length > size * 2) throw new data_js_1.SizeExceedsPaddingSizeError({\n    size: Math.ceil(hex.length / 2),\n    targetSize: size,\n    type: 'hex'\n  });\n  return `0x${hex[dir === 'right' ? 'padEnd' : 'padStart'](size * 2, '0')}`;\n}\nexports.padHex = padHex;\nfunction padBytes(bytes, {\n  dir,\n  size = 32\n} = {}) {\n  if (size === null) return bytes;\n  if (bytes.length > size) throw new data_js_1.SizeExceedsPaddingSizeError({\n    size: bytes.length,\n    targetSize: size,\n    type: 'bytes'\n  });\n  const paddedBytes = new Uint8Array(size);\n  for (let i = 0; i < size; i++) {\n    const padEnd = dir === 'right';\n    paddedBytes[padEnd ? i : size - i - 1] = bytes[padEnd ? i : bytes.length - i - 1];\n  }\n  return paddedBytes;\n}\nexports.padBytes = padBytes;","map":{"version":3,"names":["data_js_1","require","pad","hexOrBytes","dir","size","padHex","padBytes","exports","hex_","hex","replace","length","SizeExceedsPaddingSizeError","Math","ceil","targetSize","type","bytes","paddedBytes","Uint8Array","i","padEnd"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/data/pad.ts"],"sourcesContent":["import {\n  SizeExceedsPaddingSizeError,\n  type SizeExceedsPaddingSizeErrorType,\n} from '../../errors/data.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\n\ntype PadOptions = {\n  dir?: 'left' | 'right'\n  size?: number | null\n}\nexport type PadReturnType<TValue extends ByteArray | Hex> = TValue extends Hex\n  ? Hex\n  : ByteArray\n\nexport type PadErrorType = PadHexErrorType | PadBytesErrorType | ErrorType\n\nexport function pad<TValue extends ByteArray | Hex>(\n  hexOrBytes: TValue,\n  { dir, size = 32 }: PadOptions = {},\n): PadReturnType<TValue> {\n  if (typeof hexOrBytes === 'string')\n    return padHex(hexOrBytes, { dir, size }) as PadReturnType<TValue>\n  return padBytes(hexOrBytes, { dir, size }) as PadReturnType<TValue>\n}\n\nexport type PadHexErrorType = SizeExceedsPaddingSizeErrorType | ErrorType\n\nexport function padHex(hex_: Hex, { dir, size = 32 }: PadOptions = {}) {\n  if (size === null) return hex_\n  const hex = hex_.replace('0x', '')\n  if (hex.length > size * 2)\n    throw new SizeExceedsPaddingSizeError({\n      size: Math.ceil(hex.length / 2),\n      targetSize: size,\n      type: 'hex',\n    })\n\n  return `0x${hex[dir === 'right' ? 'padEnd' : 'padStart'](\n    size * 2,\n    '0',\n  )}` as Hex\n}\n\nexport type PadBytesErrorType = SizeExceedsPaddingSizeErrorType | ErrorType\n\nexport function padBytes(\n  bytes: ByteArray,\n  { dir, size = 32 }: PadOptions = {},\n) {\n  if (size === null) return bytes\n  if (bytes.length > size)\n    throw new SizeExceedsPaddingSizeError({\n      size: bytes.length,\n      targetSize: size,\n      type: 'bytes',\n    })\n  const paddedBytes = new Uint8Array(size)\n  for (let i = 0; i < size; i++) {\n    const padEnd = dir === 'right'\n    paddedBytes[padEnd ? i : size - i - 1] =\n      bytes[padEnd ? i : bytes.length - i - 1]\n  }\n  return paddedBytes\n}\n"],"mappings":";;;;;;AAAA,MAAAA,SAAA,GAAAC,OAAA;AAiBA,SAAgBC,GAAGA,CACjBC,UAAkB,EAClB;EAAEC,GAAG;EAAEC,IAAI,GAAG;AAAE,IAAiB,EAAE;EAEnC,IAAI,OAAOF,UAAU,KAAK,QAAQ,EAChC,OAAOG,MAAM,CAACH,UAAU,EAAE;IAAEC,GAAG;IAAEC;EAAI,CAAE,CAA0B;EACnE,OAAOE,QAAQ,CAACJ,UAAU,EAAE;IAAEC,GAAG;IAAEC;EAAI,CAAE,CAA0B;AACrE;AAPAG,OAAA,CAAAN,GAAA,GAAAA,GAAA;AAWA,SAAgBI,MAAMA,CAACG,IAAS,EAAE;EAAEL,GAAG;EAAEC,IAAI,GAAG;AAAE,IAAiB,EAAE;EACnE,IAAIA,IAAI,KAAK,IAAI,EAAE,OAAOI,IAAI;EAC9B,MAAMC,GAAG,GAAGD,IAAI,CAACE,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;EAClC,IAAID,GAAG,CAACE,MAAM,GAAGP,IAAI,GAAG,CAAC,EACvB,MAAM,IAAIL,SAAA,CAAAa,2BAA2B,CAAC;IACpCR,IAAI,EAAES,IAAI,CAACC,IAAI,CAACL,GAAG,CAACE,MAAM,GAAG,CAAC,CAAC;IAC/BI,UAAU,EAAEX,IAAI;IAChBY,IAAI,EAAE;GACP,CAAC;EAEJ,OAAO,KAAKP,GAAG,CAACN,GAAG,KAAK,OAAO,GAAG,QAAQ,GAAG,UAAU,CAAC,CACtDC,IAAI,GAAG,CAAC,EACR,GAAG,CACJ,EAAS;AACZ;AAdAG,OAAA,CAAAF,MAAA,GAAAA,MAAA;AAkBA,SAAgBC,QAAQA,CACtBW,KAAgB,EAChB;EAAEd,GAAG;EAAEC,IAAI,GAAG;AAAE,IAAiB,EAAE;EAEnC,IAAIA,IAAI,KAAK,IAAI,EAAE,OAAOa,KAAK;EAC/B,IAAIA,KAAK,CAACN,MAAM,GAAGP,IAAI,EACrB,MAAM,IAAIL,SAAA,CAAAa,2BAA2B,CAAC;IACpCR,IAAI,EAAEa,KAAK,CAACN,MAAM;IAClBI,UAAU,EAAEX,IAAI;IAChBY,IAAI,EAAE;GACP,CAAC;EACJ,MAAME,WAAW,GAAG,IAAIC,UAAU,CAACf,IAAI,CAAC;EACxC,KAAK,IAAIgB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGhB,IAAI,EAAEgB,CAAC,EAAE,EAAE;IAC7B,MAAMC,MAAM,GAAGlB,GAAG,KAAK,OAAO;IAC9Be,WAAW,CAACG,MAAM,GAAGD,CAAC,GAAGhB,IAAI,GAAGgB,CAAC,GAAG,CAAC,CAAC,GACpCH,KAAK,CAACI,MAAM,GAAGD,CAAC,GAAGH,KAAK,CAACN,MAAM,GAAGS,CAAC,GAAG,CAAC,CAAC;;EAE5C,OAAOF,WAAW;AACpB;AAlBAX,OAAA,CAAAD,QAAA,GAAAA,QAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}