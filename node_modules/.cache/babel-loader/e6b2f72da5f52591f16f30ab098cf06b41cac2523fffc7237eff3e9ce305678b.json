{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.signTransaction = void 0;\nconst parseAccount_js_1 = require(\"../../accounts/utils/parseAccount.js\");\nconst account_js_1 = require(\"../../errors/account.js\");\nconst assertCurrentChain_js_1 = require(\"../../utils/chain/assertCurrentChain.js\");\nconst transactionRequest_js_1 = require(\"../../utils/formatters/transactionRequest.js\");\nconst getAction_js_1 = require(\"../../utils/getAction.js\");\nconst index_js_1 = require(\"../../utils/index.js\");\nconst assertRequest_js_1 = require(\"../../utils/transaction/assertRequest.js\");\nconst getChainId_js_1 = require(\"../public/getChainId.js\");\nasync function signTransaction(client, args) {\n  const {\n    account: account_ = client.account,\n    chain = client.chain,\n    ...transaction\n  } = args;\n  if (!account_) throw new account_js_1.AccountNotFoundError({\n    docsPath: '/docs/actions/wallet/signTransaction'\n  });\n  const account = (0, parseAccount_js_1.parseAccount)(account_);\n  (0, assertRequest_js_1.assertRequest)({\n    account,\n    ...args\n  });\n  const chainId = await (0, getAction_js_1.getAction)(client, getChainId_js_1.getChainId, 'getChainId')({});\n  if (chain !== null) (0, assertCurrentChain_js_1.assertCurrentChain)({\n    currentChainId: chainId,\n    chain\n  });\n  const formatters = chain?.formatters || client.chain?.formatters;\n  const format = formatters?.transactionRequest?.format || transactionRequest_js_1.formatTransactionRequest;\n  if (account.type === 'local') return account.signTransaction({\n    ...transaction,\n    chainId\n  }, {\n    serializer: client.chain?.serializers?.transaction\n  });\n  return await client.request({\n    method: 'eth_signTransaction',\n    params: [{\n      ...format(transaction),\n      chainId: (0, index_js_1.numberToHex)(chainId),\n      from: account.address\n    }]\n  });\n}\nexports.signTransaction = signTransaction;","map":{"version":3,"names":["parseAccount_js_1","require","account_js_1","assertCurrentChain_js_1","transactionRequest_js_1","getAction_js_1","index_js_1","assertRequest_js_1","getChainId_js_1","signTransaction","client","args","account","account_","chain","transaction","AccountNotFoundError","docsPath","parseAccount","assertRequest","chainId","getAction","getChainId","assertCurrentChain","currentChainId","formatters","format","transactionRequest","formatTransactionRequest","type","serializer","serializers","request","method","params","numberToHex","from","address","exports"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/wallet/signTransaction.ts"],"sourcesContent":["import type { Account } from '../../accounts/types.js'\nimport {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../../accounts/utils/parseAccount.js'\nimport type { SignTransactionErrorType as SignTransactionErrorType_account } from '../../accounts/utils/signTransaction.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { AccountNotFoundError } from '../../errors/account.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { GetAccountParameter } from '../../types/account.js'\nimport type { Chain, GetChain } from '../../types/chain.js'\nimport { type RpcTransactionRequest } from '../../types/rpc.js'\nimport type {\n  TransactionRequest,\n  TransactionSerializable,\n  TransactionSerialized,\n} from '../../types/transaction.js'\nimport type { UnionOmit } from '../../types/utils.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type AssertCurrentChainErrorType,\n  assertCurrentChain,\n} from '../../utils/chain/assertCurrentChain.js'\nimport type { NumberToHexErrorType } from '../../utils/encoding/toHex.js'\nimport {\n  type FormattedTransactionRequest,\n  formatTransactionRequest,\n} from '../../utils/formatters/transactionRequest.js'\nimport { getAction } from '../../utils/getAction.js'\nimport { numberToHex } from '../../utils/index.js'\nimport {\n  type AssertRequestErrorType,\n  assertRequest,\n} from '../../utils/transaction/assertRequest.js'\nimport { type GetChainIdErrorType, getChainId } from '../public/getChainId.js'\n\nexport type SignTransactionParameters<\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends Account | undefined = Account | undefined,\n  TChainOverride extends Chain | undefined = Chain | undefined,\n> = UnionOmit<\n  FormattedTransactionRequest<\n    TChainOverride extends Chain ? TChainOverride : TChain\n  >,\n  'from'\n> &\n  GetAccountParameter<TAccount> &\n  GetChain<TChain, TChainOverride>\n\nexport type SignTransactionReturnType = TransactionSerialized\n\nexport type SignTransactionErrorType =\n  | ParseAccountErrorType\n  | AssertRequestErrorType\n  | GetChainIdErrorType\n  | AssertCurrentChainErrorType\n  | SignTransactionErrorType_account\n  | NumberToHexErrorType\n  | RequestErrorType\n  | ErrorType\n\n/**\n * Signs a transaction.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/signTransaction.html\n * - JSON-RPC Methods:\n *   - JSON-RPC Accounts: [`eth_signTransaction`](https://ethereum.github.io/execution-apis/api-documentation/)\n *   - Local Accounts: Signs locally. No JSON-RPC request.\n *\n * @param args - {@link SignTransactionParameters}\n * @returns The signed serialized tranasction. {@link SignTransactionReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { signTransaction } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const signature = await signTransaction(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: 1n,\n * })\n *\n * @example\n * // Account Hoisting\n * import { createWalletClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { signTransaction } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0xâ€¦'),\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const signature = await signTransaction(client, {\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: 1n,\n * })\n */\nexport async function signTransaction<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n  TChainOverride extends Chain | undefined = undefined,\n>(\n  client: Client<Transport, TChain, TAccount>,\n  args: SignTransactionParameters<TChain, TAccount, TChainOverride>,\n): Promise<SignTransactionReturnType> {\n  const {\n    account: account_ = client.account,\n    chain = client.chain,\n    ...transaction\n  } = args\n\n  if (!account_)\n    throw new AccountNotFoundError({\n      docsPath: '/docs/actions/wallet/signTransaction',\n    })\n  const account = parseAccount(account_)\n\n  assertRequest({\n    account,\n    ...args,\n  })\n\n  const chainId = await getAction(client, getChainId, 'getChainId')({})\n  if (chain !== null)\n    assertCurrentChain({\n      currentChainId: chainId,\n      chain,\n    })\n\n  const formatters = chain?.formatters || client.chain?.formatters\n  const format =\n    formatters?.transactionRequest?.format || formatTransactionRequest\n\n  if (account.type === 'local')\n    return account.signTransaction(\n      {\n        ...transaction,\n        chainId,\n      } as unknown as TransactionSerializable,\n      { serializer: client.chain?.serializers?.transaction },\n    ) as Promise<SignTransactionReturnType>\n\n  return await client.request({\n    method: 'eth_signTransaction',\n    params: [\n      {\n        ...format(transaction as unknown as TransactionRequest),\n        chainId: numberToHex(chainId),\n        from: account.address,\n      } as unknown as RpcTransactionRequest,\n    ],\n  })\n}\n"],"mappings":";;;;;;AACA,MAAAA,iBAAA,GAAAC,OAAA;AAOA,MAAAC,YAAA,GAAAD,OAAA;AAYA,MAAAE,uBAAA,GAAAF,OAAA;AAKA,MAAAG,uBAAA,GAAAH,OAAA;AAIA,MAAAI,cAAA,GAAAJ,OAAA;AACA,MAAAK,UAAA,GAAAL,OAAA;AACA,MAAAM,kBAAA,GAAAN,OAAA;AAIA,MAAAO,eAAA,GAAAP,OAAA;AAsEO,eAAeQ,eAAeA,CAKnCC,MAA2C,EAC3CC,IAAiE;EAEjE,MAAM;IACJC,OAAO,EAAEC,QAAQ,GAAGH,MAAM,CAACE,OAAO;IAClCE,KAAK,GAAGJ,MAAM,CAACI,KAAK;IACpB,GAAGC;EAAW,CACf,GAAGJ,IAAI;EAER,IAAI,CAACE,QAAQ,EACX,MAAM,IAAIX,YAAA,CAAAc,oBAAoB,CAAC;IAC7BC,QAAQ,EAAE;GACX,CAAC;EACJ,MAAML,OAAO,GAAG,IAAAZ,iBAAA,CAAAkB,YAAY,EAACL,QAAQ,CAAC;EAEtC,IAAAN,kBAAA,CAAAY,aAAa,EAAC;IACZP,OAAO;IACP,GAAGD;GACJ,CAAC;EAEF,MAAMS,OAAO,GAAG,MAAM,IAAAf,cAAA,CAAAgB,SAAS,EAACX,MAAM,EAAEF,eAAA,CAAAc,UAAU,EAAE,YAAY,CAAC,CAAC,EAAE,CAAC;EACrE,IAAIR,KAAK,KAAK,IAAI,EAChB,IAAAX,uBAAA,CAAAoB,kBAAkB,EAAC;IACjBC,cAAc,EAAEJ,OAAO;IACvBN;GACD,CAAC;EAEJ,MAAMW,UAAU,GAAGX,KAAK,EAAEW,UAAU,IAAIf,MAAM,CAACI,KAAK,EAAEW,UAAU;EAChE,MAAMC,MAAM,GACVD,UAAU,EAAEE,kBAAkB,EAAED,MAAM,IAAItB,uBAAA,CAAAwB,wBAAwB;EAEpE,IAAIhB,OAAO,CAACiB,IAAI,KAAK,OAAO,EAC1B,OAAOjB,OAAO,CAACH,eAAe,CAC5B;IACE,GAAGM,WAAW;IACdK;GACqC,EACvC;IAAEU,UAAU,EAAEpB,MAAM,CAACI,KAAK,EAAEiB,WAAW,EAAEhB;EAAW,CAAE,CACjB;EAEzC,OAAO,MAAML,MAAM,CAACsB,OAAO,CAAC;IAC1BC,MAAM,EAAE,qBAAqB;IAC7BC,MAAM,EAAE,CACN;MACE,GAAGR,MAAM,CAACX,WAA4C,CAAC;MACvDK,OAAO,EAAE,IAAAd,UAAA,CAAA6B,WAAW,EAACf,OAAO,CAAC;MAC7BgB,IAAI,EAAExB,OAAO,CAACyB;KACqB;GAExC,CAAC;AACJ;AAvDAC,OAAA,CAAA7B,eAAA,GAAAA,eAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}