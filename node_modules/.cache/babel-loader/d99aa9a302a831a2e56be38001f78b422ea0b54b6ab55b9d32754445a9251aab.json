{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.verifyTypedData = void 0;\nconst hashTypedData_js_1 = require(\"../../utils/signature/hashTypedData.js\");\nconst verifyHash_js_1 = require(\"./verifyHash.js\");\nasync function verifyTypedData(client, {\n  address,\n  signature,\n  message,\n  primaryType,\n  types,\n  domain,\n  ...callRequest\n}) {\n  const hash = (0, hashTypedData_js_1.hashTypedData)({\n    message,\n    primaryType,\n    types,\n    domain\n  });\n  return (0, verifyHash_js_1.verifyHash)(client, {\n    address,\n    hash,\n    signature,\n    ...callRequest\n  });\n}\nexports.verifyTypedData = verifyTypedData;","map":{"version":3,"names":["hashTypedData_js_1","require","verifyHash_js_1","verifyTypedData","client","address","signature","message","primaryType","types","domain","callRequest","hash","hashTypedData","verifyHash","exports"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/public/verifyTypedData.ts"],"sourcesContent":["import type { Address, TypedData } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport type { TypedDataDefinition } from '../../types/typedData.js'\nimport {\n  type HashTypedDataErrorType,\n  hashTypedData,\n} from '../../utils/signature/hashTypedData.js'\nimport {\n  type VerifyHashErrorType,\n  type VerifyHashParameters,\n  verifyHash,\n} from './verifyHash.js'\n\nexport type VerifyTypedDataParameters<\n  TTypedData extends TypedData | { [key: string]: unknown } = TypedData,\n  TPrimaryType extends string = string,\n> = Omit<VerifyHashParameters, 'hash'> &\n  TypedDataDefinition<TTypedData, TPrimaryType> & {\n    /** The address to verify the typed data for. */\n    address: Address\n    /** The signature to verify */\n    signature: Hex | ByteArray\n  }\n\nexport type VerifyTypedDataReturnType = boolean\n\nexport type VerifyTypedDataErrorType =\n  | HashTypedDataErrorType\n  | VerifyHashErrorType\n  | ErrorType\n\n/**\n * Verify that typed data was signed by the provided address.\n *\n * - Docs {@link https://viem.sh/docs/actions/public/verifyTypedData.html}\n *\n * @param client - Client to use.\n * @param parameters - {@link VerifyTypedDataParameters}\n * @returns Whether or not the signature is valid. {@link VerifyTypedDataReturnType}\n */\nexport async function verifyTypedData<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  {\n    address,\n    signature,\n    message,\n    primaryType,\n    types,\n    domain,\n    ...callRequest\n  }: VerifyTypedDataParameters,\n): Promise<VerifyTypedDataReturnType> {\n  const hash = hashTypedData({ message, primaryType, types, domain })\n  return verifyHash(client, {\n    address,\n    hash,\n    signature,\n    ...callRequest,\n  })\n}\n"],"mappings":";;;;;;AAQA,MAAAA,kBAAA,GAAAC,OAAA;AAIA,MAAAC,eAAA,GAAAD,OAAA;AAiCO,eAAeE,eAAeA,CACnCC,MAAiC,EACjC;EACEC,OAAO;EACPC,SAAS;EACTC,OAAO;EACPC,WAAW;EACXC,KAAK;EACLC,MAAM;EACN,GAAGC;AAAW,CACY;EAE5B,MAAMC,IAAI,GAAG,IAAAZ,kBAAA,CAAAa,aAAa,EAAC;IAAEN,OAAO;IAAEC,WAAW;IAAEC,KAAK;IAAEC;EAAM,CAAE,CAAC;EACnE,OAAO,IAAAR,eAAA,CAAAY,UAAU,EAACV,MAAM,EAAE;IACxBC,OAAO;IACPO,IAAI;IACJN,SAAS;IACT,GAAGK;GACJ,CAAC;AACJ;AAnBAI,OAAA,CAAAZ,eAAA,GAAAA,eAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}