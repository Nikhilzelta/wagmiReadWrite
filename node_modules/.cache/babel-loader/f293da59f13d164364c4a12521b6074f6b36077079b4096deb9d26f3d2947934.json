{"ast":null,"code":"import 'viem';\nimport { Emitter } from '../createEmitter.js';\nimport '../createStorage.js';\nimport '../types/utils.js';\nexport function createConnector(createConnectorFn) {\n  return createConnectorFn;\n}","map":{"version":3,"names":["Emitter","createConnector","createConnectorFn"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@wagmi/core/src/connectors/createConnector.ts"],"sourcesContent":["import {\n  type Address,\n  type Chain,\n  type Client,\n  type ProviderConnectInfo,\n  type ProviderMessage,\n} from 'viem'\n\nimport { Emitter } from '../createEmitter.js'\nimport { type Storage } from '../createStorage.js'\nimport { type Evaluate } from '../types/utils.js'\n\nexport type ConnectorEventMap = {\n  change: {\n    accounts?: readonly Address[] | undefined\n    chainId?: number | undefined\n  }\n  connect: { accounts: readonly Address[]; chainId: number }\n  disconnect: never\n  error: { error: Error }\n  message: { type: string; data?: unknown | undefined }\n}\n\nexport type CreateConnectorFn<\n  provider = unknown,\n  properties extends Record<string, unknown> = {},\n  storageItem extends Record<string, unknown> = {},\n> = (config: {\n  chains: readonly [Chain, ...Chain[]]\n  emitter: Emitter<ConnectorEventMap>\n  storage?: Evaluate<Storage<storageItem>> | null | undefined\n}) => Evaluate<\n  {\n    readonly icon?: string | undefined\n    readonly id: string\n    readonly name: string\n    readonly type: string\n\n    setup?(): Promise<void>\n    connect(\n      parameters?:\n        | { chainId?: number | undefined; isReconnecting?: boolean | undefined }\n        | undefined,\n    ): Promise<{\n      accounts: readonly Address[]\n      chainId: number\n    }>\n    disconnect(): Promise<void>\n    getAccounts(): Promise<readonly Address[]>\n    getChainId(): Promise<number>\n    getProvider(\n      parameters?: { chainId?: number | undefined } | undefined,\n    ): Promise<provider>\n    getClient?(\n      parameters?: { chainId?: number | undefined } | undefined,\n    ): Promise<Client>\n    isAuthorized(): Promise<boolean>\n    switchChain?(parameters: { chainId: number }): Promise<Chain>\n\n    onAccountsChanged(accounts: string[]): void\n    onChainChanged(chainId: string): void\n    onConnect?(connectInfo: ProviderConnectInfo): void\n    onDisconnect(error?: Error | undefined): void\n    onMessage?(message: ProviderMessage): void\n  } & properties\n>\n\nexport function createConnector<\n  provider,\n  properties extends Record<string, unknown> = {},\n  storageItem extends Record<string, unknown> = {},\n>(createConnectorFn: CreateConnectorFn<provider, properties, storageItem>) {\n  return createConnectorFn\n}\n"],"mappings":"AAAA,OAMO,MAAM;AAEb,SAASA,OAAO,QAAQ,qBAAqB;AAC7C,OAA6B,qBAAqB;AAClD,OAA8B,mBAAmB;AAyDjD,OAAM,SAAUC,eAAeA,CAI7BC,iBAAuE;EACvE,OAAOA,iBAAiB;AAC1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}