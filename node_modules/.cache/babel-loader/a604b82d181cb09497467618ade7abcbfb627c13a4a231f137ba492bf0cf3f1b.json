{"ast":null,"code":"import { NegativeOffsetError, PositionOutOfBoundsError, RecursiveReadLimitExceededError } from '../errors/cursor.js';\nconst staticCursor = {\n  bytes: new Uint8Array(),\n  dataView: new DataView(new ArrayBuffer(0)),\n  position: 0,\n  positionReadCount: new Map(),\n  recursiveReadCount: 0,\n  recursiveReadLimit: Infinity,\n  assertReadLimit() {\n    if (this.recursiveReadCount >= this.recursiveReadLimit) throw new RecursiveReadLimitExceededError({\n      count: this.recursiveReadCount + 1,\n      limit: this.recursiveReadLimit\n    });\n  },\n  assertPosition(position) {\n    if (position < 0 || position > this.bytes.length - 1) throw new PositionOutOfBoundsError({\n      length: this.bytes.length,\n      position\n    });\n  },\n  decrementPosition(offset) {\n    if (offset < 0) throw new NegativeOffsetError({\n      offset\n    });\n    const position = this.position - offset;\n    this.assertPosition(position);\n    this.position = position;\n  },\n  getReadCount(position) {\n    return this.positionReadCount.get(position || this.position) || 0;\n  },\n  incrementPosition(offset) {\n    if (offset < 0) throw new NegativeOffsetError({\n      offset\n    });\n    const position = this.position + offset;\n    this.assertPosition(position);\n    this.position = position;\n  },\n  inspectByte(position_) {\n    const position = position_ ?? this.position;\n    this.assertPosition(position);\n    return this.bytes[position];\n  },\n  inspectBytes(length, position_) {\n    const position = position_ ?? this.position;\n    this.assertPosition(position + length - 1);\n    return this.bytes.subarray(position, position + length);\n  },\n  inspectUint8(position_) {\n    const position = position_ ?? this.position;\n    this.assertPosition(position);\n    return this.bytes[position];\n  },\n  inspectUint16(position_) {\n    const position = position_ ?? this.position;\n    this.assertPosition(position + 1);\n    return this.dataView.getUint16(position);\n  },\n  inspectUint24(position_) {\n    const position = position_ ?? this.position;\n    this.assertPosition(position + 2);\n    return (this.dataView.getUint16(position) << 8) + this.dataView.getUint8(position + 2);\n  },\n  inspectUint32(position_) {\n    const position = position_ ?? this.position;\n    this.assertPosition(position + 3);\n    return this.dataView.getUint32(position);\n  },\n  pushByte(byte) {\n    this.assertPosition(this.position);\n    this.bytes[this.position] = byte;\n    this.position++;\n  },\n  pushBytes(bytes) {\n    this.assertPosition(this.position + bytes.length - 1);\n    this.bytes.set(bytes, this.position);\n    this.position += bytes.length;\n  },\n  pushUint8(value) {\n    this.assertPosition(this.position);\n    this.bytes[this.position] = value;\n    this.position++;\n  },\n  pushUint16(value) {\n    this.assertPosition(this.position + 1);\n    this.dataView.setUint16(this.position, value);\n    this.position += 2;\n  },\n  pushUint24(value) {\n    this.assertPosition(this.position + 2);\n    this.dataView.setUint16(this.position, value >> 8);\n    this.dataView.setUint8(this.position + 2, value & ~4294967040);\n    this.position += 3;\n  },\n  pushUint32(value) {\n    this.assertPosition(this.position + 3);\n    this.dataView.setUint32(this.position, value);\n    this.position += 4;\n  },\n  readByte() {\n    this.assertReadLimit();\n    this._touch();\n    const value = this.inspectByte();\n    this.position++;\n    return value;\n  },\n  readBytes(length, size) {\n    this.assertReadLimit();\n    this._touch();\n    const value = this.inspectBytes(length);\n    this.position += size ?? length;\n    return value;\n  },\n  readUint8() {\n    this.assertReadLimit();\n    this._touch();\n    const value = this.inspectUint8();\n    this.position += 1;\n    return value;\n  },\n  readUint16() {\n    this.assertReadLimit();\n    this._touch();\n    const value = this.inspectUint16();\n    this.position += 2;\n    return value;\n  },\n  readUint24() {\n    this.assertReadLimit();\n    this._touch();\n    const value = this.inspectUint24();\n    this.position += 3;\n    return value;\n  },\n  readUint32() {\n    this.assertReadLimit();\n    this._touch();\n    const value = this.inspectUint32();\n    this.position += 4;\n    return value;\n  },\n  get remaining() {\n    return this.bytes.length - this.position;\n  },\n  setPosition(position) {\n    const oldPosition = this.position;\n    this.assertPosition(position);\n    this.position = position;\n    return () => this.position = oldPosition;\n  },\n  _touch() {\n    if (this.recursiveReadLimit === Infinity) return;\n    const count = this.getReadCount();\n    this.positionReadCount.set(this.position, count + 1);\n    if (count > 0) this.recursiveReadCount++;\n  }\n};\nexport function createCursor(bytes, {\n  recursiveReadLimit = 8_192\n} = {}) {\n  const cursor = Object.create(staticCursor);\n  cursor.bytes = bytes;\n  cursor.dataView = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n  cursor.positionReadCount = new Map();\n  cursor.recursiveReadLimit = recursiveReadLimit;\n  return cursor;\n}","map":{"version":3,"names":["NegativeOffsetError","PositionOutOfBoundsError","RecursiveReadLimitExceededError","staticCursor","bytes","Uint8Array","dataView","DataView","ArrayBuffer","position","positionReadCount","Map","recursiveReadCount","recursiveReadLimit","Infinity","assertReadLimit","count","limit","assertPosition","length","decrementPosition","offset","getReadCount","get","incrementPosition","inspectByte","position_","inspectBytes","subarray","inspectUint8","inspectUint16","getUint16","inspectUint24","getUint8","inspectUint32","getUint32","pushByte","byte","pushBytes","set","pushUint8","value","pushUint16","setUint16","pushUint24","setUint8","pushUint32","setUint32","readByte","_touch","readBytes","size","readUint8","readUint16","readUint24","readUint32","remaining","setPosition","oldPosition","createCursor","cursor","Object","create","buffer","byteOffset","byteLength"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/viem/utils/cursor.ts"],"sourcesContent":["import {\n  NegativeOffsetError,\n  PositionOutOfBoundsError,\n  RecursiveReadLimitExceededError,\n} from '../errors/cursor.js'\nimport type { ErrorType } from '../errors/utils.js'\nimport type { ByteArray } from '../types/misc.js'\n\nexport type Cursor = {\n  bytes: ByteArray\n  dataView: DataView\n  position: number\n  positionReadCount: Map<number, number>\n  recursiveReadCount: number\n  recursiveReadLimit: number\n  remaining: number\n  assertReadLimit(position?: number): void\n  assertPosition(position: number): void\n  decrementPosition(offset: number): void\n  getReadCount(position?: number): number\n  incrementPosition(offset: number): void\n  inspectByte(position?: number): ByteArray[number]\n  inspectBytes(length: number, position?: number): ByteArray\n  inspectUint8(position?: number): number\n  inspectUint16(position?: number): number\n  inspectUint24(position?: number): number\n  inspectUint32(position?: number): number\n  pushByte(byte: ByteArray[number]): void\n  pushBytes(bytes: ByteArray): void\n  pushUint8(value: number): void\n  pushUint16(value: number): void\n  pushUint24(value: number): void\n  pushUint32(value: number): void\n  readByte(): ByteArray[number]\n  readBytes(length: number, size?: number): ByteArray\n  readUint8(): number\n  readUint16(): number\n  readUint24(): number\n  readUint32(): number\n  setPosition(position: number): () => void\n  _touch(): void\n}\n\nexport type CreateCursorErrorType = ErrorType\n\nexport type CursorErrorType =\n  | CursorAssertPositionErrorType\n  | CursorDecrementPositionErrorType\n  | CursorIncrementPositionErrorType\n  | ErrorType\n\nexport type CursorAssertPositionErrorType = PositionOutOfBoundsError | ErrorType\n\nexport type CursorDecrementPositionErrorType = NegativeOffsetError | ErrorType\n\nexport type CursorIncrementPositionErrorType = NegativeOffsetError | ErrorType\n\nconst staticCursor: Cursor = {\n  bytes: new Uint8Array(),\n  dataView: new DataView(new ArrayBuffer(0)),\n  position: 0,\n  positionReadCount: new Map(),\n  recursiveReadCount: 0,\n  recursiveReadLimit: Infinity,\n  assertReadLimit() {\n    if (this.recursiveReadCount >= this.recursiveReadLimit)\n      throw new RecursiveReadLimitExceededError({\n        count: this.recursiveReadCount + 1,\n        limit: this.recursiveReadLimit,\n      })\n  },\n  assertPosition(position) {\n    if (position < 0 || position > this.bytes.length - 1)\n      throw new PositionOutOfBoundsError({\n        length: this.bytes.length,\n        position,\n      })\n  },\n  decrementPosition(offset) {\n    if (offset < 0) throw new NegativeOffsetError({ offset })\n    const position = this.position - offset\n    this.assertPosition(position)\n    this.position = position\n  },\n  getReadCount(position) {\n    return this.positionReadCount.get(position || this.position) || 0\n  },\n  incrementPosition(offset) {\n    if (offset < 0) throw new NegativeOffsetError({ offset })\n    const position = this.position + offset\n    this.assertPosition(position)\n    this.position = position\n  },\n  inspectByte(position_) {\n    const position = position_ ?? this.position\n    this.assertPosition(position)\n    return this.bytes[position]\n  },\n  inspectBytes(length, position_) {\n    const position = position_ ?? this.position\n    this.assertPosition(position + length - 1)\n    return this.bytes.subarray(position, position + length)\n  },\n  inspectUint8(position_) {\n    const position = position_ ?? this.position\n    this.assertPosition(position)\n    return this.bytes[position]\n  },\n  inspectUint16(position_) {\n    const position = position_ ?? this.position\n    this.assertPosition(position + 1)\n    return this.dataView.getUint16(position)\n  },\n  inspectUint24(position_) {\n    const position = position_ ?? this.position\n    this.assertPosition(position + 2)\n    return (\n      (this.dataView.getUint16(position) << 8) +\n      this.dataView.getUint8(position + 2)\n    )\n  },\n  inspectUint32(position_) {\n    const position = position_ ?? this.position\n    this.assertPosition(position + 3)\n    return this.dataView.getUint32(position)\n  },\n  pushByte(byte: ByteArray[number]) {\n    this.assertPosition(this.position)\n    this.bytes[this.position] = byte\n    this.position++\n  },\n  pushBytes(bytes: ByteArray) {\n    this.assertPosition(this.position + bytes.length - 1)\n    this.bytes.set(bytes, this.position)\n    this.position += bytes.length\n  },\n  pushUint8(value: number) {\n    this.assertPosition(this.position)\n    this.bytes[this.position] = value\n    this.position++\n  },\n  pushUint16(value: number) {\n    this.assertPosition(this.position + 1)\n    this.dataView.setUint16(this.position, value)\n    this.position += 2\n  },\n  pushUint24(value: number) {\n    this.assertPosition(this.position + 2)\n    this.dataView.setUint16(this.position, value >> 8)\n    this.dataView.setUint8(this.position + 2, value & ~4294967040)\n    this.position += 3\n  },\n  pushUint32(value: number) {\n    this.assertPosition(this.position + 3)\n    this.dataView.setUint32(this.position, value)\n    this.position += 4\n  },\n  readByte() {\n    this.assertReadLimit()\n    this._touch()\n    const value = this.inspectByte()\n    this.position++\n    return value\n  },\n  readBytes(length, size) {\n    this.assertReadLimit()\n    this._touch()\n    const value = this.inspectBytes(length)\n    this.position += size ?? length\n    return value\n  },\n  readUint8() {\n    this.assertReadLimit()\n    this._touch()\n    const value = this.inspectUint8()\n    this.position += 1\n    return value\n  },\n  readUint16() {\n    this.assertReadLimit()\n    this._touch()\n    const value = this.inspectUint16()\n    this.position += 2\n    return value\n  },\n  readUint24() {\n    this.assertReadLimit()\n    this._touch()\n    const value = this.inspectUint24()\n    this.position += 3\n    return value\n  },\n  readUint32() {\n    this.assertReadLimit()\n    this._touch()\n    const value = this.inspectUint32()\n    this.position += 4\n    return value\n  },\n  get remaining() {\n    return this.bytes.length - this.position\n  },\n  setPosition(position) {\n    const oldPosition = this.position\n    this.assertPosition(position)\n    this.position = position\n    return () => (this.position = oldPosition)\n  },\n  _touch() {\n    if (this.recursiveReadLimit === Infinity) return\n    const count = this.getReadCount()\n    this.positionReadCount.set(this.position, count + 1)\n    if (count > 0) this.recursiveReadCount++\n  },\n}\n\ntype CursorConfig = { recursiveReadLimit?: number | undefined }\n\nexport function createCursor(\n  bytes: ByteArray,\n  { recursiveReadLimit = 8_192 }: CursorConfig = {},\n): Cursor {\n  const cursor: Cursor = Object.create(staticCursor)\n  cursor.bytes = bytes\n  cursor.dataView = new DataView(\n    bytes.buffer,\n    bytes.byteOffset,\n    bytes.byteLength,\n  )\n  cursor.positionReadCount = new Map()\n  cursor.recursiveReadLimit = recursiveReadLimit\n  return cursor\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}