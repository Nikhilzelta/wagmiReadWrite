{"ast":null,"code":"import { secp256k1 } from '@noble/curves/secp256k1';\nimport { hexToBigInt } from '../../utils/encoding/fromHex.js';\nimport '../../utils/encoding/toHex.js';\n/**\n * @description Converts a signature into hex format.\n *\n * @param signature The signature to convert.\n * @returns The signature in hex format.\n *\n * @example\n * signatureToHex({\n *   r: '0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf',\n *   s: '0x4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db8',\n *   yParity: 1\n * })\n * // \"0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db81c\"\n */\nexport function signatureToHex({\n  r,\n  s,\n  v,\n  yParity\n}) {\n  const vHex = (() => {\n    if (v === 27n || yParity === 0) return '1b';\n    if (v === 28n || yParity === 1) return '1c';\n    throw new Error('Invalid v value');\n  })();\n  return `0x${new secp256k1.Signature(hexToBigInt(r), hexToBigInt(s)).toCompactHex()}${vHex}`;\n}","map":{"version":3,"names":["secp256k1","hexToBigInt","signatureToHex","r","s","v","yParity","vHex","Error","Signature","toCompactHex"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/viem/utils/signature/signatureToHex.ts"],"sourcesContent":["import { secp256k1 } from '@noble/curves/secp256k1'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hex, Signature } from '../../types/misc.js'\nimport {\n  type HexToBigIntErrorType,\n  hexToBigInt,\n} from '../../utils/encoding/fromHex.js'\nimport { type ToHexErrorType } from '../../utils/encoding/toHex.js'\n\nexport type SignatureToHexErrorType =\n  | HexToBigIntErrorType\n  | ToHexErrorType\n  | ErrorType\n\n/**\n * @description Converts a signature into hex format.\n *\n * @param signature The signature to convert.\n * @returns The signature in hex format.\n *\n * @example\n * signatureToHex({\n *   r: '0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf',\n *   s: '0x4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db8',\n *   yParity: 1\n * })\n * // \"0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db81c\"\n */\nexport function signatureToHex({ r, s, v, yParity }: Signature): Hex {\n  const vHex = (() => {\n    if (v === 27n || yParity === 0) return '1b'\n    if (v === 28n || yParity === 1) return '1c'\n    throw new Error('Invalid v value')\n  })()\n  return `0x${new secp256k1.Signature(\n    hexToBigInt(r),\n    hexToBigInt(s),\n  ).toCompactHex()}${vHex}`\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,yBAAyB;AAInD,SAEEC,WAAW,QACN,iCAAiC;AACxC,OAAoC,+BAA+B;AAOnE;;;;;;;;;;;;;;AAcA,OAAM,SAAUC,cAAcA,CAAC;EAAEC,CAAC;EAAEC,CAAC;EAAEC,CAAC;EAAEC;AAAO,CAAa;EAC5D,MAAMC,IAAI,GAAG,CAAC,MAAK;IACjB,IAAIF,CAAC,KAAK,GAAG,IAAIC,OAAO,KAAK,CAAC,EAAE,OAAO,IAAI;IAC3C,IAAID,CAAC,KAAK,GAAG,IAAIC,OAAO,KAAK,CAAC,EAAE,OAAO,IAAI;IAC3C,MAAM,IAAIE,KAAK,CAAC,iBAAiB,CAAC;EACpC,CAAC,EAAC,CAAE;EACJ,OAAO,KAAK,IAAIR,SAAS,CAACS,SAAS,CACjCR,WAAW,CAACE,CAAC,CAAC,EACdF,WAAW,CAACG,CAAC,CAAC,CACf,CAACM,YAAY,EAAE,GAAGH,IAAI,EAAE;AAC3B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}