{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getEnsResolver = void 0;\nconst getChainContractAddress_js_1 = require(\"../../utils/chain/getChainContractAddress.js\");\nconst toHex_js_1 = require(\"../../utils/encoding/toHex.js\");\nconst packetToBytes_js_1 = require(\"../../utils/ens/packetToBytes.js\");\nconst getAction_js_1 = require(\"../../utils/getAction.js\");\nconst readContract_js_1 = require(\"../public/readContract.js\");\nasync function getEnsResolver(client, {\n  blockNumber,\n  blockTag,\n  name,\n  universalResolverAddress: universalResolverAddress_\n}) {\n  let universalResolverAddress = universalResolverAddress_;\n  if (!universalResolverAddress) {\n    if (!client.chain) throw new Error('client chain not configured. universalResolverAddress is required.');\n    universalResolverAddress = (0, getChainContractAddress_js_1.getChainContractAddress)({\n      blockNumber,\n      chain: client.chain,\n      contract: 'ensUniversalResolver'\n    });\n  }\n  const [resolverAddress] = await (0, getAction_js_1.getAction)(client, readContract_js_1.readContract, 'readContract')({\n    address: universalResolverAddress,\n    abi: [{\n      inputs: [{\n        type: 'bytes'\n      }],\n      name: 'findResolver',\n      outputs: [{\n        type: 'address'\n      }, {\n        type: 'bytes32'\n      }],\n      stateMutability: 'view',\n      type: 'function'\n    }],\n    functionName: 'findResolver',\n    args: [(0, toHex_js_1.toHex)((0, packetToBytes_js_1.packetToBytes)(name))],\n    blockNumber,\n    blockTag\n  });\n  return resolverAddress;\n}\nexports.getEnsResolver = getEnsResolver;","map":{"version":3,"names":["getChainContractAddress_js_1","require","toHex_js_1","packetToBytes_js_1","getAction_js_1","readContract_js_1","getEnsResolver","client","blockNumber","blockTag","name","universalResolverAddress","universalResolverAddress_","chain","Error","getChainContractAddress","contract","resolverAddress","getAction","readContract","address","abi","inputs","type","outputs","stateMutability","functionName","args","toHex","packetToBytes","exports"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/ens/getEnsResolver.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Prettify } from '../../types/utils.js'\nimport {\n  type GetChainContractAddressErrorType,\n  getChainContractAddress,\n} from '../../utils/chain/getChainContractAddress.js'\nimport { type ToHexErrorType, toHex } from '../../utils/encoding/toHex.js'\nimport {\n  type PacketToBytesErrorType,\n  packetToBytes,\n} from '../../utils/ens/packetToBytes.js'\nimport { getAction } from '../../utils/getAction.js'\nimport {\n  type ReadContractParameters,\n  readContract,\n} from '../public/readContract.js'\n\nexport type GetEnsResolverParameters = Prettify<\n  Pick<ReadContractParameters, 'blockNumber' | 'blockTag'> & {\n    /** Name to get the address for. */\n    name: string\n    /** Address of ENS Universal Resolver Contract. */\n    universalResolverAddress?: Address\n  }\n>\n\nexport type GetEnsResolverReturnType = Address\n\nexport type GetEnsResolverErrorType =\n  | GetChainContractAddressErrorType\n  | ToHexErrorType\n  | PacketToBytesErrorType\n  | ErrorType\n\n/**\n * Gets resolver for ENS name.\n *\n * - Docs: https://viem.sh/docs/ens/actions/getEnsResolver.html\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\n *\n * Calls `findResolver(bytes)` on ENS Universal Resolver Contract to retrieve the resolver of an ENS name.\n *\n * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `getEnsAddress`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize.html) function for this.\n *\n * @param client - Client to use\n * @param parameters - {@link GetEnsResolverParameters}\n * @returns Address for ENS resolver. {@link GetEnsResolverReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getEnsResolver, normalize } from 'viem/ens'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const resolverAddress = await getEnsResolver(client, {\n *   name: normalize('wevm.eth'),\n * })\n * // '0x4976fb03C32e5B8cfe2b6cCB31c09Ba78EBaBa41'\n */\nexport async function getEnsResolver<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  {\n    blockNumber,\n    blockTag,\n    name,\n    universalResolverAddress: universalResolverAddress_,\n  }: GetEnsResolverParameters,\n) {\n  let universalResolverAddress = universalResolverAddress_\n  if (!universalResolverAddress) {\n    if (!client.chain)\n      throw new Error(\n        'client chain not configured. universalResolverAddress is required.',\n      )\n\n    universalResolverAddress = getChainContractAddress({\n      blockNumber,\n      chain: client.chain,\n      contract: 'ensUniversalResolver',\n    })\n  }\n\n  const [resolverAddress] = await getAction(\n    client,\n    readContract,\n    'readContract',\n  )({\n    address: universalResolverAddress,\n    abi: [\n      {\n        inputs: [{ type: 'bytes' }],\n        name: 'findResolver',\n        outputs: [{ type: 'address' }, { type: 'bytes32' }],\n        stateMutability: 'view',\n        type: 'function',\n      },\n    ],\n    functionName: 'findResolver',\n    args: [toHex(packetToBytes(name))],\n    blockNumber,\n    blockTag,\n  })\n  return resolverAddress\n}\n"],"mappings":";;;;;;AAOA,MAAAA,4BAAA,GAAAC,OAAA;AAIA,MAAAC,UAAA,GAAAD,OAAA;AACA,MAAAE,kBAAA,GAAAF,OAAA;AAIA,MAAAG,cAAA,GAAAH,OAAA;AACA,MAAAI,iBAAA,GAAAJ,OAAA;AAkDO,eAAeK,cAAcA,CAClCC,MAAiC,EACjC;EACEC,WAAW;EACXC,QAAQ;EACRC,IAAI;EACJC,wBAAwB,EAAEC;AAAyB,CAC1B;EAE3B,IAAID,wBAAwB,GAAGC,yBAAyB;EACxD,IAAI,CAACD,wBAAwB,EAAE;IAC7B,IAAI,CAACJ,MAAM,CAACM,KAAK,EACf,MAAM,IAAIC,KAAK,CACb,oEAAoE,CACrE;IAEHH,wBAAwB,GAAG,IAAAX,4BAAA,CAAAe,uBAAuB,EAAC;MACjDP,WAAW;MACXK,KAAK,EAAEN,MAAM,CAACM,KAAK;MACnBG,QAAQ,EAAE;KACX,CAAC;;EAGJ,MAAM,CAACC,eAAe,CAAC,GAAG,MAAM,IAAAb,cAAA,CAAAc,SAAS,EACvCX,MAAM,EACNF,iBAAA,CAAAc,YAAY,EACZ,cAAc,CACf,CAAC;IACAC,OAAO,EAAET,wBAAwB;IACjCU,GAAG,EAAE,CACH;MACEC,MAAM,EAAE,CAAC;QAAEC,IAAI,EAAE;MAAO,CAAE,CAAC;MAC3Bb,IAAI,EAAE,cAAc;MACpBc,OAAO,EAAE,CAAC;QAAED,IAAI,EAAE;MAAS,CAAE,EAAE;QAAEA,IAAI,EAAE;MAAS,CAAE,CAAC;MACnDE,eAAe,EAAE,MAAM;MACvBF,IAAI,EAAE;KACP,CACF;IACDG,YAAY,EAAE,cAAc;IAC5BC,IAAI,EAAE,CAAC,IAAAzB,UAAA,CAAA0B,KAAK,EAAC,IAAAzB,kBAAA,CAAA0B,aAAa,EAACnB,IAAI,CAAC,CAAC,CAAC;IAClCF,WAAW;IACXC;GACD,CAAC;EACF,OAAOQ,eAAe;AACxB;AA5CAa,OAAA,CAAAxB,cAAA,GAAAA,cAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}