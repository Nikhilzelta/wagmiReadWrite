{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseAbiItem = void 0;\nconst index_js_1 = require(\"../index.js\");\nconst signatures_js_1 = require(\"./runtime/signatures.js\");\nconst structs_js_1 = require(\"./runtime/structs.js\");\nconst utils_js_1 = require(\"./runtime/utils.js\");\nfunction parseAbiItem(signature) {\n  let abiItem;\n  if (typeof signature === 'string') abiItem = (0, utils_js_1.parseSignature)(signature);else {\n    const structs = (0, structs_js_1.parseStructs)(signature);\n    const length = signature.length;\n    for (let i = 0; i < length; i++) {\n      const signature_ = signature[i];\n      if ((0, signatures_js_1.isStructSignature)(signature_)) continue;\n      abiItem = (0, utils_js_1.parseSignature)(signature_, structs);\n      break;\n    }\n  }\n  if (!abiItem) throw new index_js_1.InvalidAbiItemError({\n    signature\n  });\n  return abiItem;\n}\nexports.parseAbiItem = parseAbiItem;","map":{"version":3,"names":["index_js_1","require","signatures_js_1","structs_js_1","utils_js_1","parseAbiItem","signature","abiItem","parseSignature","structs","parseStructs","length","i","signature_","isStructSignature","InvalidAbiItemError","exports"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@safe-global/safe-apps-sdk/node_modules/abitype/src/human-readable/parseAbiItem.ts"],"sourcesContent":["import type { Abi } from '../abi.js'\nimport { InvalidAbiItemError } from '../index.js'\nimport type { Narrow } from '../narrow.js'\nimport type { Error, Filter } from '../types.js'\nimport { isStructSignature } from './runtime/signatures.js'\nimport { parseStructs } from './runtime/structs.js'\nimport { parseSignature } from './runtime/utils.js'\nimport type { Signature, Signatures } from './types/signatures.js'\nimport type { ParseStructs } from './types/structs.js'\nimport type { ParseSignature } from './types/utils.js'\n\n/**\n * Parses human-readable ABI item (e.g. error, event, function) into {@link Abi} item\n *\n * @param TSignature - Human-readable ABI item\n * @returns Parsed {@link Abi} item\n *\n * @example\n * type Result = ParseAbiItem<'function balanceOf(address owner) view returns (uint256)'>\n * //   ^? type Result = { name: \"balanceOf\"; type: \"function\"; stateMutability: \"view\";...\n *\n * @example\n * type Result = ParseAbiItem<\n *   // ^? type Result = { name: \"foo\"; type: \"function\"; stateMutability: \"view\"; inputs:...\n *   ['function foo(Baz bar) view returns (string)', 'struct Baz { string name; }']\n * >\n */\nexport type ParseAbiItem<\n  TSignature extends string | readonly string[] | readonly unknown[],\n> =\n  | (TSignature extends string\n      ? string extends TSignature\n        ? Abi[number]\n        : TSignature extends Signature<TSignature> // Validate signature\n        ? ParseSignature<TSignature>\n        : never\n      : never)\n  | (TSignature extends readonly string[]\n      ? string[] extends TSignature\n        ? Abi[number] // Return generic Abi item since type was no inferrable\n        : TSignature extends Signatures<TSignature> // Validate signature\n        ? ParseStructs<TSignature> extends infer Structs\n          ? {\n              [K in keyof TSignature]: ParseSignature<\n                TSignature[K] extends string ? TSignature[K] : never,\n                Structs\n              >\n            } extends infer Mapped extends readonly unknown[]\n            ? // Filter out `never` since those are structs\n              Filter<Mapped, never>[0] extends infer Result\n              ? Result extends undefined // convert `undefined` to `never` (e.g. `ParseAbiItem<['struct Foo { string name; }']>`)\n                ? never\n                : Result\n              : never\n            : never\n          : never\n        : never\n      : never)\n\n/**\n * Parses human-readable ABI item (e.g. error, event, function) into {@link Abi} item\n *\n * @param signature - Human-readable ABI item\n * @returns Parsed {@link Abi} item\n *\n * @example\n * const abiItem = parseAbiItem('function balanceOf(address owner) view returns (uint256)')\n * //    ^? const abiItem: { name: \"balanceOf\"; type: \"function\"; stateMutability: \"view\";...\n *\n * @example\n * const abiItem = parseAbiItem([\n *   //  ^? const abiItem: { name: \"foo\"; type: \"function\"; stateMutability: \"view\"; inputs:...\n *   'function foo(Baz bar) view returns (string)',\n *   'struct Baz { string name; }',\n * ])\n */\nexport function parseAbiItem<\n  TSignature extends string | readonly string[] | readonly unknown[],\n>(\n  signature: Narrow<TSignature> &\n    (\n      | (TSignature extends string\n          ? string extends TSignature\n            ? unknown\n            : Signature<TSignature>\n          : never)\n      | (TSignature extends readonly string[]\n          ? TSignature extends readonly [] // empty array\n            ? Error<'At least one signature required.'>\n            : string[] extends TSignature\n            ? unknown\n            : Signatures<TSignature>\n          : never)\n    ),\n): ParseAbiItem<TSignature> {\n  let abiItem\n  if (typeof signature === 'string')\n    abiItem = parseSignature(signature) as ParseAbiItem<TSignature>\n  else {\n    const structs = parseStructs(signature as readonly string[])\n    const length = signature.length as number\n    for (let i = 0; i < length; i++) {\n      const signature_ = (signature as readonly string[])[i]!\n      if (isStructSignature(signature_)) continue\n      abiItem = parseSignature(signature_, structs)\n      break\n    }\n  }\n\n  if (!abiItem) throw new InvalidAbiItemError({ signature })\n  return abiItem as ParseAbiItem<TSignature>\n}\n"],"mappings":";;;;;;AACA,MAAAA,UAAA,GAAAC,OAAA;AAGA,MAAAC,eAAA,GAAAD,OAAA;AACA,MAAAE,YAAA,GAAAF,OAAA;AACA,MAAAG,UAAA,GAAAH,OAAA;AAsEA,SAAgBI,YAAYA,CAG1BC,SAcG;EAEH,IAAIC,OAAO;EACX,IAAI,OAAOD,SAAS,KAAK,QAAQ,EAC/BC,OAAO,GAAG,IAAAH,UAAA,CAAAI,cAAc,EAACF,SAAS,CAA6B,MAC5D;IACH,MAAMG,OAAO,GAAG,IAAAN,YAAA,CAAAO,YAAY,EAACJ,SAA8B,CAAC;IAC5D,MAAMK,MAAM,GAAGL,SAAS,CAACK,MAAgB;IACzC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,MAAM,EAAEC,CAAC,EAAE,EAAE;MAC/B,MAAMC,UAAU,GAAIP,SAA+B,CAACM,CAAC,CAAE;MACvD,IAAI,IAAAV,eAAA,CAAAY,iBAAiB,EAACD,UAAU,CAAC,EAAE;MACnCN,OAAO,GAAG,IAAAH,UAAA,CAAAI,cAAc,EAACK,UAAU,EAAEJ,OAAO,CAAC;MAC7C;;;EAIJ,IAAI,CAACF,OAAO,EAAE,MAAM,IAAIP,UAAA,CAAAe,mBAAmB,CAAC;IAAET;EAAS,CAAE,CAAC;EAC1D,OAAOC,OAAmC;AAC5C;AAnCAS,OAAA,CAAAX,YAAA,GAAAA,YAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}