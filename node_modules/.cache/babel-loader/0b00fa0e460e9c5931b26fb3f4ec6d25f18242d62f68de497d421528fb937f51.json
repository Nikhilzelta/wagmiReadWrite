{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAction = void 0;\nfunction getAction(client, action, name) {\n  return params => client[action.name || name]?.(params) ?? action(client, params);\n}\nexports.getAction = getAction;","map":{"version":3,"names":["getAction","client","action","name","params","exports"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/getAction.ts"],"sourcesContent":["import type { Client } from '../clients/createClient.js'\n\n/**\n * Retrieves and returns an action from the client (if exists), and falls\n * back to the tree-shakable action.\n *\n * Useful for extracting overridden actions from a client (ie. if a consumer\n * wants to override the `sendTransaction` implementation).\n */\nexport function getAction<params extends {}, returnType extends {}>(\n  client: Client,\n  action: (_: any, params: params) => returnType,\n  // Some minifiers drop `Function.prototype.name`, meaning that `action.name`\n  // will not work. For that case, the consumer needs to pass the name explicitly.\n  name: string,\n) {\n  return (params: params): returnType =>\n    (\n      client as Client & {\n        [key: string]: (params: params) => returnType\n      }\n    )[action.name || name]?.(params) ?? action(client, params)\n}\n"],"mappings":";;;;;;AASA,SAAgBA,SAASA,CACvBC,MAAc,EACdC,MAA8C,EAG9CC,IAAY;EAEZ,OAAQC,MAAc,IAElBH,MAGD,CAACC,MAAM,CAACC,IAAI,IAAIA,IAAI,CAAC,GAAGC,MAAM,CAAC,IAAIF,MAAM,CAACD,MAAM,EAAEG,MAAM,CAAC;AAC9D;AAbAC,OAAA,CAAAL,SAAA,GAAAA,SAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}