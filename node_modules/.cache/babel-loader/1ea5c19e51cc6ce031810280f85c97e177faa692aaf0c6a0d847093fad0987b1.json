{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sliceHex = exports.sliceBytes = exports.slice = void 0;\nconst data_js_1 = require(\"../../errors/data.js\");\nconst isHex_js_1 = require(\"./isHex.js\");\nconst size_js_1 = require(\"./size.js\");\nfunction slice(value, start, end, {\n  strict\n} = {}) {\n  if ((0, isHex_js_1.isHex)(value, {\n    strict: false\n  })) return sliceHex(value, start, end, {\n    strict\n  });\n  return sliceBytes(value, start, end, {\n    strict\n  });\n}\nexports.slice = slice;\nfunction assertStartOffset(value, start) {\n  if (typeof start === 'number' && start > 0 && start > (0, size_js_1.size)(value) - 1) throw new data_js_1.SliceOffsetOutOfBoundsError({\n    offset: start,\n    position: 'start',\n    size: (0, size_js_1.size)(value)\n  });\n}\nfunction assertEndOffset(value, start, end) {\n  if (typeof start === 'number' && typeof end === 'number' && (0, size_js_1.size)(value) !== end - start) {\n    throw new data_js_1.SliceOffsetOutOfBoundsError({\n      offset: end,\n      position: 'end',\n      size: (0, size_js_1.size)(value)\n    });\n  }\n}\nfunction sliceBytes(value_, start, end, {\n  strict\n} = {}) {\n  assertStartOffset(value_, start);\n  const value = value_.slice(start, end);\n  if (strict) assertEndOffset(value, start, end);\n  return value;\n}\nexports.sliceBytes = sliceBytes;\nfunction sliceHex(value_, start, end, {\n  strict\n} = {}) {\n  assertStartOffset(value_, start);\n  const value = `0x${value_.replace('0x', '').slice((start ?? 0) * 2, (end ?? value_.length) * 2)}`;\n  if (strict) assertEndOffset(value, start, end);\n  return value;\n}\nexports.sliceHex = sliceHex;","map":{"version":3,"names":["data_js_1","require","isHex_js_1","size_js_1","slice","value","start","end","strict","isHex","sliceHex","sliceBytes","exports","assertStartOffset","size","SliceOffsetOutOfBoundsError","offset","position","assertEndOffset","value_","replace","length"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/data/slice.ts"],"sourcesContent":["import {\n  SliceOffsetOutOfBoundsError,\n  type SliceOffsetOutOfBoundsErrorType,\n} from '../../errors/data.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\n\nimport { type IsHexErrorType, isHex } from './isHex.js'\nimport { type SizeErrorType, size } from './size.js'\n\nexport type SliceReturnType<TValue extends ByteArray | Hex> = TValue extends Hex\n  ? Hex\n  : ByteArray\n\nexport type SliceErrorType =\n  | IsHexErrorType\n  | SliceBytesErrorType\n  | SliceHexErrorType\n  | ErrorType\n\n/**\n * @description Returns a section of the hex or byte array given a start/end bytes offset.\n *\n * @param value The hex or byte array to slice.\n * @param start The start offset (in bytes).\n * @param end The end offset (in bytes).\n */\nexport function slice<TValue extends ByteArray | Hex>(\n  value: TValue,\n  start?: number,\n  end?: number,\n  { strict }: { strict?: boolean } = {},\n): SliceReturnType<TValue> {\n  if (isHex(value, { strict: false }))\n    return sliceHex(value as Hex, start, end, {\n      strict,\n    }) as SliceReturnType<TValue>\n  return sliceBytes(value as ByteArray, start, end, {\n    strict,\n  }) as SliceReturnType<TValue>\n}\n\nexport type AssertStartOffsetErrorType =\n  | SliceOffsetOutOfBoundsErrorType\n  | SizeErrorType\n  | ErrorType\n\nfunction assertStartOffset(value: Hex | ByteArray, start?: number) {\n  if (typeof start === 'number' && start > 0 && start > size(value) - 1)\n    throw new SliceOffsetOutOfBoundsError({\n      offset: start,\n      position: 'start',\n      size: size(value),\n    })\n}\n\nexport type AssertEndOffsetErrorType =\n  | SliceOffsetOutOfBoundsErrorType\n  | SizeErrorType\n  | ErrorType\n\nfunction assertEndOffset(value: Hex | ByteArray, start?: number, end?: number) {\n  if (\n    typeof start === 'number' &&\n    typeof end === 'number' &&\n    size(value) !== end - start\n  ) {\n    throw new SliceOffsetOutOfBoundsError({\n      offset: end,\n      position: 'end',\n      size: size(value),\n    })\n  }\n}\n\nexport type SliceBytesErrorType =\n  | AssertStartOffsetErrorType\n  | AssertEndOffsetErrorType\n  | ErrorType\n\n/**\n * @description Returns a section of the byte array given a start/end bytes offset.\n *\n * @param value The byte array to slice.\n * @param start The start offset (in bytes).\n * @param end The end offset (in bytes).\n */\nexport function sliceBytes(\n  value_: ByteArray,\n  start?: number,\n  end?: number,\n  { strict }: { strict?: boolean } = {},\n): ByteArray {\n  assertStartOffset(value_, start)\n  const value = value_.slice(start, end)\n  if (strict) assertEndOffset(value, start, end)\n  return value\n}\n\nexport type SliceHexErrorType =\n  | AssertStartOffsetErrorType\n  | AssertEndOffsetErrorType\n  | ErrorType\n\n/**\n * @description Returns a section of the hex value given a start/end bytes offset.\n *\n * @param value The hex value to slice.\n * @param start The start offset (in bytes).\n * @param end The end offset (in bytes).\n */\nexport function sliceHex(\n  value_: Hex,\n  start?: number,\n  end?: number,\n  { strict }: { strict?: boolean } = {},\n): Hex {\n  assertStartOffset(value_, start)\n  const value = `0x${value_\n    .replace('0x', '')\n    .slice((start ?? 0) * 2, (end ?? value_.length) * 2)}` as const\n  if (strict) assertEndOffset(value, start, end)\n  return value\n}\n"],"mappings":";;;;;;AAAA,MAAAA,SAAA,GAAAC,OAAA;AAOA,MAAAC,UAAA,GAAAD,OAAA;AACA,MAAAE,SAAA,GAAAF,OAAA;AAmBA,SAAgBG,KAAKA,CACnBC,KAAa,EACbC,KAAc,EACdC,GAAY,EACZ;EAAEC;AAAM,IAA2B,EAAE;EAErC,IAAI,IAAAN,UAAA,CAAAO,KAAK,EAACJ,KAAK,EAAE;IAAEG,MAAM,EAAE;EAAK,CAAE,CAAC,EACjC,OAAOE,QAAQ,CAACL,KAAY,EAAEC,KAAK,EAAEC,GAAG,EAAE;IACxCC;GACD,CAA4B;EAC/B,OAAOG,UAAU,CAACN,KAAkB,EAAEC,KAAK,EAAEC,GAAG,EAAE;IAChDC;GACD,CAA4B;AAC/B;AAbAI,OAAA,CAAAR,KAAA,GAAAA,KAAA;AAoBA,SAASS,iBAAiBA,CAACR,KAAsB,EAAEC,KAAc;EAC/D,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,GAAG,CAAC,IAAIA,KAAK,GAAG,IAAAH,SAAA,CAAAW,IAAI,EAACT,KAAK,CAAC,GAAG,CAAC,EACnE,MAAM,IAAIL,SAAA,CAAAe,2BAA2B,CAAC;IACpCC,MAAM,EAAEV,KAAK;IACbW,QAAQ,EAAE,OAAO;IACjBH,IAAI,EAAE,IAAAX,SAAA,CAAAW,IAAI,EAACT,KAAK;GACjB,CAAC;AACN;AAOA,SAASa,eAAeA,CAACb,KAAsB,EAAEC,KAAc,EAAEC,GAAY;EAC3E,IACE,OAAOD,KAAK,KAAK,QAAQ,IACzB,OAAOC,GAAG,KAAK,QAAQ,IACvB,IAAAJ,SAAA,CAAAW,IAAI,EAACT,KAAK,CAAC,KAAKE,GAAG,GAAGD,KAAK,EAC3B;IACA,MAAM,IAAIN,SAAA,CAAAe,2BAA2B,CAAC;MACpCC,MAAM,EAAET,GAAG;MACXU,QAAQ,EAAE,KAAK;MACfH,IAAI,EAAE,IAAAX,SAAA,CAAAW,IAAI,EAACT,KAAK;KACjB,CAAC;;AAEN;AAcA,SAAgBM,UAAUA,CACxBQ,MAAiB,EACjBb,KAAc,EACdC,GAAY,EACZ;EAAEC;AAAM,IAA2B,EAAE;EAErCK,iBAAiB,CAACM,MAAM,EAAEb,KAAK,CAAC;EAChC,MAAMD,KAAK,GAAGc,MAAM,CAACf,KAAK,CAACE,KAAK,EAAEC,GAAG,CAAC;EACtC,IAAIC,MAAM,EAAEU,eAAe,CAACb,KAAK,EAAEC,KAAK,EAAEC,GAAG,CAAC;EAC9C,OAAOF,KAAK;AACd;AAVAO,OAAA,CAAAD,UAAA,GAAAA,UAAA;AAwBA,SAAgBD,QAAQA,CACtBS,MAAW,EACXb,KAAc,EACdC,GAAY,EACZ;EAAEC;AAAM,IAA2B,EAAE;EAErCK,iBAAiB,CAACM,MAAM,EAAEb,KAAK,CAAC;EAChC,MAAMD,KAAK,GAAG,KAAKc,MAAM,CACtBC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CACjBhB,KAAK,CAAC,CAACE,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE,CAACC,GAAG,IAAIY,MAAM,CAACE,MAAM,IAAI,CAAC,CAAC,EAAW;EACjE,IAAIb,MAAM,EAAEU,eAAe,CAACb,KAAK,EAAEC,KAAK,EAAEC,GAAG,CAAC;EAC9C,OAAOF,KAAK;AACd;AAZAO,OAAA,CAAAF,QAAA,GAAAA,QAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}