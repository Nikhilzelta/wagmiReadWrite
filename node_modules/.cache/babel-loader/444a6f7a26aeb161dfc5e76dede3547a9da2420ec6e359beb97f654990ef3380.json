{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/viem/types/chain.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport type { EstimateFeesPerGasReturnType } from '../actions/public/estimateFeesPerGas.js'\nimport type { PrepareTransactionRequestParameters } from '../actions/wallet/prepareTransactionRequest.js'\nimport type { Client } from '../clients/createClient.js'\nimport type { Transport } from '../clients/transports/createTransport.js'\nimport type { Account } from '../types/account.js'\nimport type { FeeValuesType } from '../types/fee.js'\nimport type {\n  TransactionSerializable,\n  TransactionSerializableGeneric,\n  TransactionSerializedGeneric,\n} from '../types/transaction.js'\nimport type { IsNarrowable, IsUndefined, Prettify } from '../types/utils.js'\nimport type { FormattedBlock } from '../utils/formatters/block.js'\nimport type { SerializeTransactionFn } from '../utils/transaction/serializeTransaction.js'\n\nexport type Chain<\n  formatters extends ChainFormatters | undefined = ChainFormatters | undefined,\n  custom extends Record<string, unknown> | undefined =\n    | Record<string, unknown>\n    | undefined,\n> = {\n  /** Collection of block explorers */\n  blockExplorers?:\n    | {\n        [key: string]: ChainBlockExplorer\n        default: ChainBlockExplorer\n      }\n    | undefined\n  /** Collection of contracts */\n  contracts?:\n    | Prettify<\n        {\n          [key: string]:\n            | ChainContract\n            | { [sourceId: number]: ChainContract | undefined }\n            | undefined\n        } & {\n          ensRegistry?: ChainContract | undefined\n          ensUniversalResolver?: ChainContract | undefined\n          multicall3?: ChainContract | undefined\n        }\n      >\n    | undefined\n  /** ID in number form */\n  id: number\n  /** Human-readable name */\n  name: string\n  /** Currency used by chain */\n  nativeCurrency: ChainNativeCurrency\n  /** Collection of RPC endpoints */\n  rpcUrls: {\n    [key: string]: ChainRpcUrls\n    default: ChainRpcUrls\n  }\n  /** Source Chain ID (ie. the L1 chain) */\n  sourceId?: number | undefined\n  /** Flag for test networks */\n  testnet?: boolean | undefined\n\n  /** Custom chain data. */\n  custom?: custom | undefined\n  /**\n   * Modifies how chain data structures (ie. Blocks, Transactions, etc)\n   * are formatted & typed.\n   */\n  formatters?: formatters | undefined\n  /** Modifies how data (ie. Transactions) is serialized. */\n  serializers?: ChainSerializers<formatters> | undefined\n  /** Modifies how fees are derived. */\n  fees?: ChainFees<formatters | undefined> | undefined\n}\n\n/////////////////////////////////////////////////////////////////////\n// Constants\n\ntype ChainBlockExplorer = {\n  name: string\n  url: string\n  apiUrl?: string | undefined\n}\n\nexport type ChainContract = {\n  address: Address\n  blockCreated?: number | undefined\n}\n\ntype ChainNativeCurrency = {\n  name: string\n  /** 2-6 characters long */\n  symbol: string\n  decimals: number\n}\n\ntype ChainRpcUrls = {\n  http: readonly string[]\n  webSocket?: readonly string[] | undefined\n}\n\n/////////////////////////////////////////////////////////////////////\n// Config\n\nexport type ChainFees<\n  formatters extends ChainFormatters | undefined = ChainFormatters | undefined,\n> = {\n  /**\n   * The fee multiplier to use to account for fee fluctuations.\n   * Used in the [`estimateFeesPerGas` Action](/docs/actions/public/estimateFeesPerGas).\n   *\n   * @default 1.2\n   */\n  baseFeeMultiplier?:\n    | number\n    | ((args: ChainFeesFnParameters<formatters>) => Promise<number> | number)\n  /**\n   * The default `maxPriorityFeePerGas` to use when a priority\n   * fee is not defined upon sending a transaction.\n   *\n   * Overrides the return value in the [`estimateMaxPriorityFeePerGas` Action](/docs/actions/public/estimateMaxPriorityFeePerGas).\n   */\n  defaultPriorityFee?:\n    | bigint\n    | ((args: ChainFeesFnParameters<formatters>) => Promise<bigint> | bigint)\n    | undefined\n  /**\n   * Allows customization of fee per gas values (e.g. `maxFeePerGas`/`maxPriorityFeePerGas`).\n   *\n   * Overrides the return value in the [`estimateFeesPerGas` Action](/docs/actions/public/estimateFeesPerGas).\n   */\n  estimateFeesPerGas?:\n    | ChainEstimateFeesPerGasFn<formatters>\n    | bigint\n    | undefined\n}\n\nexport type ChainEstimateFeesPerGasFn<\n  formatters extends ChainFormatters | undefined = ChainFormatters | undefined,\n> = (\n  args: ChainEstimateFeesPerGasFnParameters<formatters>,\n) => Promise<EstimateFeesPerGasReturnType | null>\n\nexport type ChainFormatters = {\n  /** Modifies how the Block structure is formatted & typed. */\n  block?: ChainFormatter<'block'> | undefined\n  /** Modifies how the Transaction structure is formatted & typed. */\n  transaction?: ChainFormatter<'transaction'> | undefined\n  /** Modifies how the TransactionReceipt structure is formatted & typed. */\n  transactionReceipt?: ChainFormatter<'transactionReceipt'> | undefined\n  /** Modifies how the TransactionRequest structure is formatted & typed. */\n  transactionRequest?: ChainFormatter<'transactionRequest'> | undefined\n}\n\nexport type ChainFormatter<type extends string = string> = {\n  format: (args: any) => any\n  type: type\n}\n\nexport type ChainSerializers<\n  formatters extends ChainFormatters | undefined = undefined,\n> = {\n  /** Modifies how Transactions are serialized. */\n  transaction?:\n    | SerializeTransactionFn<\n        formatters extends ChainFormatters\n          ? formatters['transactionRequest'] extends ChainFormatter\n            ? TransactionSerializableGeneric &\n                Parameters<formatters['transactionRequest']['format']>[0]\n            : TransactionSerializable\n          : TransactionSerializable,\n        TransactionSerializedGeneric\n      >\n    | undefined\n}\n\n/////////////////////////////////////////////////////////////////////\n// Parameters\n\nexport type ChainFeesFnParameters<\n  formatters extends ChainFormatters | undefined = ChainFormatters | undefined,\n> = {\n  /** The latest block. */\n  block: Prettify<\n    FormattedBlock<Omit<Chain, 'formatters'> & { formatters: formatters }>\n  >\n  client: Client<Transport, Chain>\n  /**\n   * A transaction request. This value will be undefined if the caller\n   * is outside of a transaction request context (e.g. a direct call to\n   * the `estimateFeesPerGas` Action).\n   */\n  request?:\n    | PrepareTransactionRequestParameters<\n        Omit<Chain, 'formatters'> & { formatters: formatters },\n        Account | undefined,\n        undefined\n      >\n    | undefined\n}\n\nexport type ChainEstimateFeesPerGasFnParameters<\n  formatters extends ChainFormatters | undefined = ChainFormatters | undefined,\n> = {\n  /**\n   * A function to multiply the base fee based on the `baseFeeMultiplier` value.\n   */\n  multiply(x: bigint): bigint\n  /**\n   * The type of fees to return.\n   */\n  type: FeeValuesType\n} & ChainFeesFnParameters<formatters>\n\n/////////////////////////////////////////////////////////////////////\n// Utils\n\nexport type ExtractChain<\n  chains extends readonly Chain[],\n  chainId extends Chain['id'],\n> = Extract<chains[number], { id: chainId }>\n\nexport type ExtractChainFormatterExclude<\n  chain extends Chain | undefined,\n  type extends keyof ChainFormatters,\n> = chain extends { formatters?: infer _Formatters extends ChainFormatters }\n  ? _Formatters[type] extends { exclude: infer Exclude }\n    ? Extract<Exclude, string[]>[number]\n    : ''\n  : ''\n\nexport type ExtractChainFormatterParameters<\n  chain extends Chain | undefined,\n  type extends keyof ChainFormatters,\n  fallback,\n> = chain extends { formatters?: infer _Formatters extends ChainFormatters }\n  ? _Formatters[type] extends ChainFormatter\n    ? Parameters<_Formatters[type]['format']>[0]\n    : fallback\n  : fallback\n\nexport type ExtractChainFormatterReturnType<\n  chain extends Chain | undefined,\n  type extends keyof ChainFormatters,\n  fallback,\n> = IsNarrowable<chain, Chain> extends true\n  ? chain extends {\n      formatters?:\n        | { [_ in type]?: infer formatter extends ChainFormatter }\n        | undefined\n    }\n    ? chain['formatters'] extends undefined\n      ? fallback\n      : IsNarrowable<formatter, ChainFormatter<type>> extends true\n        ? ReturnType<formatter['format']>\n        : fallback\n    : fallback\n  : fallback\n\nexport type DeriveChain<\n  chain extends Chain | undefined,\n  chainOverride extends Chain | undefined,\n> = chainOverride extends Chain ? chainOverride : chain\n\nexport type GetChainParameter<\n  chain extends Chain | undefined,\n  chainOverride extends Chain | undefined = Chain | undefined,\n> = IsUndefined<chain> extends true\n  ? { chain: chainOverride | null }\n  : { chain?: chainOverride | null | undefined }\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}