{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createBlockFilter = void 0;\nconst createFilterRequestScope_js_1 = require(\"../../utils/filters/createFilterRequestScope.js\");\nasync function createBlockFilter(client) {\n  const getRequest = (0, createFilterRequestScope_js_1.createFilterRequestScope)(client, {\n    method: 'eth_newBlockFilter'\n  });\n  const id = await client.request({\n    method: 'eth_newBlockFilter'\n  });\n  return {\n    id,\n    request: getRequest(id),\n    type: 'block'\n  };\n}\nexports.createBlockFilter = createBlockFilter;","map":{"version":3,"names":["createFilterRequestScope_js_1","require","createBlockFilter","client","getRequest","createFilterRequestScope","method","id","request","type","exports"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/public/createBlockFilter.ts"],"sourcesContent":["import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Filter } from '../../types/filter.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport { createFilterRequestScope } from '../../utils/filters/createFilterRequestScope.js'\n\nexport type CreateBlockFilterReturnType = Filter<'block'>\n\nexport type CreateBlockFilterErrorType = RequestErrorType | ErrorType\n\n/**\n * Creates a [`Filter`](https://viem.sh/docs/glossary/types.html#filter) to listen for new block hashes that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges.html).\n *\n * - Docs: https://viem.sh/docs/actions/public/createBlockFilter.html\n * - JSON-RPC Methods: [`eth_newBlockFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newBlockFilter)\n *\n * @param client - Client to use\n * @returns [`Filter`](https://viem.sh/docs/glossary/types.html#filter). {@link CreateBlockFilterReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createBlockFilter } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const filter = await createBlockFilter(client)\n * // { id: \"0x345a6572337856574a76364e457a4366\", type: 'block' }\n */\nexport async function createBlockFilter<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n): Promise<CreateBlockFilterReturnType> {\n  const getRequest = createFilterRequestScope(client, {\n    method: 'eth_newBlockFilter',\n  })\n  const id = await client.request({\n    method: 'eth_newBlockFilter',\n  })\n  return { id, request: getRequest(id), type: 'block' }\n}\n"],"mappings":";;;;;;AAMA,MAAAA,6BAAA,GAAAC,OAAA;AA2BO,eAAeC,iBAAiBA,CACrCC,MAAiC;EAEjC,MAAMC,UAAU,GAAG,IAAAJ,6BAAA,CAAAK,wBAAwB,EAACF,MAAM,EAAE;IAClDG,MAAM,EAAE;GACT,CAAC;EACF,MAAMC,EAAE,GAAG,MAAMJ,MAAM,CAACK,OAAO,CAAC;IAC9BF,MAAM,EAAE;GACT,CAAC;EACF,OAAO;IAAEC,EAAE;IAAEC,OAAO,EAAEJ,UAAU,CAACG,EAAE,CAAC;IAAEE,IAAI,EAAE;EAAO,CAAE;AACvD;AAVAC,OAAA,CAAAR,iBAAA,GAAAA,iBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}