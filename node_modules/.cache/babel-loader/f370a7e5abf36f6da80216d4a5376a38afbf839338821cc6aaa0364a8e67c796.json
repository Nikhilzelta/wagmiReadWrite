{"ast":null,"code":"import { parseAccount } from '../../accounts/utils/parseAccount.js';\nimport { numberToHex } from '../../utils/encoding/toHex.js';\nimport { getEstimateGasError } from '../../utils/errors/getEstimateGasError.js';\nimport { extract } from '../../utils/formatters/extract.js';\nimport { formatTransactionRequest } from '../../utils/formatters/transactionRequest.js';\nimport { assertRequest } from '../../utils/transaction/assertRequest.js';\nimport { prepareTransactionRequest } from '../wallet/prepareTransactionRequest.js';\n/**\n * Estimates the gas necessary to complete a transaction without submitting it to the network.\n *\n * - Docs: https://viem.sh/docs/actions/public/estimateGas\n * - JSON-RPC Methods: [`eth_estimateGas`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_estimategas)\n *\n * @param client - Client to use\n * @param parameters - {@link EstimateGasParameters}\n * @returns The gas estimate (in wei). {@link EstimateGasReturnType}\n *\n * @example\n * import { createPublicClient, http, parseEther } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { estimateGas } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const gasEstimate = await estimateGas(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: parseEther('1'),\n * })\n */\nexport async function estimateGas(client, args) {\n  const account_ = args.account ?? client.account;\n  const account = account_ ? parseAccount(account_) : undefined;\n  try {\n    const {\n      accessList,\n      blobs,\n      blobVersionedHashes,\n      blockNumber,\n      blockTag,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerBlobGas,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value,\n      ...rest\n    } = await prepareTransactionRequest(client, {\n      ...args,\n      parameters:\n      // Some RPC Providers do not compute versioned hashes from blobs. We will need\n      // to compute them.\n      account?.type === 'local' ? undefined : ['blobVersionedHashes']\n    });\n    const blockNumberHex = blockNumber ? numberToHex(blockNumber) : undefined;\n    const block = blockNumberHex || blockTag;\n    assertRequest(args);\n    const chainFormat = client.chain?.formatters?.transactionRequest?.format;\n    const format = chainFormat || formatTransactionRequest;\n    const request = format({\n      // Pick out extra data that might exist on the chain's transaction request type.\n      ...extract(rest, {\n        format: chainFormat\n      }),\n      from: account?.address,\n      accessList,\n      blobs,\n      blobVersionedHashes,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerBlobGas,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value\n    });\n    const balance = await client.request({\n      method: 'eth_estimateGas',\n      params: block ? [request, block] : [request]\n    });\n    return BigInt(balance);\n  } catch (err) {\n    throw getEstimateGasError(err, {\n      ...args,\n      account,\n      chain: client.chain\n    });\n  }\n}","map":{"version":3,"names":["parseAccount","numberToHex","getEstimateGasError","extract","formatTransactionRequest","assertRequest","prepareTransactionRequest","estimateGas","client","args","account_","account","undefined","accessList","blobs","blobVersionedHashes","blockNumber","blockTag","data","gas","gasPrice","maxFeePerBlobGas","maxFeePerGas","maxPriorityFeePerGas","nonce","to","value","rest","parameters","type","blockNumberHex","block","chainFormat","chain","formatters","transactionRequest","format","request","from","address","balance","method","params","BigInt","err"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/viem/actions/public/estimateGas.ts"],"sourcesContent":["import type { Address } from 'abitype'\nimport type { Account } from '../../accounts/types.js'\nimport {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../../accounts/utils/parseAccount.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { BaseError } from '../../errors/base.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { TransactionRequest } from '../../types/transaction.js'\nimport type { UnionOmit } from '../../types/utils.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\nimport {\n  type GetEstimateGasErrorReturnType,\n  getEstimateGasError,\n} from '../../utils/errors/getEstimateGasError.js'\nimport { extract } from '../../utils/formatters/extract.js'\nimport {\n  type FormattedTransactionRequest,\n  formatTransactionRequest,\n} from '../../utils/formatters/transactionRequest.js'\nimport {\n  type AssertRequestErrorType,\n  type AssertRequestParameters,\n  assertRequest,\n} from '../../utils/transaction/assertRequest.js'\nimport {\n  type PrepareTransactionRequestParameters,\n  prepareTransactionRequest,\n} from '../wallet/prepareTransactionRequest.js'\n\nexport type FormattedEstimateGas<\n  TChain extends Chain | undefined = Chain | undefined,\n> = FormattedTransactionRequest<TChain>\n\nexport type EstimateGasParameters<\n  TChain extends Chain | undefined = Chain | undefined,\n> = UnionOmit<FormattedEstimateGas<TChain>, 'from'> & {\n  account?: Account | Address | undefined\n} & (\n    | {\n        /** The balance of the account at a block number. */\n        blockNumber?: bigint | undefined\n        blockTag?: never | undefined\n      }\n    | {\n        blockNumber?: never | undefined\n        /**\n         * The balance of the account at a block tag.\n         * @default 'latest'\n         */\n        blockTag?: BlockTag | undefined\n      }\n  )\n\nexport type EstimateGasReturnType = bigint\n\nexport type EstimateGasErrorType = GetEstimateGasErrorReturnType<\n  | ParseAccountErrorType\n  | NumberToHexErrorType\n  | RequestErrorType\n  | AssertRequestErrorType\n>\n\n/**\n * Estimates the gas necessary to complete a transaction without submitting it to the network.\n *\n * - Docs: https://viem.sh/docs/actions/public/estimateGas\n * - JSON-RPC Methods: [`eth_estimateGas`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_estimategas)\n *\n * @param client - Client to use\n * @param parameters - {@link EstimateGasParameters}\n * @returns The gas estimate (in wei). {@link EstimateGasReturnType}\n *\n * @example\n * import { createPublicClient, http, parseEther } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { estimateGas } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const gasEstimate = await estimateGas(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: parseEther('1'),\n * })\n */\nexport async function estimateGas<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined = undefined,\n>(\n  client: Client<Transport, TChain, TAccount>,\n  args: EstimateGasParameters<TChain>,\n): Promise<EstimateGasReturnType> {\n  const account_ = args.account ?? client.account\n  const account = account_ ? parseAccount(account_) : undefined\n\n  try {\n    const {\n      accessList,\n      blobs,\n      blobVersionedHashes,\n      blockNumber,\n      blockTag,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerBlobGas,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value,\n      ...rest\n    } = (await prepareTransactionRequest(client, {\n      ...args,\n      parameters:\n        // Some RPC Providers do not compute versioned hashes from blobs. We will need\n        // to compute them.\n        account?.type === 'local' ? undefined : ['blobVersionedHashes'],\n    } as PrepareTransactionRequestParameters)) as EstimateGasParameters\n\n    const blockNumberHex = blockNumber ? numberToHex(blockNumber) : undefined\n    const block = blockNumberHex || blockTag\n\n    assertRequest(args as AssertRequestParameters)\n\n    const chainFormat = client.chain?.formatters?.transactionRequest?.format\n    const format = chainFormat || formatTransactionRequest\n\n    const request = format({\n      // Pick out extra data that might exist on the chain's transaction request type.\n      ...extract(rest, { format: chainFormat }),\n      from: account?.address,\n      accessList,\n      blobs,\n      blobVersionedHashes,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerBlobGas,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value,\n    } as TransactionRequest)\n\n    const balance = await client.request({\n      method: 'eth_estimateGas',\n      params: block ? [request, block] : [request],\n    })\n    return BigInt(balance)\n  } catch (err) {\n    throw getEstimateGasError(err as BaseError, {\n      ...args,\n      account,\n      chain: client.chain,\n    })\n  }\n}\n"],"mappings":"AAEA,SAEEA,YAAY,QACP,sCAAsC;AAS7C,SAEEC,WAAW,QACN,+BAA+B;AACtC,SAEEC,mBAAmB,QACd,2CAA2C;AAClD,SAASC,OAAO,QAAQ,mCAAmC;AAC3D,SAEEC,wBAAwB,QACnB,8CAA8C;AACrD,SAGEC,aAAa,QACR,0CAA0C;AACjD,SAEEC,yBAAyB,QACpB,wCAAwC;AAmC/C;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,OAAO,eAAeC,WAAWA,CAI/BC,MAA2C,EAC3CC,IAAmC;EAEnC,MAAMC,QAAQ,GAAGD,IAAI,CAACE,OAAO,IAAIH,MAAM,CAACG,OAAO;EAC/C,MAAMA,OAAO,GAAGD,QAAQ,GAAGV,YAAY,CAACU,QAAQ,CAAC,GAAGE,SAAS;EAE7D,IAAI;IACF,MAAM;MACJC,UAAU;MACVC,KAAK;MACLC,mBAAmB;MACnBC,WAAW;MACXC,QAAQ;MACRC,IAAI;MACJC,GAAG;MACHC,QAAQ;MACRC,gBAAgB;MAChBC,YAAY;MACZC,oBAAoB;MACpBC,KAAK;MACLC,EAAE;MACFC,KAAK;MACL,GAAGC;IAAI,CACR,GAAI,MAAMrB,yBAAyB,CAACE,MAAM,EAAE;MAC3C,GAAGC,IAAI;MACPmB,UAAU;MACR;MACA;MACAjB,OAAO,EAAEkB,IAAI,KAAK,OAAO,GAAGjB,SAAS,GAAG,CAAC,qBAAqB;KAC1B,CAA2B;IAEnE,MAAMkB,cAAc,GAAGd,WAAW,GAAGf,WAAW,CAACe,WAAW,CAAC,GAAGJ,SAAS;IACzE,MAAMmB,KAAK,GAAGD,cAAc,IAAIb,QAAQ;IAExCZ,aAAa,CAACI,IAA+B,CAAC;IAE9C,MAAMuB,WAAW,GAAGxB,MAAM,CAACyB,KAAK,EAAEC,UAAU,EAAEC,kBAAkB,EAAEC,MAAM;IACxE,MAAMA,MAAM,GAAGJ,WAAW,IAAI5B,wBAAwB;IAEtD,MAAMiC,OAAO,GAAGD,MAAM,CAAC;MACrB;MACA,GAAGjC,OAAO,CAACwB,IAAI,EAAE;QAAES,MAAM,EAAEJ;MAAW,CAAE,CAAC;MACzCM,IAAI,EAAE3B,OAAO,EAAE4B,OAAO;MACtB1B,UAAU;MACVC,KAAK;MACLC,mBAAmB;MACnBG,IAAI;MACJC,GAAG;MACHC,QAAQ;MACRC,gBAAgB;MAChBC,YAAY;MACZC,oBAAoB;MACpBC,KAAK;MACLC,EAAE;MACFC;KACqB,CAAC;IAExB,MAAMc,OAAO,GAAG,MAAMhC,MAAM,CAAC6B,OAAO,CAAC;MACnCI,MAAM,EAAE,iBAAiB;MACzBC,MAAM,EAAEX,KAAK,GAAG,CAACM,OAAO,EAAEN,KAAK,CAAC,GAAG,CAACM,OAAO;KAC5C,CAAC;IACF,OAAOM,MAAM,CAACH,OAAO,CAAC;EACxB,CAAC,CAAC,OAAOI,GAAG,EAAE;IACZ,MAAM1C,mBAAmB,CAAC0C,GAAgB,EAAE;MAC1C,GAAGnC,IAAI;MACPE,OAAO;MACPsB,KAAK,EAAEzB,MAAM,CAACyB;KACf,CAAC;EACJ;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}