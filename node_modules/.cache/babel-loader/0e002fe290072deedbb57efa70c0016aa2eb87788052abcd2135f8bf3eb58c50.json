{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.encodePacked = void 0;\nconst abi_js_1 = require(\"../../errors/abi.js\");\nconst address_js_1 = require(\"../../errors/address.js\");\nconst isAddress_js_1 = require(\"../address/isAddress.js\");\nconst concat_js_1 = require(\"../data/concat.js\");\nconst pad_js_1 = require(\"../data/pad.js\");\nconst toHex_js_1 = require(\"../encoding/toHex.js\");\nconst regex_js_1 = require(\"../regex.js\");\nfunction encodePacked(types, values) {\n  if (types.length !== values.length) throw new abi_js_1.AbiEncodingLengthMismatchError({\n    expectedLength: types.length,\n    givenLength: values.length\n  });\n  const data = [];\n  for (let i = 0; i < types.length; i++) {\n    const type = types[i];\n    const value = values[i];\n    data.push(encode(type, value));\n  }\n  return (0, concat_js_1.concatHex)(data);\n}\nexports.encodePacked = encodePacked;\nfunction encode(type, value, isArray = false) {\n  if (type === 'address') {\n    const address = value;\n    if (!(0, isAddress_js_1.isAddress)(address)) throw new address_js_1.InvalidAddressError({\n      address\n    });\n    return (0, pad_js_1.pad)(address.toLowerCase(), {\n      size: isArray ? 32 : null\n    });\n  }\n  if (type === 'string') return (0, toHex_js_1.stringToHex)(value);\n  if (type === 'bytes') return value;\n  if (type === 'bool') return (0, pad_js_1.pad)((0, toHex_js_1.boolToHex)(value), {\n    size: isArray ? 32 : 1\n  });\n  const intMatch = type.match(regex_js_1.integerRegex);\n  if (intMatch) {\n    const [_type, baseType, bits = '256'] = intMatch;\n    const size = parseInt(bits) / 8;\n    return (0, toHex_js_1.numberToHex)(value, {\n      size: isArray ? 32 : size,\n      signed: baseType === 'int'\n    });\n  }\n  const bytesMatch = type.match(regex_js_1.bytesRegex);\n  if (bytesMatch) {\n    const [_type, size] = bytesMatch;\n    if (parseInt(size) !== (value.length - 2) / 2) throw new abi_js_1.BytesSizeMismatchError({\n      expectedSize: parseInt(size),\n      givenSize: (value.length - 2) / 2\n    });\n    return (0, pad_js_1.pad)(value, {\n      dir: 'right',\n      size: isArray ? 32 : null\n    });\n  }\n  const arrayMatch = type.match(regex_js_1.arrayRegex);\n  if (arrayMatch && Array.isArray(value)) {\n    const [_type, childType] = arrayMatch;\n    const data = [];\n    for (let i = 0; i < value.length; i++) {\n      data.push(encode(childType, value[i], true));\n    }\n    if (data.length === 0) return '0x';\n    return (0, concat_js_1.concatHex)(data);\n  }\n  throw new abi_js_1.UnsupportedPackedAbiType(type);\n}","map":{"version":3,"names":["abi_js_1","require","address_js_1","isAddress_js_1","concat_js_1","pad_js_1","toHex_js_1","regex_js_1","encodePacked","types","values","length","AbiEncodingLengthMismatchError","expectedLength","givenLength","data","i","type","value","push","encode","concatHex","exports","isArray","address","isAddress","InvalidAddressError","pad","toLowerCase","size","stringToHex","boolToHex","intMatch","match","integerRegex","_type","baseType","bits","parseInt","numberToHex","signed","bytesMatch","bytesRegex","BytesSizeMismatchError","expectedSize","givenSize","dir","arrayMatch","arrayRegex","Array","childType","UnsupportedPackedAbiType"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/abi/encodePacked.ts"],"sourcesContent":["import type {\n  AbiParameterToPrimitiveType,\n  AbiType,\n  Address,\n  SolidityAddress,\n  SolidityArrayWithoutTuple,\n  SolidityBool,\n  SolidityBytes,\n  SolidityInt,\n  SolidityString,\n} from 'abitype'\n\nimport {\n  AbiEncodingLengthMismatchError,\n  type AbiEncodingLengthMismatchErrorType,\n  BytesSizeMismatchError,\n  type BytesSizeMismatchErrorType,\n  UnsupportedPackedAbiType,\n} from '../../errors/abi.js'\nimport {\n  InvalidAddressError,\n  type InvalidAddressErrorType,\n} from '../../errors/address.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hex } from '../../types/misc.js'\nimport { type IsAddressErrorType, isAddress } from '../address/isAddress.js'\nimport { type ConcatHexErrorType, concatHex } from '../data/concat.js'\nimport { type PadErrorType, pad } from '../data/pad.js'\nimport {\n  type BoolToHexErrorType,\n  type NumberToHexErrorType,\n  type StringToHexErrorType,\n  boolToHex,\n  numberToHex,\n  stringToHex,\n} from '../encoding/toHex.js'\nimport { arrayRegex, bytesRegex, integerRegex } from '../regex.js'\n\ntype PackedAbiType =\n  | SolidityAddress\n  | SolidityBool\n  | SolidityBytes\n  | SolidityInt\n  | SolidityString\n  | SolidityArrayWithoutTuple\n\ntype EncodePackedValues<\n  TPackedAbiTypes extends readonly PackedAbiType[] | readonly unknown[],\n> = {\n  [K in keyof TPackedAbiTypes]: TPackedAbiTypes[K] extends AbiType\n    ? AbiParameterToPrimitiveType<{ type: TPackedAbiTypes[K] }>\n    : unknown\n}\n\nexport type EncodePackedErrorType =\n  | AbiEncodingLengthMismatchErrorType\n  | ConcatHexErrorType\n  | EncodeErrorType\n  | ErrorType\n\nexport function encodePacked<\n  const TPackedAbiTypes extends readonly PackedAbiType[] | readonly unknown[],\n>(types: TPackedAbiTypes, values: EncodePackedValues<TPackedAbiTypes>): Hex {\n  if (types.length !== values.length)\n    throw new AbiEncodingLengthMismatchError({\n      expectedLength: types.length as number,\n      givenLength: values.length as number,\n    })\n\n  const data: Hex[] = []\n  for (let i = 0; i < (types as unknown[]).length; i++) {\n    const type = types[i]\n    const value = values[i]\n    data.push(encode(type, value))\n  }\n  return concatHex(data)\n}\n\ntype EncodeErrorType =\n  | BoolToHexErrorType\n  | BytesSizeMismatchErrorType\n  | InvalidAddressErrorType\n  | IsAddressErrorType\n  | NumberToHexErrorType\n  | PadErrorType\n  | StringToHexErrorType\n  | UnsupportedPackedAbiType\n  | ErrorType\n\nfunction encode<const TPackedAbiType extends PackedAbiType | unknown>(\n  type: TPackedAbiType,\n  value: EncodePackedValues<[TPackedAbiType]>[0],\n  isArray = false,\n): Hex {\n  if (type === 'address') {\n    const address = value as Address\n    if (!isAddress(address)) throw new InvalidAddressError({ address })\n    return pad(address.toLowerCase() as Hex, {\n      size: isArray ? 32 : null,\n    }) as Address\n  }\n  if (type === 'string') return stringToHex(value as string)\n  if (type === 'bytes') return value as Hex\n  if (type === 'bool')\n    return pad(boolToHex(value as boolean), { size: isArray ? 32 : 1 })\n\n  const intMatch = (type as string).match(integerRegex)\n  if (intMatch) {\n    const [_type, baseType, bits = '256'] = intMatch\n    const size = parseInt(bits) / 8\n    return numberToHex(value as number, {\n      size: isArray ? 32 : size,\n      signed: baseType === 'int',\n    })\n  }\n\n  const bytesMatch = (type as string).match(bytesRegex)\n  if (bytesMatch) {\n    const [_type, size] = bytesMatch\n    if (parseInt(size) !== ((value as Hex).length - 2) / 2)\n      throw new BytesSizeMismatchError({\n        expectedSize: parseInt(size),\n        givenSize: ((value as Hex).length - 2) / 2,\n      })\n    return pad(value as Hex, { dir: 'right', size: isArray ? 32 : null }) as Hex\n  }\n\n  const arrayMatch = (type as string).match(arrayRegex)\n  if (arrayMatch && Array.isArray(value)) {\n    const [_type, childType] = arrayMatch\n    const data: Hex[] = []\n    for (let i = 0; i < value.length; i++) {\n      data.push(encode(childType, value[i], true))\n    }\n    if (data.length === 0) return '0x'\n    return concatHex(data)\n  }\n\n  throw new UnsupportedPackedAbiType(type)\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}