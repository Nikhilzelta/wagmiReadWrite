{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.extractFunctionType = exports.extractFunctionParams = exports.extractFunctionName = exports.extractFunctionParts = void 0;\nconst paramsRegex = /((function|event)\\s)?(.*)(\\((.*)\\))/;\nfunction extractFunctionParts(def) {\n  const parts = def.match(paramsRegex);\n  const type = parts?.[2] || undefined;\n  const name = parts?.[3];\n  const params = parts?.[5] || undefined;\n  return {\n    type,\n    name,\n    params\n  };\n}\nexports.extractFunctionParts = extractFunctionParts;\nfunction extractFunctionName(def) {\n  return extractFunctionParts(def).name;\n}\nexports.extractFunctionName = extractFunctionName;\nfunction extractFunctionParams(def) {\n  const params = extractFunctionParts(def).params;\n  const splitParams = params?.split(',').map(x => x.trim().split(' '));\n  return splitParams?.map(param => ({\n    type: param[0],\n    name: param[1] === 'indexed' ? param[2] : param[1],\n    ...(param[1] === 'indexed' ? {\n      indexed: true\n    } : {})\n  }));\n}\nexports.extractFunctionParams = extractFunctionParams;\nfunction extractFunctionType(def) {\n  return extractFunctionParts(def).type;\n}\nexports.extractFunctionType = extractFunctionType;","map":{"version":3,"names":["paramsRegex","extractFunctionParts","def","parts","match","type","undefined","name","params","exports","extractFunctionName","extractFunctionParams","splitParams","split","map","x","trim","param","indexed","extractFunctionType"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/contract/extractFunctionParts.ts"],"sourcesContent":["import type { ErrorType } from '../../errors/utils.js'\n\nconst paramsRegex = /((function|event)\\s)?(.*)(\\((.*)\\))/\n\nexport type ExtractFunctionPartsErrorType = ErrorType\n\n/** @deprecated – use `parseAbiItem` from `abitype`. */\nexport function extractFunctionParts(def: string) {\n  const parts = def.match(paramsRegex)\n  const type = parts?.[2] || undefined\n  const name = parts?.[3]\n  const params = parts?.[5] || undefined\n  return { type, name, params }\n}\n\nexport type ExtractFunctionNameErrorType = ErrorType\n\n/** @deprecated – use `parseAbiItem` from `abitype`. */\nexport function extractFunctionName(def: string) {\n  return extractFunctionParts(def).name\n}\n\nexport type ExtractFunctionParamsErrorType = ErrorType\n\n/** @deprecated – use `parseAbiItem` from `abitype`. */\nexport function extractFunctionParams(def: string) {\n  const params = extractFunctionParts(def).params\n  const splitParams = params?.split(',').map((x) => x.trim().split(' '))\n  return splitParams?.map((param) => ({\n    type: param[0],\n    name: param[1] === 'indexed' ? param[2] : param[1],\n    ...(param[1] === 'indexed' ? { indexed: true } : {}),\n  }))\n}\n\nexport type ExtractFunctionTypeErrorType = ErrorType\n\n/** @deprecated – use `parseAbiItem` from `abitype`. */\nexport function extractFunctionType(def: string) {\n  return extractFunctionParts(def).type\n}\n"],"mappings":";;;;;;AAEA,MAAMA,WAAW,GAAG,qCAAqC;AAKzD,SAAgBC,oBAAoBA,CAACC,GAAW;EAC9C,MAAMC,KAAK,GAAGD,GAAG,CAACE,KAAK,CAACJ,WAAW,CAAC;EACpC,MAAMK,IAAI,GAAGF,KAAK,GAAG,CAAC,CAAC,IAAIG,SAAS;EACpC,MAAMC,IAAI,GAAGJ,KAAK,GAAG,CAAC,CAAC;EACvB,MAAMK,MAAM,GAAGL,KAAK,GAAG,CAAC,CAAC,IAAIG,SAAS;EACtC,OAAO;IAAED,IAAI;IAAEE,IAAI;IAAEC;EAAM,CAAE;AAC/B;AANAC,OAAA,CAAAR,oBAAA,GAAAA,oBAAA;AAWA,SAAgBS,mBAAmBA,CAACR,GAAW;EAC7C,OAAOD,oBAAoB,CAACC,GAAG,CAAC,CAACK,IAAI;AACvC;AAFAE,OAAA,CAAAC,mBAAA,GAAAA,mBAAA;AAOA,SAAgBC,qBAAqBA,CAACT,GAAW;EAC/C,MAAMM,MAAM,GAAGP,oBAAoB,CAACC,GAAG,CAAC,CAACM,MAAM;EAC/C,MAAMI,WAAW,GAAGJ,MAAM,EAAEK,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACC,IAAI,EAAE,CAACH,KAAK,CAAC,GAAG,CAAC,CAAC;EACtE,OAAOD,WAAW,EAAEE,GAAG,CAAEG,KAAK,KAAM;IAClCZ,IAAI,EAAEY,KAAK,CAAC,CAAC,CAAC;IACdV,IAAI,EAAEU,KAAK,CAAC,CAAC,CAAC,KAAK,SAAS,GAAGA,KAAK,CAAC,CAAC,CAAC,GAAGA,KAAK,CAAC,CAAC,CAAC;IAClD,IAAIA,KAAK,CAAC,CAAC,CAAC,KAAK,SAAS,GAAG;MAAEC,OAAO,EAAE;IAAI,CAAE,GAAG,EAAE;GACpD,CAAC,CAAC;AACL;AARAT,OAAA,CAAAE,qBAAA,GAAAA,qBAAA;AAaA,SAAgBQ,mBAAmBA,CAACjB,GAAW;EAC7C,OAAOD,oBAAoB,CAACC,GAAG,CAAC,CAACG,IAAI;AACvC;AAFAI,OAAA,CAAAU,mBAAA,GAAAA,mBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}