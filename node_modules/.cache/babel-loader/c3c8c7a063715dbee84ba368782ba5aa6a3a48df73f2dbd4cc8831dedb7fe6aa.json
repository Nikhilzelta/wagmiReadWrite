{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.http = void 0;\nconst request_js_1 = require(\"../../errors/request.js\");\nconst transport_js_1 = require(\"../../errors/transport.js\");\nconst createBatchScheduler_js_1 = require(\"../../utils/promise/createBatchScheduler.js\");\nconst rpc_js_1 = require(\"../../utils/rpc.js\");\nconst createTransport_js_1 = require(\"./createTransport.js\");\nfunction http(url, config = {}) {\n  const {\n    batch,\n    fetchOptions,\n    key = 'http',\n    name = 'HTTP JSON-RPC',\n    retryDelay\n  } = config;\n  return ({\n    chain,\n    retryCount: retryCount_,\n    timeout: timeout_\n  }) => {\n    const {\n      batchSize = 1000,\n      wait = 0\n    } = typeof batch === 'object' ? batch : {};\n    const retryCount = config.retryCount ?? retryCount_;\n    const timeout = timeout_ ?? config.timeout ?? 10000;\n    const url_ = url || chain?.rpcUrls.default.http[0];\n    if (!url_) throw new transport_js_1.UrlRequiredError();\n    return (0, createTransport_js_1.createTransport)({\n      key,\n      name,\n      async request({\n        method,\n        params\n      }) {\n        const body = {\n          method,\n          params\n        };\n        const {\n          schedule\n        } = (0, createBatchScheduler_js_1.createBatchScheduler)({\n          id: `${url}`,\n          wait,\n          shouldSplitBatch(requests) {\n            return requests.length > batchSize;\n          },\n          fn: body => rpc_js_1.rpc.http(url_, {\n            body,\n            fetchOptions,\n            timeout\n          }),\n          sort: (a, b) => a.id - b.id\n        });\n        const fn = async body => batch ? schedule(body) : [await rpc_js_1.rpc.http(url_, {\n          body,\n          fetchOptions,\n          timeout\n        })];\n        const [{\n          error,\n          result\n        }] = await fn(body);\n        if (error) throw new request_js_1.RpcRequestError({\n          body,\n          error,\n          url: url_\n        });\n        return result;\n      },\n      retryCount,\n      retryDelay,\n      timeout,\n      type: 'http'\n    }, {\n      fetchOptions,\n      url\n    });\n  };\n}\nexports.http = http;","map":{"version":3,"names":["request_js_1","require","transport_js_1","createBatchScheduler_js_1","rpc_js_1","createTransport_js_1","http","url","config","batch","fetchOptions","key","name","retryDelay","chain","retryCount","retryCount_","timeout","timeout_","batchSize","wait","url_","rpcUrls","default","UrlRequiredError","createTransport","request","method","params","body","schedule","createBatchScheduler","id","shouldSplitBatch","requests","length","fn","rpc","sort","a","b","error","result","RpcRequestError","type","exports"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@safe-global/safe-apps-sdk/node_modules/viem/clients/transports/http.ts"],"sourcesContent":["import { RpcRequestError } from '../../errors/request.js'\nimport {\n  UrlRequiredError,\n  type UrlRequiredErrorType,\n} from '../../errors/transport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport { createBatchScheduler } from '../../utils/promise/createBatchScheduler.js'\nimport { type HttpOptions, type RpcRequest, rpc } from '../../utils/rpc.js'\n\nimport {\n  type CreateTransportErrorType,\n  type Transport,\n  type TransportConfig,\n  createTransport,\n} from './createTransport.js'\n\nexport type BatchOptions = {\n  /** The maximum number of JSON-RPC requests to send in a batch. @default 1_000 */\n  batchSize?: number\n  /** The maximum number of milliseconds to wait before sending a batch. @default 0 */\n  wait?: number\n}\n\nexport type HttpTransportConfig = {\n  /**\n   * Whether to enable Batch JSON-RPC.\n   * @link https://www.jsonrpc.org/specification#batch\n   */\n  batch?: boolean | BatchOptions\n  /**\n   * Request configuration to pass to `fetch`.\n   * @link https://developer.mozilla.org/en-US/docs/Web/API/fetch\n   */\n  fetchOptions?: HttpOptions['fetchOptions']\n  /** The key of the HTTP transport. */\n  key?: TransportConfig['key']\n  /** The name of the HTTP transport. */\n  name?: TransportConfig['name']\n  /** The max number of times to retry. */\n  retryCount?: TransportConfig['retryCount']\n  /** The base delay (in ms) between retries. */\n  retryDelay?: TransportConfig['retryDelay']\n  /** The timeout (in ms) for the HTTP request. Default: 10_000 */\n  timeout?: TransportConfig['timeout']\n}\n\nexport type HttpTransport = Transport<\n  'http',\n  {\n    fetchOptions?: HttpTransportConfig['fetchOptions']\n    url?: string\n  }\n>\n\nexport type HttpTransportErrorType =\n  | CreateTransportErrorType\n  | UrlRequiredErrorType\n  | ErrorType\n\n/**\n * @description Creates a HTTP transport that connects to a JSON-RPC API.\n */\nexport function http(\n  /** URL of the JSON-RPC API. Defaults to the chain's public RPC URL. */\n  url?: string,\n  config: HttpTransportConfig = {},\n): HttpTransport {\n  const {\n    batch,\n    fetchOptions,\n    key = 'http',\n    name = 'HTTP JSON-RPC',\n    retryDelay,\n  } = config\n  return ({ chain, retryCount: retryCount_, timeout: timeout_ }) => {\n    const { batchSize = 1000, wait = 0 } =\n      typeof batch === 'object' ? batch : {}\n    const retryCount = config.retryCount ?? retryCount_\n    const timeout = timeout_ ?? config.timeout ?? 10_000\n    const url_ = url || chain?.rpcUrls.default.http[0]\n    if (!url_) throw new UrlRequiredError()\n    return createTransport(\n      {\n        key,\n        name,\n        async request({ method, params }) {\n          const body = { method, params }\n\n          const { schedule } = createBatchScheduler({\n            id: `${url}`,\n            wait,\n            shouldSplitBatch(requests) {\n              return requests.length > batchSize\n            },\n            fn: (body: RpcRequest[]) =>\n              rpc.http(url_, {\n                body,\n                fetchOptions,\n                timeout,\n              }),\n            sort: (a, b) => a.id - b.id,\n          })\n\n          const fn = async (body: RpcRequest) =>\n            batch\n              ? schedule(body)\n              : [await rpc.http(url_, { body, fetchOptions, timeout })]\n\n          const [{ error, result }] = await fn(body)\n          if (error)\n            throw new RpcRequestError({\n              body,\n              error,\n              url: url_,\n            })\n          return result\n        },\n        retryCount,\n        retryDelay,\n        timeout,\n        type: 'http',\n      },\n      {\n        fetchOptions,\n        url,\n      },\n    )\n  }\n}\n"],"mappings":";;;;;;AAAA,MAAAA,YAAA,GAAAC,OAAA;AACA,MAAAC,cAAA,GAAAD,OAAA;AAKA,MAAAE,yBAAA,GAAAF,OAAA;AACA,MAAAG,QAAA,GAAAH,OAAA;AAEA,MAAAI,oBAAA,GAAAJ,OAAA;AAqDA,SAAgBK,IAAIA,CAElBC,GAAY,EACZC,MAAA,GAA8B,EAAE;EAEhC,MAAM;IACJC,KAAK;IACLC,YAAY;IACZC,GAAG,GAAG,MAAM;IACZC,IAAI,GAAG,eAAe;IACtBC;EAAU,CACX,GAAGL,MAAM;EACV,OAAO,CAAC;IAAEM,KAAK;IAAEC,UAAU,EAAEC,WAAW;IAAEC,OAAO,EAAEC;EAAQ,CAAE,KAAI;IAC/D,MAAM;MAAEC,SAAS,GAAG,IAAI;MAAEC,IAAI,GAAG;IAAC,CAAE,GAClC,OAAOX,KAAK,KAAK,QAAQ,GAAGA,KAAK,GAAG,EAAE;IACxC,MAAMM,UAAU,GAAGP,MAAM,CAACO,UAAU,IAAIC,WAAW;IACnD,MAAMC,OAAO,GAAGC,QAAQ,IAAIV,MAAM,CAACS,OAAO,IAAI,KAAM;IACpD,MAAMI,IAAI,GAAGd,GAAG,IAAIO,KAAK,EAAEQ,OAAO,CAACC,OAAO,CAACjB,IAAI,CAAC,CAAC,CAAC;IAClD,IAAI,CAACe,IAAI,EAAE,MAAM,IAAInB,cAAA,CAAAsB,gBAAgB,EAAE;IACvC,OAAO,IAAAnB,oBAAA,CAAAoB,eAAe,EACpB;MACEd,GAAG;MACHC,IAAI;MACJ,MAAMc,OAAOA,CAAC;QAAEC,MAAM;QAAEC;MAAM,CAAE;QAC9B,MAAMC,IAAI,GAAG;UAAEF,MAAM;UAAEC;QAAM,CAAE;QAE/B,MAAM;UAAEE;QAAQ,CAAE,GAAG,IAAA3B,yBAAA,CAAA4B,oBAAoB,EAAC;UACxCC,EAAE,EAAE,GAAGzB,GAAG,EAAE;UACZa,IAAI;UACJa,gBAAgBA,CAACC,QAAQ;YACvB,OAAOA,QAAQ,CAACC,MAAM,GAAGhB,SAAS;UACpC,CAAC;UACDiB,EAAE,EAAGP,IAAkB,IACrBzB,QAAA,CAAAiC,GAAG,CAAC/B,IAAI,CAACe,IAAI,EAAE;YACbQ,IAAI;YACJnB,YAAY;YACZO;WACD,CAAC;UACJqB,IAAI,EAAEA,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACP,EAAE,GAAGQ,CAAC,CAACR;SAC1B,CAAC;QAEF,MAAMI,EAAE,GAAG,MAAOP,IAAgB,IAChCpB,KAAK,GACDqB,QAAQ,CAACD,IAAI,CAAC,GACd,CAAC,MAAMzB,QAAA,CAAAiC,GAAG,CAAC/B,IAAI,CAACe,IAAI,EAAE;UAAEQ,IAAI;UAAEnB,YAAY;UAAEO;QAAO,CAAE,CAAC,CAAC;QAE7D,MAAM,CAAC;UAAEwB,KAAK;UAAEC;QAAM,CAAE,CAAC,GAAG,MAAMN,EAAE,CAACP,IAAI,CAAC;QAC1C,IAAIY,KAAK,EACP,MAAM,IAAIzC,YAAA,CAAA2C,eAAe,CAAC;UACxBd,IAAI;UACJY,KAAK;UACLlC,GAAG,EAAEc;SACN,CAAC;QACJ,OAAOqB,MAAM;MACf,CAAC;MACD3B,UAAU;MACVF,UAAU;MACVI,OAAO;MACP2B,IAAI,EAAE;KACP,EACD;MACElC,YAAY;MACZH;KACD,CACF;EACH,CAAC;AACH;AAlEAsC,OAAA,CAAAvC,IAAA,GAAAA,IAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}