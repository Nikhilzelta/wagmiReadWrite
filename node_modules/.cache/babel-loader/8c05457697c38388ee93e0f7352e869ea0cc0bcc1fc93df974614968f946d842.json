{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTransactionCount = void 0;\nconst fromHex_js_1 = require(\"../../utils/encoding/fromHex.js\");\nconst toHex_js_1 = require(\"../../utils/encoding/toHex.js\");\nasync function getTransactionCount(client, {\n  address,\n  blockTag = 'latest',\n  blockNumber\n}) {\n  const count = await client.request({\n    method: 'eth_getTransactionCount',\n    params: [address, blockNumber ? (0, toHex_js_1.numberToHex)(blockNumber) : blockTag]\n  });\n  return (0, fromHex_js_1.hexToNumber)(count);\n}\nexports.getTransactionCount = getTransactionCount;","map":{"version":3,"names":["fromHex_js_1","require","toHex_js_1","getTransactionCount","client","address","blockTag","blockNumber","count","request","method","params","numberToHex","hexToNumber","exports"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/public/getTransactionCount.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport type { Account } from '../../accounts/types.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type HexToNumberErrorType,\n  hexToNumber,\n} from '../../utils/encoding/fromHex.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\n\nexport type GetTransactionCountParameters = {\n  /** The account address. */\n  address: Address\n} & (\n  | {\n      /** The block number. */\n      blockNumber?: bigint\n      blockTag?: never\n    }\n  | {\n      blockNumber?: never\n      /** The block tag. Defaults to 'latest'. */\n      blockTag?: BlockTag\n    }\n)\nexport type GetTransactionCountReturnType = number\n\nexport type GetTransactionCountErrorType =\n  | RequestErrorType\n  | NumberToHexErrorType\n  | HexToNumberErrorType\n  | ErrorType\n\n/**\n * Returns the number of [Transactions](https://viem.sh/docs/glossary/terms.html#transaction) an Account has broadcast / sent.\n *\n * - Docs: https://viem.sh/docs/actions/public/getTransactionCount.html\n * - JSON-RPC Methods: [`eth_getTransactionCount`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactioncount)\n *\n * @param client - Client to use\n * @param parameters - {@link GetTransactionCountParameters}\n * @returns The number of transactions an account has sent. {@link GetTransactionCountReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getTransactionCount } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const transactionCount = await getTransactionCount(client, {\n *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n * })\n */\nexport async function getTransactionCount<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(\n  client: Client<Transport, TChain, TAccount>,\n  { address, blockTag = 'latest', blockNumber }: GetTransactionCountParameters,\n): Promise<GetTransactionCountReturnType> {\n  const count = await client.request({\n    method: 'eth_getTransactionCount',\n    params: [address, blockNumber ? numberToHex(blockNumber) : blockTag],\n  })\n  return hexToNumber(count)\n}\n"],"mappings":";;;;;;AASA,MAAAA,YAAA,GAAAC,OAAA;AAIA,MAAAC,UAAA,GAAAD,OAAA;AAmDO,eAAeE,mBAAmBA,CAIvCC,MAA2C,EAC3C;EAAEC,OAAO;EAAEC,QAAQ,GAAG,QAAQ;EAAEC;AAAW,CAAiC;EAE5E,MAAMC,KAAK,GAAG,MAAMJ,MAAM,CAACK,OAAO,CAAC;IACjCC,MAAM,EAAE,yBAAyB;IACjCC,MAAM,EAAE,CAACN,OAAO,EAAEE,WAAW,GAAG,IAAAL,UAAA,CAAAU,WAAW,EAACL,WAAW,CAAC,GAAGD,QAAQ;GACpE,CAAC;EACF,OAAO,IAAAN,YAAA,CAAAa,WAAW,EAACL,KAAK,CAAC;AAC3B;AAZAM,OAAA,CAAAX,mBAAA,GAAAA,mBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}