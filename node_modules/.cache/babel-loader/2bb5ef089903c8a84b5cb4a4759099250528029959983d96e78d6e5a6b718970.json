{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.verifyTypedData = void 0;\nconst getAddress_js_1 = require(\"../address/getAddress.js\");\nconst isAddressEqual_js_1 = require(\"../address/isAddressEqual.js\");\nconst recoverTypedDataAddress_js_1 = require(\"./recoverTypedDataAddress.js\");\nasync function verifyTypedData({\n  address,\n  domain,\n  message,\n  primaryType,\n  signature,\n  types\n}) {\n  return (0, isAddressEqual_js_1.isAddressEqual)((0, getAddress_js_1.getAddress)(address), await (0, recoverTypedDataAddress_js_1.recoverTypedDataAddress)({\n    domain,\n    message,\n    primaryType,\n    signature,\n    types\n  }));\n}\nexports.verifyTypedData = verifyTypedData;","map":{"version":3,"names":["getAddress_js_1","require","isAddressEqual_js_1","recoverTypedDataAddress_js_1","verifyTypedData","address","domain","message","primaryType","signature","types","isAddressEqual","getAddress","recoverTypedDataAddress","exports"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/signature/verifyTypedData.ts"],"sourcesContent":["import type { Address, TypedData } from 'abitype'\n\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport type { TypedDataDefinition } from '../../types/typedData.js'\nimport { type GetAddressErrorType, getAddress } from '../address/getAddress.js'\nimport {\n  type IsAddressEqualErrorType,\n  isAddressEqual,\n} from '../address/isAddressEqual.js'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport {\n  type RecoverTypedDataAddressParameters,\n  recoverTypedDataAddress,\n} from './recoverTypedDataAddress.js'\n\nexport type VerifyTypedDataParameters<\n  TTypedData extends TypedData | { [key: string]: unknown } = TypedData,\n  TPrimaryType extends string = string,\n> = TypedDataDefinition<TTypedData, TPrimaryType> & {\n  /** The address to verify the typed data for. */\n  address: Address\n  /** The signature to verify */\n  signature: Hex | ByteArray\n}\n\nexport type VerifyTypedDataReturnType = boolean\n\nexport type VerifyTypedDataErrorType =\n  | IsAddressEqualErrorType\n  | GetAddressErrorType\n  | RecoverTypedDataAddressParameters\n  | ErrorType\n\n/**\n * Verify that typed data was signed by the provided address.\n *\n * Note:  Only supports Externally Owned Accounts. Does not support Contract Accounts.\n *        It is highly recommended to use `publicClient.verifyTypedData` instead to ensure\n *        wallet interoperability.\n *\n * - Docs {@link https://viem.sh/docs/utilities/verifyTypedData.html}\n *\n * @param parameters - {@link VerifyTypedDataParameters}\n * @returns Whether or not the signature is valid. {@link VerifyTypedDataReturnType}\n */\nexport async function verifyTypedData<\n  const TTypedData extends TypedData | { [key: string]: unknown },\n  TPrimaryType extends string = string,\n>({\n  address,\n  domain,\n  message,\n  primaryType,\n  signature,\n  types,\n}: VerifyTypedDataParameters<\n  TTypedData,\n  TPrimaryType\n>): Promise<VerifyTypedDataReturnType> {\n  return isAddressEqual(\n    getAddress(address),\n    await recoverTypedDataAddress({\n      domain,\n      message,\n      primaryType,\n      signature,\n      types,\n    } as RecoverTypedDataAddressParameters),\n  )\n}\n"],"mappings":";;;;;;AAIA,MAAAA,eAAA,GAAAC,OAAA;AACA,MAAAC,mBAAA,GAAAD,OAAA;AAMA,MAAAE,4BAAA,GAAAF,OAAA;AAmCO,eAAeG,eAAeA,CAGnC;EACAC,OAAO;EACPC,MAAM;EACNC,OAAO;EACPC,WAAW;EACXC,SAAS;EACTC;AAAK,CAIN;EACC,OAAO,IAAAR,mBAAA,CAAAS,cAAc,EACnB,IAAAX,eAAA,CAAAY,UAAU,EAACP,OAAO,CAAC,EACnB,MAAM,IAAAF,4BAAA,CAAAU,uBAAuB,EAAC;IAC5BP,MAAM;IACNC,OAAO;IACPC,WAAW;IACXC,SAAS;IACTC;GACoC,CAAC,CACxC;AACH;AAxBAI,OAAA,CAAAV,eAAA,GAAAA,eAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}