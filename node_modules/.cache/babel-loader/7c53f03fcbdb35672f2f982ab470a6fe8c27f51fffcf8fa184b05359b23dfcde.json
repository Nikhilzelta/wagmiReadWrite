{"ast":null,"code":"import { estimateGas as viem_estimateGas, sendTransaction as viem_sendTransaction } from 'viem/actions';\nimport '../createConfig.js';\nimport '../types/utils.js';\nimport { getAction } from '../utils/getAction.js';\nimport { getConnectorClient } from './getConnectorClient.js';\n/** https://wagmi.sh/core/api/actions/sendTransaction */\nexport async function sendTransaction(config, parameters) {\n  const {\n    account,\n    chainId,\n    connector,\n    gas: gas_,\n    ...rest\n  } = parameters;\n  let client;\n  if (typeof account === 'object' && account.type === 'local') client = config.getClient({\n    chainId\n  });else client = await getConnectorClient(config, {\n    account,\n    chainId,\n    connector\n  });\n  const gas = await (async () => {\n    // Skip gas estimation if `null` is provided.\n    if (gas_ === null) return undefined;\n    // Run gas estimation if no value is provided.\n    if (gas_ === undefined) {\n      const action = getAction(client, viem_estimateGas, 'estimateGas');\n      return action({\n        ...rest,\n        account,\n        chain: chainId ? {\n          id: chainId\n        } : null\n      });\n    }\n    // Use provided gas value.\n    return gas_;\n  })();\n  const action = getAction(client, viem_sendTransaction, 'sendTransaction');\n  const hash = await action({\n    ...rest,\n    ...(account ? {\n      account\n    } : {}),\n    gas,\n    chain: chainId ? {\n      id: chainId\n    } : null\n  });\n  return hash;\n}","map":{"version":3,"names":["estimateGas","viem_estimateGas","sendTransaction","viem_sendTransaction","getAction","getConnectorClient","config","parameters","account","chainId","connector","gas","gas_","rest","client","type","getClient","undefined","action","chain","id","hash"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@wagmi/core/src/actions/sendTransaction.ts"],"sourcesContent":["import type {\n  Account,\n  Address,\n  Chain,\n  SendTransactionErrorType as viem_SendTransactionErrorType,\n  SendTransactionParameters as viem_SendTransactionParameters,\n  SendTransactionReturnType as viem_SendTransactionReturnType,\n  TransactionRequest,\n} from 'viem'\nimport {\n  estimateGas as viem_estimateGas,\n  sendTransaction as viem_sendTransaction,\n} from 'viem/actions'\n\nimport { type Config } from '../createConfig.js'\nimport type { BaseErrorType, ErrorType } from '../errors/base.js'\nimport type { SelectChains } from '../types/chain.js'\nimport type {\n  ChainIdParameter,\n  ConnectorParameter,\n} from '../types/properties.js'\nimport { type Evaluate } from '../types/utils.js'\nimport { getAction } from '../utils/getAction.js'\nimport {\n  type GetConnectorClientErrorType,\n  getConnectorClient,\n} from './getConnectorClient.js'\n\nexport type SendTransactionParameters<\n  config extends Config = Config,\n  chainId extends config['chains'][number]['id'] = config['chains'][number]['id'],\n  ///\n  chains extends readonly Chain[] = SelectChains<config, chainId>,\n> = {\n  [key in keyof chains]: Evaluate<\n    Omit<\n      viem_SendTransactionParameters<chains[key], Account, chains[key]>,\n      'chain' | 'gas'\n    > &\n      ChainIdParameter<config, chainId> &\n      ConnectorParameter & {\n        to: Address\n      }\n  >\n}[number] & {\n  /** Gas provided for transaction execution, or `null` to skip the prelude gas estimation. */\n  gas?: TransactionRequest['gas'] | null\n}\n\nexport type SendTransactionReturnType = viem_SendTransactionReturnType\n\nexport type SendTransactionErrorType =\n  // getConnectorClient()\n  | GetConnectorClientErrorType\n  // base\n  | BaseErrorType\n  | ErrorType\n  // viem\n  | viem_SendTransactionErrorType\n\n/** https://wagmi.sh/core/api/actions/sendTransaction */\nexport async function sendTransaction<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n>(\n  config: config,\n  parameters: SendTransactionParameters<config, chainId>,\n): Promise<SendTransactionReturnType> {\n  const { account, chainId, connector, gas: gas_, ...rest } = parameters\n\n  let client\n  if (typeof account === 'object' && account.type === 'local')\n    client = config.getClient({ chainId })\n  else\n    client = await getConnectorClient(config, { account, chainId, connector })\n\n  const gas = await (async () => {\n    // Skip gas estimation if `null` is provided.\n    if (gas_ === null) return undefined\n\n    // Run gas estimation if no value is provided.\n    if (gas_ === undefined) {\n      const action = getAction(client, viem_estimateGas, 'estimateGas')\n      return action({\n        ...(rest as any),\n        account,\n        chain: chainId ? { id: chainId } : null,\n      })\n    }\n\n    // Use provided gas value.\n    return gas_\n  })()\n\n  const action = getAction(client, viem_sendTransaction, 'sendTransaction')\n  const hash = await action({\n    ...(rest as any),\n    ...(account ? { account } : {}),\n    gas,\n    chain: chainId ? { id: chainId } : null,\n  })\n\n  return hash\n}\n"],"mappings":"AASA,SACEA,WAAW,IAAIC,gBAAgB,EAC/BC,eAAe,IAAIC,oBAAoB,QAClC,cAAc;AAErB,OAA4B,oBAAoB;AAOhD,OAA8B,mBAAmB;AACjD,SAASC,SAAS,QAAQ,uBAAuB;AACjD,SAEEC,kBAAkB,QACb,yBAAyB;AAkChC;AACA,OAAO,eAAeH,eAAeA,CAInCI,MAAc,EACdC,UAAsD;EAEtD,MAAM;IAAEC,OAAO;IAAEC,OAAO;IAAEC,SAAS;IAAEC,GAAG,EAAEC,IAAI;IAAE,GAAGC;EAAI,CAAE,GAAGN,UAAU;EAEtE,IAAIO,MAAM;EACV,IAAI,OAAON,OAAO,KAAK,QAAQ,IAAIA,OAAO,CAACO,IAAI,KAAK,OAAO,EACzDD,MAAM,GAAGR,MAAM,CAACU,SAAS,CAAC;IAAEP;EAAO,CAAE,CAAC,MAEtCK,MAAM,GAAG,MAAMT,kBAAkB,CAACC,MAAM,EAAE;IAAEE,OAAO;IAAEC,OAAO;IAAEC;EAAS,CAAE,CAAC;EAE5E,MAAMC,GAAG,GAAG,MAAM,CAAC,YAAW;IAC5B;IACA,IAAIC,IAAI,KAAK,IAAI,EAAE,OAAOK,SAAS;IAEnC;IACA,IAAIL,IAAI,KAAKK,SAAS,EAAE;MACtB,MAAMC,MAAM,GAAGd,SAAS,CAACU,MAAM,EAAEb,gBAAgB,EAAE,aAAa,CAAC;MACjE,OAAOiB,MAAM,CAAC;QACZ,GAAIL,IAAY;QAChBL,OAAO;QACPW,KAAK,EAAEV,OAAO,GAAG;UAAEW,EAAE,EAAEX;QAAO,CAAE,GAAG;OACpC,CAAC;IACJ;IAEA;IACA,OAAOG,IAAI;EACb,CAAC,EAAC,CAAE;EAEJ,MAAMM,MAAM,GAAGd,SAAS,CAACU,MAAM,EAAEX,oBAAoB,EAAE,iBAAiB,CAAC;EACzE,MAAMkB,IAAI,GAAG,MAAMH,MAAM,CAAC;IACxB,GAAIL,IAAY;IAChB,IAAIL,OAAO,GAAG;MAAEA;IAAO,CAAE,GAAG,EAAE,CAAC;IAC/BG,GAAG;IACHQ,KAAK,EAAEV,OAAO,GAAG;MAAEW,EAAE,EAAEX;IAAO,CAAE,GAAG;GACpC,CAAC;EAEF,OAAOY,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}