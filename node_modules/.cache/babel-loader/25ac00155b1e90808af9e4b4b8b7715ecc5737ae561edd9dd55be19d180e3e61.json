{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseAbi = void 0;\nconst signatures_js_1 = require(\"./runtime/signatures.js\");\nconst structs_js_1 = require(\"./runtime/structs.js\");\nconst utils_js_1 = require(\"./runtime/utils.js\");\nfunction parseAbi(signatures) {\n  const structs = (0, structs_js_1.parseStructs)(signatures);\n  const abi = [];\n  const length = signatures.length;\n  for (let i = 0; i < length; i++) {\n    const signature = signatures[i];\n    if ((0, signatures_js_1.isStructSignature)(signature)) continue;\n    abi.push((0, utils_js_1.parseSignature)(signature, structs));\n  }\n  return abi;\n}\nexports.parseAbi = parseAbi;","map":{"version":3,"names":["signatures_js_1","require","structs_js_1","utils_js_1","parseAbi","signatures","structs","parseStructs","abi","length","i","signature","isStructSignature","push","parseSignature","exports"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@safe-global/safe-apps-sdk/node_modules/abitype/src/human-readable/parseAbi.ts"],"sourcesContent":["import type { Abi } from '../abi.js'\nimport type { Error, Filter } from '../types.js'\nimport { isStructSignature } from './runtime/signatures.js'\nimport { parseStructs } from './runtime/structs.js'\nimport { parseSignature } from './runtime/utils.js'\nimport type { Signatures } from './types/signatures.js'\nimport type { ParseStructs } from './types/structs.js'\nimport type { ParseSignature } from './types/utils.js'\n\n/**\n * Parses human-readable ABI into JSON {@link Abi}\n *\n * @param TSignatures - Human-readable ABI\n * @returns Parsed {@link Abi}\n *\n * @example\n * type Result = ParseAbi<\n *   // ^? type Result = readonly [{ name: \"balanceOf\"; type: \"function\"; stateMutability:...\n *   [\n *     'function balanceOf(address owner) view returns (uint256)',\n *     'event Transfer(address indexed from, address indexed to, uint256 amount)',\n *   ]\n * >\n */\nexport type ParseAbi<TSignatures extends readonly string[]> =\n  string[] extends TSignatures\n    ? Abi // If `T` was not able to be inferred (e.g. just `string[]`), return `Abi`\n    : TSignatures extends readonly string[]\n    ? TSignatures extends Signatures<TSignatures> // Validate signatures\n      ? ParseStructs<TSignatures> extends infer Structs\n        ? {\n            [K in keyof TSignatures]: TSignatures[K] extends string\n              ? ParseSignature<TSignatures[K], Structs>\n              : never\n          } extends infer Mapped extends readonly unknown[]\n          ? Filter<Mapped, never> extends infer Result\n            ? Result extends readonly []\n              ? never\n              : Result\n            : never\n          : never\n        : never\n      : never\n    : never\n\n/**\n * Parses human-readable ABI into JSON {@link Abi}\n *\n * @param signatures - Human-Readable ABI\n * @returns Parsed {@link Abi}\n *\n * @example\n * const abi = parseAbi([\n *   //  ^? const abi: readonly [{ name: \"balanceOf\"; type: \"function\"; stateMutability:...\n *   'function balanceOf(address owner) view returns (uint256)',\n *   'event Transfer(address indexed from, address indexed to, uint256 amount)',\n * ])\n */\nexport function parseAbi<const TSignatures extends readonly string[]>(\n  signatures: TSignatures['length'] extends 0\n    ? Error<'At least one signature required'>\n    : Signatures<TSignatures> extends TSignatures\n    ? TSignatures\n    : Signatures<TSignatures>,\n): ParseAbi<TSignatures> {\n  const structs = parseStructs(signatures as readonly string[])\n  const abi = []\n  const length = signatures.length as number\n  for (let i = 0; i < length; i++) {\n    const signature = (signatures as readonly string[])[i]!\n    if (isStructSignature(signature)) continue\n    abi.push(parseSignature(signature, structs))\n  }\n  return abi as unknown as ParseAbi<TSignatures>\n}\n"],"mappings":";;;;;;AAEA,MAAAA,eAAA,GAAAC,OAAA;AACA,MAAAC,YAAA,GAAAD,OAAA;AACA,MAAAE,UAAA,GAAAF,OAAA;AAsDA,SAAgBG,QAAQA,CACtBC,UAI2B;EAE3B,MAAMC,OAAO,GAAG,IAAAJ,YAAA,CAAAK,YAAY,EAACF,UAA+B,CAAC;EAC7D,MAAMG,GAAG,GAAG,EAAE;EACd,MAAMC,MAAM,GAAGJ,UAAU,CAACI,MAAgB;EAC1C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,MAAM,EAAEC,CAAC,EAAE,EAAE;IAC/B,MAAMC,SAAS,GAAIN,UAAgC,CAACK,CAAC,CAAE;IACvD,IAAI,IAAAV,eAAA,CAAAY,iBAAiB,EAACD,SAAS,CAAC,EAAE;IAClCH,GAAG,CAACK,IAAI,CAAC,IAAAV,UAAA,CAAAW,cAAc,EAACH,SAAS,EAAEL,OAAO,CAAC,CAAC;;EAE9C,OAAOE,GAAuC;AAChD;AAhBAO,OAAA,CAAAX,QAAA,GAAAA,QAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}