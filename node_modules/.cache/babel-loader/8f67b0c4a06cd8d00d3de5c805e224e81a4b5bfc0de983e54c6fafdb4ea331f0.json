{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.signTypedData = void 0;\nconst parseAccount_js_1 = require(\"../../accounts/utils/parseAccount.js\");\nconst account_js_1 = require(\"../../errors/account.js\");\nconst isHex_js_1 = require(\"../../utils/data/isHex.js\");\nconst stringify_js_1 = require(\"../../utils/stringify.js\");\nconst typedData_js_1 = require(\"../../utils/typedData.js\");\nasync function signTypedData(client, {\n  account: account_ = client.account,\n  domain,\n  message,\n  primaryType,\n  types: types_\n}) {\n  if (!account_) throw new account_js_1.AccountNotFoundError({\n    docsPath: '/docs/actions/wallet/signTypedData'\n  });\n  const account = (0, parseAccount_js_1.parseAccount)(account_);\n  const types = {\n    EIP712Domain: (0, typedData_js_1.getTypesForEIP712Domain)({\n      domain\n    }),\n    ...types_\n  };\n  (0, typedData_js_1.validateTypedData)({\n    domain,\n    message,\n    primaryType,\n    types\n  });\n  if (account.type === 'local') return account.signTypedData({\n    domain,\n    primaryType,\n    types,\n    message\n  });\n  const typedData = (0, stringify_js_1.stringify)({\n    domain: domain ?? {},\n    primaryType,\n    types,\n    message\n  }, (_, value) => (0, isHex_js_1.isHex)(value) ? value.toLowerCase() : value);\n  return client.request({\n    method: 'eth_signTypedData_v4',\n    params: [account.address, typedData]\n  });\n}\nexports.signTypedData = signTypedData;","map":{"version":3,"names":["parseAccount_js_1","require","account_js_1","isHex_js_1","stringify_js_1","typedData_js_1","signTypedData","client","account","account_","domain","message","primaryType","types","types_","AccountNotFoundError","docsPath","parseAccount","EIP712Domain","getTypesForEIP712Domain","validateTypedData","type","typedData","stringify","_","value","isHex","toLowerCase","request","method","params","address","exports"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/wallet/signTypedData.ts"],"sourcesContent":["import type { TypedData } from 'abitype'\n\nimport type { Account } from '../../accounts/types.js'\nimport {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../../accounts/utils/parseAccount.js'\nimport type { SignTypedDataErrorType as SignTypedDataErrorType_account } from '../../accounts/utils/signTypedData.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport {\n  AccountNotFoundError,\n  type AccountNotFoundErrorType,\n} from '../../errors/account.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { GetAccountParameter } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { TypedDataDefinition } from '../../types/typedData.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport { type IsHexErrorType, isHex } from '../../utils/data/isHex.js'\nimport { type StringifyErrorType, stringify } from '../../utils/stringify.js'\nimport {\n  type GetTypesForEIP712DomainErrorType,\n  type ValidateTypedDataErrorType,\n  getTypesForEIP712Domain,\n  validateTypedData,\n} from '../../utils/typedData.js'\n\nexport type SignTypedDataParameters<\n  TTypedData extends TypedData | { [key: string]: unknown } = TypedData,\n  TPrimaryType extends string = string,\n  TAccount extends Account | undefined = undefined,\n> = GetAccountParameter<TAccount> &\n  TypedDataDefinition<TTypedData, TPrimaryType>\n\nexport type SignTypedDataReturnType = Hex\n\nexport type SignTypedDataErrorType =\n  | AccountNotFoundErrorType\n  | ParseAccountErrorType\n  | GetTypesForEIP712DomainErrorType\n  | ValidateTypedDataErrorType\n  | StringifyErrorType\n  | SignTypedDataErrorType_account\n  | IsHexErrorType\n  | RequestErrorType\n  | ErrorType\n\n/**\n * Signs typed data and calculates an Ethereum-specific signature in [https://eips.ethereum.org/EIPS/eip-712](https://eips.ethereum.org/EIPS/eip-712): `sign(keccak256(\"\\x19\\x01\" ‖ domainSeparator ‖ hashStruct(message)))`\n *\n * - Docs: https://viem.sh/docs/actions/wallet/signTypedData.html\n * - JSON-RPC Methods:\n *   - JSON-RPC Accounts: [`eth_signTypedData_v4`](https://docs.metamask.io/guide/signing-data.html#signtypeddata-v4)\n *   - Local Accounts: Signs locally. No JSON-RPC request.\n *\n * @param client - Client to use\n * @param parameters - {@link SignTypedDataParameters}\n * @returns The signed data. {@link SignTypedDataReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { signTypedData } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const signature = await signTypedData(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   domain: {\n *     name: 'Ether Mail',\n *     version: '1',\n *     chainId: 1,\n *     verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n *   },\n *   types: {\n *     Person: [\n *       { name: 'name', type: 'string' },\n *       { name: 'wallet', type: 'address' },\n *     ],\n *     Mail: [\n *       { name: 'from', type: 'Person' },\n *       { name: 'to', type: 'Person' },\n *       { name: 'contents', type: 'string' },\n *     ],\n *   },\n *   primaryType: 'Mail',\n *   message: {\n *     from: {\n *       name: 'Cow',\n *       wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n *     },\n *     to: {\n *       name: 'Bob',\n *       wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n *     },\n *     contents: 'Hello, Bob!',\n *   },\n * })\n *\n * @example\n * // Account Hoisting\n * import { createWalletClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { signTypedData } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0x…'),\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const signature = await signTypedData(client, {\n *   domain: {\n *     name: 'Ether Mail',\n *     version: '1',\n *     chainId: 1,\n *     verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n *   },\n *   types: {\n *     Person: [\n *       { name: 'name', type: 'string' },\n *       { name: 'wallet', type: 'address' },\n *     ],\n *     Mail: [\n *       { name: 'from', type: 'Person' },\n *       { name: 'to', type: 'Person' },\n *       { name: 'contents', type: 'string' },\n *     ],\n *   },\n *   primaryType: 'Mail',\n *   message: {\n *     from: {\n *       name: 'Cow',\n *       wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n *     },\n *     to: {\n *       name: 'Bob',\n *       wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n *     },\n *     contents: 'Hello, Bob!',\n *   },\n * })\n */\nexport async function signTypedData<\n  const TTypedData extends TypedData | { [key: string]: unknown },\n  TPrimaryType extends string,\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(\n  client: Client<Transport, TChain, TAccount>,\n  {\n    account: account_ = client.account,\n    domain,\n    message,\n    primaryType,\n    types: types_,\n  }: SignTypedDataParameters<TTypedData, TPrimaryType, TAccount>,\n): Promise<SignTypedDataReturnType> {\n  if (!account_)\n    throw new AccountNotFoundError({\n      docsPath: '/docs/actions/wallet/signTypedData',\n    })\n  const account = parseAccount(account_)\n\n  const types = {\n    EIP712Domain: getTypesForEIP712Domain({ domain }),\n    ...(types_ as TTypedData),\n  }\n\n  // Need to do a runtime validation check on addresses, byte ranges, integer ranges, etc\n  // as we can't statically check this with TypeScript.\n  validateTypedData({\n    domain,\n    message,\n    primaryType,\n    types,\n  } as TypedDataDefinition)\n\n  if (account.type === 'local')\n    return account.signTypedData({\n      domain,\n      primaryType,\n      types,\n      message,\n    } as TypedDataDefinition)\n\n  const typedData = stringify(\n    { domain: domain ?? {}, primaryType, types, message },\n    (_, value) => (isHex(value) ? value.toLowerCase() : value),\n  )\n  return client.request({\n    method: 'eth_signTypedData_v4',\n    params: [account.address, typedData],\n  })\n}\n"],"mappings":";;;;;;AAGA,MAAAA,iBAAA,GAAAC,OAAA;AAOA,MAAAC,YAAA,GAAAD,OAAA;AAUA,MAAAE,UAAA,GAAAF,OAAA;AACA,MAAAG,cAAA,GAAAH,OAAA;AACA,MAAAI,cAAA,GAAAJ,OAAA;AA6HO,eAAeK,aAAaA,CAMjCC,MAA2C,EAC3C;EACEC,OAAO,EAAEC,QAAQ,GAAGF,MAAM,CAACC,OAAO;EAClCE,MAAM;EACNC,OAAO;EACPC,WAAW;EACXC,KAAK,EAAEC;AAAM,CAC+C;EAE9D,IAAI,CAACL,QAAQ,EACX,MAAM,IAAIP,YAAA,CAAAa,oBAAoB,CAAC;IAC7BC,QAAQ,EAAE;GACX,CAAC;EACJ,MAAMR,OAAO,GAAG,IAAAR,iBAAA,CAAAiB,YAAY,EAACR,QAAQ,CAAC;EAEtC,MAAMI,KAAK,GAAG;IACZK,YAAY,EAAE,IAAAb,cAAA,CAAAc,uBAAuB,EAAC;MAAET;IAAM,CAAE,CAAC;IACjD,GAAII;GACL;EAID,IAAAT,cAAA,CAAAe,iBAAiB,EAAC;IAChBV,MAAM;IACNC,OAAO;IACPC,WAAW;IACXC;GACsB,CAAC;EAEzB,IAAIL,OAAO,CAACa,IAAI,KAAK,OAAO,EAC1B,OAAOb,OAAO,CAACF,aAAa,CAAC;IAC3BI,MAAM;IACNE,WAAW;IACXC,KAAK;IACLF;GACsB,CAAC;EAE3B,MAAMW,SAAS,GAAG,IAAAlB,cAAA,CAAAmB,SAAS,EACzB;IAAEb,MAAM,EAAEA,MAAM,IAAI,EAAE;IAAEE,WAAW;IAAEC,KAAK;IAAEF;EAAO,CAAE,EACrD,CAACa,CAAC,EAAEC,KAAK,KAAM,IAAAtB,UAAA,CAAAuB,KAAK,EAACD,KAAK,CAAC,GAAGA,KAAK,CAACE,WAAW,EAAE,GAAGF,KAAM,CAC3D;EACD,OAAOlB,MAAM,CAACqB,OAAO,CAAC;IACpBC,MAAM,EAAE,sBAAsB;IAC9BC,MAAM,EAAE,CAACtB,OAAO,CAACuB,OAAO,EAAET,SAAS;GACpC,CAAC;AACJ;AAnDAU,OAAA,CAAA1B,aAAA,GAAAA,aAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}