{"ast":null,"code":"import '@tanstack/query-core';\nimport { getBlockTransactionCount } from '../actions/getBlockTransactionCount.js';\nimport '../createConfig.js';\nimport '../types/properties.js';\nimport '../types/utils.js';\nimport { filterQueryOptions } from './utils.js';\nexport function getBlockTransactionCountQueryOptions(config, options = {}) {\n  return {\n    async queryFn({\n      queryKey\n    }) {\n      const {\n        scopeKey: _,\n        ...parameters\n      } = queryKey[1];\n      const blockTransactionCount = await getBlockTransactionCount(config, parameters);\n      return blockTransactionCount ?? null;\n    },\n    queryKey: getBlockTransactionCountQueryKey(options)\n  };\n}\nexport function getBlockTransactionCountQueryKey(options = {}) {\n  return ['blockTransactionCount', filterQueryOptions(options)];\n}","map":{"version":3,"names":["getBlockTransactionCount","filterQueryOptions","getBlockTransactionCountQueryOptions","config","options","queryFn","queryKey","scopeKey","_","parameters","blockTransactionCount","getBlockTransactionCountQueryKey"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@wagmi/core/src/query/getBlockTransactionCount.ts"],"sourcesContent":["import { type QueryOptions } from '@tanstack/query-core'\n\nimport {\n  type GetBlockTransactionCountErrorType,\n  type GetBlockTransactionCountParameters,\n  type GetBlockTransactionCountReturnType,\n  getBlockTransactionCount,\n} from '../actions/getBlockTransactionCount.js'\nimport { type Config } from '../createConfig.js'\nimport { type ScopeKeyParameter } from '../types/properties.js'\nimport { type ExactPartial, type UnionEvaluate } from '../types/utils.js'\nimport { filterQueryOptions } from './utils.js'\n\nexport type GetBlockTransactionCountOptions<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n> = UnionEvaluate<\n  ExactPartial<GetBlockTransactionCountParameters<config, chainId>> &\n    ScopeKeyParameter\n>\n\nexport function getBlockTransactionCountQueryOptions<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n>(\n  config: config,\n  options: GetBlockTransactionCountOptions<config, chainId> = {},\n) {\n  return {\n    async queryFn({ queryKey }) {\n      const { scopeKey: _, ...parameters } = queryKey[1]\n      const blockTransactionCount = await getBlockTransactionCount(\n        config,\n        parameters,\n      )\n      return blockTransactionCount ?? null\n    },\n    queryKey: getBlockTransactionCountQueryKey(options),\n  } as const satisfies QueryOptions<\n    GetBlockTransactionCountQueryFnData,\n    GetBlockTransactionCountErrorType,\n    GetBlockTransactionCountData,\n    GetBlockTransactionCountQueryKey<config, chainId>\n  >\n}\n\nexport type GetBlockTransactionCountQueryFnData =\n  GetBlockTransactionCountReturnType\n\nexport type GetBlockTransactionCountData = GetBlockTransactionCountQueryFnData\n\nexport function getBlockTransactionCountQueryKey<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n>(options: GetBlockTransactionCountOptions<config, chainId> = {}) {\n  return ['blockTransactionCount', filterQueryOptions(options)] as const\n}\n\nexport type GetBlockTransactionCountQueryKey<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n> = ReturnType<typeof getBlockTransactionCountQueryKey<config, chainId>>\n"],"mappings":"AAAA,OAAkC,sBAAsB;AAExD,SAIEA,wBAAwB,QACnB,wCAAwC;AAC/C,OAA4B,oBAAoB;AAChD,OAAuC,wBAAwB;AAC/D,OAAsD,mBAAmB;AACzE,SAASC,kBAAkB,QAAQ,YAAY;AAU/C,OAAM,SAAUC,oCAAoCA,CAIlDC,MAAc,EACdC,OAAA,GAA4D,EAAE;EAE9D,OAAO;IACL,MAAMC,OAAOA,CAAC;MAAEC;IAAQ,CAAE;MACxB,MAAM;QAAEC,QAAQ,EAAEC,CAAC;QAAE,GAAGC;MAAU,CAAE,GAAGH,QAAQ,CAAC,CAAC,CAAC;MAClD,MAAMI,qBAAqB,GAAG,MAAMV,wBAAwB,CAC1DG,MAAM,EACNM,UAAU,CACX;MACD,OAAOC,qBAAqB,IAAI,IAAI;IACtC,CAAC;IACDJ,QAAQ,EAAEK,gCAAgC,CAACP,OAAO;GAMnD;AACH;AAOA,OAAM,SAAUO,gCAAgCA,CAG9CP,OAAA,GAA4D,EAAE;EAC9D,OAAO,CAAC,uBAAuB,EAAEH,kBAAkB,CAACG,OAAO,CAAC,CAAU;AACxE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}