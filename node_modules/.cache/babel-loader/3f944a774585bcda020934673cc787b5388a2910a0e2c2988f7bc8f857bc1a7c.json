{"ast":null,"code":"import 'viem';\nimport '../createConfig.js';\nimport './utils.js';","map":{"version":3,"names":[],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/wagmi/node_modules/@wagmi/core/src/types/chain.ts"],"sourcesContent":["import { type Chain, type ChainFormatters } from 'viem'\n\nimport { type Config } from '../createConfig.js'\nimport { type IsNarrowable, type Merge } from './utils.js'\n\n/** Filters {@link Config} chains by {@link chainId} or simplifies if no `ChainFormatters` are present. */\nexport type SelectChains<\n  config extends Config,\n  chainId extends config['chains'][number]['id'] | undefined = undefined,\n> = Config extends config\n  ? readonly [Chain] // chains not inferrable, return default\n  : IsNarrowable<chainId, config['chains'][number]['id']> extends true\n  ? readonly [Extract<config['chains'][number], { id: chainId }>] // select specific chain\n  : HasFormatter<config['chains']> extends true\n  ? config['chains'] // return all chains since one has formatter\n  : // return default chain with ID set to union (allows for more simple type since the only thing that is different is the chain ID for each chain)\n    readonly [Merge<Chain, { id: config['chains'][number]['id'] }>]\n\ntype HasFormatter<chains extends readonly Chain[]> = chains extends readonly [\n  infer head extends Chain,\n  ...infer tail extends readonly Chain[],\n]\n  ? IsNarrowable<head['formatters'], ChainFormatters | undefined> extends true\n    ? true\n    : HasFormatter<tail>\n  : false\n"],"mappings":"AAAA,OAAiD,MAAM;AAEvD,OAA4B,oBAAoB;AAChD,OAA8C,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}