{"ast":null,"code":"import { createClient, custom } from 'viem';\nimport { getAddress, parseAccount } from 'viem/utils';\nimport { ConnectorAccountNotFoundError, ConnectorNotConnectedError } from '../errors/config.js';\nimport '../types/utils.js';\n/** https://wagmi.sh/core/api/actions/getConnectorClient */\nexport async function getConnectorClient(config, parameters = {}) {\n  // Get connection\n  let connection;\n  if (parameters.connector) {\n    const {\n      connector\n    } = parameters;\n    const [accounts, chainId] = await Promise.all([connector.getAccounts(), connector.getChainId()]);\n    connection = {\n      accounts: accounts,\n      chainId,\n      connector\n    };\n  } else connection = config.state.connections.get(config.state.current);\n  if (!connection) throw new ConnectorNotConnectedError();\n  const chainId = parameters.chainId ?? connection.chainId;\n  const connector = connection.connector;\n  if (connector.getClient) return connector.getClient({\n    chainId: chainId\n  });\n  // Default using `custom` transport\n  const account = parseAccount(parameters.account ?? connection.accounts[0]);\n  account.address = getAddress(account.address); // TODO: Checksum address as part of `parseAccount`?\n  const chain = config.chains.find(chain => chain.id === chainId);\n  const provider = await connection.connector.getProvider({\n    chainId\n  });\n  // if account was provided, check that it exists on the connector\n  if (parameters.account && !connection.accounts.includes(account.address)) throw new ConnectorAccountNotFoundError({\n    address: account.address,\n    connector\n  });\n  return createClient({\n    account,\n    chain,\n    name: 'Connector Client',\n    transport: opts => custom(provider)({\n      ...opts,\n      retryCount: 0\n    })\n  });\n}","map":{"version":3,"names":["createClient","custom","getAddress","parseAccount","ConnectorAccountNotFoundError","ConnectorNotConnectedError","getConnectorClient","config","parameters","connection","connector","accounts","chainId","Promise","all","getAccounts","getChainId","state","connections","get","current","getClient","account","address","chain","chains","find","id","provider","getProvider","includes","name","transport","opts","retryCount"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@wagmi/core/src/actions/getConnectorClient.ts"],"sourcesContent":["import {\n  type Account,\n  type Address,\n  type BaseErrorType,\n  type Client,\n  createClient,\n  custom,\n} from 'viem'\nimport { getAddress, parseAccount } from 'viem/utils'\n\nimport type { Config, Connection } from '../createConfig.js'\nimport type { ErrorType } from '../errors/base.js'\nimport {\n  ConnectorAccountNotFoundError,\n  type ConnectorAccountNotFoundErrorType,\n  ConnectorNotConnectedError,\n  type ConnectorNotConnectedErrorType,\n} from '../errors/config.js'\nimport type {\n  ChainIdParameter,\n  ConnectorParameter,\n} from '../types/properties.js'\nimport { type Evaluate } from '../types/utils.js'\n\nexport type GetConnectorClientParameters<\n  config extends Config = Config,\n  chainId extends config['chains'][number]['id'] = config['chains'][number]['id'],\n> = Evaluate<\n  ChainIdParameter<config, chainId> &\n    ConnectorParameter & {\n      account?: Address | Account | undefined\n    }\n>\n\nexport type GetConnectorClientReturnType<\n  config extends Config = Config,\n  chainId extends config['chains'][number]['id'] = config['chains'][number]['id'],\n> = Evaluate<\n  Client<\n    config['_internal']['transports'][chainId],\n    Extract<config['chains'][number], { id: chainId }>,\n    Account\n  >\n>\n\nexport type GetConnectorClientErrorType =\n  | ConnectorAccountNotFoundErrorType\n  | ConnectorNotConnectedErrorType\n  // base\n  | BaseErrorType\n  | ErrorType\n\n/** https://wagmi.sh/core/api/actions/getConnectorClient */\nexport async function getConnectorClient<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n>(\n  config: config,\n  parameters: GetConnectorClientParameters<config, chainId> = {},\n): Promise<GetConnectorClientReturnType<config, chainId>> {\n  // Get connection\n  let connection: Connection | undefined\n  if (parameters.connector) {\n    const { connector } = parameters\n    const [accounts, chainId] = await Promise.all([\n      connector.getAccounts(),\n      connector.getChainId(),\n    ])\n    connection = {\n      accounts: accounts as readonly [Address, ...Address[]],\n      chainId,\n      connector,\n    }\n  } else connection = config.state.connections.get(config.state.current!)\n  if (!connection) throw new ConnectorNotConnectedError()\n\n  const chainId = parameters.chainId ?? connection.chainId\n\n  // If connector has custom `getClient` implementation\n  type Return = GetConnectorClientReturnType<config, chainId>\n  const connector = connection.connector\n  if (connector.getClient)\n    return connector.getClient({ chainId: chainId }) as unknown as Return\n\n  // Default using `custom` transport\n  const account = parseAccount(parameters.account ?? connection.accounts[0]!)\n  account.address = getAddress(account.address) // TODO: Checksum address as part of `parseAccount`?\n\n  const chain = config.chains.find((chain) => chain.id === chainId)\n  const provider = (await connection.connector.getProvider({ chainId })) as {\n    request(...args: any): Promise<any>\n  }\n\n  // if account was provided, check that it exists on the connector\n  if (parameters.account && !connection.accounts.includes(account.address))\n    throw new ConnectorAccountNotFoundError({\n      address: account.address,\n      connector,\n    })\n\n  return createClient({\n    account,\n    chain,\n    name: 'Connector Client',\n    transport: (opts) => custom(provider)({ ...opts, retryCount: 0 }),\n  }) as Return\n}\n"],"mappings":"AAAA,SAKEA,YAAY,EACZC,MAAM,QACD,MAAM;AACb,SAASC,UAAU,EAAEC,YAAY,QAAQ,YAAY;AAIrD,SACEC,6BAA6B,EAE7BC,0BAA0B,QAErB,qBAAqB;AAK5B,OAA8B,mBAAmB;AA8BjD;AACA,OAAO,eAAeC,kBAAkBA,CAItCC,MAAc,EACdC,UAAA,GAA4D,EAAE;EAE9D;EACA,IAAIC,UAAkC;EACtC,IAAID,UAAU,CAACE,SAAS,EAAE;IACxB,MAAM;MAAEA;IAAS,CAAE,GAAGF,UAAU;IAChC,MAAM,CAACG,QAAQ,EAAEC,OAAO,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CAC5CJ,SAAS,CAACK,WAAW,EAAE,EACvBL,SAAS,CAACM,UAAU,EAAE,CACvB,CAAC;IACFP,UAAU,GAAG;MACXE,QAAQ,EAAEA,QAA4C;MACtDC,OAAO;MACPF;KACD;EACH,CAAC,MAAMD,UAAU,GAAGF,MAAM,CAACU,KAAK,CAACC,WAAW,CAACC,GAAG,CAACZ,MAAM,CAACU,KAAK,CAACG,OAAQ,CAAC;EACvE,IAAI,CAACX,UAAU,EAAE,MAAM,IAAIJ,0BAA0B,EAAE;EAEvD,MAAMO,OAAO,GAAGJ,UAAU,CAACI,OAAO,IAAIH,UAAU,CAACG,OAAO;EAIxD,MAAMF,SAAS,GAAGD,UAAU,CAACC,SAAS;EACtC,IAAIA,SAAS,CAACW,SAAS,EACrB,OAAOX,SAAS,CAACW,SAAS,CAAC;IAAET,OAAO,EAAEA;EAAO,CAAE,CAAsB;EAEvE;EACA,MAAMU,OAAO,GAAGnB,YAAY,CAACK,UAAU,CAACc,OAAO,IAAIb,UAAU,CAACE,QAAQ,CAAC,CAAC,CAAE,CAAC;EAC3EW,OAAO,CAACC,OAAO,GAAGrB,UAAU,CAACoB,OAAO,CAACC,OAAO,CAAC,EAAC;EAE9C,MAAMC,KAAK,GAAGjB,MAAM,CAACkB,MAAM,CAACC,IAAI,CAAEF,KAAK,IAAKA,KAAK,CAACG,EAAE,KAAKf,OAAO,CAAC;EACjE,MAAMgB,QAAQ,GAAI,MAAMnB,UAAU,CAACC,SAAS,CAACmB,WAAW,CAAC;IAAEjB;EAAO,CAAE,CAEnE;EAED;EACA,IAAIJ,UAAU,CAACc,OAAO,IAAI,CAACb,UAAU,CAACE,QAAQ,CAACmB,QAAQ,CAACR,OAAO,CAACC,OAAO,CAAC,EACtE,MAAM,IAAInB,6BAA6B,CAAC;IACtCmB,OAAO,EAAED,OAAO,CAACC,OAAO;IACxBb;GACD,CAAC;EAEJ,OAAOV,YAAY,CAAC;IAClBsB,OAAO;IACPE,KAAK;IACLO,IAAI,EAAE,kBAAkB;IACxBC,SAAS,EAAGC,IAAI,IAAKhC,MAAM,CAAC2B,QAAQ,CAAC,CAAC;MAAE,GAAGK,IAAI;MAAEC,UAAU,EAAE;IAAC,CAAE;GACjE,CAAW;AACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}