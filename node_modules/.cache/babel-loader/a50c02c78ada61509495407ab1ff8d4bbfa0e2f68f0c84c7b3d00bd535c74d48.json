{"ast":null,"code":"import '../../utils/abi/decodeEventLog.js';\nimport { encodeEventTopics } from '../../utils/abi/encodeEventTopics.js';\nimport { parseEventLogs } from '../../utils/abi/parseEventLogs.js';\nimport { numberToHex } from '../../utils/encoding/toHex.js';\nimport { formatLog } from '../../utils/formatters/log.js';\n/**\n * Returns a list of event logs matching the provided parameters.\n *\n * - Docs: https://viem.sh/docs/actions/public/getLogs\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/filters-and-logs/event-logs\n * - JSON-RPC Methods: [`eth_getLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getlogs)\n *\n * @param client - Client to use\n * @param parameters - {@link GetLogsParameters}\n * @returns A list of event logs. {@link GetLogsReturnType}\n *\n * @example\n * import { createPublicClient, http, parseAbiItem } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getLogs } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const logs = await getLogs(client)\n */\nexport async function getLogs(client, {\n  address,\n  blockHash,\n  fromBlock,\n  toBlock,\n  event,\n  events: events_,\n  args,\n  strict: strict_\n} = {}) {\n  const strict = strict_ ?? false;\n  const events = events_ ?? (event ? [event] : undefined);\n  let topics = [];\n  if (events) {\n    topics = [events.flatMap(event => encodeEventTopics({\n      abi: [event],\n      eventName: event.name,\n      args\n    }))];\n    if (event) topics = topics[0];\n  }\n  let logs;\n  if (blockHash) {\n    logs = await client.request({\n      method: 'eth_getLogs',\n      params: [{\n        address,\n        topics,\n        blockHash\n      }]\n    });\n  } else {\n    logs = await client.request({\n      method: 'eth_getLogs',\n      params: [{\n        address,\n        topics,\n        fromBlock: typeof fromBlock === 'bigint' ? numberToHex(fromBlock) : fromBlock,\n        toBlock: typeof toBlock === 'bigint' ? numberToHex(toBlock) : toBlock\n      }]\n    });\n  }\n  const formattedLogs = logs.map(log => formatLog(log));\n  if (!events) return formattedLogs;\n  return parseEventLogs({\n    abi: events,\n    logs: formattedLogs,\n    strict\n  });\n}","map":{"version":3,"names":["encodeEventTopics","parseEventLogs","numberToHex","formatLog","getLogs","client","address","blockHash","fromBlock","toBlock","event","events","events_","args","strict","strict_","undefined","topics","flatMap","abi","eventName","name","logs","request","method","params","formattedLogs","map","log"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/viem/actions/public/getLogs.ts"],"sourcesContent":["import type { AbiEvent, Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockNumber, BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type {\n  MaybeAbiEventName,\n  MaybeExtractEventArgsFromAbi,\n} from '../../types/contract.js'\nimport type { Log } from '../../types/log.js'\nimport type { Hash, LogTopic } from '../../types/misc.js'\nimport type { RpcLog } from '../../types/rpc.js'\nimport { type DecodeEventLogErrorType } from '../../utils/abi/decodeEventLog.js'\nimport {\n  type EncodeEventTopicsErrorType,\n  type EncodeEventTopicsParameters,\n  encodeEventTopics,\n} from '../../utils/abi/encodeEventTopics.js'\nimport { parseEventLogs } from '../../utils/abi/parseEventLogs.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\nimport {\n  type FormatLogErrorType,\n  formatLog,\n} from '../../utils/formatters/log.js'\n\nexport type GetLogsParameters<\n  TAbiEvent extends AbiEvent | undefined = undefined,\n  TAbiEvents extends\n    | readonly AbiEvent[]\n    | readonly unknown[]\n    | undefined = TAbiEvent extends AbiEvent ? [TAbiEvent] : undefined,\n  TStrict extends boolean | undefined = undefined,\n  TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n  _EventName extends string | undefined = MaybeAbiEventName<TAbiEvent>,\n> = {\n  /** Address or list of addresses from which logs originated */\n  address?: Address | Address[] | undefined\n} & (\n  | {\n      event: TAbiEvent\n      events?: never | undefined\n      args?: MaybeExtractEventArgsFromAbi<TAbiEvents, _EventName> | undefined\n      /**\n       * Whether or not the logs must match the indexed/non-indexed arguments on `event`.\n       * @default false\n       */\n      strict?: TStrict | undefined\n    }\n  | {\n      event?: never | undefined\n      events: TAbiEvents\n      args?: never | undefined\n      /**\n       * Whether or not the logs must match the indexed/non-indexed arguments on `event`.\n       * @default false\n       */\n      strict?: TStrict | undefined\n    }\n  | {\n      event?: never | undefined\n      events?: never | undefined\n      args?: never | undefined\n      strict?: never | undefined\n    }\n) &\n  (\n    | {\n        /** Block number or tag after which to include logs */\n        fromBlock?: TFromBlock | BlockNumber | BlockTag | undefined\n        /** Block number or tag before which to include logs */\n        toBlock?: TToBlock | BlockNumber | BlockTag | undefined\n        blockHash?: never | undefined\n      }\n    | {\n        fromBlock?: never | undefined\n        toBlock?: never | undefined\n        /** Hash of block to include logs from */\n        blockHash?: Hash | undefined\n      }\n  )\n\nexport type GetLogsReturnType<\n  TAbiEvent extends AbiEvent | undefined = undefined,\n  TAbiEvents extends\n    | readonly AbiEvent[]\n    | readonly unknown[]\n    | undefined = TAbiEvent extends AbiEvent ? [TAbiEvent] : undefined,\n  TStrict extends boolean | undefined = undefined,\n  TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n  _EventName extends string | undefined = MaybeAbiEventName<TAbiEvent>,\n  _Pending extends boolean =\n    | (TFromBlock extends 'pending' ? true : false)\n    | (TToBlock extends 'pending' ? true : false),\n> = Log<bigint, number, _Pending, TAbiEvent, TStrict, TAbiEvents, _EventName>[]\n\nexport type GetLogsErrorType =\n  | DecodeEventLogErrorType\n  | EncodeEventTopicsErrorType\n  | FormatLogErrorType\n  | NumberToHexErrorType\n  | RequestErrorType\n  | ErrorType\n\n/**\n * Returns a list of event logs matching the provided parameters.\n *\n * - Docs: https://viem.sh/docs/actions/public/getLogs\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/filters-and-logs/event-logs\n * - JSON-RPC Methods: [`eth_getLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getlogs)\n *\n * @param client - Client to use\n * @param parameters - {@link GetLogsParameters}\n * @returns A list of event logs. {@link GetLogsReturnType}\n *\n * @example\n * import { createPublicClient, http, parseAbiItem } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getLogs } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const logs = await getLogs(client)\n */\nexport async function getLogs<\n  TChain extends Chain | undefined,\n  const TAbiEvent extends AbiEvent | undefined = undefined,\n  const TAbiEvents extends\n    | readonly AbiEvent[]\n    | readonly unknown[]\n    | undefined = TAbiEvent extends AbiEvent ? [TAbiEvent] : undefined,\n  TStrict extends boolean | undefined = undefined,\n  TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n>(\n  client: Client<Transport, TChain>,\n  {\n    address,\n    blockHash,\n    fromBlock,\n    toBlock,\n    event,\n    events: events_,\n    args,\n    strict: strict_,\n  }: GetLogsParameters<\n    TAbiEvent,\n    TAbiEvents,\n    TStrict,\n    TFromBlock,\n    TToBlock\n  > = {},\n): Promise<\n  GetLogsReturnType<TAbiEvent, TAbiEvents, TStrict, TFromBlock, TToBlock>\n> {\n  const strict = strict_ ?? false\n  const events = events_ ?? (event ? [event] : undefined)\n\n  let topics: LogTopic[] = []\n  if (events) {\n    topics = [\n      (events as AbiEvent[]).flatMap((event) =>\n        encodeEventTopics({\n          abi: [event],\n          eventName: (event as AbiEvent).name,\n          args,\n        } as EncodeEventTopicsParameters),\n      ),\n    ]\n    if (event) topics = topics[0] as LogTopic[]\n  }\n\n  let logs: RpcLog[]\n  if (blockHash) {\n    logs = await client.request({\n      method: 'eth_getLogs',\n      params: [{ address, topics, blockHash }],\n    })\n  } else {\n    logs = await client.request({\n      method: 'eth_getLogs',\n      params: [\n        {\n          address,\n          topics,\n          fromBlock:\n            typeof fromBlock === 'bigint' ? numberToHex(fromBlock) : fromBlock,\n          toBlock: typeof toBlock === 'bigint' ? numberToHex(toBlock) : toBlock,\n        },\n      ],\n    })\n  }\n\n  const formattedLogs = logs.map((log) => formatLog(log))\n  if (!events)\n    return formattedLogs as GetLogsReturnType<\n      TAbiEvent,\n      TAbiEvents,\n      TStrict,\n      TFromBlock,\n      TToBlock\n    >\n  return parseEventLogs({\n    abi: events,\n    logs: formattedLogs,\n    strict,\n  }) as unknown as GetLogsReturnType<\n    TAbiEvent,\n    TAbiEvents,\n    TStrict,\n    TFromBlock,\n    TToBlock\n  >\n}\n"],"mappings":"AAcA,OAA6C,mCAAmC;AAChF,SAGEA,iBAAiB,QACZ,sCAAsC;AAC7C,SAASC,cAAc,QAAQ,mCAAmC;AAElE,SAEEC,WAAW,QACN,+BAA+B;AACtC,SAEEC,SAAS,QACJ,+BAA+B;AAkFtC;;;;;;;;;;;;;;;;;;;;;;AAsBA,OAAO,eAAeC,OAAOA,CAW3BC,MAAiC,EACjC;EACEC,OAAO;EACPC,SAAS;EACTC,SAAS;EACTC,OAAO;EACPC,KAAK;EACLC,MAAM,EAAEC,OAAO;EACfC,IAAI;EACJC,MAAM,EAAEC;AAAO,IAOb,EAAE;EAIN,MAAMD,MAAM,GAAGC,OAAO,IAAI,KAAK;EAC/B,MAAMJ,MAAM,GAAGC,OAAO,KAAKF,KAAK,GAAG,CAACA,KAAK,CAAC,GAAGM,SAAS,CAAC;EAEvD,IAAIC,MAAM,GAAe,EAAE;EAC3B,IAAIN,MAAM,EAAE;IACVM,MAAM,GAAG,CACNN,MAAqB,CAACO,OAAO,CAAER,KAAK,IACnCV,iBAAiB,CAAC;MAChBmB,GAAG,EAAE,CAACT,KAAK,CAAC;MACZU,SAAS,EAAGV,KAAkB,CAACW,IAAI;MACnCR;KAC8B,CAAC,CAClC,CACF;IACD,IAAIH,KAAK,EAAEO,MAAM,GAAGA,MAAM,CAAC,CAAC,CAAe;EAC7C;EAEA,IAAIK,IAAc;EAClB,IAAIf,SAAS,EAAE;IACbe,IAAI,GAAG,MAAMjB,MAAM,CAACkB,OAAO,CAAC;MAC1BC,MAAM,EAAE,aAAa;MACrBC,MAAM,EAAE,CAAC;QAAEnB,OAAO;QAAEW,MAAM;QAAEV;MAAS,CAAE;KACxC,CAAC;EACJ,CAAC,MAAM;IACLe,IAAI,GAAG,MAAMjB,MAAM,CAACkB,OAAO,CAAC;MAC1BC,MAAM,EAAE,aAAa;MACrBC,MAAM,EAAE,CACN;QACEnB,OAAO;QACPW,MAAM;QACNT,SAAS,EACP,OAAOA,SAAS,KAAK,QAAQ,GAAGN,WAAW,CAACM,SAAS,CAAC,GAAGA,SAAS;QACpEC,OAAO,EAAE,OAAOA,OAAO,KAAK,QAAQ,GAAGP,WAAW,CAACO,OAAO,CAAC,GAAGA;OAC/D;KAEJ,CAAC;EACJ;EAEA,MAAMiB,aAAa,GAAGJ,IAAI,CAACK,GAAG,CAAEC,GAAG,IAAKzB,SAAS,CAACyB,GAAG,CAAC,CAAC;EACvD,IAAI,CAACjB,MAAM,EACT,OAAOe,aAMN;EACH,OAAOzB,cAAc,CAAC;IACpBkB,GAAG,EAAER,MAAM;IACXW,IAAI,EAAEI,aAAa;IACnBZ;GACD,CAMA;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}