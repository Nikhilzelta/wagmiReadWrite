{"ast":null,"code":"'use client';\n\nimport { watchPendingTransactions } from '@wagmi/core';\nimport '@wagmi/core/internal';\nimport { useEffect } from 'react';\nimport { useChainId } from './useChainId.js';\nimport { useConfig } from './useConfig.js';\n/** https://wagmi.sh/react/api/hooks/useWatchPendingTransactions */\nexport function useWatchPendingTransactions(parameters = {}) {\n  const {\n    enabled = true,\n    onTransactions,\n    config: _,\n    ...rest\n  } = parameters;\n  const config = useConfig(parameters);\n  const configChainId = useChainId({\n    config\n  });\n  const chainId = parameters.chainId ?? configChainId;\n  useEffect(() => {\n    if (!enabled) return;\n    if (!onTransactions) return;\n    return watchPendingTransactions(config, {\n      ...rest,\n      chainId,\n      onTransactions\n    });\n  }, [chainId, config, enabled, onTransactions, rest]);\n}","map":{"version":3,"names":["watchPendingTransactions","useEffect","useChainId","useConfig","useWatchPendingTransactions","parameters","enabled","onTransactions","config","_","rest","configChainId","chainId"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/wagmi/src/hooks/useWatchPendingTransactions.ts"],"sourcesContent":["'use client'\n\nimport {\n  type Config,\n  type ResolvedRegister,\n  type WatchPendingTransactionsParameters,\n  watchPendingTransactions,\n} from '@wagmi/core'\nimport { type UnionEvaluate, type UnionPartial } from '@wagmi/core/internal'\nimport { useEffect } from 'react'\n\nimport type { ConfigParameter, EnabledParameter } from '../types/properties.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseWatchPendingTransactionsParameters<\n  config extends Config = Config,\n  chainId extends config['chains'][number]['id'] = config['chains'][number]['id'],\n> = UnionEvaluate<\n  UnionPartial<WatchPendingTransactionsParameters<config, chainId>> &\n    ConfigParameter<config> &\n    EnabledParameter\n>\n\nexport type UseWatchPendingTransactionsReturnType = void\n\n/** https://wagmi.sh/react/api/hooks/useWatchPendingTransactions */\nexport function useWatchPendingTransactions<\n  config extends Config = ResolvedRegister['config'],\n  chainId extends config['chains'][number]['id'] = config['chains'][number]['id'],\n>(\n  parameters: UseWatchPendingTransactionsParameters<\n    config,\n    chainId\n  > = {} as any,\n): UseWatchPendingTransactionsReturnType {\n  const { enabled = true, onTransactions, config: _, ...rest } = parameters\n\n  const config = useConfig(parameters)\n  const configChainId = useChainId({ config })\n  const chainId = parameters.chainId ?? configChainId\n\n  useEffect(() => {\n    if (!enabled) return\n    if (!onTransactions) return\n    return watchPendingTransactions(config, {\n      ...(rest as any),\n      chainId,\n      onTransactions,\n    })\n  }, [chainId, config, enabled, onTransactions, rest])\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,SAIEA,wBAAwB,QACnB,aAAa;AACpB,OAAsD,sBAAsB;AAC5E,SAASC,SAAS,QAAQ,OAAO;AAGjC,SAASC,UAAU,QAAQ,iBAAiB;AAC5C,SAASC,SAAS,QAAQ,gBAAgB;AAa1C;AACA,OAAM,SAAUC,2BAA2BA,CAIzCC,UAAA,GAGI,EAAS;EAEb,MAAM;IAAEC,OAAO,GAAG,IAAI;IAAEC,cAAc;IAAEC,MAAM,EAAEC,CAAC;IAAE,GAAGC;EAAI,CAAE,GAAGL,UAAU;EAEzE,MAAMG,MAAM,GAAGL,SAAS,CAACE,UAAU,CAAC;EACpC,MAAMM,aAAa,GAAGT,UAAU,CAAC;IAAEM;EAAM,CAAE,CAAC;EAC5C,MAAMI,OAAO,GAAGP,UAAU,CAACO,OAAO,IAAID,aAAa;EAEnDV,SAAS,CAAC,MAAK;IACb,IAAI,CAACK,OAAO,EAAE;IACd,IAAI,CAACC,cAAc,EAAE;IACrB,OAAOP,wBAAwB,CAACQ,MAAM,EAAE;MACtC,GAAIE,IAAY;MAChBE,OAAO;MACPL;KACD,CAAC;EACJ,CAAC,EAAE,CAACK,OAAO,EAAEJ,MAAM,EAAEF,OAAO,EAAEC,cAAc,EAAEG,IAAI,CAAC,CAAC;AACtD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}