{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.formatAbiParams = exports.formatAbiItem = void 0;\nconst abi_js_1 = require(\"../../errors/abi.js\");\nfunction formatAbiItem(abiItem, {\n  includeName = false\n} = {}) {\n  if (abiItem.type !== 'function' && abiItem.type !== 'event' && abiItem.type !== 'error') throw new abi_js_1.InvalidDefinitionTypeError(abiItem.type);\n  return `${abiItem.name}(${formatAbiParams(abiItem.inputs, {\n    includeName\n  })})`;\n}\nexports.formatAbiItem = formatAbiItem;\nfunction formatAbiParams(params, {\n  includeName = false\n} = {}) {\n  if (!params) return '';\n  return params.map(param => formatAbiParam(param, {\n    includeName\n  })).join(includeName ? ', ' : ',');\n}\nexports.formatAbiParams = formatAbiParams;\nfunction formatAbiParam(param, {\n  includeName\n}) {\n  if (param.type.startsWith('tuple')) {\n    return `(${formatAbiParams(param.components, {\n      includeName\n    })})${param.type.slice('tuple'.length)}`;\n  }\n  return param.type + (includeName && param.name ? ` ${param.name}` : '');\n}","map":{"version":3,"names":["abi_js_1","require","formatAbiItem","abiItem","includeName","type","InvalidDefinitionTypeError","name","formatAbiParams","inputs","exports","params","map","param","formatAbiParam","join","startsWith","components","slice","length"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/abi/formatAbiItem.ts"],"sourcesContent":["import type { AbiParameter } from 'abitype'\n\nimport {\n  InvalidDefinitionTypeError,\n  type InvalidDefinitionTypeErrorType,\n} from '../../errors/abi.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { AbiItem } from '../../types/contract.js'\n\nexport type FormatAbiItemErrorType =\n  | FormatAbiParamsErrorType\n  | InvalidDefinitionTypeErrorType\n  | ErrorType\n\nexport function formatAbiItem(\n  abiItem: AbiItem,\n  { includeName = false }: { includeName?: boolean } = {},\n) {\n  if (\n    abiItem.type !== 'function' &&\n    abiItem.type !== 'event' &&\n    abiItem.type !== 'error'\n  )\n    throw new InvalidDefinitionTypeError(abiItem.type)\n\n  return `${abiItem.name}(${formatAbiParams(abiItem.inputs, { includeName })})`\n}\n\nexport type FormatAbiParamsErrorType = ErrorType\n\nexport function formatAbiParams(\n  params: readonly AbiParameter[] | undefined,\n  { includeName = false }: { includeName?: boolean } = {},\n): string {\n  if (!params) return ''\n  return params\n    .map((param) => formatAbiParam(param, { includeName }))\n    .join(includeName ? ', ' : ',')\n}\n\nexport type FormatAbiParamErrorType = ErrorType\n\nfunction formatAbiParam(\n  param: AbiParameter,\n  { includeName }: { includeName: boolean },\n): string {\n  if (param.type.startsWith('tuple')) {\n    return `(${formatAbiParams(\n      (param as unknown as { components: AbiParameter[] }).components,\n      { includeName },\n    )})${param.type.slice('tuple'.length)}`\n  }\n  return param.type + (includeName && param.name ? ` ${param.name}` : '')\n}\n"],"mappings":";;;;;;AAEA,MAAAA,QAAA,GAAAC,OAAA;AAYA,SAAgBC,aAAaA,CAC3BC,OAAgB,EAChB;EAAEC,WAAW,GAAG;AAAK,IAAgC,EAAE;EAEvD,IACED,OAAO,CAACE,IAAI,KAAK,UAAU,IAC3BF,OAAO,CAACE,IAAI,KAAK,OAAO,IACxBF,OAAO,CAACE,IAAI,KAAK,OAAO,EAExB,MAAM,IAAIL,QAAA,CAAAM,0BAA0B,CAACH,OAAO,CAACE,IAAI,CAAC;EAEpD,OAAO,GAAGF,OAAO,CAACI,IAAI,IAAIC,eAAe,CAACL,OAAO,CAACM,MAAM,EAAE;IAAEL;EAAW,CAAE,CAAC,GAAG;AAC/E;AAZAM,OAAA,CAAAR,aAAA,GAAAA,aAAA;AAgBA,SAAgBM,eAAeA,CAC7BG,MAA2C,EAC3C;EAAEP,WAAW,GAAG;AAAK,IAAgC,EAAE;EAEvD,IAAI,CAACO,MAAM,EAAE,OAAO,EAAE;EACtB,OAAOA,MAAM,CACVC,GAAG,CAAEC,KAAK,IAAKC,cAAc,CAACD,KAAK,EAAE;IAAET;EAAW,CAAE,CAAC,CAAC,CACtDW,IAAI,CAACX,WAAW,GAAG,IAAI,GAAG,GAAG,CAAC;AACnC;AARAM,OAAA,CAAAF,eAAA,GAAAA,eAAA;AAYA,SAASM,cAAcA,CACrBD,KAAmB,EACnB;EAAET;AAAW,CAA4B;EAEzC,IAAIS,KAAK,CAACR,IAAI,CAACW,UAAU,CAAC,OAAO,CAAC,EAAE;IAClC,OAAO,IAAIR,eAAe,CACvBK,KAAmD,CAACI,UAAU,EAC/D;MAAEb;IAAW,CAAE,CAChB,IAAIS,KAAK,CAACR,IAAI,CAACa,KAAK,CAAC,OAAO,CAACC,MAAM,CAAC,EAAE;;EAEzC,OAAON,KAAK,CAACR,IAAI,IAAID,WAAW,IAAIS,KAAK,CAACN,IAAI,GAAG,IAAIM,KAAK,CAACN,IAAI,EAAE,GAAG,EAAE,CAAC;AACzE","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}