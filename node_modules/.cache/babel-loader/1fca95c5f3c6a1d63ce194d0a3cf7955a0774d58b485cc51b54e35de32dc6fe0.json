{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.signatureToHex = void 0;\nconst secp256k1_1 = require(\"@noble/curves/secp256k1\");\nconst fromHex_js_1 = require(\"../../utils/encoding/fromHex.js\");\nconst toHex_js_1 = require(\"../../utils/encoding/toHex.js\");\nfunction signatureToHex({\n  r,\n  s,\n  v\n}) {\n  return `0x${new secp256k1_1.secp256k1.Signature((0, fromHex_js_1.hexToBigInt)(r), (0, fromHex_js_1.hexToBigInt)(s)).toCompactHex()}${(0, toHex_js_1.toHex)(v).slice(2)}`;\n}\nexports.signatureToHex = signatureToHex;","map":{"version":3,"names":["secp256k1_1","require","fromHex_js_1","toHex_js_1","signatureToHex","r","s","v","secp256k1","Signature","hexToBigInt","toCompactHex","toHex","slice","exports"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/signature/signatureToHex.ts"],"sourcesContent":["import { secp256k1 } from '@noble/curves/secp256k1'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hex, Signature } from '../../types/misc.js'\nimport {\n  type HexToBigIntErrorType,\n  hexToBigInt,\n} from '../../utils/encoding/fromHex.js'\nimport { type ToHexErrorType, toHex } from '../../utils/encoding/toHex.js'\n\nexport type SignatureToHexErrorType =\n  | HexToBigIntErrorType\n  | ToHexErrorType\n  | ErrorType\n\n/**\n * @description Converts a signature into hex format.\n *\n * @param signature The signature to convert.\n * @returns The signature in hex format.\n *\n * @example\n * signatureToHex({\n *   r: '0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf',\n *   s: '0x4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db8',\n *   v: 28n\n * })\n * // \"0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db81c\"\n */\nexport function signatureToHex({ r, s, v }: Signature): Hex {\n  return `0x${new secp256k1.Signature(\n    hexToBigInt(r),\n    hexToBigInt(s),\n  ).toCompactHex()}${toHex(v).slice(2)}`\n}\n"],"mappings":";;;;;;AAAA,MAAAA,WAAA,GAAAC,OAAA;AAIA,MAAAC,YAAA,GAAAD,OAAA;AAIA,MAAAE,UAAA,GAAAF,OAAA;AAqBA,SAAgBG,cAAcA,CAAC;EAAEC,CAAC;EAAEC,CAAC;EAAEC;AAAC,CAAa;EACnD,OAAO,KAAK,IAAIP,WAAA,CAAAQ,SAAS,CAACC,SAAS,CACjC,IAAAP,YAAA,CAAAQ,WAAW,EAACL,CAAC,CAAC,EACd,IAAAH,YAAA,CAAAQ,WAAW,EAACJ,CAAC,CAAC,CACf,CAACK,YAAY,EAAE,GAAG,IAAAR,UAAA,CAAAS,KAAK,EAACL,CAAC,CAAC,CAACM,KAAK,CAAC,CAAC,CAAC,EAAE;AACxC;AALAC,OAAA,CAAAV,cAAA,GAAAA,cAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}