{"ast":null,"code":"import bg, { PROPOSAL_EXPIRY_MESSAGE as Tg } from \"@walletconnect/sign-client\";\nimport { isValidObject as Lg, isCaipNamespace as Pa, parseNamespaceKey as de, mergeArrays as $i, parseChainId as Dg, getSdkError as Aa, isValidArray as Ca } from \"@walletconnect/utils\";\nimport { pino as Hg, getDefaultLoggerOptions as Ng } from \"@walletconnect/logger\";\nimport At, { HttpConnection as $g } from \"@walletconnect/jsonrpc-http-connection\";\nimport { JsonRpcProvider as ot } from \"@walletconnect/jsonrpc-provider\";\nimport Ug from \"events\";\nimport { formatJsonRpcResult as Wg } from \"@walletconnect/jsonrpc-utils\";\nconst Ia = \"error\",\n  Fg = \"wss://relay.walletconnect.com\",\n  Mg = \"wc\",\n  qg = \"universal_provider\",\n  xa = `${Mg}@2:${qg}:`,\n  Bg = \"https://rpc.walletconnect.com/v1/\",\n  Vn = {\n    DEFAULT_CHAIN_CHANGED: \"default_chain_changed\"\n  };\nvar ge = typeof globalThis < \"u\" ? globalThis : typeof window < \"u\" ? window : typeof global < \"u\" ? global : typeof self < \"u\" ? self : {},\n  Ui = {\n    exports: {}\n  }; /**\n     * @license\n     * Lodash <https://lodash.com/>\n     * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>\n     * Released under MIT license <https://lodash.com/license>\n     * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n     * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n     */\n(function (A, u) {\n  (function () {\n    var i,\n      d = \"4.17.21\",\n      w = 200,\n      L = \"Unsupported core-js use. Try https://npms.io/search?q=ponyfill.\",\n      D = \"Expected a function\",\n      En = \"Invalid `variable` option passed into `_.template`\",\n      zt = \"__lodash_hash_undefined__\",\n      pr = 500,\n      It = \"__lodash_placeholder__\",\n      Ln = 1,\n      Fn = 2,\n      xt = 4,\n      Et = 1,\n      ve = 2,\n      vn = 1,\n      ct = 2,\n      qi = 4,\n      Dn = 8,\n      yt = 16,\n      Hn = 32,\n      St = 64,\n      Mn = 128,\n      Kt = 256,\n      dr = 512,\n      Da = 30,\n      Ha = \"...\",\n      Na = 800,\n      $a = 16,\n      Bi = 1,\n      Ua = 2,\n      Wa = 3,\n      ht = 1 / 0,\n      kn = 9007199254740991,\n      Fa = 17976931348623157e292,\n      _e = 0 / 0,\n      Nn = 4294967295,\n      Ma = Nn - 1,\n      qa = Nn >>> 1,\n      Ba = [[\"ary\", Mn], [\"bind\", vn], [\"bindKey\", ct], [\"curry\", Dn], [\"curryRight\", yt], [\"flip\", dr], [\"partial\", Hn], [\"partialRight\", St], [\"rearg\", Kt]],\n      Ot = \"[object Arguments]\",\n      me = \"[object Array]\",\n      Ga = \"[object AsyncFunction]\",\n      Yt = \"[object Boolean]\",\n      Zt = \"[object Date]\",\n      za = \"[object DOMException]\",\n      we = \"[object Error]\",\n      Pe = \"[object Function]\",\n      Gi = \"[object GeneratorFunction]\",\n      yn = \"[object Map]\",\n      Jt = \"[object Number]\",\n      Ka = \"[object Null]\",\n      qn = \"[object Object]\",\n      zi = \"[object Promise]\",\n      Ya = \"[object Proxy]\",\n      Xt = \"[object RegExp]\",\n      Sn = \"[object Set]\",\n      Qt = \"[object String]\",\n      Ae = \"[object Symbol]\",\n      Za = \"[object Undefined]\",\n      Vt = \"[object WeakMap]\",\n      Ja = \"[object WeakSet]\",\n      kt = \"[object ArrayBuffer]\",\n      Rt = \"[object DataView]\",\n      gr = \"[object Float32Array]\",\n      vr = \"[object Float64Array]\",\n      _r = \"[object Int8Array]\",\n      mr = \"[object Int16Array]\",\n      wr = \"[object Int32Array]\",\n      Pr = \"[object Uint8Array]\",\n      Ar = \"[object Uint8ClampedArray]\",\n      Cr = \"[object Uint16Array]\",\n      Ir = \"[object Uint32Array]\",\n      Xa = /\\b__p \\+= '';/g,\n      Qa = /\\b(__p \\+=) '' \\+/g,\n      Va = /(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g,\n      Ki = /&(?:amp|lt|gt|quot|#39);/g,\n      Yi = /[&<>\"']/g,\n      ka = RegExp(Ki.source),\n      ja = RegExp(Yi.source),\n      no = /<%-([\\s\\S]+?)%>/g,\n      to = /<%([\\s\\S]+?)%>/g,\n      Zi = /<%=([\\s\\S]+?)%>/g,\n      eo = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n      ro = /^\\w*$/,\n      io = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g,\n      xr = /[\\\\^$.*+?()[\\]{}|]/g,\n      so = RegExp(xr.source),\n      Er = /^\\s+/,\n      uo = /\\s/,\n      ao = /\\{(?:\\n\\/\\* \\[wrapped with .+\\] \\*\\/)?\\n?/,\n      oo = /\\{\\n\\/\\* \\[wrapped with (.+)\\] \\*/,\n      fo = /,? & /,\n      co = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g,\n      ho = /[()=,{}\\[\\]\\/\\s]/,\n      lo = /\\\\(\\\\)?/g,\n      po = /\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g,\n      Ji = /\\w*$/,\n      go = /^[-+]0x[0-9a-f]+$/i,\n      vo = /^0b[01]+$/i,\n      _o = /^\\[object .+?Constructor\\]$/,\n      mo = /^0o[0-7]+$/i,\n      wo = /^(?:0|[1-9]\\d*)$/,\n      Po = /[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g,\n      Ce = /($^)/,\n      Ao = /['\\n\\r\\u2028\\u2029\\\\]/g,\n      Ie = \"\\\\ud800-\\\\udfff\",\n      Co = \"\\\\u0300-\\\\u036f\",\n      Io = \"\\\\ufe20-\\\\ufe2f\",\n      xo = \"\\\\u20d0-\\\\u20ff\",\n      Xi = Co + Io + xo,\n      Qi = \"\\\\u2700-\\\\u27bf\",\n      Vi = \"a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff\",\n      Eo = \"\\\\xac\\\\xb1\\\\xd7\\\\xf7\",\n      yo = \"\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf\",\n      So = \"\\\\u2000-\\\\u206f\",\n      Oo = \" \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000\",\n      ki = \"A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde\",\n      ji = \"\\\\ufe0e\\\\ufe0f\",\n      ns = Eo + yo + So + Oo,\n      yr = \"['\\u2019]\",\n      Ro = \"[\" + Ie + \"]\",\n      ts = \"[\" + ns + \"]\",\n      xe = \"[\" + Xi + \"]\",\n      es = \"\\\\d+\",\n      bo = \"[\" + Qi + \"]\",\n      rs = \"[\" + Vi + \"]\",\n      is = \"[^\" + Ie + ns + es + Qi + Vi + ki + \"]\",\n      Sr = \"\\\\ud83c[\\\\udffb-\\\\udfff]\",\n      To = \"(?:\" + xe + \"|\" + Sr + \")\",\n      ss = \"[^\" + Ie + \"]\",\n      Or = \"(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}\",\n      Rr = \"[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]\",\n      bt = \"[\" + ki + \"]\",\n      us = \"\\\\u200d\",\n      as = \"(?:\" + rs + \"|\" + is + \")\",\n      Lo = \"(?:\" + bt + \"|\" + is + \")\",\n      os = \"(?:\" + yr + \"(?:d|ll|m|re|s|t|ve))?\",\n      fs = \"(?:\" + yr + \"(?:D|LL|M|RE|S|T|VE))?\",\n      cs = To + \"?\",\n      hs = \"[\" + ji + \"]?\",\n      Do = \"(?:\" + us + \"(?:\" + [ss, Or, Rr].join(\"|\") + \")\" + hs + cs + \")*\",\n      Ho = \"\\\\d*(?:1st|2nd|3rd|(?![123])\\\\dth)(?=\\\\b|[A-Z_])\",\n      No = \"\\\\d*(?:1ST|2ND|3RD|(?![123])\\\\dTH)(?=\\\\b|[a-z_])\",\n      ls = hs + cs + Do,\n      $o = \"(?:\" + [bo, Or, Rr].join(\"|\") + \")\" + ls,\n      Uo = \"(?:\" + [ss + xe + \"?\", xe, Or, Rr, Ro].join(\"|\") + \")\",\n      Wo = RegExp(yr, \"g\"),\n      Fo = RegExp(xe, \"g\"),\n      br = RegExp(Sr + \"(?=\" + Sr + \")|\" + Uo + ls, \"g\"),\n      Mo = RegExp([bt + \"?\" + rs + \"+\" + os + \"(?=\" + [ts, bt, \"$\"].join(\"|\") + \")\", Lo + \"+\" + fs + \"(?=\" + [ts, bt + as, \"$\"].join(\"|\") + \")\", bt + \"?\" + as + \"+\" + os, bt + \"+\" + fs, No, Ho, es, $o].join(\"|\"), \"g\"),\n      qo = RegExp(\"[\" + us + Ie + Xi + ji + \"]\"),\n      Bo = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,\n      Go = [\"Array\", \"Buffer\", \"DataView\", \"Date\", \"Error\", \"Float32Array\", \"Float64Array\", \"Function\", \"Int8Array\", \"Int16Array\", \"Int32Array\", \"Map\", \"Math\", \"Object\", \"Promise\", \"RegExp\", \"Set\", \"String\", \"Symbol\", \"TypeError\", \"Uint8Array\", \"Uint8ClampedArray\", \"Uint16Array\", \"Uint32Array\", \"WeakMap\", \"_\", \"clearTimeout\", \"isFinite\", \"parseInt\", \"setTimeout\"],\n      zo = -1,\n      B = {};\n    B[gr] = B[vr] = B[_r] = B[mr] = B[wr] = B[Pr] = B[Ar] = B[Cr] = B[Ir] = !0, B[Ot] = B[me] = B[kt] = B[Yt] = B[Rt] = B[Zt] = B[we] = B[Pe] = B[yn] = B[Jt] = B[qn] = B[Xt] = B[Sn] = B[Qt] = B[Vt] = !1;\n    var q = {};\n    q[Ot] = q[me] = q[kt] = q[Rt] = q[Yt] = q[Zt] = q[gr] = q[vr] = q[_r] = q[mr] = q[wr] = q[yn] = q[Jt] = q[qn] = q[Xt] = q[Sn] = q[Qt] = q[Ae] = q[Pr] = q[Ar] = q[Cr] = q[Ir] = !0, q[we] = q[Pe] = q[Vt] = !1;\n    var Ko = {\n        À: \"A\",\n        Á: \"A\",\n        Â: \"A\",\n        Ã: \"A\",\n        Ä: \"A\",\n        Å: \"A\",\n        à: \"a\",\n        á: \"a\",\n        â: \"a\",\n        ã: \"a\",\n        ä: \"a\",\n        å: \"a\",\n        Ç: \"C\",\n        ç: \"c\",\n        Ð: \"D\",\n        ð: \"d\",\n        È: \"E\",\n        É: \"E\",\n        Ê: \"E\",\n        Ë: \"E\",\n        è: \"e\",\n        é: \"e\",\n        ê: \"e\",\n        ë: \"e\",\n        Ì: \"I\",\n        Í: \"I\",\n        Î: \"I\",\n        Ï: \"I\",\n        ì: \"i\",\n        í: \"i\",\n        î: \"i\",\n        ï: \"i\",\n        Ñ: \"N\",\n        ñ: \"n\",\n        Ò: \"O\",\n        Ó: \"O\",\n        Ô: \"O\",\n        Õ: \"O\",\n        Ö: \"O\",\n        Ø: \"O\",\n        ò: \"o\",\n        ó: \"o\",\n        ô: \"o\",\n        õ: \"o\",\n        ö: \"o\",\n        ø: \"o\",\n        Ù: \"U\",\n        Ú: \"U\",\n        Û: \"U\",\n        Ü: \"U\",\n        ù: \"u\",\n        ú: \"u\",\n        û: \"u\",\n        ü: \"u\",\n        Ý: \"Y\",\n        ý: \"y\",\n        ÿ: \"y\",\n        Æ: \"Ae\",\n        æ: \"ae\",\n        Þ: \"Th\",\n        þ: \"th\",\n        ß: \"ss\",\n        Ā: \"A\",\n        Ă: \"A\",\n        Ą: \"A\",\n        ā: \"a\",\n        ă: \"a\",\n        ą: \"a\",\n        Ć: \"C\",\n        Ĉ: \"C\",\n        Ċ: \"C\",\n        Č: \"C\",\n        ć: \"c\",\n        ĉ: \"c\",\n        ċ: \"c\",\n        č: \"c\",\n        Ď: \"D\",\n        Đ: \"D\",\n        ď: \"d\",\n        đ: \"d\",\n        Ē: \"E\",\n        Ĕ: \"E\",\n        Ė: \"E\",\n        Ę: \"E\",\n        Ě: \"E\",\n        ē: \"e\",\n        ĕ: \"e\",\n        ė: \"e\",\n        ę: \"e\",\n        ě: \"e\",\n        Ĝ: \"G\",\n        Ğ: \"G\",\n        Ġ: \"G\",\n        Ģ: \"G\",\n        ĝ: \"g\",\n        ğ: \"g\",\n        ġ: \"g\",\n        ģ: \"g\",\n        Ĥ: \"H\",\n        Ħ: \"H\",\n        ĥ: \"h\",\n        ħ: \"h\",\n        Ĩ: \"I\",\n        Ī: \"I\",\n        Ĭ: \"I\",\n        Į: \"I\",\n        İ: \"I\",\n        ĩ: \"i\",\n        ī: \"i\",\n        ĭ: \"i\",\n        į: \"i\",\n        ı: \"i\",\n        Ĵ: \"J\",\n        ĵ: \"j\",\n        Ķ: \"K\",\n        ķ: \"k\",\n        ĸ: \"k\",\n        Ĺ: \"L\",\n        Ļ: \"L\",\n        Ľ: \"L\",\n        Ŀ: \"L\",\n        Ł: \"L\",\n        ĺ: \"l\",\n        ļ: \"l\",\n        ľ: \"l\",\n        ŀ: \"l\",\n        ł: \"l\",\n        Ń: \"N\",\n        Ņ: \"N\",\n        Ň: \"N\",\n        Ŋ: \"N\",\n        ń: \"n\",\n        ņ: \"n\",\n        ň: \"n\",\n        ŋ: \"n\",\n        Ō: \"O\",\n        Ŏ: \"O\",\n        Ő: \"O\",\n        ō: \"o\",\n        ŏ: \"o\",\n        ő: \"o\",\n        Ŕ: \"R\",\n        Ŗ: \"R\",\n        Ř: \"R\",\n        ŕ: \"r\",\n        ŗ: \"r\",\n        ř: \"r\",\n        Ś: \"S\",\n        Ŝ: \"S\",\n        Ş: \"S\",\n        Š: \"S\",\n        ś: \"s\",\n        ŝ: \"s\",\n        ş: \"s\",\n        š: \"s\",\n        Ţ: \"T\",\n        Ť: \"T\",\n        Ŧ: \"T\",\n        ţ: \"t\",\n        ť: \"t\",\n        ŧ: \"t\",\n        Ũ: \"U\",\n        Ū: \"U\",\n        Ŭ: \"U\",\n        Ů: \"U\",\n        Ű: \"U\",\n        Ų: \"U\",\n        ũ: \"u\",\n        ū: \"u\",\n        ŭ: \"u\",\n        ů: \"u\",\n        ű: \"u\",\n        ų: \"u\",\n        Ŵ: \"W\",\n        ŵ: \"w\",\n        Ŷ: \"Y\",\n        ŷ: \"y\",\n        Ÿ: \"Y\",\n        Ź: \"Z\",\n        Ż: \"Z\",\n        Ž: \"Z\",\n        ź: \"z\",\n        ż: \"z\",\n        ž: \"z\",\n        Ĳ: \"IJ\",\n        ĳ: \"ij\",\n        Œ: \"Oe\",\n        œ: \"oe\",\n        ŉ: \"'n\",\n        ſ: \"s\"\n      },\n      Yo = {\n        \"&\": \"&amp;\",\n        \"<\": \"&lt;\",\n        \">\": \"&gt;\",\n        '\"': \"&quot;\",\n        \"'\": \"&#39;\"\n      },\n      Zo = {\n        \"&amp;\": \"&\",\n        \"&lt;\": \"<\",\n        \"&gt;\": \">\",\n        \"&quot;\": '\"',\n        \"&#39;\": \"'\"\n      },\n      Jo = {\n        \"\\\\\": \"\\\\\",\n        \"'\": \"'\",\n        \"\\n\": \"n\",\n        \"\\r\": \"r\",\n        \"\\u2028\": \"u2028\",\n        \"\\u2029\": \"u2029\"\n      },\n      Xo = parseFloat,\n      Qo = parseInt,\n      ps = typeof ge == \"object\" && ge && ge.Object === Object && ge,\n      Vo = typeof self == \"object\" && self && self.Object === Object && self,\n      k = ps || Vo || Function(\"return this\")(),\n      Tr = u && !u.nodeType && u,\n      lt = Tr && !0 && A && !A.nodeType && A,\n      ds = lt && lt.exports === Tr,\n      Lr = ds && ps.process,\n      _n = function () {\n        try {\n          var h = lt && lt.require && lt.require(\"util\").types;\n          return h || Lr && Lr.binding && Lr.binding(\"util\");\n        } catch {}\n      }(),\n      gs = _n && _n.isArrayBuffer,\n      vs = _n && _n.isDate,\n      _s = _n && _n.isMap,\n      ms = _n && _n.isRegExp,\n      ws = _n && _n.isSet,\n      Ps = _n && _n.isTypedArray;\n    function cn(h, g, p) {\n      switch (p.length) {\n        case 0:\n          return h.call(g);\n        case 1:\n          return h.call(g, p[0]);\n        case 2:\n          return h.call(g, p[0], p[1]);\n        case 3:\n          return h.call(g, p[0], p[1], p[2]);\n      }\n      return h.apply(g, p);\n    }\n    function ko(h, g, p, C) {\n      for (var S = -1, U = h == null ? 0 : h.length; ++S < U;) {\n        var X = h[S];\n        g(C, X, p(X), h);\n      }\n      return C;\n    }\n    function mn(h, g) {\n      for (var p = -1, C = h == null ? 0 : h.length; ++p < C && g(h[p], p, h) !== !1;);\n      return h;\n    }\n    function jo(h, g) {\n      for (var p = h == null ? 0 : h.length; p-- && g(h[p], p, h) !== !1;);\n      return h;\n    }\n    function As(h, g) {\n      for (var p = -1, C = h == null ? 0 : h.length; ++p < C;) if (!g(h[p], p, h)) return !1;\n      return !0;\n    }\n    function jn(h, g) {\n      for (var p = -1, C = h == null ? 0 : h.length, S = 0, U = []; ++p < C;) {\n        var X = h[p];\n        g(X, p, h) && (U[S++] = X);\n      }\n      return U;\n    }\n    function Ee(h, g) {\n      var p = h == null ? 0 : h.length;\n      return !!p && Tt(h, g, 0) > -1;\n    }\n    function Dr(h, g, p) {\n      for (var C = -1, S = h == null ? 0 : h.length; ++C < S;) if (p(g, h[C])) return !0;\n      return !1;\n    }\n    function G(h, g) {\n      for (var p = -1, C = h == null ? 0 : h.length, S = Array(C); ++p < C;) S[p] = g(h[p], p, h);\n      return S;\n    }\n    function nt(h, g) {\n      for (var p = -1, C = g.length, S = h.length; ++p < C;) h[S + p] = g[p];\n      return h;\n    }\n    function Hr(h, g, p, C) {\n      var S = -1,\n        U = h == null ? 0 : h.length;\n      for (C && U && (p = h[++S]); ++S < U;) p = g(p, h[S], S, h);\n      return p;\n    }\n    function nf(h, g, p, C) {\n      var S = h == null ? 0 : h.length;\n      for (C && S && (p = h[--S]); S--;) p = g(p, h[S], S, h);\n      return p;\n    }\n    function Nr(h, g) {\n      for (var p = -1, C = h == null ? 0 : h.length; ++p < C;) if (g(h[p], p, h)) return !0;\n      return !1;\n    }\n    var tf = $r(\"length\");\n    function ef(h) {\n      return h.split(\"\");\n    }\n    function rf(h) {\n      return h.match(co) || [];\n    }\n    function Cs(h, g, p) {\n      var C;\n      return p(h, function (S, U, X) {\n        if (g(S, U, X)) return C = U, !1;\n      }), C;\n    }\n    function ye(h, g, p, C) {\n      for (var S = h.length, U = p + (C ? 1 : -1); C ? U-- : ++U < S;) if (g(h[U], U, h)) return U;\n      return -1;\n    }\n    function Tt(h, g, p) {\n      return g === g ? vf(h, g, p) : ye(h, Is, p);\n    }\n    function sf(h, g, p, C) {\n      for (var S = p - 1, U = h.length; ++S < U;) if (C(h[S], g)) return S;\n      return -1;\n    }\n    function Is(h) {\n      return h !== h;\n    }\n    function xs(h, g) {\n      var p = h == null ? 0 : h.length;\n      return p ? Wr(h, g) / p : _e;\n    }\n    function $r(h) {\n      return function (g) {\n        return g == null ? i : g[h];\n      };\n    }\n    function Ur(h) {\n      return function (g) {\n        return h == null ? i : h[g];\n      };\n    }\n    function Es(h, g, p, C, S) {\n      return S(h, function (U, X, M) {\n        p = C ? (C = !1, U) : g(p, U, X, M);\n      }), p;\n    }\n    function uf(h, g) {\n      var p = h.length;\n      for (h.sort(g); p--;) h[p] = h[p].value;\n      return h;\n    }\n    function Wr(h, g) {\n      for (var p, C = -1, S = h.length; ++C < S;) {\n        var U = g(h[C]);\n        U !== i && (p = p === i ? U : p + U);\n      }\n      return p;\n    }\n    function Fr(h, g) {\n      for (var p = -1, C = Array(h); ++p < h;) C[p] = g(p);\n      return C;\n    }\n    function af(h, g) {\n      return G(g, function (p) {\n        return [p, h[p]];\n      });\n    }\n    function ys(h) {\n      return h && h.slice(0, bs(h) + 1).replace(Er, \"\");\n    }\n    function hn(h) {\n      return function (g) {\n        return h(g);\n      };\n    }\n    function Mr(h, g) {\n      return G(g, function (p) {\n        return h[p];\n      });\n    }\n    function jt(h, g) {\n      return h.has(g);\n    }\n    function Ss(h, g) {\n      for (var p = -1, C = h.length; ++p < C && Tt(g, h[p], 0) > -1;);\n      return p;\n    }\n    function Os(h, g) {\n      for (var p = h.length; p-- && Tt(g, h[p], 0) > -1;);\n      return p;\n    }\n    function of(h, g) {\n      for (var p = h.length, C = 0; p--;) h[p] === g && ++C;\n      return C;\n    }\n    var ff = Ur(Ko),\n      cf = Ur(Yo);\n    function hf(h) {\n      return \"\\\\\" + Jo[h];\n    }\n    function lf(h, g) {\n      return h == null ? i : h[g];\n    }\n    function Lt(h) {\n      return qo.test(h);\n    }\n    function pf(h) {\n      return Bo.test(h);\n    }\n    function df(h) {\n      for (var g, p = []; !(g = h.next()).done;) p.push(g.value);\n      return p;\n    }\n    function qr(h) {\n      var g = -1,\n        p = Array(h.size);\n      return h.forEach(function (C, S) {\n        p[++g] = [S, C];\n      }), p;\n    }\n    function Rs(h, g) {\n      return function (p) {\n        return h(g(p));\n      };\n    }\n    function tt(h, g) {\n      for (var p = -1, C = h.length, S = 0, U = []; ++p < C;) {\n        var X = h[p];\n        (X === g || X === It) && (h[p] = It, U[S++] = p);\n      }\n      return U;\n    }\n    function Se(h) {\n      var g = -1,\n        p = Array(h.size);\n      return h.forEach(function (C) {\n        p[++g] = C;\n      }), p;\n    }\n    function gf(h) {\n      var g = -1,\n        p = Array(h.size);\n      return h.forEach(function (C) {\n        p[++g] = [C, C];\n      }), p;\n    }\n    function vf(h, g, p) {\n      for (var C = p - 1, S = h.length; ++C < S;) if (h[C] === g) return C;\n      return -1;\n    }\n    function _f(h, g, p) {\n      for (var C = p + 1; C--;) if (h[C] === g) return C;\n      return C;\n    }\n    function Dt(h) {\n      return Lt(h) ? wf(h) : tf(h);\n    }\n    function On(h) {\n      return Lt(h) ? Pf(h) : ef(h);\n    }\n    function bs(h) {\n      for (var g = h.length; g-- && uo.test(h.charAt(g)););\n      return g;\n    }\n    var mf = Ur(Zo);\n    function wf(h) {\n      for (var g = br.lastIndex = 0; br.test(h);) ++g;\n      return g;\n    }\n    function Pf(h) {\n      return h.match(br) || [];\n    }\n    function Af(h) {\n      return h.match(Mo) || [];\n    }\n    var Cf = function h(g) {\n        g = g == null ? k : Ht.defaults(k.Object(), g, Ht.pick(k, Go));\n        var p = g.Array,\n          C = g.Date,\n          S = g.Error,\n          U = g.Function,\n          X = g.Math,\n          M = g.Object,\n          Br = g.RegExp,\n          If = g.String,\n          wn = g.TypeError,\n          Oe = p.prototype,\n          xf = U.prototype,\n          Nt = M.prototype,\n          Re = g[\"__core-js_shared__\"],\n          be = xf.toString,\n          F = Nt.hasOwnProperty,\n          Ef = 0,\n          Ts = function () {\n            var n = /[^.]+$/.exec(Re && Re.keys && Re.keys.IE_PROTO || \"\");\n            return n ? \"Symbol(src)_1.\" + n : \"\";\n          }(),\n          Te = Nt.toString,\n          yf = be.call(M),\n          Sf = k._,\n          Of = Br(\"^\" + be.call(F).replace(xr, \"\\\\$&\").replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, \"$1.*?\") + \"$\"),\n          Le = ds ? g.Buffer : i,\n          et = g.Symbol,\n          De = g.Uint8Array,\n          Ls = Le ? Le.allocUnsafe : i,\n          He = Rs(M.getPrototypeOf, M),\n          Ds = M.create,\n          Hs = Nt.propertyIsEnumerable,\n          Ne = Oe.splice,\n          Ns = et ? et.isConcatSpreadable : i,\n          ne = et ? et.iterator : i,\n          pt = et ? et.toStringTag : i,\n          $e = function () {\n            try {\n              var n = mt(M, \"defineProperty\");\n              return n({}, \"\", {}), n;\n            } catch {}\n          }(),\n          Rf = g.clearTimeout !== k.clearTimeout && g.clearTimeout,\n          bf = C && C.now !== k.Date.now && C.now,\n          Tf = g.setTimeout !== k.setTimeout && g.setTimeout,\n          Ue = X.ceil,\n          We = X.floor,\n          Gr = M.getOwnPropertySymbols,\n          Lf = Le ? Le.isBuffer : i,\n          $s = g.isFinite,\n          Df = Oe.join,\n          Hf = Rs(M.keys, M),\n          Q = X.max,\n          nn = X.min,\n          Nf = C.now,\n          $f = g.parseInt,\n          Us = X.random,\n          Uf = Oe.reverse,\n          zr = mt(g, \"DataView\"),\n          te = mt(g, \"Map\"),\n          Kr = mt(g, \"Promise\"),\n          $t = mt(g, \"Set\"),\n          ee = mt(g, \"WeakMap\"),\n          re = mt(M, \"create\"),\n          Fe = ee && new ee(),\n          Ut = {},\n          Wf = wt(zr),\n          Ff = wt(te),\n          Mf = wt(Kr),\n          qf = wt($t),\n          Bf = wt(ee),\n          Me = et ? et.prototype : i,\n          ie = Me ? Me.valueOf : i,\n          Ws = Me ? Me.toString : i;\n        function a(n) {\n          if (Y(n) && !O(n) && !(n instanceof N)) {\n            if (n instanceof Pn) return n;\n            if (F.call(n, \"__wrapped__\")) return Fu(n);\n          }\n          return new Pn(n);\n        }\n        var Wt = function () {\n          function n() {}\n          return function (t) {\n            if (!K(t)) return {};\n            if (Ds) return Ds(t);\n            n.prototype = t;\n            var e = new n();\n            return n.prototype = i, e;\n          };\n        }();\n        function qe() {}\n        function Pn(n, t) {\n          this.__wrapped__ = n, this.__actions__ = [], this.__chain__ = !!t, this.__index__ = 0, this.__values__ = i;\n        }\n        a.templateSettings = {\n          escape: no,\n          evaluate: to,\n          interpolate: Zi,\n          variable: \"\",\n          imports: {\n            _: a\n          }\n        }, a.prototype = qe.prototype, a.prototype.constructor = a, Pn.prototype = Wt(qe.prototype), Pn.prototype.constructor = Pn;\n        function N(n) {\n          this.__wrapped__ = n, this.__actions__ = [], this.__dir__ = 1, this.__filtered__ = !1, this.__iteratees__ = [], this.__takeCount__ = Nn, this.__views__ = [];\n        }\n        function Gf() {\n          var n = new N(this.__wrapped__);\n          return n.__actions__ = un(this.__actions__), n.__dir__ = this.__dir__, n.__filtered__ = this.__filtered__, n.__iteratees__ = un(this.__iteratees__), n.__takeCount__ = this.__takeCount__, n.__views__ = un(this.__views__), n;\n        }\n        function zf() {\n          if (this.__filtered__) {\n            var n = new N(this);\n            n.__dir__ = -1, n.__filtered__ = !0;\n          } else n = this.clone(), n.__dir__ *= -1;\n          return n;\n        }\n        function Kf() {\n          var n = this.__wrapped__.value(),\n            t = this.__dir__,\n            e = O(n),\n            r = t < 0,\n            s = e ? n.length : 0,\n            o = rh(0, s, this.__views__),\n            f = o.start,\n            c = o.end,\n            l = c - f,\n            v = r ? c : f - 1,\n            _ = this.__iteratees__,\n            m = _.length,\n            P = 0,\n            I = nn(l, this.__takeCount__);\n          if (!e || !r && s == l && I == l) return ou(n, this.__actions__);\n          var E = [];\n          n: for (; l-- && P < I;) {\n            v += t;\n            for (var b = -1, y = n[v]; ++b < m;) {\n              var H = _[b],\n                $ = H.iteratee,\n                dn = H.type,\n                sn = $(y);\n              if (dn == Ua) y = sn;else if (!sn) {\n                if (dn == Bi) continue n;\n                break n;\n              }\n            }\n            E[P++] = y;\n          }\n          return E;\n        }\n        N.prototype = Wt(qe.prototype), N.prototype.constructor = N;\n        function dt(n) {\n          var t = -1,\n            e = n == null ? 0 : n.length;\n          for (this.clear(); ++t < e;) {\n            var r = n[t];\n            this.set(r[0], r[1]);\n          }\n        }\n        function Yf() {\n          this.__data__ = re ? re(null) : {}, this.size = 0;\n        }\n        function Zf(n) {\n          var t = this.has(n) && delete this.__data__[n];\n          return this.size -= t ? 1 : 0, t;\n        }\n        function Jf(n) {\n          var t = this.__data__;\n          if (re) {\n            var e = t[n];\n            return e === zt ? i : e;\n          }\n          return F.call(t, n) ? t[n] : i;\n        }\n        function Xf(n) {\n          var t = this.__data__;\n          return re ? t[n] !== i : F.call(t, n);\n        }\n        function Qf(n, t) {\n          var e = this.__data__;\n          return this.size += this.has(n) ? 0 : 1, e[n] = re && t === i ? zt : t, this;\n        }\n        dt.prototype.clear = Yf, dt.prototype.delete = Zf, dt.prototype.get = Jf, dt.prototype.has = Xf, dt.prototype.set = Qf;\n        function Bn(n) {\n          var t = -1,\n            e = n == null ? 0 : n.length;\n          for (this.clear(); ++t < e;) {\n            var r = n[t];\n            this.set(r[0], r[1]);\n          }\n        }\n        function Vf() {\n          this.__data__ = [], this.size = 0;\n        }\n        function kf(n) {\n          var t = this.__data__,\n            e = Be(t, n);\n          if (e < 0) return !1;\n          var r = t.length - 1;\n          return e == r ? t.pop() : Ne.call(t, e, 1), --this.size, !0;\n        }\n        function jf(n) {\n          var t = this.__data__,\n            e = Be(t, n);\n          return e < 0 ? i : t[e][1];\n        }\n        function nc(n) {\n          return Be(this.__data__, n) > -1;\n        }\n        function tc(n, t) {\n          var e = this.__data__,\n            r = Be(e, n);\n          return r < 0 ? (++this.size, e.push([n, t])) : e[r][1] = t, this;\n        }\n        Bn.prototype.clear = Vf, Bn.prototype.delete = kf, Bn.prototype.get = jf, Bn.prototype.has = nc, Bn.prototype.set = tc;\n        function Gn(n) {\n          var t = -1,\n            e = n == null ? 0 : n.length;\n          for (this.clear(); ++t < e;) {\n            var r = n[t];\n            this.set(r[0], r[1]);\n          }\n        }\n        function ec() {\n          this.size = 0, this.__data__ = {\n            hash: new dt(),\n            map: new (te || Bn)(),\n            string: new dt()\n          };\n        }\n        function rc(n) {\n          var t = nr(this, n).delete(n);\n          return this.size -= t ? 1 : 0, t;\n        }\n        function ic(n) {\n          return nr(this, n).get(n);\n        }\n        function sc(n) {\n          return nr(this, n).has(n);\n        }\n        function uc(n, t) {\n          var e = nr(this, n),\n            r = e.size;\n          return e.set(n, t), this.size += e.size == r ? 0 : 1, this;\n        }\n        Gn.prototype.clear = ec, Gn.prototype.delete = rc, Gn.prototype.get = ic, Gn.prototype.has = sc, Gn.prototype.set = uc;\n        function gt(n) {\n          var t = -1,\n            e = n == null ? 0 : n.length;\n          for (this.__data__ = new Gn(); ++t < e;) this.add(n[t]);\n        }\n        function ac(n) {\n          return this.__data__.set(n, zt), this;\n        }\n        function oc(n) {\n          return this.__data__.has(n);\n        }\n        gt.prototype.add = gt.prototype.push = ac, gt.prototype.has = oc;\n        function Rn(n) {\n          var t = this.__data__ = new Bn(n);\n          this.size = t.size;\n        }\n        function fc() {\n          this.__data__ = new Bn(), this.size = 0;\n        }\n        function cc(n) {\n          var t = this.__data__,\n            e = t.delete(n);\n          return this.size = t.size, e;\n        }\n        function hc(n) {\n          return this.__data__.get(n);\n        }\n        function lc(n) {\n          return this.__data__.has(n);\n        }\n        function pc(n, t) {\n          var e = this.__data__;\n          if (e instanceof Bn) {\n            var r = e.__data__;\n            if (!te || r.length < w - 1) return r.push([n, t]), this.size = ++e.size, this;\n            e = this.__data__ = new Gn(r);\n          }\n          return e.set(n, t), this.size = e.size, this;\n        }\n        Rn.prototype.clear = fc, Rn.prototype.delete = cc, Rn.prototype.get = hc, Rn.prototype.has = lc, Rn.prototype.set = pc;\n        function Fs(n, t) {\n          var e = O(n),\n            r = !e && Pt(n),\n            s = !e && !r && at(n),\n            o = !e && !r && !s && Bt(n),\n            f = e || r || s || o,\n            c = f ? Fr(n.length, If) : [],\n            l = c.length;\n          for (var v in n) (t || F.call(n, v)) && !(f && (v == \"length\" || s && (v == \"offset\" || v == \"parent\") || o && (v == \"buffer\" || v == \"byteLength\" || v == \"byteOffset\") || Zn(v, l))) && c.push(v);\n          return c;\n        }\n        function Ms(n) {\n          var t = n.length;\n          return t ? n[ei(0, t - 1)] : i;\n        }\n        function dc(n, t) {\n          return tr(un(n), vt(t, 0, n.length));\n        }\n        function gc(n) {\n          return tr(un(n));\n        }\n        function Yr(n, t, e) {\n          (e !== i && !bn(n[t], e) || e === i && !(t in n)) && zn(n, t, e);\n        }\n        function se(n, t, e) {\n          var r = n[t];\n          (!(F.call(n, t) && bn(r, e)) || e === i && !(t in n)) && zn(n, t, e);\n        }\n        function Be(n, t) {\n          for (var e = n.length; e--;) if (bn(n[e][0], t)) return e;\n          return -1;\n        }\n        function vc(n, t, e, r) {\n          return rt(n, function (s, o, f) {\n            t(r, s, e(s), f);\n          }), r;\n        }\n        function qs(n, t) {\n          return n && Un(t, V(t), n);\n        }\n        function _c(n, t) {\n          return n && Un(t, on(t), n);\n        }\n        function zn(n, t, e) {\n          t == \"__proto__\" && $e ? $e(n, t, {\n            configurable: !0,\n            enumerable: !0,\n            value: e,\n            writable: !0\n          }) : n[t] = e;\n        }\n        function Zr(n, t) {\n          for (var e = -1, r = t.length, s = p(r), o = n == null; ++e < r;) s[e] = o ? i : Si(n, t[e]);\n          return s;\n        }\n        function vt(n, t, e) {\n          return n === n && (e !== i && (n = n <= e ? n : e), t !== i && (n = n >= t ? n : t)), n;\n        }\n        function An(n, t, e, r, s, o) {\n          var f,\n            c = t & Ln,\n            l = t & Fn,\n            v = t & xt;\n          if (e && (f = s ? e(n, r, s, o) : e(n)), f !== i) return f;\n          if (!K(n)) return n;\n          var _ = O(n);\n          if (_) {\n            if (f = sh(n), !c) return un(n, f);\n          } else {\n            var m = tn(n),\n              P = m == Pe || m == Gi;\n            if (at(n)) return hu(n, c);\n            if (m == qn || m == Ot || P && !s) {\n              if (f = l || P ? {} : bu(n), !c) return l ? Jc(n, _c(f, n)) : Zc(n, qs(f, n));\n            } else {\n              if (!q[m]) return s ? n : {};\n              f = uh(n, m, c);\n            }\n          }\n          o || (o = new Rn());\n          var I = o.get(n);\n          if (I) return I;\n          o.set(n, f), sa(n) ? n.forEach(function (y) {\n            f.add(An(y, t, e, y, n, o));\n          }) : ra(n) && n.forEach(function (y, H) {\n            f.set(H, An(y, t, e, H, n, o));\n          });\n          var E = v ? l ? pi : li : l ? on : V,\n            b = _ ? i : E(n);\n          return mn(b || n, function (y, H) {\n            b && (H = y, y = n[H]), se(f, H, An(y, t, e, H, n, o));\n          }), f;\n        }\n        function mc(n) {\n          var t = V(n);\n          return function (e) {\n            return Bs(e, n, t);\n          };\n        }\n        function Bs(n, t, e) {\n          var r = e.length;\n          if (n == null) return !r;\n          for (n = M(n); r--;) {\n            var s = e[r],\n              o = t[s],\n              f = n[s];\n            if (f === i && !(s in n) || !o(f)) return !1;\n          }\n          return !0;\n        }\n        function Gs(n, t, e) {\n          if (typeof n != \"function\") throw new wn(D);\n          return le(function () {\n            n.apply(i, e);\n          }, t);\n        }\n        function ue(n, t, e, r) {\n          var s = -1,\n            o = Ee,\n            f = !0,\n            c = n.length,\n            l = [],\n            v = t.length;\n          if (!c) return l;\n          e && (t = G(t, hn(e))), r ? (o = Dr, f = !1) : t.length >= w && (o = jt, f = !1, t = new gt(t));\n          n: for (; ++s < c;) {\n            var _ = n[s],\n              m = e == null ? _ : e(_);\n            if (_ = r || _ !== 0 ? _ : 0, f && m === m) {\n              for (var P = v; P--;) if (t[P] === m) continue n;\n              l.push(_);\n            } else o(t, m, r) || l.push(_);\n          }\n          return l;\n        }\n        var rt = vu($n),\n          zs = vu(Xr, !0);\n        function wc(n, t) {\n          var e = !0;\n          return rt(n, function (r, s, o) {\n            return e = !!t(r, s, o), e;\n          }), e;\n        }\n        function Ge(n, t, e) {\n          for (var r = -1, s = n.length; ++r < s;) {\n            var o = n[r],\n              f = t(o);\n            if (f != null && (c === i ? f === f && !pn(f) : e(f, c))) var c = f,\n              l = o;\n          }\n          return l;\n        }\n        function Pc(n, t, e, r) {\n          var s = n.length;\n          for (e = R(e), e < 0 && (e = -e > s ? 0 : s + e), r = r === i || r > s ? s : R(r), r < 0 && (r += s), r = e > r ? 0 : aa(r); e < r;) n[e++] = t;\n          return n;\n        }\n        function Ks(n, t) {\n          var e = [];\n          return rt(n, function (r, s, o) {\n            t(r, s, o) && e.push(r);\n          }), e;\n        }\n        function j(n, t, e, r, s) {\n          var o = -1,\n            f = n.length;\n          for (e || (e = oh), s || (s = []); ++o < f;) {\n            var c = n[o];\n            t > 0 && e(c) ? t > 1 ? j(c, t - 1, e, r, s) : nt(s, c) : r || (s[s.length] = c);\n          }\n          return s;\n        }\n        var Jr = _u(),\n          Ys = _u(!0);\n        function $n(n, t) {\n          return n && Jr(n, t, V);\n        }\n        function Xr(n, t) {\n          return n && Ys(n, t, V);\n        }\n        function ze(n, t) {\n          return jn(t, function (e) {\n            return Jn(n[e]);\n          });\n        }\n        function _t(n, t) {\n          t = st(t, n);\n          for (var e = 0, r = t.length; n != null && e < r;) n = n[Wn(t[e++])];\n          return e && e == r ? n : i;\n        }\n        function Zs(n, t, e) {\n          var r = t(n);\n          return O(n) ? r : nt(r, e(n));\n        }\n        function en(n) {\n          return n == null ? n === i ? Za : Ka : pt && pt in M(n) ? eh(n) : gh(n);\n        }\n        function Qr(n, t) {\n          return n > t;\n        }\n        function Ac(n, t) {\n          return n != null && F.call(n, t);\n        }\n        function Cc(n, t) {\n          return n != null && t in M(n);\n        }\n        function Ic(n, t, e) {\n          return n >= nn(t, e) && n < Q(t, e);\n        }\n        function Vr(n, t, e) {\n          for (var r = e ? Dr : Ee, s = n[0].length, o = n.length, f = o, c = p(o), l = 1 / 0, v = []; f--;) {\n            var _ = n[f];\n            f && t && (_ = G(_, hn(t))), l = nn(_.length, l), c[f] = !e && (t || s >= 120 && _.length >= 120) ? new gt(f && _) : i;\n          }\n          _ = n[0];\n          var m = -1,\n            P = c[0];\n          n: for (; ++m < s && v.length < l;) {\n            var I = _[m],\n              E = t ? t(I) : I;\n            if (I = e || I !== 0 ? I : 0, !(P ? jt(P, E) : r(v, E, e))) {\n              for (f = o; --f;) {\n                var b = c[f];\n                if (!(b ? jt(b, E) : r(n[f], E, e))) continue n;\n              }\n              P && P.push(E), v.push(I);\n            }\n          }\n          return v;\n        }\n        function xc(n, t, e, r) {\n          return $n(n, function (s, o, f) {\n            t(r, e(s), o, f);\n          }), r;\n        }\n        function ae(n, t, e) {\n          t = st(t, n), n = Hu(n, t);\n          var r = n == null ? n : n[Wn(In(t))];\n          return r == null ? i : cn(r, n, e);\n        }\n        function Js(n) {\n          return Y(n) && en(n) == Ot;\n        }\n        function Ec(n) {\n          return Y(n) && en(n) == kt;\n        }\n        function yc(n) {\n          return Y(n) && en(n) == Zt;\n        }\n        function oe(n, t, e, r, s) {\n          return n === t ? !0 : n == null || t == null || !Y(n) && !Y(t) ? n !== n && t !== t : Sc(n, t, e, r, oe, s);\n        }\n        function Sc(n, t, e, r, s, o) {\n          var f = O(n),\n            c = O(t),\n            l = f ? me : tn(n),\n            v = c ? me : tn(t);\n          l = l == Ot ? qn : l, v = v == Ot ? qn : v;\n          var _ = l == qn,\n            m = v == qn,\n            P = l == v;\n          if (P && at(n)) {\n            if (!at(t)) return !1;\n            f = !0, _ = !1;\n          }\n          if (P && !_) return o || (o = new Rn()), f || Bt(n) ? Su(n, t, e, r, s, o) : nh(n, t, l, e, r, s, o);\n          if (!(e & Et)) {\n            var I = _ && F.call(n, \"__wrapped__\"),\n              E = m && F.call(t, \"__wrapped__\");\n            if (I || E) {\n              var b = I ? n.value() : n,\n                y = E ? t.value() : t;\n              return o || (o = new Rn()), s(b, y, e, r, o);\n            }\n          }\n          return P ? (o || (o = new Rn()), th(n, t, e, r, s, o)) : !1;\n        }\n        function Oc(n) {\n          return Y(n) && tn(n) == yn;\n        }\n        function kr(n, t, e, r) {\n          var s = e.length,\n            o = s,\n            f = !r;\n          if (n == null) return !o;\n          for (n = M(n); s--;) {\n            var c = e[s];\n            if (f && c[2] ? c[1] !== n[c[0]] : !(c[0] in n)) return !1;\n          }\n          for (; ++s < o;) {\n            c = e[s];\n            var l = c[0],\n              v = n[l],\n              _ = c[1];\n            if (f && c[2]) {\n              if (v === i && !(l in n)) return !1;\n            } else {\n              var m = new Rn();\n              if (r) var P = r(v, _, l, n, t, m);\n              if (!(P === i ? oe(_, v, Et | ve, r, m) : P)) return !1;\n            }\n          }\n          return !0;\n        }\n        function Xs(n) {\n          if (!K(n) || ch(n)) return !1;\n          var t = Jn(n) ? Of : _o;\n          return t.test(wt(n));\n        }\n        function Rc(n) {\n          return Y(n) && en(n) == Xt;\n        }\n        function bc(n) {\n          return Y(n) && tn(n) == Sn;\n        }\n        function Tc(n) {\n          return Y(n) && ar(n.length) && !!B[en(n)];\n        }\n        function Qs(n) {\n          return typeof n == \"function\" ? n : n == null ? fn : typeof n == \"object\" ? O(n) ? js(n[0], n[1]) : ks(n) : ma(n);\n        }\n        function jr(n) {\n          if (!he(n)) return Hf(n);\n          var t = [];\n          for (var e in M(n)) F.call(n, e) && e != \"constructor\" && t.push(e);\n          return t;\n        }\n        function Lc(n) {\n          if (!K(n)) return dh(n);\n          var t = he(n),\n            e = [];\n          for (var r in n) r == \"constructor\" && (t || !F.call(n, r)) || e.push(r);\n          return e;\n        }\n        function ni(n, t) {\n          return n < t;\n        }\n        function Vs(n, t) {\n          var e = -1,\n            r = an(n) ? p(n.length) : [];\n          return rt(n, function (s, o, f) {\n            r[++e] = t(s, o, f);\n          }), r;\n        }\n        function ks(n) {\n          var t = gi(n);\n          return t.length == 1 && t[0][2] ? Lu(t[0][0], t[0][1]) : function (e) {\n            return e === n || kr(e, n, t);\n          };\n        }\n        function js(n, t) {\n          return _i(n) && Tu(t) ? Lu(Wn(n), t) : function (e) {\n            var r = Si(e, n);\n            return r === i && r === t ? Oi(e, n) : oe(t, r, Et | ve);\n          };\n        }\n        function Ke(n, t, e, r, s) {\n          n !== t && Jr(t, function (o, f) {\n            if (s || (s = new Rn()), K(o)) Dc(n, t, f, e, Ke, r, s);else {\n              var c = r ? r(wi(n, f), o, f + \"\", n, t, s) : i;\n              c === i && (c = o), Yr(n, f, c);\n            }\n          }, on);\n        }\n        function Dc(n, t, e, r, s, o, f) {\n          var c = wi(n, e),\n            l = wi(t, e),\n            v = f.get(l);\n          if (v) {\n            Yr(n, e, v);\n            return;\n          }\n          var _ = o ? o(c, l, e + \"\", n, t, f) : i,\n            m = _ === i;\n          if (m) {\n            var P = O(l),\n              I = !P && at(l),\n              E = !P && !I && Bt(l);\n            _ = l, P || I || E ? O(c) ? _ = c : Z(c) ? _ = un(c) : I ? (m = !1, _ = hu(l, !0)) : E ? (m = !1, _ = lu(l, !0)) : _ = [] : pe(l) || Pt(l) ? (_ = c, Pt(c) ? _ = oa(c) : (!K(c) || Jn(c)) && (_ = bu(l))) : m = !1;\n          }\n          m && (f.set(l, _), s(_, l, r, o, f), f.delete(l)), Yr(n, e, _);\n        }\n        function nu(n, t) {\n          var e = n.length;\n          if (e) return t += t < 0 ? e : 0, Zn(t, e) ? n[t] : i;\n        }\n        function tu(n, t, e) {\n          t.length ? t = G(t, function (o) {\n            return O(o) ? function (f) {\n              return _t(f, o.length === 1 ? o[0] : o);\n            } : o;\n          }) : t = [fn];\n          var r = -1;\n          t = G(t, hn(x()));\n          var s = Vs(n, function (o, f, c) {\n            var l = G(t, function (v) {\n              return v(o);\n            });\n            return {\n              criteria: l,\n              index: ++r,\n              value: o\n            };\n          });\n          return uf(s, function (o, f) {\n            return Yc(o, f, e);\n          });\n        }\n        function Hc(n, t) {\n          return eu(n, t, function (e, r) {\n            return Oi(n, r);\n          });\n        }\n        function eu(n, t, e) {\n          for (var r = -1, s = t.length, o = {}; ++r < s;) {\n            var f = t[r],\n              c = _t(n, f);\n            e(c, f) && fe(o, st(f, n), c);\n          }\n          return o;\n        }\n        function Nc(n) {\n          return function (t) {\n            return _t(t, n);\n          };\n        }\n        function ti(n, t, e, r) {\n          var s = r ? sf : Tt,\n            o = -1,\n            f = t.length,\n            c = n;\n          for (n === t && (t = un(t)), e && (c = G(n, hn(e))); ++o < f;) for (var l = 0, v = t[o], _ = e ? e(v) : v; (l = s(c, _, l, r)) > -1;) c !== n && Ne.call(c, l, 1), Ne.call(n, l, 1);\n          return n;\n        }\n        function ru(n, t) {\n          for (var e = n ? t.length : 0, r = e - 1; e--;) {\n            var s = t[e];\n            if (e == r || s !== o) {\n              var o = s;\n              Zn(s) ? Ne.call(n, s, 1) : si(n, s);\n            }\n          }\n          return n;\n        }\n        function ei(n, t) {\n          return n + We(Us() * (t - n + 1));\n        }\n        function $c(n, t, e, r) {\n          for (var s = -1, o = Q(Ue((t - n) / (e || 1)), 0), f = p(o); o--;) f[r ? o : ++s] = n, n += e;\n          return f;\n        }\n        function ri(n, t) {\n          var e = \"\";\n          if (!n || t < 1 || t > kn) return e;\n          do t % 2 && (e += n), t = We(t / 2), t && (n += n); while (t);\n          return e;\n        }\n        function T(n, t) {\n          return Pi(Du(n, t, fn), n + \"\");\n        }\n        function Uc(n) {\n          return Ms(Gt(n));\n        }\n        function Wc(n, t) {\n          var e = Gt(n);\n          return tr(e, vt(t, 0, e.length));\n        }\n        function fe(n, t, e, r) {\n          if (!K(n)) return n;\n          t = st(t, n);\n          for (var s = -1, o = t.length, f = o - 1, c = n; c != null && ++s < o;) {\n            var l = Wn(t[s]),\n              v = e;\n            if (l === \"__proto__\" || l === \"constructor\" || l === \"prototype\") return n;\n            if (s != f) {\n              var _ = c[l];\n              v = r ? r(_, l, c) : i, v === i && (v = K(_) ? _ : Zn(t[s + 1]) ? [] : {});\n            }\n            se(c, l, v), c = c[l];\n          }\n          return n;\n        }\n        var iu = Fe ? function (n, t) {\n            return Fe.set(n, t), n;\n          } : fn,\n          Fc = $e ? function (n, t) {\n            return $e(n, \"toString\", {\n              configurable: !0,\n              enumerable: !1,\n              value: bi(t),\n              writable: !0\n            });\n          } : fn;\n        function Mc(n) {\n          return tr(Gt(n));\n        }\n        function Cn(n, t, e) {\n          var r = -1,\n            s = n.length;\n          t < 0 && (t = -t > s ? 0 : s + t), e = e > s ? s : e, e < 0 && (e += s), s = t > e ? 0 : e - t >>> 0, t >>>= 0;\n          for (var o = p(s); ++r < s;) o[r] = n[r + t];\n          return o;\n        }\n        function qc(n, t) {\n          var e;\n          return rt(n, function (r, s, o) {\n            return e = t(r, s, o), !e;\n          }), !!e;\n        }\n        function Ye(n, t, e) {\n          var r = 0,\n            s = n == null ? r : n.length;\n          if (typeof t == \"number\" && t === t && s <= qa) {\n            for (; r < s;) {\n              var o = r + s >>> 1,\n                f = n[o];\n              f !== null && !pn(f) && (e ? f <= t : f < t) ? r = o + 1 : s = o;\n            }\n            return s;\n          }\n          return ii(n, t, fn, e);\n        }\n        function ii(n, t, e, r) {\n          var s = 0,\n            o = n == null ? 0 : n.length;\n          if (o === 0) return 0;\n          t = e(t);\n          for (var f = t !== t, c = t === null, l = pn(t), v = t === i; s < o;) {\n            var _ = We((s + o) / 2),\n              m = e(n[_]),\n              P = m !== i,\n              I = m === null,\n              E = m === m,\n              b = pn(m);\n            if (f) var y = r || E;else v ? y = E && (r || P) : c ? y = E && P && (r || !I) : l ? y = E && P && !I && (r || !b) : I || b ? y = !1 : y = r ? m <= t : m < t;\n            y ? s = _ + 1 : o = _;\n          }\n          return nn(o, Ma);\n        }\n        function su(n, t) {\n          for (var e = -1, r = n.length, s = 0, o = []; ++e < r;) {\n            var f = n[e],\n              c = t ? t(f) : f;\n            if (!e || !bn(c, l)) {\n              var l = c;\n              o[s++] = f === 0 ? 0 : f;\n            }\n          }\n          return o;\n        }\n        function uu(n) {\n          return typeof n == \"number\" ? n : pn(n) ? _e : +n;\n        }\n        function ln(n) {\n          if (typeof n == \"string\") return n;\n          if (O(n)) return G(n, ln) + \"\";\n          if (pn(n)) return Ws ? Ws.call(n) : \"\";\n          var t = n + \"\";\n          return t == \"0\" && 1 / n == -ht ? \"-0\" : t;\n        }\n        function it(n, t, e) {\n          var r = -1,\n            s = Ee,\n            o = n.length,\n            f = !0,\n            c = [],\n            l = c;\n          if (e) f = !1, s = Dr;else if (o >= w) {\n            var v = t ? null : kc(n);\n            if (v) return Se(v);\n            f = !1, s = jt, l = new gt();\n          } else l = t ? [] : c;\n          n: for (; ++r < o;) {\n            var _ = n[r],\n              m = t ? t(_) : _;\n            if (_ = e || _ !== 0 ? _ : 0, f && m === m) {\n              for (var P = l.length; P--;) if (l[P] === m) continue n;\n              t && l.push(m), c.push(_);\n            } else s(l, m, e) || (l !== c && l.push(m), c.push(_));\n          }\n          return c;\n        }\n        function si(n, t) {\n          return t = st(t, n), n = Hu(n, t), n == null || delete n[Wn(In(t))];\n        }\n        function au(n, t, e, r) {\n          return fe(n, t, e(_t(n, t)), r);\n        }\n        function Ze(n, t, e, r) {\n          for (var s = n.length, o = r ? s : -1; (r ? o-- : ++o < s) && t(n[o], o, n););\n          return e ? Cn(n, r ? 0 : o, r ? o + 1 : s) : Cn(n, r ? o + 1 : 0, r ? s : o);\n        }\n        function ou(n, t) {\n          var e = n;\n          return e instanceof N && (e = e.value()), Hr(t, function (r, s) {\n            return s.func.apply(s.thisArg, nt([r], s.args));\n          }, e);\n        }\n        function ui(n, t, e) {\n          var r = n.length;\n          if (r < 2) return r ? it(n[0]) : [];\n          for (var s = -1, o = p(r); ++s < r;) for (var f = n[s], c = -1; ++c < r;) c != s && (o[s] = ue(o[s] || f, n[c], t, e));\n          return it(j(o, 1), t, e);\n        }\n        function fu(n, t, e) {\n          for (var r = -1, s = n.length, o = t.length, f = {}; ++r < s;) {\n            var c = r < o ? t[r] : i;\n            e(f, n[r], c);\n          }\n          return f;\n        }\n        function ai(n) {\n          return Z(n) ? n : [];\n        }\n        function oi(n) {\n          return typeof n == \"function\" ? n : fn;\n        }\n        function st(n, t) {\n          return O(n) ? n : _i(n, t) ? [n] : Wu(W(n));\n        }\n        var Bc = T;\n        function ut(n, t, e) {\n          var r = n.length;\n          return e = e === i ? r : e, !t && e >= r ? n : Cn(n, t, e);\n        }\n        var cu = Rf || function (n) {\n          return k.clearTimeout(n);\n        };\n        function hu(n, t) {\n          if (t) return n.slice();\n          var e = n.length,\n            r = Ls ? Ls(e) : new n.constructor(e);\n          return n.copy(r), r;\n        }\n        function fi(n) {\n          var t = new n.constructor(n.byteLength);\n          return new De(t).set(new De(n)), t;\n        }\n        function Gc(n, t) {\n          var e = t ? fi(n.buffer) : n.buffer;\n          return new n.constructor(e, n.byteOffset, n.byteLength);\n        }\n        function zc(n) {\n          var t = new n.constructor(n.source, Ji.exec(n));\n          return t.lastIndex = n.lastIndex, t;\n        }\n        function Kc(n) {\n          return ie ? M(ie.call(n)) : {};\n        }\n        function lu(n, t) {\n          var e = t ? fi(n.buffer) : n.buffer;\n          return new n.constructor(e, n.byteOffset, n.length);\n        }\n        function pu(n, t) {\n          if (n !== t) {\n            var e = n !== i,\n              r = n === null,\n              s = n === n,\n              o = pn(n),\n              f = t !== i,\n              c = t === null,\n              l = t === t,\n              v = pn(t);\n            if (!c && !v && !o && n > t || o && f && l && !c && !v || r && f && l || !e && l || !s) return 1;\n            if (!r && !o && !v && n < t || v && e && s && !r && !o || c && e && s || !f && s || !l) return -1;\n          }\n          return 0;\n        }\n        function Yc(n, t, e) {\n          for (var r = -1, s = n.criteria, o = t.criteria, f = s.length, c = e.length; ++r < f;) {\n            var l = pu(s[r], o[r]);\n            if (l) {\n              if (r >= c) return l;\n              var v = e[r];\n              return l * (v == \"desc\" ? -1 : 1);\n            }\n          }\n          return n.index - t.index;\n        }\n        function du(n, t, e, r) {\n          for (var s = -1, o = n.length, f = e.length, c = -1, l = t.length, v = Q(o - f, 0), _ = p(l + v), m = !r; ++c < l;) _[c] = t[c];\n          for (; ++s < f;) (m || s < o) && (_[e[s]] = n[s]);\n          for (; v--;) _[c++] = n[s++];\n          return _;\n        }\n        function gu(n, t, e, r) {\n          for (var s = -1, o = n.length, f = -1, c = e.length, l = -1, v = t.length, _ = Q(o - c, 0), m = p(_ + v), P = !r; ++s < _;) m[s] = n[s];\n          for (var I = s; ++l < v;) m[I + l] = t[l];\n          for (; ++f < c;) (P || s < o) && (m[I + e[f]] = n[s++]);\n          return m;\n        }\n        function un(n, t) {\n          var e = -1,\n            r = n.length;\n          for (t || (t = p(r)); ++e < r;) t[e] = n[e];\n          return t;\n        }\n        function Un(n, t, e, r) {\n          var s = !e;\n          e || (e = {});\n          for (var o = -1, f = t.length; ++o < f;) {\n            var c = t[o],\n              l = r ? r(e[c], n[c], c, e, n) : i;\n            l === i && (l = n[c]), s ? zn(e, c, l) : se(e, c, l);\n          }\n          return e;\n        }\n        function Zc(n, t) {\n          return Un(n, vi(n), t);\n        }\n        function Jc(n, t) {\n          return Un(n, Ou(n), t);\n        }\n        function Je(n, t) {\n          return function (e, r) {\n            var s = O(e) ? ko : vc,\n              o = t ? t() : {};\n            return s(e, n, x(r, 2), o);\n          };\n        }\n        function Ft(n) {\n          return T(function (t, e) {\n            var r = -1,\n              s = e.length,\n              o = s > 1 ? e[s - 1] : i,\n              f = s > 2 ? e[2] : i;\n            for (o = n.length > 3 && typeof o == \"function\" ? (s--, o) : i, f && rn(e[0], e[1], f) && (o = s < 3 ? i : o, s = 1), t = M(t); ++r < s;) {\n              var c = e[r];\n              c && n(t, c, r, o);\n            }\n            return t;\n          });\n        }\n        function vu(n, t) {\n          return function (e, r) {\n            if (e == null) return e;\n            if (!an(e)) return n(e, r);\n            for (var s = e.length, o = t ? s : -1, f = M(e); (t ? o-- : ++o < s) && r(f[o], o, f) !== !1;);\n            return e;\n          };\n        }\n        function _u(n) {\n          return function (t, e, r) {\n            for (var s = -1, o = M(t), f = r(t), c = f.length; c--;) {\n              var l = f[n ? c : ++s];\n              if (e(o[l], l, o) === !1) break;\n            }\n            return t;\n          };\n        }\n        function Xc(n, t, e) {\n          var r = t & vn,\n            s = ce(n);\n          function o() {\n            var f = this && this !== k && this instanceof o ? s : n;\n            return f.apply(r ? e : this, arguments);\n          }\n          return o;\n        }\n        function mu(n) {\n          return function (t) {\n            t = W(t);\n            var e = Lt(t) ? On(t) : i,\n              r = e ? e[0] : t.charAt(0),\n              s = e ? ut(e, 1).join(\"\") : t.slice(1);\n            return r[n]() + s;\n          };\n        }\n        function Mt(n) {\n          return function (t) {\n            return Hr(va(ga(t).replace(Wo, \"\")), n, \"\");\n          };\n        }\n        function ce(n) {\n          return function () {\n            var t = arguments;\n            switch (t.length) {\n              case 0:\n                return new n();\n              case 1:\n                return new n(t[0]);\n              case 2:\n                return new n(t[0], t[1]);\n              case 3:\n                return new n(t[0], t[1], t[2]);\n              case 4:\n                return new n(t[0], t[1], t[2], t[3]);\n              case 5:\n                return new n(t[0], t[1], t[2], t[3], t[4]);\n              case 6:\n                return new n(t[0], t[1], t[2], t[3], t[4], t[5]);\n              case 7:\n                return new n(t[0], t[1], t[2], t[3], t[4], t[5], t[6]);\n            }\n            var e = Wt(n.prototype),\n              r = n.apply(e, t);\n            return K(r) ? r : e;\n          };\n        }\n        function Qc(n, t, e) {\n          var r = ce(n);\n          function s() {\n            for (var o = arguments.length, f = p(o), c = o, l = qt(s); c--;) f[c] = arguments[c];\n            var v = o < 3 && f[0] !== l && f[o - 1] !== l ? [] : tt(f, l);\n            if (o -= v.length, o < e) return Iu(n, t, Xe, s.placeholder, i, f, v, i, i, e - o);\n            var _ = this && this !== k && this instanceof s ? r : n;\n            return cn(_, this, f);\n          }\n          return s;\n        }\n        function wu(n) {\n          return function (t, e, r) {\n            var s = M(t);\n            if (!an(t)) {\n              var o = x(e, 3);\n              t = V(t), e = function (c) {\n                return o(s[c], c, s);\n              };\n            }\n            var f = n(t, e, r);\n            return f > -1 ? s[o ? t[f] : f] : i;\n          };\n        }\n        function Pu(n) {\n          return Yn(function (t) {\n            var e = t.length,\n              r = e,\n              s = Pn.prototype.thru;\n            for (n && t.reverse(); r--;) {\n              var o = t[r];\n              if (typeof o != \"function\") throw new wn(D);\n              if (s && !f && je(o) == \"wrapper\") var f = new Pn([], !0);\n            }\n            for (r = f ? r : e; ++r < e;) {\n              o = t[r];\n              var c = je(o),\n                l = c == \"wrapper\" ? di(o) : i;\n              l && mi(l[0]) && l[1] == (Mn | Dn | Hn | Kt) && !l[4].length && l[9] == 1 ? f = f[je(l[0])].apply(f, l[3]) : f = o.length == 1 && mi(o) ? f[c]() : f.thru(o);\n            }\n            return function () {\n              var v = arguments,\n                _ = v[0];\n              if (f && v.length == 1 && O(_)) return f.plant(_).value();\n              for (var m = 0, P = e ? t[m].apply(this, v) : _; ++m < e;) P = t[m].call(this, P);\n              return P;\n            };\n          });\n        }\n        function Xe(n, t, e, r, s, o, f, c, l, v) {\n          var _ = t & Mn,\n            m = t & vn,\n            P = t & ct,\n            I = t & (Dn | yt),\n            E = t & dr,\n            b = P ? i : ce(n);\n          function y() {\n            for (var H = arguments.length, $ = p(H), dn = H; dn--;) $[dn] = arguments[dn];\n            if (I) var sn = qt(y),\n              gn = of($, sn);\n            if (r && ($ = du($, r, s, I)), o && ($ = gu($, o, f, I)), H -= gn, I && H < v) {\n              var J = tt($, sn);\n              return Iu(n, t, Xe, y.placeholder, e, $, J, c, l, v - H);\n            }\n            var Tn = m ? e : this,\n              Qn = P ? Tn[n] : n;\n            return H = $.length, c ? $ = vh($, c) : E && H > 1 && $.reverse(), _ && l < H && ($.length = l), this && this !== k && this instanceof y && (Qn = b || ce(Qn)), Qn.apply(Tn, $);\n          }\n          return y;\n        }\n        function Au(n, t) {\n          return function (e, r) {\n            return xc(e, n, t(r), {});\n          };\n        }\n        function Qe(n, t) {\n          return function (e, r) {\n            var s;\n            if (e === i && r === i) return t;\n            if (e !== i && (s = e), r !== i) {\n              if (s === i) return r;\n              typeof e == \"string\" || typeof r == \"string\" ? (e = ln(e), r = ln(r)) : (e = uu(e), r = uu(r)), s = n(e, r);\n            }\n            return s;\n          };\n        }\n        function ci(n) {\n          return Yn(function (t) {\n            return t = G(t, hn(x())), T(function (e) {\n              var r = this;\n              return n(t, function (s) {\n                return cn(s, r, e);\n              });\n            });\n          });\n        }\n        function Ve(n, t) {\n          t = t === i ? \" \" : ln(t);\n          var e = t.length;\n          if (e < 2) return e ? ri(t, n) : t;\n          var r = ri(t, Ue(n / Dt(t)));\n          return Lt(t) ? ut(On(r), 0, n).join(\"\") : r.slice(0, n);\n        }\n        function Vc(n, t, e, r) {\n          var s = t & vn,\n            o = ce(n);\n          function f() {\n            for (var c = -1, l = arguments.length, v = -1, _ = r.length, m = p(_ + l), P = this && this !== k && this instanceof f ? o : n; ++v < _;) m[v] = r[v];\n            for (; l--;) m[v++] = arguments[++c];\n            return cn(P, s ? e : this, m);\n          }\n          return f;\n        }\n        function Cu(n) {\n          return function (t, e, r) {\n            return r && typeof r != \"number\" && rn(t, e, r) && (e = r = i), t = Xn(t), e === i ? (e = t, t = 0) : e = Xn(e), r = r === i ? t < e ? 1 : -1 : Xn(r), $c(t, e, r, n);\n          };\n        }\n        function ke(n) {\n          return function (t, e) {\n            return typeof t == \"string\" && typeof e == \"string\" || (t = xn(t), e = xn(e)), n(t, e);\n          };\n        }\n        function Iu(n, t, e, r, s, o, f, c, l, v) {\n          var _ = t & Dn,\n            m = _ ? f : i,\n            P = _ ? i : f,\n            I = _ ? o : i,\n            E = _ ? i : o;\n          t |= _ ? Hn : St, t &= ~(_ ? St : Hn), t & qi || (t &= ~(vn | ct));\n          var b = [n, t, s, I, m, E, P, c, l, v],\n            y = e.apply(i, b);\n          return mi(n) && Nu(y, b), y.placeholder = r, $u(y, n, t);\n        }\n        function hi(n) {\n          var t = X[n];\n          return function (e, r) {\n            if (e = xn(e), r = r == null ? 0 : nn(R(r), 292), r && $s(e)) {\n              var s = (W(e) + \"e\").split(\"e\"),\n                o = t(s[0] + \"e\" + (+s[1] + r));\n              return s = (W(o) + \"e\").split(\"e\"), +(s[0] + \"e\" + (+s[1] - r));\n            }\n            return t(e);\n          };\n        }\n        var kc = $t && 1 / Se(new $t([, -0]))[1] == ht ? function (n) {\n          return new $t(n);\n        } : Di;\n        function xu(n) {\n          return function (t) {\n            var e = tn(t);\n            return e == yn ? qr(t) : e == Sn ? gf(t) : af(t, n(t));\n          };\n        }\n        function Kn(n, t, e, r, s, o, f, c) {\n          var l = t & ct;\n          if (!l && typeof n != \"function\") throw new wn(D);\n          var v = r ? r.length : 0;\n          if (v || (t &= ~(Hn | St), r = s = i), f = f === i ? f : Q(R(f), 0), c = c === i ? c : R(c), v -= s ? s.length : 0, t & St) {\n            var _ = r,\n              m = s;\n            r = s = i;\n          }\n          var P = l ? i : di(n),\n            I = [n, t, e, r, s, _, m, o, f, c];\n          if (P && ph(I, P), n = I[0], t = I[1], e = I[2], r = I[3], s = I[4], c = I[9] = I[9] === i ? l ? 0 : n.length : Q(I[9] - v, 0), !c && t & (Dn | yt) && (t &= ~(Dn | yt)), !t || t == vn) var E = Xc(n, t, e);else t == Dn || t == yt ? E = Qc(n, t, c) : (t == Hn || t == (vn | Hn)) && !s.length ? E = Vc(n, t, e, r) : E = Xe.apply(i, I);\n          var b = P ? iu : Nu;\n          return $u(b(E, I), n, t);\n        }\n        function Eu(n, t, e, r) {\n          return n === i || bn(n, Nt[e]) && !F.call(r, e) ? t : n;\n        }\n        function yu(n, t, e, r, s, o) {\n          return K(n) && K(t) && (o.set(t, n), Ke(n, t, i, yu, o), o.delete(t)), n;\n        }\n        function jc(n) {\n          return pe(n) ? i : n;\n        }\n        function Su(n, t, e, r, s, o) {\n          var f = e & Et,\n            c = n.length,\n            l = t.length;\n          if (c != l && !(f && l > c)) return !1;\n          var v = o.get(n),\n            _ = o.get(t);\n          if (v && _) return v == t && _ == n;\n          var m = -1,\n            P = !0,\n            I = e & ve ? new gt() : i;\n          for (o.set(n, t), o.set(t, n); ++m < c;) {\n            var E = n[m],\n              b = t[m];\n            if (r) var y = f ? r(b, E, m, t, n, o) : r(E, b, m, n, t, o);\n            if (y !== i) {\n              if (y) continue;\n              P = !1;\n              break;\n            }\n            if (I) {\n              if (!Nr(t, function (H, $) {\n                if (!jt(I, $) && (E === H || s(E, H, e, r, o))) return I.push($);\n              })) {\n                P = !1;\n                break;\n              }\n            } else if (!(E === b || s(E, b, e, r, o))) {\n              P = !1;\n              break;\n            }\n          }\n          return o.delete(n), o.delete(t), P;\n        }\n        function nh(n, t, e, r, s, o, f) {\n          switch (e) {\n            case Rt:\n              if (n.byteLength != t.byteLength || n.byteOffset != t.byteOffset) return !1;\n              n = n.buffer, t = t.buffer;\n            case kt:\n              return !(n.byteLength != t.byteLength || !o(new De(n), new De(t)));\n            case Yt:\n            case Zt:\n            case Jt:\n              return bn(+n, +t);\n            case we:\n              return n.name == t.name && n.message == t.message;\n            case Xt:\n            case Qt:\n              return n == t + \"\";\n            case yn:\n              var c = qr;\n            case Sn:\n              var l = r & Et;\n              if (c || (c = Se), n.size != t.size && !l) return !1;\n              var v = f.get(n);\n              if (v) return v == t;\n              r |= ve, f.set(n, t);\n              var _ = Su(c(n), c(t), r, s, o, f);\n              return f.delete(n), _;\n            case Ae:\n              if (ie) return ie.call(n) == ie.call(t);\n          }\n          return !1;\n        }\n        function th(n, t, e, r, s, o) {\n          var f = e & Et,\n            c = li(n),\n            l = c.length,\n            v = li(t),\n            _ = v.length;\n          if (l != _ && !f) return !1;\n          for (var m = l; m--;) {\n            var P = c[m];\n            if (!(f ? P in t : F.call(t, P))) return !1;\n          }\n          var I = o.get(n),\n            E = o.get(t);\n          if (I && E) return I == t && E == n;\n          var b = !0;\n          o.set(n, t), o.set(t, n);\n          for (var y = f; ++m < l;) {\n            P = c[m];\n            var H = n[P],\n              $ = t[P];\n            if (r) var dn = f ? r($, H, P, t, n, o) : r(H, $, P, n, t, o);\n            if (!(dn === i ? H === $ || s(H, $, e, r, o) : dn)) {\n              b = !1;\n              break;\n            }\n            y || (y = P == \"constructor\");\n          }\n          if (b && !y) {\n            var sn = n.constructor,\n              gn = t.constructor;\n            sn != gn && \"constructor\" in n && \"constructor\" in t && !(typeof sn == \"function\" && sn instanceof sn && typeof gn == \"function\" && gn instanceof gn) && (b = !1);\n          }\n          return o.delete(n), o.delete(t), b;\n        }\n        function Yn(n) {\n          return Pi(Du(n, i, Bu), n + \"\");\n        }\n        function li(n) {\n          return Zs(n, V, vi);\n        }\n        function pi(n) {\n          return Zs(n, on, Ou);\n        }\n        var di = Fe ? function (n) {\n          return Fe.get(n);\n        } : Di;\n        function je(n) {\n          for (var t = n.name + \"\", e = Ut[t], r = F.call(Ut, t) ? e.length : 0; r--;) {\n            var s = e[r],\n              o = s.func;\n            if (o == null || o == n) return s.name;\n          }\n          return t;\n        }\n        function qt(n) {\n          var t = F.call(a, \"placeholder\") ? a : n;\n          return t.placeholder;\n        }\n        function x() {\n          var n = a.iteratee || Ti;\n          return n = n === Ti ? Qs : n, arguments.length ? n(arguments[0], arguments[1]) : n;\n        }\n        function nr(n, t) {\n          var e = n.__data__;\n          return fh(t) ? e[typeof t == \"string\" ? \"string\" : \"hash\"] : e.map;\n        }\n        function gi(n) {\n          for (var t = V(n), e = t.length; e--;) {\n            var r = t[e],\n              s = n[r];\n            t[e] = [r, s, Tu(s)];\n          }\n          return t;\n        }\n        function mt(n, t) {\n          var e = lf(n, t);\n          return Xs(e) ? e : i;\n        }\n        function eh(n) {\n          var t = F.call(n, pt),\n            e = n[pt];\n          try {\n            n[pt] = i;\n            var r = !0;\n          } catch {}\n          var s = Te.call(n);\n          return r && (t ? n[pt] = e : delete n[pt]), s;\n        }\n        var vi = Gr ? function (n) {\n            return n == null ? [] : (n = M(n), jn(Gr(n), function (t) {\n              return Hs.call(n, t);\n            }));\n          } : Hi,\n          Ou = Gr ? function (n) {\n            for (var t = []; n;) nt(t, vi(n)), n = He(n);\n            return t;\n          } : Hi,\n          tn = en;\n        (zr && tn(new zr(new ArrayBuffer(1))) != Rt || te && tn(new te()) != yn || Kr && tn(Kr.resolve()) != zi || $t && tn(new $t()) != Sn || ee && tn(new ee()) != Vt) && (tn = function (n) {\n          var t = en(n),\n            e = t == qn ? n.constructor : i,\n            r = e ? wt(e) : \"\";\n          if (r) switch (r) {\n            case Wf:\n              return Rt;\n            case Ff:\n              return yn;\n            case Mf:\n              return zi;\n            case qf:\n              return Sn;\n            case Bf:\n              return Vt;\n          }\n          return t;\n        });\n        function rh(n, t, e) {\n          for (var r = -1, s = e.length; ++r < s;) {\n            var o = e[r],\n              f = o.size;\n            switch (o.type) {\n              case \"drop\":\n                n += f;\n                break;\n              case \"dropRight\":\n                t -= f;\n                break;\n              case \"take\":\n                t = nn(t, n + f);\n                break;\n              case \"takeRight\":\n                n = Q(n, t - f);\n                break;\n            }\n          }\n          return {\n            start: n,\n            end: t\n          };\n        }\n        function ih(n) {\n          var t = n.match(oo);\n          return t ? t[1].split(fo) : [];\n        }\n        function Ru(n, t, e) {\n          t = st(t, n);\n          for (var r = -1, s = t.length, o = !1; ++r < s;) {\n            var f = Wn(t[r]);\n            if (!(o = n != null && e(n, f))) break;\n            n = n[f];\n          }\n          return o || ++r != s ? o : (s = n == null ? 0 : n.length, !!s && ar(s) && Zn(f, s) && (O(n) || Pt(n)));\n        }\n        function sh(n) {\n          var t = n.length,\n            e = new n.constructor(t);\n          return t && typeof n[0] == \"string\" && F.call(n, \"index\") && (e.index = n.index, e.input = n.input), e;\n        }\n        function bu(n) {\n          return typeof n.constructor == \"function\" && !he(n) ? Wt(He(n)) : {};\n        }\n        function uh(n, t, e) {\n          var r = n.constructor;\n          switch (t) {\n            case kt:\n              return fi(n);\n            case Yt:\n            case Zt:\n              return new r(+n);\n            case Rt:\n              return Gc(n, e);\n            case gr:\n            case vr:\n            case _r:\n            case mr:\n            case wr:\n            case Pr:\n            case Ar:\n            case Cr:\n            case Ir:\n              return lu(n, e);\n            case yn:\n              return new r();\n            case Jt:\n            case Qt:\n              return new r(n);\n            case Xt:\n              return zc(n);\n            case Sn:\n              return new r();\n            case Ae:\n              return Kc(n);\n          }\n        }\n        function ah(n, t) {\n          var e = t.length;\n          if (!e) return n;\n          var r = e - 1;\n          return t[r] = (e > 1 ? \"& \" : \"\") + t[r], t = t.join(e > 2 ? \", \" : \" \"), n.replace(ao, `{\n/* [wrapped with ` + t + `] */\n`);\n        }\n        function oh(n) {\n          return O(n) || Pt(n) || !!(Ns && n && n[Ns]);\n        }\n        function Zn(n, t) {\n          var e = typeof n;\n          return t = t ?? kn, !!t && (e == \"number\" || e != \"symbol\" && wo.test(n)) && n > -1 && n % 1 == 0 && n < t;\n        }\n        function rn(n, t, e) {\n          if (!K(e)) return !1;\n          var r = typeof t;\n          return (r == \"number\" ? an(e) && Zn(t, e.length) : r == \"string\" && t in e) ? bn(e[t], n) : !1;\n        }\n        function _i(n, t) {\n          if (O(n)) return !1;\n          var e = typeof n;\n          return e == \"number\" || e == \"symbol\" || e == \"boolean\" || n == null || pn(n) ? !0 : ro.test(n) || !eo.test(n) || t != null && n in M(t);\n        }\n        function fh(n) {\n          var t = typeof n;\n          return t == \"string\" || t == \"number\" || t == \"symbol\" || t == \"boolean\" ? n !== \"__proto__\" : n === null;\n        }\n        function mi(n) {\n          var t = je(n),\n            e = a[t];\n          if (typeof e != \"function\" || !(t in N.prototype)) return !1;\n          if (n === e) return !0;\n          var r = di(e);\n          return !!r && n === r[0];\n        }\n        function ch(n) {\n          return !!Ts && Ts in n;\n        }\n        var hh = Re ? Jn : Ni;\n        function he(n) {\n          var t = n && n.constructor,\n            e = typeof t == \"function\" && t.prototype || Nt;\n          return n === e;\n        }\n        function Tu(n) {\n          return n === n && !K(n);\n        }\n        function Lu(n, t) {\n          return function (e) {\n            return e == null ? !1 : e[n] === t && (t !== i || n in M(e));\n          };\n        }\n        function lh(n) {\n          var t = sr(n, function (r) {\n              return e.size === pr && e.clear(), r;\n            }),\n            e = t.cache;\n          return t;\n        }\n        function ph(n, t) {\n          var e = n[1],\n            r = t[1],\n            s = e | r,\n            o = s < (vn | ct | Mn),\n            f = r == Mn && e == Dn || r == Mn && e == Kt && n[7].length <= t[8] || r == (Mn | Kt) && t[7].length <= t[8] && e == Dn;\n          if (!(o || f)) return n;\n          r & vn && (n[2] = t[2], s |= e & vn ? 0 : qi);\n          var c = t[3];\n          if (c) {\n            var l = n[3];\n            n[3] = l ? du(l, c, t[4]) : c, n[4] = l ? tt(n[3], It) : t[4];\n          }\n          return c = t[5], c && (l = n[5], n[5] = l ? gu(l, c, t[6]) : c, n[6] = l ? tt(n[5], It) : t[6]), c = t[7], c && (n[7] = c), r & Mn && (n[8] = n[8] == null ? t[8] : nn(n[8], t[8])), n[9] == null && (n[9] = t[9]), n[0] = t[0], n[1] = s, n;\n        }\n        function dh(n) {\n          var t = [];\n          if (n != null) for (var e in M(n)) t.push(e);\n          return t;\n        }\n        function gh(n) {\n          return Te.call(n);\n        }\n        function Du(n, t, e) {\n          return t = Q(t === i ? n.length - 1 : t, 0), function () {\n            for (var r = arguments, s = -1, o = Q(r.length - t, 0), f = p(o); ++s < o;) f[s] = r[t + s];\n            s = -1;\n            for (var c = p(t + 1); ++s < t;) c[s] = r[s];\n            return c[t] = e(f), cn(n, this, c);\n          };\n        }\n        function Hu(n, t) {\n          return t.length < 2 ? n : _t(n, Cn(t, 0, -1));\n        }\n        function vh(n, t) {\n          for (var e = n.length, r = nn(t.length, e), s = un(n); r--;) {\n            var o = t[r];\n            n[r] = Zn(o, e) ? s[o] : i;\n          }\n          return n;\n        }\n        function wi(n, t) {\n          if (!(t === \"constructor\" && typeof n[t] == \"function\") && t != \"__proto__\") return n[t];\n        }\n        var Nu = Uu(iu),\n          le = Tf || function (n, t) {\n            return k.setTimeout(n, t);\n          },\n          Pi = Uu(Fc);\n        function $u(n, t, e) {\n          var r = t + \"\";\n          return Pi(n, ah(r, _h(ih(r), e)));\n        }\n        function Uu(n) {\n          var t = 0,\n            e = 0;\n          return function () {\n            var r = Nf(),\n              s = $a - (r - e);\n            if (e = r, s > 0) {\n              if (++t >= Na) return arguments[0];\n            } else t = 0;\n            return n.apply(i, arguments);\n          };\n        }\n        function tr(n, t) {\n          var e = -1,\n            r = n.length,\n            s = r - 1;\n          for (t = t === i ? r : t; ++e < t;) {\n            var o = ei(e, s),\n              f = n[o];\n            n[o] = n[e], n[e] = f;\n          }\n          return n.length = t, n;\n        }\n        var Wu = lh(function (n) {\n          var t = [];\n          return n.charCodeAt(0) === 46 && t.push(\"\"), n.replace(io, function (e, r, s, o) {\n            t.push(s ? o.replace(lo, \"$1\") : r || e);\n          }), t;\n        });\n        function Wn(n) {\n          if (typeof n == \"string\" || pn(n)) return n;\n          var t = n + \"\";\n          return t == \"0\" && 1 / n == -ht ? \"-0\" : t;\n        }\n        function wt(n) {\n          if (n != null) {\n            try {\n              return be.call(n);\n            } catch {}\n            try {\n              return n + \"\";\n            } catch {}\n          }\n          return \"\";\n        }\n        function _h(n, t) {\n          return mn(Ba, function (e) {\n            var r = \"_.\" + e[0];\n            t & e[1] && !Ee(n, r) && n.push(r);\n          }), n.sort();\n        }\n        function Fu(n) {\n          if (n instanceof N) return n.clone();\n          var t = new Pn(n.__wrapped__, n.__chain__);\n          return t.__actions__ = un(n.__actions__), t.__index__ = n.__index__, t.__values__ = n.__values__, t;\n        }\n        function mh(n, t, e) {\n          (e ? rn(n, t, e) : t === i) ? t = 1 : t = Q(R(t), 0);\n          var r = n == null ? 0 : n.length;\n          if (!r || t < 1) return [];\n          for (var s = 0, o = 0, f = p(Ue(r / t)); s < r;) f[o++] = Cn(n, s, s += t);\n          return f;\n        }\n        function wh(n) {\n          for (var t = -1, e = n == null ? 0 : n.length, r = 0, s = []; ++t < e;) {\n            var o = n[t];\n            o && (s[r++] = o);\n          }\n          return s;\n        }\n        function Ph() {\n          var n = arguments.length;\n          if (!n) return [];\n          for (var t = p(n - 1), e = arguments[0], r = n; r--;) t[r - 1] = arguments[r];\n          return nt(O(e) ? un(e) : [e], j(t, 1));\n        }\n        var Ah = T(function (n, t) {\n            return Z(n) ? ue(n, j(t, 1, Z, !0)) : [];\n          }),\n          Ch = T(function (n, t) {\n            var e = In(t);\n            return Z(e) && (e = i), Z(n) ? ue(n, j(t, 1, Z, !0), x(e, 2)) : [];\n          }),\n          Ih = T(function (n, t) {\n            var e = In(t);\n            return Z(e) && (e = i), Z(n) ? ue(n, j(t, 1, Z, !0), i, e) : [];\n          });\n        function xh(n, t, e) {\n          var r = n == null ? 0 : n.length;\n          return r ? (t = e || t === i ? 1 : R(t), Cn(n, t < 0 ? 0 : t, r)) : [];\n        }\n        function Eh(n, t, e) {\n          var r = n == null ? 0 : n.length;\n          return r ? (t = e || t === i ? 1 : R(t), t = r - t, Cn(n, 0, t < 0 ? 0 : t)) : [];\n        }\n        function yh(n, t) {\n          return n && n.length ? Ze(n, x(t, 3), !0, !0) : [];\n        }\n        function Sh(n, t) {\n          return n && n.length ? Ze(n, x(t, 3), !0) : [];\n        }\n        function Oh(n, t, e, r) {\n          var s = n == null ? 0 : n.length;\n          return s ? (e && typeof e != \"number\" && rn(n, t, e) && (e = 0, r = s), Pc(n, t, e, r)) : [];\n        }\n        function Mu(n, t, e) {\n          var r = n == null ? 0 : n.length;\n          if (!r) return -1;\n          var s = e == null ? 0 : R(e);\n          return s < 0 && (s = Q(r + s, 0)), ye(n, x(t, 3), s);\n        }\n        function qu(n, t, e) {\n          var r = n == null ? 0 : n.length;\n          if (!r) return -1;\n          var s = r - 1;\n          return e !== i && (s = R(e), s = e < 0 ? Q(r + s, 0) : nn(s, r - 1)), ye(n, x(t, 3), s, !0);\n        }\n        function Bu(n) {\n          var t = n == null ? 0 : n.length;\n          return t ? j(n, 1) : [];\n        }\n        function Rh(n) {\n          var t = n == null ? 0 : n.length;\n          return t ? j(n, ht) : [];\n        }\n        function bh(n, t) {\n          var e = n == null ? 0 : n.length;\n          return e ? (t = t === i ? 1 : R(t), j(n, t)) : [];\n        }\n        function Th(n) {\n          for (var t = -1, e = n == null ? 0 : n.length, r = {}; ++t < e;) {\n            var s = n[t];\n            r[s[0]] = s[1];\n          }\n          return r;\n        }\n        function Gu(n) {\n          return n && n.length ? n[0] : i;\n        }\n        function Lh(n, t, e) {\n          var r = n == null ? 0 : n.length;\n          if (!r) return -1;\n          var s = e == null ? 0 : R(e);\n          return s < 0 && (s = Q(r + s, 0)), Tt(n, t, s);\n        }\n        function Dh(n) {\n          var t = n == null ? 0 : n.length;\n          return t ? Cn(n, 0, -1) : [];\n        }\n        var Hh = T(function (n) {\n            var t = G(n, ai);\n            return t.length && t[0] === n[0] ? Vr(t) : [];\n          }),\n          Nh = T(function (n) {\n            var t = In(n),\n              e = G(n, ai);\n            return t === In(e) ? t = i : e.pop(), e.length && e[0] === n[0] ? Vr(e, x(t, 2)) : [];\n          }),\n          $h = T(function (n) {\n            var t = In(n),\n              e = G(n, ai);\n            return t = typeof t == \"function\" ? t : i, t && e.pop(), e.length && e[0] === n[0] ? Vr(e, i, t) : [];\n          });\n        function Uh(n, t) {\n          return n == null ? \"\" : Df.call(n, t);\n        }\n        function In(n) {\n          var t = n == null ? 0 : n.length;\n          return t ? n[t - 1] : i;\n        }\n        function Wh(n, t, e) {\n          var r = n == null ? 0 : n.length;\n          if (!r) return -1;\n          var s = r;\n          return e !== i && (s = R(e), s = s < 0 ? Q(r + s, 0) : nn(s, r - 1)), t === t ? _f(n, t, s) : ye(n, Is, s, !0);\n        }\n        function Fh(n, t) {\n          return n && n.length ? nu(n, R(t)) : i;\n        }\n        var Mh = T(zu);\n        function zu(n, t) {\n          return n && n.length && t && t.length ? ti(n, t) : n;\n        }\n        function qh(n, t, e) {\n          return n && n.length && t && t.length ? ti(n, t, x(e, 2)) : n;\n        }\n        function Bh(n, t, e) {\n          return n && n.length && t && t.length ? ti(n, t, i, e) : n;\n        }\n        var Gh = Yn(function (n, t) {\n          var e = n == null ? 0 : n.length,\n            r = Zr(n, t);\n          return ru(n, G(t, function (s) {\n            return Zn(s, e) ? +s : s;\n          }).sort(pu)), r;\n        });\n        function zh(n, t) {\n          var e = [];\n          if (!(n && n.length)) return e;\n          var r = -1,\n            s = [],\n            o = n.length;\n          for (t = x(t, 3); ++r < o;) {\n            var f = n[r];\n            t(f, r, n) && (e.push(f), s.push(r));\n          }\n          return ru(n, s), e;\n        }\n        function Ai(n) {\n          return n == null ? n : Uf.call(n);\n        }\n        function Kh(n, t, e) {\n          var r = n == null ? 0 : n.length;\n          return r ? (e && typeof e != \"number\" && rn(n, t, e) ? (t = 0, e = r) : (t = t == null ? 0 : R(t), e = e === i ? r : R(e)), Cn(n, t, e)) : [];\n        }\n        function Yh(n, t) {\n          return Ye(n, t);\n        }\n        function Zh(n, t, e) {\n          return ii(n, t, x(e, 2));\n        }\n        function Jh(n, t) {\n          var e = n == null ? 0 : n.length;\n          if (e) {\n            var r = Ye(n, t);\n            if (r < e && bn(n[r], t)) return r;\n          }\n          return -1;\n        }\n        function Xh(n, t) {\n          return Ye(n, t, !0);\n        }\n        function Qh(n, t, e) {\n          return ii(n, t, x(e, 2), !0);\n        }\n        function Vh(n, t) {\n          var e = n == null ? 0 : n.length;\n          if (e) {\n            var r = Ye(n, t, !0) - 1;\n            if (bn(n[r], t)) return r;\n          }\n          return -1;\n        }\n        function kh(n) {\n          return n && n.length ? su(n) : [];\n        }\n        function jh(n, t) {\n          return n && n.length ? su(n, x(t, 2)) : [];\n        }\n        function nl(n) {\n          var t = n == null ? 0 : n.length;\n          return t ? Cn(n, 1, t) : [];\n        }\n        function tl(n, t, e) {\n          return n && n.length ? (t = e || t === i ? 1 : R(t), Cn(n, 0, t < 0 ? 0 : t)) : [];\n        }\n        function el(n, t, e) {\n          var r = n == null ? 0 : n.length;\n          return r ? (t = e || t === i ? 1 : R(t), t = r - t, Cn(n, t < 0 ? 0 : t, r)) : [];\n        }\n        function rl(n, t) {\n          return n && n.length ? Ze(n, x(t, 3), !1, !0) : [];\n        }\n        function il(n, t) {\n          return n && n.length ? Ze(n, x(t, 3)) : [];\n        }\n        var sl = T(function (n) {\n            return it(j(n, 1, Z, !0));\n          }),\n          ul = T(function (n) {\n            var t = In(n);\n            return Z(t) && (t = i), it(j(n, 1, Z, !0), x(t, 2));\n          }),\n          al = T(function (n) {\n            var t = In(n);\n            return t = typeof t == \"function\" ? t : i, it(j(n, 1, Z, !0), i, t);\n          });\n        function ol(n) {\n          return n && n.length ? it(n) : [];\n        }\n        function fl(n, t) {\n          return n && n.length ? it(n, x(t, 2)) : [];\n        }\n        function cl(n, t) {\n          return t = typeof t == \"function\" ? t : i, n && n.length ? it(n, i, t) : [];\n        }\n        function Ci(n) {\n          if (!(n && n.length)) return [];\n          var t = 0;\n          return n = jn(n, function (e) {\n            if (Z(e)) return t = Q(e.length, t), !0;\n          }), Fr(t, function (e) {\n            return G(n, $r(e));\n          });\n        }\n        function Ku(n, t) {\n          if (!(n && n.length)) return [];\n          var e = Ci(n);\n          return t == null ? e : G(e, function (r) {\n            return cn(t, i, r);\n          });\n        }\n        var hl = T(function (n, t) {\n            return Z(n) ? ue(n, t) : [];\n          }),\n          ll = T(function (n) {\n            return ui(jn(n, Z));\n          }),\n          pl = T(function (n) {\n            var t = In(n);\n            return Z(t) && (t = i), ui(jn(n, Z), x(t, 2));\n          }),\n          dl = T(function (n) {\n            var t = In(n);\n            return t = typeof t == \"function\" ? t : i, ui(jn(n, Z), i, t);\n          }),\n          gl = T(Ci);\n        function vl(n, t) {\n          return fu(n || [], t || [], se);\n        }\n        function _l(n, t) {\n          return fu(n || [], t || [], fe);\n        }\n        var ml = T(function (n) {\n          var t = n.length,\n            e = t > 1 ? n[t - 1] : i;\n          return e = typeof e == \"function\" ? (n.pop(), e) : i, Ku(n, e);\n        });\n        function Yu(n) {\n          var t = a(n);\n          return t.__chain__ = !0, t;\n        }\n        function wl(n, t) {\n          return t(n), n;\n        }\n        function er(n, t) {\n          return t(n);\n        }\n        var Pl = Yn(function (n) {\n          var t = n.length,\n            e = t ? n[0] : 0,\n            r = this.__wrapped__,\n            s = function (o) {\n              return Zr(o, n);\n            };\n          return t > 1 || this.__actions__.length || !(r instanceof N) || !Zn(e) ? this.thru(s) : (r = r.slice(e, +e + (t ? 1 : 0)), r.__actions__.push({\n            func: er,\n            args: [s],\n            thisArg: i\n          }), new Pn(r, this.__chain__).thru(function (o) {\n            return t && !o.length && o.push(i), o;\n          }));\n        });\n        function Al() {\n          return Yu(this);\n        }\n        function Cl() {\n          return new Pn(this.value(), this.__chain__);\n        }\n        function Il() {\n          this.__values__ === i && (this.__values__ = ua(this.value()));\n          var n = this.__index__ >= this.__values__.length,\n            t = n ? i : this.__values__[this.__index__++];\n          return {\n            done: n,\n            value: t\n          };\n        }\n        function xl() {\n          return this;\n        }\n        function El(n) {\n          for (var t, e = this; e instanceof qe;) {\n            var r = Fu(e);\n            r.__index__ = 0, r.__values__ = i, t ? s.__wrapped__ = r : t = r;\n            var s = r;\n            e = e.__wrapped__;\n          }\n          return s.__wrapped__ = n, t;\n        }\n        function yl() {\n          var n = this.__wrapped__;\n          if (n instanceof N) {\n            var t = n;\n            return this.__actions__.length && (t = new N(this)), t = t.reverse(), t.__actions__.push({\n              func: er,\n              args: [Ai],\n              thisArg: i\n            }), new Pn(t, this.__chain__);\n          }\n          return this.thru(Ai);\n        }\n        function Sl() {\n          return ou(this.__wrapped__, this.__actions__);\n        }\n        var Ol = Je(function (n, t, e) {\n          F.call(n, e) ? ++n[e] : zn(n, e, 1);\n        });\n        function Rl(n, t, e) {\n          var r = O(n) ? As : wc;\n          return e && rn(n, t, e) && (t = i), r(n, x(t, 3));\n        }\n        function bl(n, t) {\n          var e = O(n) ? jn : Ks;\n          return e(n, x(t, 3));\n        }\n        var Tl = wu(Mu),\n          Ll = wu(qu);\n        function Dl(n, t) {\n          return j(rr(n, t), 1);\n        }\n        function Hl(n, t) {\n          return j(rr(n, t), ht);\n        }\n        function Nl(n, t, e) {\n          return e = e === i ? 1 : R(e), j(rr(n, t), e);\n        }\n        function Zu(n, t) {\n          var e = O(n) ? mn : rt;\n          return e(n, x(t, 3));\n        }\n        function Ju(n, t) {\n          var e = O(n) ? jo : zs;\n          return e(n, x(t, 3));\n        }\n        var $l = Je(function (n, t, e) {\n          F.call(n, e) ? n[e].push(t) : zn(n, e, [t]);\n        });\n        function Ul(n, t, e, r) {\n          n = an(n) ? n : Gt(n), e = e && !r ? R(e) : 0;\n          var s = n.length;\n          return e < 0 && (e = Q(s + e, 0)), or(n) ? e <= s && n.indexOf(t, e) > -1 : !!s && Tt(n, t, e) > -1;\n        }\n        var Wl = T(function (n, t, e) {\n            var r = -1,\n              s = typeof t == \"function\",\n              o = an(n) ? p(n.length) : [];\n            return rt(n, function (f) {\n              o[++r] = s ? cn(t, f, e) : ae(f, t, e);\n            }), o;\n          }),\n          Fl = Je(function (n, t, e) {\n            zn(n, e, t);\n          });\n        function rr(n, t) {\n          var e = O(n) ? G : Vs;\n          return e(n, x(t, 3));\n        }\n        function Ml(n, t, e, r) {\n          return n == null ? [] : (O(t) || (t = t == null ? [] : [t]), e = r ? i : e, O(e) || (e = e == null ? [] : [e]), tu(n, t, e));\n        }\n        var ql = Je(function (n, t, e) {\n          n[e ? 0 : 1].push(t);\n        }, function () {\n          return [[], []];\n        });\n        function Bl(n, t, e) {\n          var r = O(n) ? Hr : Es,\n            s = arguments.length < 3;\n          return r(n, x(t, 4), e, s, rt);\n        }\n        function Gl(n, t, e) {\n          var r = O(n) ? nf : Es,\n            s = arguments.length < 3;\n          return r(n, x(t, 4), e, s, zs);\n        }\n        function zl(n, t) {\n          var e = O(n) ? jn : Ks;\n          return e(n, ur(x(t, 3)));\n        }\n        function Kl(n) {\n          var t = O(n) ? Ms : Uc;\n          return t(n);\n        }\n        function Yl(n, t, e) {\n          (e ? rn(n, t, e) : t === i) ? t = 1 : t = R(t);\n          var r = O(n) ? dc : Wc;\n          return r(n, t);\n        }\n        function Zl(n) {\n          var t = O(n) ? gc : Mc;\n          return t(n);\n        }\n        function Jl(n) {\n          if (n == null) return 0;\n          if (an(n)) return or(n) ? Dt(n) : n.length;\n          var t = tn(n);\n          return t == yn || t == Sn ? n.size : jr(n).length;\n        }\n        function Xl(n, t, e) {\n          var r = O(n) ? Nr : qc;\n          return e && rn(n, t, e) && (t = i), r(n, x(t, 3));\n        }\n        var Ql = T(function (n, t) {\n            if (n == null) return [];\n            var e = t.length;\n            return e > 1 && rn(n, t[0], t[1]) ? t = [] : e > 2 && rn(t[0], t[1], t[2]) && (t = [t[0]]), tu(n, j(t, 1), []);\n          }),\n          ir = bf || function () {\n            return k.Date.now();\n          };\n        function Vl(n, t) {\n          if (typeof t != \"function\") throw new wn(D);\n          return n = R(n), function () {\n            if (--n < 1) return t.apply(this, arguments);\n          };\n        }\n        function Xu(n, t, e) {\n          return t = e ? i : t, t = n && t == null ? n.length : t, Kn(n, Mn, i, i, i, i, t);\n        }\n        function Qu(n, t) {\n          var e;\n          if (typeof t != \"function\") throw new wn(D);\n          return n = R(n), function () {\n            return --n > 0 && (e = t.apply(this, arguments)), n <= 1 && (t = i), e;\n          };\n        }\n        var Ii = T(function (n, t, e) {\n            var r = vn;\n            if (e.length) {\n              var s = tt(e, qt(Ii));\n              r |= Hn;\n            }\n            return Kn(n, r, t, e, s);\n          }),\n          Vu = T(function (n, t, e) {\n            var r = vn | ct;\n            if (e.length) {\n              var s = tt(e, qt(Vu));\n              r |= Hn;\n            }\n            return Kn(t, r, n, e, s);\n          });\n        function ku(n, t, e) {\n          t = e ? i : t;\n          var r = Kn(n, Dn, i, i, i, i, i, t);\n          return r.placeholder = ku.placeholder, r;\n        }\n        function ju(n, t, e) {\n          t = e ? i : t;\n          var r = Kn(n, yt, i, i, i, i, i, t);\n          return r.placeholder = ju.placeholder, r;\n        }\n        function na(n, t, e) {\n          var r,\n            s,\n            o,\n            f,\n            c,\n            l,\n            v = 0,\n            _ = !1,\n            m = !1,\n            P = !0;\n          if (typeof n != \"function\") throw new wn(D);\n          t = xn(t) || 0, K(e) && (_ = !!e.leading, m = \"maxWait\" in e, o = m ? Q(xn(e.maxWait) || 0, t) : o, P = \"trailing\" in e ? !!e.trailing : P);\n          function I(J) {\n            var Tn = r,\n              Qn = s;\n            return r = s = i, v = J, f = n.apply(Qn, Tn), f;\n          }\n          function E(J) {\n            return v = J, c = le(H, t), _ ? I(J) : f;\n          }\n          function b(J) {\n            var Tn = J - l,\n              Qn = J - v,\n              wa = t - Tn;\n            return m ? nn(wa, o - Qn) : wa;\n          }\n          function y(J) {\n            var Tn = J - l,\n              Qn = J - v;\n            return l === i || Tn >= t || Tn < 0 || m && Qn >= o;\n          }\n          function H() {\n            var J = ir();\n            if (y(J)) return $(J);\n            c = le(H, b(J));\n          }\n          function $(J) {\n            return c = i, P && r ? I(J) : (r = s = i, f);\n          }\n          function dn() {\n            c !== i && cu(c), v = 0, r = l = s = c = i;\n          }\n          function sn() {\n            return c === i ? f : $(ir());\n          }\n          function gn() {\n            var J = ir(),\n              Tn = y(J);\n            if (r = arguments, s = this, l = J, Tn) {\n              if (c === i) return E(l);\n              if (m) return cu(c), c = le(H, t), I(l);\n            }\n            return c === i && (c = le(H, t)), f;\n          }\n          return gn.cancel = dn, gn.flush = sn, gn;\n        }\n        var kl = T(function (n, t) {\n            return Gs(n, 1, t);\n          }),\n          jl = T(function (n, t, e) {\n            return Gs(n, xn(t) || 0, e);\n          });\n        function np(n) {\n          return Kn(n, dr);\n        }\n        function sr(n, t) {\n          if (typeof n != \"function\" || t != null && typeof t != \"function\") throw new wn(D);\n          var e = function () {\n            var r = arguments,\n              s = t ? t.apply(this, r) : r[0],\n              o = e.cache;\n            if (o.has(s)) return o.get(s);\n            var f = n.apply(this, r);\n            return e.cache = o.set(s, f) || o, f;\n          };\n          return e.cache = new (sr.Cache || Gn)(), e;\n        }\n        sr.Cache = Gn;\n        function ur(n) {\n          if (typeof n != \"function\") throw new wn(D);\n          return function () {\n            var t = arguments;\n            switch (t.length) {\n              case 0:\n                return !n.call(this);\n              case 1:\n                return !n.call(this, t[0]);\n              case 2:\n                return !n.call(this, t[0], t[1]);\n              case 3:\n                return !n.call(this, t[0], t[1], t[2]);\n            }\n            return !n.apply(this, t);\n          };\n        }\n        function tp(n) {\n          return Qu(2, n);\n        }\n        var ep = Bc(function (n, t) {\n            t = t.length == 1 && O(t[0]) ? G(t[0], hn(x())) : G(j(t, 1), hn(x()));\n            var e = t.length;\n            return T(function (r) {\n              for (var s = -1, o = nn(r.length, e); ++s < o;) r[s] = t[s].call(this, r[s]);\n              return cn(n, this, r);\n            });\n          }),\n          xi = T(function (n, t) {\n            var e = tt(t, qt(xi));\n            return Kn(n, Hn, i, t, e);\n          }),\n          ta = T(function (n, t) {\n            var e = tt(t, qt(ta));\n            return Kn(n, St, i, t, e);\n          }),\n          rp = Yn(function (n, t) {\n            return Kn(n, Kt, i, i, i, t);\n          });\n        function ip(n, t) {\n          if (typeof n != \"function\") throw new wn(D);\n          return t = t === i ? t : R(t), T(n, t);\n        }\n        function sp(n, t) {\n          if (typeof n != \"function\") throw new wn(D);\n          return t = t == null ? 0 : Q(R(t), 0), T(function (e) {\n            var r = e[t],\n              s = ut(e, 0, t);\n            return r && nt(s, r), cn(n, this, s);\n          });\n        }\n        function up(n, t, e) {\n          var r = !0,\n            s = !0;\n          if (typeof n != \"function\") throw new wn(D);\n          return K(e) && (r = \"leading\" in e ? !!e.leading : r, s = \"trailing\" in e ? !!e.trailing : s), na(n, t, {\n            leading: r,\n            maxWait: t,\n            trailing: s\n          });\n        }\n        function ap(n) {\n          return Xu(n, 1);\n        }\n        function op(n, t) {\n          return xi(oi(t), n);\n        }\n        function fp() {\n          if (!arguments.length) return [];\n          var n = arguments[0];\n          return O(n) ? n : [n];\n        }\n        function cp(n) {\n          return An(n, xt);\n        }\n        function hp(n, t) {\n          return t = typeof t == \"function\" ? t : i, An(n, xt, t);\n        }\n        function lp(n) {\n          return An(n, Ln | xt);\n        }\n        function pp(n, t) {\n          return t = typeof t == \"function\" ? t : i, An(n, Ln | xt, t);\n        }\n        function dp(n, t) {\n          return t == null || Bs(n, t, V(t));\n        }\n        function bn(n, t) {\n          return n === t || n !== n && t !== t;\n        }\n        var gp = ke(Qr),\n          vp = ke(function (n, t) {\n            return n >= t;\n          }),\n          Pt = Js(function () {\n            return arguments;\n          }()) ? Js : function (n) {\n            return Y(n) && F.call(n, \"callee\") && !Hs.call(n, \"callee\");\n          },\n          O = p.isArray,\n          _p = gs ? hn(gs) : Ec;\n        function an(n) {\n          return n != null && ar(n.length) && !Jn(n);\n        }\n        function Z(n) {\n          return Y(n) && an(n);\n        }\n        function mp(n) {\n          return n === !0 || n === !1 || Y(n) && en(n) == Yt;\n        }\n        var at = Lf || Ni,\n          wp = vs ? hn(vs) : yc;\n        function Pp(n) {\n          return Y(n) && n.nodeType === 1 && !pe(n);\n        }\n        function Ap(n) {\n          if (n == null) return !0;\n          if (an(n) && (O(n) || typeof n == \"string\" || typeof n.splice == \"function\" || at(n) || Bt(n) || Pt(n))) return !n.length;\n          var t = tn(n);\n          if (t == yn || t == Sn) return !n.size;\n          if (he(n)) return !jr(n).length;\n          for (var e in n) if (F.call(n, e)) return !1;\n          return !0;\n        }\n        function Cp(n, t) {\n          return oe(n, t);\n        }\n        function Ip(n, t, e) {\n          e = typeof e == \"function\" ? e : i;\n          var r = e ? e(n, t) : i;\n          return r === i ? oe(n, t, i, e) : !!r;\n        }\n        function Ei(n) {\n          if (!Y(n)) return !1;\n          var t = en(n);\n          return t == we || t == za || typeof n.message == \"string\" && typeof n.name == \"string\" && !pe(n);\n        }\n        function xp(n) {\n          return typeof n == \"number\" && $s(n);\n        }\n        function Jn(n) {\n          if (!K(n)) return !1;\n          var t = en(n);\n          return t == Pe || t == Gi || t == Ga || t == Ya;\n        }\n        function ea(n) {\n          return typeof n == \"number\" && n == R(n);\n        }\n        function ar(n) {\n          return typeof n == \"number\" && n > -1 && n % 1 == 0 && n <= kn;\n        }\n        function K(n) {\n          var t = typeof n;\n          return n != null && (t == \"object\" || t == \"function\");\n        }\n        function Y(n) {\n          return n != null && typeof n == \"object\";\n        }\n        var ra = _s ? hn(_s) : Oc;\n        function Ep(n, t) {\n          return n === t || kr(n, t, gi(t));\n        }\n        function yp(n, t, e) {\n          return e = typeof e == \"function\" ? e : i, kr(n, t, gi(t), e);\n        }\n        function Sp(n) {\n          return ia(n) && n != +n;\n        }\n        function Op(n) {\n          if (hh(n)) throw new S(L);\n          return Xs(n);\n        }\n        function Rp(n) {\n          return n === null;\n        }\n        function bp(n) {\n          return n == null;\n        }\n        function ia(n) {\n          return typeof n == \"number\" || Y(n) && en(n) == Jt;\n        }\n        function pe(n) {\n          if (!Y(n) || en(n) != qn) return !1;\n          var t = He(n);\n          if (t === null) return !0;\n          var e = F.call(t, \"constructor\") && t.constructor;\n          return typeof e == \"function\" && e instanceof e && be.call(e) == yf;\n        }\n        var yi = ms ? hn(ms) : Rc;\n        function Tp(n) {\n          return ea(n) && n >= -kn && n <= kn;\n        }\n        var sa = ws ? hn(ws) : bc;\n        function or(n) {\n          return typeof n == \"string\" || !O(n) && Y(n) && en(n) == Qt;\n        }\n        function pn(n) {\n          return typeof n == \"symbol\" || Y(n) && en(n) == Ae;\n        }\n        var Bt = Ps ? hn(Ps) : Tc;\n        function Lp(n) {\n          return n === i;\n        }\n        function Dp(n) {\n          return Y(n) && tn(n) == Vt;\n        }\n        function Hp(n) {\n          return Y(n) && en(n) == Ja;\n        }\n        var Np = ke(ni),\n          $p = ke(function (n, t) {\n            return n <= t;\n          });\n        function ua(n) {\n          if (!n) return [];\n          if (an(n)) return or(n) ? On(n) : un(n);\n          if (ne && n[ne]) return df(n[ne]());\n          var t = tn(n),\n            e = t == yn ? qr : t == Sn ? Se : Gt;\n          return e(n);\n        }\n        function Xn(n) {\n          if (!n) return n === 0 ? n : 0;\n          if (n = xn(n), n === ht || n === -ht) {\n            var t = n < 0 ? -1 : 1;\n            return t * Fa;\n          }\n          return n === n ? n : 0;\n        }\n        function R(n) {\n          var t = Xn(n),\n            e = t % 1;\n          return t === t ? e ? t - e : t : 0;\n        }\n        function aa(n) {\n          return n ? vt(R(n), 0, Nn) : 0;\n        }\n        function xn(n) {\n          if (typeof n == \"number\") return n;\n          if (pn(n)) return _e;\n          if (K(n)) {\n            var t = typeof n.valueOf == \"function\" ? n.valueOf() : n;\n            n = K(t) ? t + \"\" : t;\n          }\n          if (typeof n != \"string\") return n === 0 ? n : +n;\n          n = ys(n);\n          var e = vo.test(n);\n          return e || mo.test(n) ? Qo(n.slice(2), e ? 2 : 8) : go.test(n) ? _e : +n;\n        }\n        function oa(n) {\n          return Un(n, on(n));\n        }\n        function Up(n) {\n          return n ? vt(R(n), -kn, kn) : n === 0 ? n : 0;\n        }\n        function W(n) {\n          return n == null ? \"\" : ln(n);\n        }\n        var Wp = Ft(function (n, t) {\n            if (he(t) || an(t)) {\n              Un(t, V(t), n);\n              return;\n            }\n            for (var e in t) F.call(t, e) && se(n, e, t[e]);\n          }),\n          fa = Ft(function (n, t) {\n            Un(t, on(t), n);\n          }),\n          fr = Ft(function (n, t, e, r) {\n            Un(t, on(t), n, r);\n          }),\n          Fp = Ft(function (n, t, e, r) {\n            Un(t, V(t), n, r);\n          }),\n          Mp = Yn(Zr);\n        function qp(n, t) {\n          var e = Wt(n);\n          return t == null ? e : qs(e, t);\n        }\n        var Bp = T(function (n, t) {\n            n = M(n);\n            var e = -1,\n              r = t.length,\n              s = r > 2 ? t[2] : i;\n            for (s && rn(t[0], t[1], s) && (r = 1); ++e < r;) for (var o = t[e], f = on(o), c = -1, l = f.length; ++c < l;) {\n              var v = f[c],\n                _ = n[v];\n              (_ === i || bn(_, Nt[v]) && !F.call(n, v)) && (n[v] = o[v]);\n            }\n            return n;\n          }),\n          Gp = T(function (n) {\n            return n.push(i, yu), cn(ca, i, n);\n          });\n        function zp(n, t) {\n          return Cs(n, x(t, 3), $n);\n        }\n        function Kp(n, t) {\n          return Cs(n, x(t, 3), Xr);\n        }\n        function Yp(n, t) {\n          return n == null ? n : Jr(n, x(t, 3), on);\n        }\n        function Zp(n, t) {\n          return n == null ? n : Ys(n, x(t, 3), on);\n        }\n        function Jp(n, t) {\n          return n && $n(n, x(t, 3));\n        }\n        function Xp(n, t) {\n          return n && Xr(n, x(t, 3));\n        }\n        function Qp(n) {\n          return n == null ? [] : ze(n, V(n));\n        }\n        function Vp(n) {\n          return n == null ? [] : ze(n, on(n));\n        }\n        function Si(n, t, e) {\n          var r = n == null ? i : _t(n, t);\n          return r === i ? e : r;\n        }\n        function kp(n, t) {\n          return n != null && Ru(n, t, Ac);\n        }\n        function Oi(n, t) {\n          return n != null && Ru(n, t, Cc);\n        }\n        var jp = Au(function (n, t, e) {\n            t != null && typeof t.toString != \"function\" && (t = Te.call(t)), n[t] = e;\n          }, bi(fn)),\n          nd = Au(function (n, t, e) {\n            t != null && typeof t.toString != \"function\" && (t = Te.call(t)), F.call(n, t) ? n[t].push(e) : n[t] = [e];\n          }, x),\n          td = T(ae);\n        function V(n) {\n          return an(n) ? Fs(n) : jr(n);\n        }\n        function on(n) {\n          return an(n) ? Fs(n, !0) : Lc(n);\n        }\n        function ed(n, t) {\n          var e = {};\n          return t = x(t, 3), $n(n, function (r, s, o) {\n            zn(e, t(r, s, o), r);\n          }), e;\n        }\n        function rd(n, t) {\n          var e = {};\n          return t = x(t, 3), $n(n, function (r, s, o) {\n            zn(e, s, t(r, s, o));\n          }), e;\n        }\n        var id = Ft(function (n, t, e) {\n            Ke(n, t, e);\n          }),\n          ca = Ft(function (n, t, e, r) {\n            Ke(n, t, e, r);\n          }),\n          sd = Yn(function (n, t) {\n            var e = {};\n            if (n == null) return e;\n            var r = !1;\n            t = G(t, function (o) {\n              return o = st(o, n), r || (r = o.length > 1), o;\n            }), Un(n, pi(n), e), r && (e = An(e, Ln | Fn | xt, jc));\n            for (var s = t.length; s--;) si(e, t[s]);\n            return e;\n          });\n        function ud(n, t) {\n          return ha(n, ur(x(t)));\n        }\n        var ad = Yn(function (n, t) {\n          return n == null ? {} : Hc(n, t);\n        });\n        function ha(n, t) {\n          if (n == null) return {};\n          var e = G(pi(n), function (r) {\n            return [r];\n          });\n          return t = x(t), eu(n, e, function (r, s) {\n            return t(r, s[0]);\n          });\n        }\n        function od(n, t, e) {\n          t = st(t, n);\n          var r = -1,\n            s = t.length;\n          for (s || (s = 1, n = i); ++r < s;) {\n            var o = n == null ? i : n[Wn(t[r])];\n            o === i && (r = s, o = e), n = Jn(o) ? o.call(n) : o;\n          }\n          return n;\n        }\n        function fd(n, t, e) {\n          return n == null ? n : fe(n, t, e);\n        }\n        function cd(n, t, e, r) {\n          return r = typeof r == \"function\" ? r : i, n == null ? n : fe(n, t, e, r);\n        }\n        var la = xu(V),\n          pa = xu(on);\n        function hd(n, t, e) {\n          var r = O(n),\n            s = r || at(n) || Bt(n);\n          if (t = x(t, 4), e == null) {\n            var o = n && n.constructor;\n            s ? e = r ? new o() : [] : K(n) ? e = Jn(o) ? Wt(He(n)) : {} : e = {};\n          }\n          return (s ? mn : $n)(n, function (f, c, l) {\n            return t(e, f, c, l);\n          }), e;\n        }\n        function ld(n, t) {\n          return n == null ? !0 : si(n, t);\n        }\n        function pd(n, t, e) {\n          return n == null ? n : au(n, t, oi(e));\n        }\n        function dd(n, t, e, r) {\n          return r = typeof r == \"function\" ? r : i, n == null ? n : au(n, t, oi(e), r);\n        }\n        function Gt(n) {\n          return n == null ? [] : Mr(n, V(n));\n        }\n        function gd(n) {\n          return n == null ? [] : Mr(n, on(n));\n        }\n        function vd(n, t, e) {\n          return e === i && (e = t, t = i), e !== i && (e = xn(e), e = e === e ? e : 0), t !== i && (t = xn(t), t = t === t ? t : 0), vt(xn(n), t, e);\n        }\n        function _d(n, t, e) {\n          return t = Xn(t), e === i ? (e = t, t = 0) : e = Xn(e), n = xn(n), Ic(n, t, e);\n        }\n        function md(n, t, e) {\n          if (e && typeof e != \"boolean\" && rn(n, t, e) && (t = e = i), e === i && (typeof t == \"boolean\" ? (e = t, t = i) : typeof n == \"boolean\" && (e = n, n = i)), n === i && t === i ? (n = 0, t = 1) : (n = Xn(n), t === i ? (t = n, n = 0) : t = Xn(t)), n > t) {\n            var r = n;\n            n = t, t = r;\n          }\n          if (e || n % 1 || t % 1) {\n            var s = Us();\n            return nn(n + s * (t - n + Xo(\"1e-\" + ((s + \"\").length - 1))), t);\n          }\n          return ei(n, t);\n        }\n        var wd = Mt(function (n, t, e) {\n          return t = t.toLowerCase(), n + (e ? da(t) : t);\n        });\n        function da(n) {\n          return Ri(W(n).toLowerCase());\n        }\n        function ga(n) {\n          return n = W(n), n && n.replace(Po, ff).replace(Fo, \"\");\n        }\n        function Pd(n, t, e) {\n          n = W(n), t = ln(t);\n          var r = n.length;\n          e = e === i ? r : vt(R(e), 0, r);\n          var s = e;\n          return e -= t.length, e >= 0 && n.slice(e, s) == t;\n        }\n        function Ad(n) {\n          return n = W(n), n && ja.test(n) ? n.replace(Yi, cf) : n;\n        }\n        function Cd(n) {\n          return n = W(n), n && so.test(n) ? n.replace(xr, \"\\\\$&\") : n;\n        }\n        var Id = Mt(function (n, t, e) {\n            return n + (e ? \"-\" : \"\") + t.toLowerCase();\n          }),\n          xd = Mt(function (n, t, e) {\n            return n + (e ? \" \" : \"\") + t.toLowerCase();\n          }),\n          Ed = mu(\"toLowerCase\");\n        function yd(n, t, e) {\n          n = W(n), t = R(t);\n          var r = t ? Dt(n) : 0;\n          if (!t || r >= t) return n;\n          var s = (t - r) / 2;\n          return Ve(We(s), e) + n + Ve(Ue(s), e);\n        }\n        function Sd(n, t, e) {\n          n = W(n), t = R(t);\n          var r = t ? Dt(n) : 0;\n          return t && r < t ? n + Ve(t - r, e) : n;\n        }\n        function Od(n, t, e) {\n          n = W(n), t = R(t);\n          var r = t ? Dt(n) : 0;\n          return t && r < t ? Ve(t - r, e) + n : n;\n        }\n        function Rd(n, t, e) {\n          return e || t == null ? t = 0 : t && (t = +t), $f(W(n).replace(Er, \"\"), t || 0);\n        }\n        function bd(n, t, e) {\n          return (e ? rn(n, t, e) : t === i) ? t = 1 : t = R(t), ri(W(n), t);\n        }\n        function Td() {\n          var n = arguments,\n            t = W(n[0]);\n          return n.length < 3 ? t : t.replace(n[1], n[2]);\n        }\n        var Ld = Mt(function (n, t, e) {\n          return n + (e ? \"_\" : \"\") + t.toLowerCase();\n        });\n        function Dd(n, t, e) {\n          return e && typeof e != \"number\" && rn(n, t, e) && (t = e = i), e = e === i ? Nn : e >>> 0, e ? (n = W(n), n && (typeof t == \"string\" || t != null && !yi(t)) && (t = ln(t), !t && Lt(n)) ? ut(On(n), 0, e) : n.split(t, e)) : [];\n        }\n        var Hd = Mt(function (n, t, e) {\n          return n + (e ? \" \" : \"\") + Ri(t);\n        });\n        function Nd(n, t, e) {\n          return n = W(n), e = e == null ? 0 : vt(R(e), 0, n.length), t = ln(t), n.slice(e, e + t.length) == t;\n        }\n        function $d(n, t, e) {\n          var r = a.templateSettings;\n          e && rn(n, t, e) && (t = i), n = W(n), t = fr({}, t, r, Eu);\n          var s = fr({}, t.imports, r.imports, Eu),\n            o = V(s),\n            f = Mr(s, o),\n            c,\n            l,\n            v = 0,\n            _ = t.interpolate || Ce,\n            m = \"__p += '\",\n            P = Br((t.escape || Ce).source + \"|\" + _.source + \"|\" + (_ === Zi ? po : Ce).source + \"|\" + (t.evaluate || Ce).source + \"|$\", \"g\"),\n            I = \"//# sourceURL=\" + (F.call(t, \"sourceURL\") ? (t.sourceURL + \"\").replace(/\\s/g, \" \") : \"lodash.templateSources[\" + ++zo + \"]\") + `\n`;\n          n.replace(P, function (y, H, $, dn, sn, gn) {\n            return $ || ($ = dn), m += n.slice(v, gn).replace(Ao, hf), H && (c = !0, m += `' +\n__e(` + H + `) +\n'`), sn && (l = !0, m += `';\n` + sn + `;\n__p += '`), $ && (m += `' +\n((__t = (` + $ + `)) == null ? '' : __t) +\n'`), v = gn + y.length, y;\n          }), m += `';\n`;\n          var E = F.call(t, \"variable\") && t.variable;\n          if (!E) m = `with (obj) {\n` + m + `\n}\n`;else if (ho.test(E)) throw new S(En);\n          m = (l ? m.replace(Xa, \"\") : m).replace(Qa, \"$1\").replace(Va, \"$1;\"), m = \"function(\" + (E || \"obj\") + `) {\n` + (E ? \"\" : `obj || (obj = {});\n`) + \"var __t, __p = ''\" + (c ? \", __e = _.escape\" : \"\") + (l ? `, __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n` : `;\n`) + m + `return __p\n}`;\n          var b = _a(function () {\n            return U(o, I + \"return \" + m).apply(i, f);\n          });\n          if (b.source = m, Ei(b)) throw b;\n          return b;\n        }\n        function Ud(n) {\n          return W(n).toLowerCase();\n        }\n        function Wd(n) {\n          return W(n).toUpperCase();\n        }\n        function Fd(n, t, e) {\n          if (n = W(n), n && (e || t === i)) return ys(n);\n          if (!n || !(t = ln(t))) return n;\n          var r = On(n),\n            s = On(t),\n            o = Ss(r, s),\n            f = Os(r, s) + 1;\n          return ut(r, o, f).join(\"\");\n        }\n        function Md(n, t, e) {\n          if (n = W(n), n && (e || t === i)) return n.slice(0, bs(n) + 1);\n          if (!n || !(t = ln(t))) return n;\n          var r = On(n),\n            s = Os(r, On(t)) + 1;\n          return ut(r, 0, s).join(\"\");\n        }\n        function qd(n, t, e) {\n          if (n = W(n), n && (e || t === i)) return n.replace(Er, \"\");\n          if (!n || !(t = ln(t))) return n;\n          var r = On(n),\n            s = Ss(r, On(t));\n          return ut(r, s).join(\"\");\n        }\n        function Bd(n, t) {\n          var e = Da,\n            r = Ha;\n          if (K(t)) {\n            var s = \"separator\" in t ? t.separator : s;\n            e = \"length\" in t ? R(t.length) : e, r = \"omission\" in t ? ln(t.omission) : r;\n          }\n          n = W(n);\n          var o = n.length;\n          if (Lt(n)) {\n            var f = On(n);\n            o = f.length;\n          }\n          if (e >= o) return n;\n          var c = e - Dt(r);\n          if (c < 1) return r;\n          var l = f ? ut(f, 0, c).join(\"\") : n.slice(0, c);\n          if (s === i) return l + r;\n          if (f && (c += l.length - c), yi(s)) {\n            if (n.slice(c).search(s)) {\n              var v,\n                _ = l;\n              for (s.global || (s = Br(s.source, W(Ji.exec(s)) + \"g\")), s.lastIndex = 0; v = s.exec(_);) var m = v.index;\n              l = l.slice(0, m === i ? c : m);\n            }\n          } else if (n.indexOf(ln(s), c) != c) {\n            var P = l.lastIndexOf(s);\n            P > -1 && (l = l.slice(0, P));\n          }\n          return l + r;\n        }\n        function Gd(n) {\n          return n = W(n), n && ka.test(n) ? n.replace(Ki, mf) : n;\n        }\n        var zd = Mt(function (n, t, e) {\n            return n + (e ? \" \" : \"\") + t.toUpperCase();\n          }),\n          Ri = mu(\"toUpperCase\");\n        function va(n, t, e) {\n          return n = W(n), t = e ? i : t, t === i ? pf(n) ? Af(n) : rf(n) : n.match(t) || [];\n        }\n        var _a = T(function (n, t) {\n            try {\n              return cn(n, i, t);\n            } catch (e) {\n              return Ei(e) ? e : new S(e);\n            }\n          }),\n          Kd = Yn(function (n, t) {\n            return mn(t, function (e) {\n              e = Wn(e), zn(n, e, Ii(n[e], n));\n            }), n;\n          });\n        function Yd(n) {\n          var t = n == null ? 0 : n.length,\n            e = x();\n          return n = t ? G(n, function (r) {\n            if (typeof r[1] != \"function\") throw new wn(D);\n            return [e(r[0]), r[1]];\n          }) : [], T(function (r) {\n            for (var s = -1; ++s < t;) {\n              var o = n[s];\n              if (cn(o[0], this, r)) return cn(o[1], this, r);\n            }\n          });\n        }\n        function Zd(n) {\n          return mc(An(n, Ln));\n        }\n        function bi(n) {\n          return function () {\n            return n;\n          };\n        }\n        function Jd(n, t) {\n          return n == null || n !== n ? t : n;\n        }\n        var Xd = Pu(),\n          Qd = Pu(!0);\n        function fn(n) {\n          return n;\n        }\n        function Ti(n) {\n          return Qs(typeof n == \"function\" ? n : An(n, Ln));\n        }\n        function Vd(n) {\n          return ks(An(n, Ln));\n        }\n        function kd(n, t) {\n          return js(n, An(t, Ln));\n        }\n        var jd = T(function (n, t) {\n            return function (e) {\n              return ae(e, n, t);\n            };\n          }),\n          ng = T(function (n, t) {\n            return function (e) {\n              return ae(n, e, t);\n            };\n          });\n        function Li(n, t, e) {\n          var r = V(t),\n            s = ze(t, r);\n          e == null && !(K(t) && (s.length || !r.length)) && (e = t, t = n, n = this, s = ze(t, V(t)));\n          var o = !(K(e) && \"chain\" in e) || !!e.chain,\n            f = Jn(n);\n          return mn(s, function (c) {\n            var l = t[c];\n            n[c] = l, f && (n.prototype[c] = function () {\n              var v = this.__chain__;\n              if (o || v) {\n                var _ = n(this.__wrapped__),\n                  m = _.__actions__ = un(this.__actions__);\n                return m.push({\n                  func: l,\n                  args: arguments,\n                  thisArg: n\n                }), _.__chain__ = v, _;\n              }\n              return l.apply(n, nt([this.value()], arguments));\n            });\n          }), n;\n        }\n        function tg() {\n          return k._ === this && (k._ = Sf), this;\n        }\n        function Di() {}\n        function eg(n) {\n          return n = R(n), T(function (t) {\n            return nu(t, n);\n          });\n        }\n        var rg = ci(G),\n          ig = ci(As),\n          sg = ci(Nr);\n        function ma(n) {\n          return _i(n) ? $r(Wn(n)) : Nc(n);\n        }\n        function ug(n) {\n          return function (t) {\n            return n == null ? i : _t(n, t);\n          };\n        }\n        var ag = Cu(),\n          og = Cu(!0);\n        function Hi() {\n          return [];\n        }\n        function Ni() {\n          return !1;\n        }\n        function fg() {\n          return {};\n        }\n        function cg() {\n          return \"\";\n        }\n        function hg() {\n          return !0;\n        }\n        function lg(n, t) {\n          if (n = R(n), n < 1 || n > kn) return [];\n          var e = Nn,\n            r = nn(n, Nn);\n          t = x(t), n -= Nn;\n          for (var s = Fr(r, t); ++e < n;) t(e);\n          return s;\n        }\n        function pg(n) {\n          return O(n) ? G(n, Wn) : pn(n) ? [n] : un(Wu(W(n)));\n        }\n        function dg(n) {\n          var t = ++Ef;\n          return W(n) + t;\n        }\n        var gg = Qe(function (n, t) {\n            return n + t;\n          }, 0),\n          vg = hi(\"ceil\"),\n          _g = Qe(function (n, t) {\n            return n / t;\n          }, 1),\n          mg = hi(\"floor\");\n        function wg(n) {\n          return n && n.length ? Ge(n, fn, Qr) : i;\n        }\n        function Pg(n, t) {\n          return n && n.length ? Ge(n, x(t, 2), Qr) : i;\n        }\n        function Ag(n) {\n          return xs(n, fn);\n        }\n        function Cg(n, t) {\n          return xs(n, x(t, 2));\n        }\n        function Ig(n) {\n          return n && n.length ? Ge(n, fn, ni) : i;\n        }\n        function xg(n, t) {\n          return n && n.length ? Ge(n, x(t, 2), ni) : i;\n        }\n        var Eg = Qe(function (n, t) {\n            return n * t;\n          }, 1),\n          yg = hi(\"round\"),\n          Sg = Qe(function (n, t) {\n            return n - t;\n          }, 0);\n        function Og(n) {\n          return n && n.length ? Wr(n, fn) : 0;\n        }\n        function Rg(n, t) {\n          return n && n.length ? Wr(n, x(t, 2)) : 0;\n        }\n        return a.after = Vl, a.ary = Xu, a.assign = Wp, a.assignIn = fa, a.assignInWith = fr, a.assignWith = Fp, a.at = Mp, a.before = Qu, a.bind = Ii, a.bindAll = Kd, a.bindKey = Vu, a.castArray = fp, a.chain = Yu, a.chunk = mh, a.compact = wh, a.concat = Ph, a.cond = Yd, a.conforms = Zd, a.constant = bi, a.countBy = Ol, a.create = qp, a.curry = ku, a.curryRight = ju, a.debounce = na, a.defaults = Bp, a.defaultsDeep = Gp, a.defer = kl, a.delay = jl, a.difference = Ah, a.differenceBy = Ch, a.differenceWith = Ih, a.drop = xh, a.dropRight = Eh, a.dropRightWhile = yh, a.dropWhile = Sh, a.fill = Oh, a.filter = bl, a.flatMap = Dl, a.flatMapDeep = Hl, a.flatMapDepth = Nl, a.flatten = Bu, a.flattenDeep = Rh, a.flattenDepth = bh, a.flip = np, a.flow = Xd, a.flowRight = Qd, a.fromPairs = Th, a.functions = Qp, a.functionsIn = Vp, a.groupBy = $l, a.initial = Dh, a.intersection = Hh, a.intersectionBy = Nh, a.intersectionWith = $h, a.invert = jp, a.invertBy = nd, a.invokeMap = Wl, a.iteratee = Ti, a.keyBy = Fl, a.keys = V, a.keysIn = on, a.map = rr, a.mapKeys = ed, a.mapValues = rd, a.matches = Vd, a.matchesProperty = kd, a.memoize = sr, a.merge = id, a.mergeWith = ca, a.method = jd, a.methodOf = ng, a.mixin = Li, a.negate = ur, a.nthArg = eg, a.omit = sd, a.omitBy = ud, a.once = tp, a.orderBy = Ml, a.over = rg, a.overArgs = ep, a.overEvery = ig, a.overSome = sg, a.partial = xi, a.partialRight = ta, a.partition = ql, a.pick = ad, a.pickBy = ha, a.property = ma, a.propertyOf = ug, a.pull = Mh, a.pullAll = zu, a.pullAllBy = qh, a.pullAllWith = Bh, a.pullAt = Gh, a.range = ag, a.rangeRight = og, a.rearg = rp, a.reject = zl, a.remove = zh, a.rest = ip, a.reverse = Ai, a.sampleSize = Yl, a.set = fd, a.setWith = cd, a.shuffle = Zl, a.slice = Kh, a.sortBy = Ql, a.sortedUniq = kh, a.sortedUniqBy = jh, a.split = Dd, a.spread = sp, a.tail = nl, a.take = tl, a.takeRight = el, a.takeRightWhile = rl, a.takeWhile = il, a.tap = wl, a.throttle = up, a.thru = er, a.toArray = ua, a.toPairs = la, a.toPairsIn = pa, a.toPath = pg, a.toPlainObject = oa, a.transform = hd, a.unary = ap, a.union = sl, a.unionBy = ul, a.unionWith = al, a.uniq = ol, a.uniqBy = fl, a.uniqWith = cl, a.unset = ld, a.unzip = Ci, a.unzipWith = Ku, a.update = pd, a.updateWith = dd, a.values = Gt, a.valuesIn = gd, a.without = hl, a.words = va, a.wrap = op, a.xor = ll, a.xorBy = pl, a.xorWith = dl, a.zip = gl, a.zipObject = vl, a.zipObjectDeep = _l, a.zipWith = ml, a.entries = la, a.entriesIn = pa, a.extend = fa, a.extendWith = fr, Li(a, a), a.add = gg, a.attempt = _a, a.camelCase = wd, a.capitalize = da, a.ceil = vg, a.clamp = vd, a.clone = cp, a.cloneDeep = lp, a.cloneDeepWith = pp, a.cloneWith = hp, a.conformsTo = dp, a.deburr = ga, a.defaultTo = Jd, a.divide = _g, a.endsWith = Pd, a.eq = bn, a.escape = Ad, a.escapeRegExp = Cd, a.every = Rl, a.find = Tl, a.findIndex = Mu, a.findKey = zp, a.findLast = Ll, a.findLastIndex = qu, a.findLastKey = Kp, a.floor = mg, a.forEach = Zu, a.forEachRight = Ju, a.forIn = Yp, a.forInRight = Zp, a.forOwn = Jp, a.forOwnRight = Xp, a.get = Si, a.gt = gp, a.gte = vp, a.has = kp, a.hasIn = Oi, a.head = Gu, a.identity = fn, a.includes = Ul, a.indexOf = Lh, a.inRange = _d, a.invoke = td, a.isArguments = Pt, a.isArray = O, a.isArrayBuffer = _p, a.isArrayLike = an, a.isArrayLikeObject = Z, a.isBoolean = mp, a.isBuffer = at, a.isDate = wp, a.isElement = Pp, a.isEmpty = Ap, a.isEqual = Cp, a.isEqualWith = Ip, a.isError = Ei, a.isFinite = xp, a.isFunction = Jn, a.isInteger = ea, a.isLength = ar, a.isMap = ra, a.isMatch = Ep, a.isMatchWith = yp, a.isNaN = Sp, a.isNative = Op, a.isNil = bp, a.isNull = Rp, a.isNumber = ia, a.isObject = K, a.isObjectLike = Y, a.isPlainObject = pe, a.isRegExp = yi, a.isSafeInteger = Tp, a.isSet = sa, a.isString = or, a.isSymbol = pn, a.isTypedArray = Bt, a.isUndefined = Lp, a.isWeakMap = Dp, a.isWeakSet = Hp, a.join = Uh, a.kebabCase = Id, a.last = In, a.lastIndexOf = Wh, a.lowerCase = xd, a.lowerFirst = Ed, a.lt = Np, a.lte = $p, a.max = wg, a.maxBy = Pg, a.mean = Ag, a.meanBy = Cg, a.min = Ig, a.minBy = xg, a.stubArray = Hi, a.stubFalse = Ni, a.stubObject = fg, a.stubString = cg, a.stubTrue = hg, a.multiply = Eg, a.nth = Fh, a.noConflict = tg, a.noop = Di, a.now = ir, a.pad = yd, a.padEnd = Sd, a.padStart = Od, a.parseInt = Rd, a.random = md, a.reduce = Bl, a.reduceRight = Gl, a.repeat = bd, a.replace = Td, a.result = od, a.round = yg, a.runInContext = h, a.sample = Kl, a.size = Jl, a.snakeCase = Ld, a.some = Xl, a.sortedIndex = Yh, a.sortedIndexBy = Zh, a.sortedIndexOf = Jh, a.sortedLastIndex = Xh, a.sortedLastIndexBy = Qh, a.sortedLastIndexOf = Vh, a.startCase = Hd, a.startsWith = Nd, a.subtract = Sg, a.sum = Og, a.sumBy = Rg, a.template = $d, a.times = lg, a.toFinite = Xn, a.toInteger = R, a.toLength = aa, a.toLower = Ud, a.toNumber = xn, a.toSafeInteger = Up, a.toString = W, a.toUpper = Wd, a.trim = Fd, a.trimEnd = Md, a.trimStart = qd, a.truncate = Bd, a.unescape = Gd, a.uniqueId = dg, a.upperCase = zd, a.upperFirst = Ri, a.each = Zu, a.eachRight = Ju, a.first = Gu, Li(a, function () {\n          var n = {};\n          return $n(a, function (t, e) {\n            F.call(a.prototype, e) || (n[e] = t);\n          }), n;\n        }(), {\n          chain: !1\n        }), a.VERSION = d, mn([\"bind\", \"bindKey\", \"curry\", \"curryRight\", \"partial\", \"partialRight\"], function (n) {\n          a[n].placeholder = a;\n        }), mn([\"drop\", \"take\"], function (n, t) {\n          N.prototype[n] = function (e) {\n            e = e === i ? 1 : Q(R(e), 0);\n            var r = this.__filtered__ && !t ? new N(this) : this.clone();\n            return r.__filtered__ ? r.__takeCount__ = nn(e, r.__takeCount__) : r.__views__.push({\n              size: nn(e, Nn),\n              type: n + (r.__dir__ < 0 ? \"Right\" : \"\")\n            }), r;\n          }, N.prototype[n + \"Right\"] = function (e) {\n            return this.reverse()[n](e).reverse();\n          };\n        }), mn([\"filter\", \"map\", \"takeWhile\"], function (n, t) {\n          var e = t + 1,\n            r = e == Bi || e == Wa;\n          N.prototype[n] = function (s) {\n            var o = this.clone();\n            return o.__iteratees__.push({\n              iteratee: x(s, 3),\n              type: e\n            }), o.__filtered__ = o.__filtered__ || r, o;\n          };\n        }), mn([\"head\", \"last\"], function (n, t) {\n          var e = \"take\" + (t ? \"Right\" : \"\");\n          N.prototype[n] = function () {\n            return this[e](1).value()[0];\n          };\n        }), mn([\"initial\", \"tail\"], function (n, t) {\n          var e = \"drop\" + (t ? \"\" : \"Right\");\n          N.prototype[n] = function () {\n            return this.__filtered__ ? new N(this) : this[e](1);\n          };\n        }), N.prototype.compact = function () {\n          return this.filter(fn);\n        }, N.prototype.find = function (n) {\n          return this.filter(n).head();\n        }, N.prototype.findLast = function (n) {\n          return this.reverse().find(n);\n        }, N.prototype.invokeMap = T(function (n, t) {\n          return typeof n == \"function\" ? new N(this) : this.map(function (e) {\n            return ae(e, n, t);\n          });\n        }), N.prototype.reject = function (n) {\n          return this.filter(ur(x(n)));\n        }, N.prototype.slice = function (n, t) {\n          n = R(n);\n          var e = this;\n          return e.__filtered__ && (n > 0 || t < 0) ? new N(e) : (n < 0 ? e = e.takeRight(-n) : n && (e = e.drop(n)), t !== i && (t = R(t), e = t < 0 ? e.dropRight(-t) : e.take(t - n)), e);\n        }, N.prototype.takeRightWhile = function (n) {\n          return this.reverse().takeWhile(n).reverse();\n        }, N.prototype.toArray = function () {\n          return this.take(Nn);\n        }, $n(N.prototype, function (n, t) {\n          var e = /^(?:filter|find|map|reject)|While$/.test(t),\n            r = /^(?:head|last)$/.test(t),\n            s = a[r ? \"take\" + (t == \"last\" ? \"Right\" : \"\") : t],\n            o = r || /^find/.test(t);\n          s && (a.prototype[t] = function () {\n            var f = this.__wrapped__,\n              c = r ? [1] : arguments,\n              l = f instanceof N,\n              v = c[0],\n              _ = l || O(f),\n              m = function (H) {\n                var $ = s.apply(a, nt([H], c));\n                return r && P ? $[0] : $;\n              };\n            _ && e && typeof v == \"function\" && v.length != 1 && (l = _ = !1);\n            var P = this.__chain__,\n              I = !!this.__actions__.length,\n              E = o && !P,\n              b = l && !I;\n            if (!o && _) {\n              f = b ? f : new N(this);\n              var y = n.apply(f, c);\n              return y.__actions__.push({\n                func: er,\n                args: [m],\n                thisArg: i\n              }), new Pn(y, P);\n            }\n            return E && b ? n.apply(this, c) : (y = this.thru(m), E ? r ? y.value()[0] : y.value() : y);\n          });\n        }), mn([\"pop\", \"push\", \"shift\", \"sort\", \"splice\", \"unshift\"], function (n) {\n          var t = Oe[n],\n            e = /^(?:push|sort|unshift)$/.test(n) ? \"tap\" : \"thru\",\n            r = /^(?:pop|shift)$/.test(n);\n          a.prototype[n] = function () {\n            var s = arguments;\n            if (r && !this.__chain__) {\n              var o = this.value();\n              return t.apply(O(o) ? o : [], s);\n            }\n            return this[e](function (f) {\n              return t.apply(O(f) ? f : [], s);\n            });\n          };\n        }), $n(N.prototype, function (n, t) {\n          var e = a[t];\n          if (e) {\n            var r = e.name + \"\";\n            F.call(Ut, r) || (Ut[r] = []), Ut[r].push({\n              name: t,\n              func: e\n            });\n          }\n        }), Ut[Xe(i, ct).name] = [{\n          name: \"wrapper\",\n          func: i\n        }], N.prototype.clone = Gf, N.prototype.reverse = zf, N.prototype.value = Kf, a.prototype.at = Pl, a.prototype.chain = Al, a.prototype.commit = Cl, a.prototype.next = Il, a.prototype.plant = El, a.prototype.reverse = yl, a.prototype.toJSON = a.prototype.valueOf = a.prototype.value = Sl, a.prototype.first = a.prototype.head, ne && (a.prototype[ne] = xl), a;\n      },\n      Ht = Cf();\n    lt ? ((lt.exports = Ht)._ = Ht, Tr._ = Ht) : k._ = Ht;\n  }).call(ge);\n})(Ui, Ui.exports);\nvar Gg = Object.defineProperty,\n  zg = Object.defineProperties,\n  Kg = Object.getOwnPropertyDescriptors,\n  Ea = Object.getOwnPropertySymbols,\n  Yg = Object.prototype.hasOwnProperty,\n  Zg = Object.prototype.propertyIsEnumerable,\n  ya = (A, u, i) => u in A ? Gg(A, u, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: i\n  }) : A[u] = i,\n  cr = (A, u) => {\n    for (var i in u || (u = {})) Yg.call(u, i) && ya(A, i, u[i]);\n    if (Ea) for (var i of Ea(u)) Zg.call(u, i) && ya(A, i, u[i]);\n    return A;\n  },\n  Jg = (A, u) => zg(A, Kg(u));\nfunction ft(A, u, i) {\n  var d;\n  const w = Dg(A);\n  return ((d = u.rpcMap) == null ? void 0 : d[w.reference]) || `${Bg}?chainId=${w.namespace}:${w.reference}&projectId=${i}`;\n}\nfunction Ct(A) {\n  return A.includes(\":\") ? A.split(\":\")[1] : A;\n}\nfunction Sa(A) {\n  return A.map(u => `${u.split(\":\")[0]}:${u.split(\":\")[1]}`);\n}\nfunction Xg(A, u) {\n  const i = Object.keys(u.namespaces).filter(w => w.includes(A));\n  if (!i.length) return [];\n  const d = [];\n  return i.forEach(w => {\n    const L = u.namespaces[w].accounts;\n    d.push(...L);\n  }), d;\n}\nfunction Oa(A = {}, u = {}) {\n  const i = Ra(A),\n    d = Ra(u);\n  return Ui.exports.merge(i, d);\n}\nfunction Ra(A) {\n  var u, i, d, w;\n  const L = {};\n  if (!Lg(A)) return L;\n  for (const [D, En] of Object.entries(A)) {\n    const zt = Pa(D) ? [D] : En.chains,\n      pr = En.methods || [],\n      It = En.events || [],\n      Ln = En.rpcMap || {},\n      Fn = de(D);\n    L[Fn] = Jg(cr(cr({}, L[Fn]), En), {\n      chains: $i(zt, (u = L[Fn]) == null ? void 0 : u.chains),\n      methods: $i(pr, (i = L[Fn]) == null ? void 0 : i.methods),\n      events: $i(It, (d = L[Fn]) == null ? void 0 : d.events),\n      rpcMap: cr(cr({}, Ln), (w = L[Fn]) == null ? void 0 : w.rpcMap)\n    });\n  }\n  return L;\n}\nfunction Qg(A) {\n  return A.includes(\":\") ? A.split(\":\")[2] : A;\n}\nfunction Vg(A) {\n  const u = {};\n  for (const [i, d] of Object.entries(A)) {\n    const w = d.methods || [],\n      L = d.events || [],\n      D = d.accounts || [],\n      En = Pa(i) ? [i] : d.chains ? d.chains : Sa(d.accounts);\n    u[i] = {\n      chains: En,\n      methods: w,\n      events: L,\n      accounts: D\n    };\n  }\n  return u;\n}\nfunction Wi(A) {\n  return typeof A == \"number\" ? A : A.includes(\"0x\") ? parseInt(A, 16) : (A = A.includes(\":\") ? A.split(\":\")[1] : A, isNaN(Number(A)) ? A : Number(A));\n}\nconst ba = {},\n  z = A => ba[A],\n  Fi = (A, u) => {\n    ba[A] = u;\n  };\nclass kg {\n  constructor(u) {\n    this.name = \"polkadot\", this.namespace = u.namespace, this.events = z(\"events\"), this.client = z(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n  }\n  updateNamespace(u) {\n    this.namespace = Object.assign(this.namespace, u);\n  }\n  requestAccounts() {\n    return this.getAccounts();\n  }\n  getDefaultChain() {\n    if (this.chainId) return this.chainId;\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n    const u = this.namespace.chains[0];\n    if (!u) throw new Error(\"ChainId not found\");\n    return u.split(\":\")[1];\n  }\n  request(u) {\n    return this.namespace.methods.includes(u.request.method) ? this.client.request(u) : this.getHttpProvider().request(u.request);\n  }\n  setDefaultChain(u, i) {\n    this.httpProviders[u] || this.setHttpProvider(u, i), this.chainId = u, this.events.emit(Vn.DEFAULT_CHAIN_CHANGED, `${this.name}:${u}`);\n  }\n  getAccounts() {\n    const u = this.namespace.accounts;\n    return u ? u.filter(i => i.split(\":\")[1] === this.chainId.toString()).map(i => i.split(\":\")[2]) || [] : [];\n  }\n  createHttpProviders() {\n    const u = {};\n    return this.namespace.chains.forEach(i => {\n      var d;\n      const w = Ct(i);\n      u[w] = this.createHttpProvider(w, (d = this.namespace.rpcMap) == null ? void 0 : d[i]);\n    }), u;\n  }\n  getHttpProvider() {\n    const u = `${this.name}:${this.chainId}`,\n      i = this.httpProviders[u];\n    if (typeof i > \"u\") throw new Error(`JSON-RPC provider for ${u} not found`);\n    return i;\n  }\n  setHttpProvider(u, i) {\n    const d = this.createHttpProvider(u, i);\n    d && (this.httpProviders[u] = d);\n  }\n  createHttpProvider(u, i) {\n    const d = i || ft(u, this.namespace, this.client.core.projectId);\n    if (!d) throw new Error(`No RPC url provided for chainId: ${u}`);\n    return new ot(new At(d, z(\"disableProviderPing\")));\n  }\n}\nclass jg {\n  constructor(u) {\n    this.name = \"eip155\", this.namespace = u.namespace, this.events = z(\"events\"), this.client = z(\"client\"), this.httpProviders = this.createHttpProviders(), this.chainId = parseInt(this.getDefaultChain());\n  }\n  async request(u) {\n    switch (u.request.method) {\n      case \"eth_requestAccounts\":\n        return this.getAccounts();\n      case \"eth_accounts\":\n        return this.getAccounts();\n      case \"wallet_switchEthereumChain\":\n        return await this.handleSwitchChain(u);\n      case \"eth_chainId\":\n        return parseInt(this.getDefaultChain());\n    }\n    return this.namespace.methods.includes(u.request.method) ? await this.client.request(u) : this.getHttpProvider().request(u.request);\n  }\n  updateNamespace(u) {\n    this.namespace = Object.assign(this.namespace, u);\n  }\n  setDefaultChain(u, i) {\n    this.httpProviders[u] || this.setHttpProvider(parseInt(u), i), this.chainId = parseInt(u), this.events.emit(Vn.DEFAULT_CHAIN_CHANGED, `${this.name}:${u}`);\n  }\n  requestAccounts() {\n    return this.getAccounts();\n  }\n  getDefaultChain() {\n    if (this.chainId) return this.chainId.toString();\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n    const u = this.namespace.chains[0];\n    if (!u) throw new Error(\"ChainId not found\");\n    return u.split(\":\")[1];\n  }\n  createHttpProvider(u, i) {\n    const d = i || ft(`${this.name}:${u}`, this.namespace, this.client.core.projectId);\n    if (!d) throw new Error(`No RPC url provided for chainId: ${u}`);\n    return new ot(new $g(d, z(\"disableProviderPing\")));\n  }\n  setHttpProvider(u, i) {\n    const d = this.createHttpProvider(u, i);\n    d && (this.httpProviders[u] = d);\n  }\n  createHttpProviders() {\n    const u = {};\n    return this.namespace.chains.forEach(i => {\n      var d;\n      const w = parseInt(Ct(i));\n      u[w] = this.createHttpProvider(w, (d = this.namespace.rpcMap) == null ? void 0 : d[i]);\n    }), u;\n  }\n  getAccounts() {\n    const u = this.namespace.accounts;\n    return u ? [...new Set(u.filter(i => i.split(\":\")[1] === this.chainId.toString()).map(i => i.split(\":\")[2]))] : [];\n  }\n  getHttpProvider() {\n    const u = this.chainId,\n      i = this.httpProviders[u];\n    if (typeof i > \"u\") throw new Error(`JSON-RPC provider for ${u} not found`);\n    return i;\n  }\n  async handleSwitchChain(u) {\n    var i, d;\n    let w = u.request.params ? (i = u.request.params[0]) == null ? void 0 : i.chainId : \"0x0\";\n    w = w.startsWith(\"0x\") ? w : `0x${w}`;\n    const L = parseInt(w, 16);\n    if (this.isChainApproved(L)) this.setDefaultChain(`${L}`);else if (this.namespace.methods.includes(\"wallet_switchEthereumChain\")) await this.client.request({\n      topic: u.topic,\n      request: {\n        method: u.request.method,\n        params: [{\n          chainId: w\n        }]\n      },\n      chainId: (d = this.namespace.chains) == null ? void 0 : d[0]\n    }), this.setDefaultChain(`${L}`);else throw new Error(`Failed to switch to chain 'eip155:${L}'. The chain is not approved or the wallet does not support 'wallet_switchEthereumChain' method.`);\n    return null;\n  }\n  isChainApproved(u) {\n    return this.namespace.chains.includes(`${this.name}:${u}`);\n  }\n}\nclass nv {\n  constructor(u) {\n    this.name = \"solana\", this.namespace = u.namespace, this.events = z(\"events\"), this.client = z(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n  }\n  updateNamespace(u) {\n    this.namespace = Object.assign(this.namespace, u);\n  }\n  requestAccounts() {\n    return this.getAccounts();\n  }\n  request(u) {\n    return this.namespace.methods.includes(u.request.method) ? this.client.request(u) : this.getHttpProvider().request(u.request);\n  }\n  setDefaultChain(u, i) {\n    this.httpProviders[u] || this.setHttpProvider(u, i), this.chainId = u, this.events.emit(Vn.DEFAULT_CHAIN_CHANGED, `${this.name}:${u}`);\n  }\n  getDefaultChain() {\n    if (this.chainId) return this.chainId;\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n    const u = this.namespace.chains[0];\n    if (!u) throw new Error(\"ChainId not found\");\n    return u.split(\":\")[1];\n  }\n  getAccounts() {\n    const u = this.namespace.accounts;\n    return u ? [...new Set(u.filter(i => i.split(\":\")[1] === this.chainId.toString()).map(i => i.split(\":\")[2]))] : [];\n  }\n  createHttpProviders() {\n    const u = {};\n    return this.namespace.chains.forEach(i => {\n      var d;\n      const w = Ct(i);\n      u[w] = this.createHttpProvider(w, (d = this.namespace.rpcMap) == null ? void 0 : d[i]);\n    }), u;\n  }\n  getHttpProvider() {\n    const u = `${this.name}:${this.chainId}`,\n      i = this.httpProviders[u];\n    if (typeof i > \"u\") throw new Error(`JSON-RPC provider for ${u} not found`);\n    return i;\n  }\n  setHttpProvider(u, i) {\n    const d = this.createHttpProvider(u, i);\n    d && (this.httpProviders[u] = d);\n  }\n  createHttpProvider(u, i) {\n    const d = i || ft(u, this.namespace, this.client.core.projectId);\n    if (!d) throw new Error(`No RPC url provided for chainId: ${u}`);\n    return new ot(new At(d, z(\"disableProviderPing\")));\n  }\n}\nclass tv {\n  constructor(u) {\n    this.name = \"cosmos\", this.namespace = u.namespace, this.events = z(\"events\"), this.client = z(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n  }\n  updateNamespace(u) {\n    this.namespace = Object.assign(this.namespace, u);\n  }\n  requestAccounts() {\n    return this.getAccounts();\n  }\n  getDefaultChain() {\n    if (this.chainId) return this.chainId;\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n    const u = this.namespace.chains[0];\n    if (!u) throw new Error(\"ChainId not found\");\n    return u.split(\":\")[1];\n  }\n  request(u) {\n    return this.namespace.methods.includes(u.request.method) ? this.client.request(u) : this.getHttpProvider().request(u.request);\n  }\n  setDefaultChain(u, i) {\n    this.httpProviders[u] || this.setHttpProvider(u, i), this.chainId = u, this.events.emit(Vn.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);\n  }\n  getAccounts() {\n    const u = this.namespace.accounts;\n    return u ? [...new Set(u.filter(i => i.split(\":\")[1] === this.chainId.toString()).map(i => i.split(\":\")[2]))] : [];\n  }\n  createHttpProviders() {\n    const u = {};\n    return this.namespace.chains.forEach(i => {\n      var d;\n      const w = Ct(i);\n      u[w] = this.createHttpProvider(w, (d = this.namespace.rpcMap) == null ? void 0 : d[i]);\n    }), u;\n  }\n  getHttpProvider() {\n    const u = `${this.name}:${this.chainId}`,\n      i = this.httpProviders[u];\n    if (typeof i > \"u\") throw new Error(`JSON-RPC provider for ${u} not found`);\n    return i;\n  }\n  setHttpProvider(u, i) {\n    const d = this.createHttpProvider(u, i);\n    d && (this.httpProviders[u] = d);\n  }\n  createHttpProvider(u, i) {\n    const d = i || ft(u, this.namespace, this.client.core.projectId);\n    if (!d) throw new Error(`No RPC url provided for chainId: ${u}`);\n    return new ot(new At(d, z(\"disableProviderPing\")));\n  }\n}\nclass ev {\n  constructor(u) {\n    this.name = \"cip34\", this.namespace = u.namespace, this.events = z(\"events\"), this.client = z(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n  }\n  updateNamespace(u) {\n    this.namespace = Object.assign(this.namespace, u);\n  }\n  requestAccounts() {\n    return this.getAccounts();\n  }\n  getDefaultChain() {\n    if (this.chainId) return this.chainId;\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n    const u = this.namespace.chains[0];\n    if (!u) throw new Error(\"ChainId not found\");\n    return u.split(\":\")[1];\n  }\n  request(u) {\n    return this.namespace.methods.includes(u.request.method) ? this.client.request(u) : this.getHttpProvider().request(u.request);\n  }\n  setDefaultChain(u, i) {\n    this.httpProviders[u] || this.setHttpProvider(u, i), this.chainId = u, this.events.emit(Vn.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);\n  }\n  getAccounts() {\n    const u = this.namespace.accounts;\n    return u ? [...new Set(u.filter(i => i.split(\":\")[1] === this.chainId.toString()).map(i => i.split(\":\")[2]))] : [];\n  }\n  createHttpProviders() {\n    const u = {};\n    return this.namespace.chains.forEach(i => {\n      const d = this.getCardanoRPCUrl(i),\n        w = Ct(i);\n      u[w] = this.createHttpProvider(w, d);\n    }), u;\n  }\n  getHttpProvider() {\n    const u = `${this.name}:${this.chainId}`,\n      i = this.httpProviders[u];\n    if (typeof i > \"u\") throw new Error(`JSON-RPC provider for ${u} not found`);\n    return i;\n  }\n  getCardanoRPCUrl(u) {\n    const i = this.namespace.rpcMap;\n    if (i) return i[u];\n  }\n  setHttpProvider(u, i) {\n    const d = this.createHttpProvider(u, i);\n    d && (this.httpProviders[u] = d);\n  }\n  createHttpProvider(u, i) {\n    const d = i || this.getCardanoRPCUrl(u);\n    if (!d) throw new Error(`No RPC url provided for chainId: ${u}`);\n    return new ot(new At(d, z(\"disableProviderPing\")));\n  }\n}\nclass rv {\n  constructor(u) {\n    this.name = \"elrond\", this.namespace = u.namespace, this.events = z(\"events\"), this.client = z(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n  }\n  updateNamespace(u) {\n    this.namespace = Object.assign(this.namespace, u);\n  }\n  requestAccounts() {\n    return this.getAccounts();\n  }\n  request(u) {\n    return this.namespace.methods.includes(u.request.method) ? this.client.request(u) : this.getHttpProvider().request(u.request);\n  }\n  setDefaultChain(u, i) {\n    this.httpProviders[u] || this.setHttpProvider(u, i), this.chainId = u, this.events.emit(Vn.DEFAULT_CHAIN_CHANGED, `${this.name}:${u}`);\n  }\n  getDefaultChain() {\n    if (this.chainId) return this.chainId;\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n    const u = this.namespace.chains[0];\n    if (!u) throw new Error(\"ChainId not found\");\n    return u.split(\":\")[1];\n  }\n  getAccounts() {\n    const u = this.namespace.accounts;\n    return u ? [...new Set(u.filter(i => i.split(\":\")[1] === this.chainId.toString()).map(i => i.split(\":\")[2]))] : [];\n  }\n  createHttpProviders() {\n    const u = {};\n    return this.namespace.chains.forEach(i => {\n      var d;\n      const w = Ct(i);\n      u[w] = this.createHttpProvider(w, (d = this.namespace.rpcMap) == null ? void 0 : d[i]);\n    }), u;\n  }\n  getHttpProvider() {\n    const u = `${this.name}:${this.chainId}`,\n      i = this.httpProviders[u];\n    if (typeof i > \"u\") throw new Error(`JSON-RPC provider for ${u} not found`);\n    return i;\n  }\n  setHttpProvider(u, i) {\n    const d = this.createHttpProvider(u, i);\n    d && (this.httpProviders[u] = d);\n  }\n  createHttpProvider(u, i) {\n    const d = i || ft(u, this.namespace, this.client.core.projectId);\n    if (!d) throw new Error(`No RPC url provided for chainId: ${u}`);\n    return new ot(new At(d, z(\"disableProviderPing\")));\n  }\n}\nclass iv {\n  constructor(u) {\n    this.name = \"multiversx\", this.namespace = u.namespace, this.events = z(\"events\"), this.client = z(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n  }\n  updateNamespace(u) {\n    this.namespace = Object.assign(this.namespace, u);\n  }\n  requestAccounts() {\n    return this.getAccounts();\n  }\n  request(u) {\n    return this.namespace.methods.includes(u.request.method) ? this.client.request(u) : this.getHttpProvider().request(u.request);\n  }\n  setDefaultChain(u, i) {\n    this.httpProviders[u] || this.setHttpProvider(u, i), this.chainId = u, this.events.emit(Vn.DEFAULT_CHAIN_CHANGED, `${this.name}:${u}`);\n  }\n  getDefaultChain() {\n    if (this.chainId) return this.chainId;\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n    const u = this.namespace.chains[0];\n    if (!u) throw new Error(\"ChainId not found\");\n    return u.split(\":\")[1];\n  }\n  getAccounts() {\n    const u = this.namespace.accounts;\n    return u ? [...new Set(u.filter(i => i.split(\":\")[1] === this.chainId.toString()).map(i => i.split(\":\")[2]))] : [];\n  }\n  createHttpProviders() {\n    const u = {};\n    return this.namespace.chains.forEach(i => {\n      var d;\n      const w = Ct(i);\n      u[w] = this.createHttpProvider(w, (d = this.namespace.rpcMap) == null ? void 0 : d[i]);\n    }), u;\n  }\n  getHttpProvider() {\n    const u = `${this.name}:${this.chainId}`,\n      i = this.httpProviders[u];\n    if (typeof i > \"u\") throw new Error(`JSON-RPC provider for ${u} not found`);\n    return i;\n  }\n  setHttpProvider(u, i) {\n    const d = this.createHttpProvider(u, i);\n    d && (this.httpProviders[u] = d);\n  }\n  createHttpProvider(u, i) {\n    const d = i || ft(u, this.namespace, this.client.core.projectId);\n    if (!d) throw new Error(`No RPC url provided for chainId: ${u}`);\n    return new ot(new At(d, z(\"disableProviderPing\")));\n  }\n}\nclass sv {\n  constructor(u) {\n    this.name = \"near\", this.namespace = u.namespace, this.events = z(\"events\"), this.client = z(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n  }\n  updateNamespace(u) {\n    this.namespace = Object.assign(this.namespace, u);\n  }\n  requestAccounts() {\n    return this.getAccounts();\n  }\n  getDefaultChain() {\n    if (this.chainId) return this.chainId;\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n    const u = this.namespace.chains[0];\n    if (!u) throw new Error(\"ChainId not found\");\n    return u.split(\":\")[1];\n  }\n  request(u) {\n    return this.namespace.methods.includes(u.request.method) ? this.client.request(u) : this.getHttpProvider().request(u.request);\n  }\n  setDefaultChain(u, i) {\n    if (this.chainId = u, !this.httpProviders[u]) {\n      const d = i || ft(`${this.name}:${u}`, this.namespace);\n      if (!d) throw new Error(`No RPC url provided for chainId: ${u}`);\n      this.setHttpProvider(u, d);\n    }\n    this.events.emit(Vn.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);\n  }\n  getAccounts() {\n    const u = this.namespace.accounts;\n    return u ? u.filter(i => i.split(\":\")[1] === this.chainId.toString()).map(i => i.split(\":\")[2]) || [] : [];\n  }\n  createHttpProviders() {\n    const u = {};\n    return this.namespace.chains.forEach(i => {\n      var d;\n      u[i] = this.createHttpProvider(i, (d = this.namespace.rpcMap) == null ? void 0 : d[i]);\n    }), u;\n  }\n  getHttpProvider() {\n    const u = `${this.name}:${this.chainId}`,\n      i = this.httpProviders[u];\n    if (typeof i > \"u\") throw new Error(`JSON-RPC provider for ${u} not found`);\n    return i;\n  }\n  setHttpProvider(u, i) {\n    const d = this.createHttpProvider(u, i);\n    d && (this.httpProviders[u] = d);\n  }\n  createHttpProvider(u, i) {\n    const d = i || ft(u, this.namespace);\n    return typeof d > \"u\" ? void 0 : new ot(new At(d, z(\"disableProviderPing\")));\n  }\n}\nvar uv = Object.defineProperty,\n  av = Object.defineProperties,\n  ov = Object.getOwnPropertyDescriptors,\n  Ta = Object.getOwnPropertySymbols,\n  fv = Object.prototype.hasOwnProperty,\n  cv = Object.prototype.propertyIsEnumerable,\n  La = (A, u, i) => u in A ? uv(A, u, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: i\n  }) : A[u] = i,\n  hr = (A, u) => {\n    for (var i in u || (u = {})) fv.call(u, i) && La(A, i, u[i]);\n    if (Ta) for (var i of Ta(u)) cv.call(u, i) && La(A, i, u[i]);\n    return A;\n  },\n  Mi = (A, u) => av(A, ov(u));\nclass lr {\n  constructor(u) {\n    this.events = new Ug(), this.rpcProviders = {}, this.shouldAbortPairingAttempt = !1, this.maxPairingAttempts = 10, this.disableProviderPing = !1, this.providerOpts = u, this.logger = typeof u?.logger < \"u\" && typeof u?.logger != \"string\" ? u.logger : Hg(Ng({\n      level: u?.logger || Ia\n    })), this.disableProviderPing = u?.disableProviderPing || !1;\n  }\n  static async init(u) {\n    const i = new lr(u);\n    return await i.initialize(), i;\n  }\n  async request(u, i, d) {\n    const [w, L] = this.validateChain(i);\n    if (!this.session) throw new Error(\"Please call connect() before request()\");\n    return await this.getProvider(w).request({\n      request: hr({}, u),\n      chainId: `${w}:${L}`,\n      topic: this.session.topic,\n      expiry: d\n    });\n  }\n  sendAsync(u, i, d, w) {\n    const L = new Date().getTime();\n    this.request(u, d, w).then(D => i(null, Wg(L, D))).catch(D => i(D, void 0));\n  }\n  async enable() {\n    if (!this.client) throw new Error(\"Sign Client not initialized\");\n    return this.session || (await this.connect({\n      namespaces: this.namespaces,\n      optionalNamespaces: this.optionalNamespaces,\n      sessionProperties: this.sessionProperties\n    })), await this.requestAccounts();\n  }\n  async disconnect() {\n    var u;\n    if (!this.session) throw new Error(\"Please call connect() before enable()\");\n    await this.client.disconnect({\n      topic: (u = this.session) == null ? void 0 : u.topic,\n      reason: Aa(\"USER_DISCONNECTED\")\n    }), await this.cleanup();\n  }\n  async connect(u) {\n    if (!this.client) throw new Error(\"Sign Client not initialized\");\n    if (this.setNamespaces(u), await this.cleanupPendingPairings(), !u.skipPairing) return await this.pair(u.pairingTopic);\n  }\n  on(u, i) {\n    this.events.on(u, i);\n  }\n  once(u, i) {\n    this.events.once(u, i);\n  }\n  removeListener(u, i) {\n    this.events.removeListener(u, i);\n  }\n  off(u, i) {\n    this.events.off(u, i);\n  }\n  get isWalletConnect() {\n    return !0;\n  }\n  async pair(u) {\n    this.shouldAbortPairingAttempt = !1;\n    let i = 0;\n    do {\n      if (this.shouldAbortPairingAttempt) throw new Error(\"Pairing aborted\");\n      if (i >= this.maxPairingAttempts) throw new Error(\"Max auto pairing attempts reached\");\n      const {\n        uri: d,\n        approval: w\n      } = await this.client.connect({\n        pairingTopic: u,\n        requiredNamespaces: this.namespaces,\n        optionalNamespaces: this.optionalNamespaces,\n        sessionProperties: this.sessionProperties\n      });\n      d && (this.uri = d, this.events.emit(\"display_uri\", d)), await w().then(L => {\n        this.session = L;\n        const D = Vg(L.namespaces);\n        this.namespaces = Oa(this.namespaces, D), this.persist(\"namespaces\", this.namespaces);\n      }).catch(L => {\n        if (L.message !== Tg) throw L;\n        i++;\n      });\n    } while (!this.session);\n    return this.onConnect(), this.session;\n  }\n  setDefaultChain(u, i) {\n    try {\n      if (!this.session) return;\n      const [d, w] = this.validateChain(u);\n      this.getProvider(d).setDefaultChain(w, i);\n    } catch (d) {\n      if (!/Please call connect/.test(d.message)) throw d;\n    }\n  }\n  async cleanupPendingPairings(u = {}) {\n    this.logger.info(\"Cleaning up inactive pairings...\");\n    const i = this.client.pairing.getAll();\n    if (Ca(i)) {\n      for (const d of i) u.deletePairings ? this.client.core.expirer.set(d.topic, 0) : await this.client.core.relayer.subscriber.unsubscribe(d.topic);\n      this.logger.info(`Inactive pairings cleared: ${i.length}`);\n    }\n  }\n  abortPairingAttempt() {\n    this.shouldAbortPairingAttempt = !0;\n  }\n  async checkStorage() {\n    if (this.namespaces = await this.getFromStore(\"namespaces\"), this.optionalNamespaces = (await this.getFromStore(\"optionalNamespaces\")) || {}, this.client.session.length) {\n      const u = this.client.session.keys.length - 1;\n      this.session = this.client.session.get(this.client.session.keys[u]), this.createProviders();\n    }\n  }\n  async initialize() {\n    this.logger.trace(\"Initialized\"), await this.createClient(), await this.checkStorage(), this.registerEventListeners();\n  }\n  async createClient() {\n    this.client = this.providerOpts.client || (await bg.init({\n      logger: this.providerOpts.logger || Ia,\n      relayUrl: this.providerOpts.relayUrl || Fg,\n      projectId: this.providerOpts.projectId,\n      metadata: this.providerOpts.metadata,\n      storageOptions: this.providerOpts.storageOptions,\n      storage: this.providerOpts.storage,\n      name: this.providerOpts.name\n    })), this.logger.trace(\"SignClient Initialized\");\n  }\n  createProviders() {\n    if (!this.client) throw new Error(\"Sign Client not initialized\");\n    if (!this.session) throw new Error(\"Session not initialized. Please call connect() before enable()\");\n    const u = [...new Set(Object.keys(this.session.namespaces).map(i => de(i)))];\n    Fi(\"client\", this.client), Fi(\"events\", this.events), Fi(\"disableProviderPing\", this.disableProviderPing), u.forEach(i => {\n      if (!this.session) return;\n      const d = Xg(i, this.session),\n        w = Sa(d),\n        L = Oa(this.namespaces, this.optionalNamespaces),\n        D = Mi(hr({}, L[i]), {\n          accounts: d,\n          chains: w\n        });\n      switch (i) {\n        case \"eip155\":\n          this.rpcProviders[i] = new jg({\n            namespace: D\n          });\n          break;\n        case \"solana\":\n          this.rpcProviders[i] = new nv({\n            namespace: D\n          });\n          break;\n        case \"cosmos\":\n          this.rpcProviders[i] = new tv({\n            namespace: D\n          });\n          break;\n        case \"polkadot\":\n          this.rpcProviders[i] = new kg({\n            namespace: D\n          });\n          break;\n        case \"cip34\":\n          this.rpcProviders[i] = new ev({\n            namespace: D\n          });\n          break;\n        case \"elrond\":\n          this.rpcProviders[i] = new rv({\n            namespace: D\n          });\n          break;\n        case \"multiversx\":\n          this.rpcProviders[i] = new iv({\n            namespace: D\n          });\n          break;\n        case \"near\":\n          this.rpcProviders[i] = new sv({\n            namespace: D\n          });\n          break;\n      }\n    });\n  }\n  registerEventListeners() {\n    if (typeof this.client > \"u\") throw new Error(\"Sign Client is not initialized\");\n    this.client.on(\"session_ping\", u => {\n      this.events.emit(\"session_ping\", u);\n    }), this.client.on(\"session_event\", u => {\n      const {\n          params: i\n        } = u,\n        {\n          event: d\n        } = i;\n      if (d.name === \"accountsChanged\") {\n        const w = d.data;\n        w && Ca(w) && this.events.emit(\"accountsChanged\", w.map(Qg));\n      } else if (d.name === \"chainChanged\") {\n        const w = i.chainId,\n          L = i.event.data,\n          D = de(w),\n          En = Wi(w) !== Wi(L) ? `${D}:${Wi(L)}` : w;\n        this.onChainChanged(En);\n      } else this.events.emit(d.name, d.data);\n      this.events.emit(\"session_event\", u);\n    }), this.client.on(\"session_update\", ({\n      topic: u,\n      params: i\n    }) => {\n      var d;\n      const {\n          namespaces: w\n        } = i,\n        L = (d = this.client) == null ? void 0 : d.session.get(u);\n      this.session = Mi(hr({}, L), {\n        namespaces: w\n      }), this.onSessionUpdate(), this.events.emit(\"session_update\", {\n        topic: u,\n        params: i\n      });\n    }), this.client.on(\"session_delete\", async u => {\n      await this.cleanup(), this.events.emit(\"session_delete\", u), this.events.emit(\"disconnect\", Mi(hr({}, Aa(\"USER_DISCONNECTED\")), {\n        data: u.topic\n      }));\n    }), this.on(Vn.DEFAULT_CHAIN_CHANGED, u => {\n      this.onChainChanged(u, !0);\n    });\n  }\n  getProvider(u) {\n    if (!this.rpcProviders[u]) throw new Error(`Provider not found: ${u}`);\n    return this.rpcProviders[u];\n  }\n  onSessionUpdate() {\n    Object.keys(this.rpcProviders).forEach(u => {\n      var i;\n      this.getProvider(u).updateNamespace((i = this.session) == null ? void 0 : i.namespaces[u]);\n    });\n  }\n  setNamespaces(u) {\n    const {\n      namespaces: i,\n      optionalNamespaces: d,\n      sessionProperties: w\n    } = u;\n    i && Object.keys(i).length && (this.namespaces = i), d && Object.keys(d).length && (this.optionalNamespaces = d), this.sessionProperties = w, this.persist(\"namespaces\", i), this.persist(\"optionalNamespaces\", d);\n  }\n  validateChain(u) {\n    const [i, d] = u?.split(\":\") || [\"\", \"\"];\n    if (!this.namespaces || !Object.keys(this.namespaces).length) return [i, d];\n    if (i && !Object.keys(this.namespaces || {}).map(D => de(D)).includes(i)) throw new Error(`Namespace '${i}' is not configured. Please call connect() first with namespace config.`);\n    if (i && d) return [i, d];\n    const w = de(Object.keys(this.namespaces)[0]),\n      L = this.rpcProviders[w].getDefaultChain();\n    return [w, L];\n  }\n  async requestAccounts() {\n    const [u] = this.validateChain();\n    return await this.getProvider(u).requestAccounts();\n  }\n  onChainChanged(u, i = !1) {\n    if (!this.namespaces) return;\n    const [d, w] = this.validateChain(u);\n    w && (i || this.getProvider(d).setDefaultChain(w), this.namespaces[d] ? this.namespaces[d].defaultChain = w : this.namespaces[`${d}:${w}`] ? this.namespaces[`${d}:${w}`].defaultChain = w : this.namespaces[`${d}:${w}`] = {\n      defaultChain: w\n    }, this.persist(\"namespaces\", this.namespaces), this.events.emit(\"chainChanged\", w));\n  }\n  onConnect() {\n    this.createProviders(), this.events.emit(\"connect\", {\n      session: this.session\n    });\n  }\n  async cleanup() {\n    this.session = void 0, this.namespaces = void 0, this.optionalNamespaces = void 0, this.sessionProperties = void 0, this.persist(\"namespaces\", void 0), this.persist(\"optionalNamespaces\", void 0), this.persist(\"sessionProperties\", void 0), await this.cleanupPendingPairings({\n      deletePairings: !0\n    });\n  }\n  persist(u, i) {\n    this.client.core.storage.setItem(`${xa}/${u}`, i);\n  }\n  async getFromStore(u) {\n    return await this.client.core.storage.getItem(`${xa}/${u}`);\n  }\n}\nconst hv = lr;\nexport { hv as UniversalProvider, lr as default };","map":{"version":3,"names":["t","n","replace","P","y","H","$","dn","sn","gn","m","slice","v","Ao","hf","c","b","_a","U","o","I","apply","i","f","source","Ei","Ud","W","toLowerCase","Wd","toUpperCase","Fd","e","ys","ln","r","On","s","Ss","Os","ut","join","Md","bs","qd","Er","Bd","Da","Ha","K","separator","R","length","omission","Lt","Dt","l","yi","search","_","global","Br","Ji","exec","lastIndex","index","indexOf","lastIndexOf","Gd","ka","test","Ki","mf","zd","Mt","Ri","mu","va","pf","Af","rf","match","T","cn","S","Kd","Yn","mn","Wn","zn","Ii","Yd","x","G","wn","D","Zd","mc","An","Ln","bi","Jd","Xd","Pu","Qd","fn","Ti","Qs","Vd","ks","kd","js","jd","ae","ng","Li","V","ze","chain","Jn","prototype","__chain__","__wrapped__","__actions__","un","push","func","args","arguments","thisArg","nt","value","tg","k","Sf","Di","eg","nu","rg","ci","ig","As","sg","Nr","ma","_i","$r","Nc","ug","_t","ag","Cu","og","Hi","Ni","fg","cg","hg","lg","kn","Nn","nn","Fr","pg","O","pn","Wu","dg","Ef","gg","Qe","vg","hi","_g","mg","wg","Ge","Qr","Pg","Ag","xs","Cg","Ig","ni","xg","Eg","yg","Sg","Og","Wr","Rg","a","after","Vl","ary","Xu","assign","Wp","assignIn","fa","assignInWith","fr","assignWith","Fp","at","Mp","before","Qu","bind","bindAll","bindKey","Vu","castArray","fp","Yu","chunk","mh","compact","wh","concat","Ph","cond","conforms","constant","countBy","Ol","create","qp","curry","ku","curryRight","ju","debounce","na","defaults","Bp","defaultsDeep","Gp","defer","kl","delay","jl","difference","Ah","differenceBy","Ch","differenceWith","Ih","drop","xh","dropRight","Eh","dropRightWhile","yh","dropWhile","Sh","fill","Oh","filter","bl","flatMap","Dl","flatMapDeep","Hl","flatMapDepth","Nl","flatten","Bu","flattenDeep","Rh","flattenDepth","bh","flip","np","flow","flowRight","fromPairs","Th","functions","Qp","functionsIn","Vp","groupBy","$l","initial","Dh","intersection","Hh","intersectionBy","Nh","intersectionWith","$h","invert","jp","invertBy","nd","invokeMap","Wl","iteratee","keyBy","Fl","keys","keysIn","on","map","rr","mapKeys","ed","mapValues","rd","matches","matchesProperty","memoize","sr","merge","id","mergeWith","ca","method","methodOf","mixin","negate","ur","nthArg","omit","sd","omitBy","ud","once","tp","orderBy","Ml","over","overArgs","ep","overEvery","overSome","partial","xi","partialRight","ta","partition","ql","pick","ad","pickBy","ha","property","propertyOf","pull","Mh","pullAll","zu","pullAllBy","qh","pullAllWith","Bh","pullAt","Gh","range","rangeRight","rearg","rp","reject","zl","remove","zh","rest","ip","reverse","Ai","sampleSize","Yl","set","fd","setWith","cd","shuffle","Zl","Kh","sortBy","Ql","sortedUniq","kh","sortedUniqBy","jh","split","Dd","spread","sp","tail","nl","take","tl","takeRight","el","takeRightWhile","rl","takeWhile","il","tap","wl","throttle","up","thru","er","toArray","ua","toPairs","la","toPairsIn","pa","toPath","toPlainObject","oa","transform","hd","unary","ap","union","sl","unionBy","ul","unionWith","al","uniq","ol","uniqBy","fl","uniqWith","cl","unset","ld","unzip","Ci","unzipWith","Ku","update","pd","updateWith","dd","values","Gt","valuesIn","gd","without","hl","words","wrap","op","xor","ll","xorBy","pl","xorWith","dl","zip","gl","zipObject","vl","zipObjectDeep","_l","zipWith","ml","entries","entriesIn","extend","extendWith","add","attempt","camelCase","wd","capitalize","da","ceil","clamp","vd","clone","cp","cloneDeep","lp","cloneDeepWith","pp","cloneWith","hp","conformsTo","dp","deburr","ga","defaultTo","divide","endsWith","Pd","eq","bn","escape","Ad","escapeRegExp","Cd","every","Rl","find","Tl","findIndex","Mu","findKey","zp","findLast","Ll","findLastIndex","qu","findLastKey","Kp","floor","forEach","Zu","forEachRight","Ju","forIn","Yp","forInRight","Zp","forOwn","Jp","forOwnRight","Xp","get","Si","gt","gp","gte","vp","has","kp","hasIn","Oi","head","Gu","identity","includes","Ul","Lh","inRange","_d","invoke","td","isArguments","Pt","isArray","isArrayBuffer","_p","isArrayLike","an","isArrayLikeObject","Z","isBoolean","mp","isBuffer","isDate","wp","isElement","Pp","isEmpty","Ap","isEqual","Cp","isEqualWith","Ip","isError","isFinite","xp","isFunction","isInteger","ea","isLength","ar","isMap","ra","isMatch","Ep","isMatchWith","yp","isNaN","Sp","isNative","Op","isNil","bp","isNull","Rp","isNumber","ia","isObject","isObjectLike","Y","isPlainObject","pe","isRegExp","isSafeInteger","Tp","isSet","sa","isString","or","isSymbol","isTypedArray","Bt","isUndefined","Lp","isWeakMap","Dp","isWeakSet","Hp","Uh","kebabCase","Id","last","In","Wh","lowerCase","xd","lowerFirst","Ed","lt","Np","lte","$p","max","maxBy","mean","meanBy","min","minBy","stubArray","stubFalse","stubObject","stubString","stubTrue","multiply","nth","Fh","noConflict","noop","now","ir","pad","yd","padEnd","Sd","padStart","Od","parseInt","Rd","random","md","reduce","Bl","reduceRight","Gl","repeat","bd","Td","result","od","round","runInContext","h","sample","Kl","size","Jl","snakeCase","Ld","some","Xl","sortedIndex","Yh","sortedIndexBy","Zh","sortedIndexOf","Jh","sortedLastIndex","Xh","sortedLastIndexBy","Qh","sortedLastIndexOf","Vh","startCase","Hd","startsWith","Nd","subtract","sum","sumBy","template","$d","times","toFinite","Xn","toInteger","toLength","aa","toLower","toNumber","xn","toSafeInteger","Up","toString","toUpper","trim","trimEnd","trimStart","truncate","unescape","uniqueId","upperCase","upperFirst","each","eachRight","first","$n","F","call","VERSION","d","placeholder","N","Q","__filtered__","__takeCount__","__views__","type","__dir__","Bi","Wa","__iteratees__","E","Pn","Oe","name","Ut","Xe","ct","Gf","zf","Kf","Pl","Al","commit","Cl","next","Il","plant","El","yl","toJSON","valueOf","Sl","ne","xl","Ht","Cf","exports","Tr","ge","Ui","Gg","Object","defineProperty","zg","defineProperties","Kg","getOwnPropertyDescriptors","Ea","getOwnPropertySymbols","Yg","hasOwnProperty","Zg","propertyIsEnumerable","ya","A","u","enumerable","configurable","writable","cr","Jg","ft","w","Dg","rpcMap","reference","Bg","namespace","Ct","Sa","Xg","namespaces","L","accounts","Oa","Ra","Lg","En","zt","Pa","chains","pr","methods","It","events","Fn","de","$i","Qg","Vg","Wi","Number","ba","z","Fi","kg","constructor","client","chainId","getDefaultChain","httpProviders","createHttpProviders","updateNamespace","requestAccounts","getAccounts","defaultChain","Error","request","getHttpProvider","setDefaultChain","setHttpProvider","emit","Vn","DEFAULT_CHAIN_CHANGED","createHttpProvider","core","projectId","ot","At","jg","handleSwitchChain","$g","Set","params","isChainApproved","topic","nv","tv","ev","getCardanoRPCUrl","rv","iv","sv","uv","av","ov","Ta","fv","cv","La","hr","Mi","lr","Ug","rpcProviders","shouldAbortPairingAttempt","maxPairingAttempts","disableProviderPing","providerOpts","logger","Hg","Ng","level","Ia","init","initialize","validateChain","session","getProvider","expiry","sendAsync","Date","getTime","then","Wg","catch","enable","connect","optionalNamespaces","sessionProperties","disconnect","reason","Aa","cleanup","setNamespaces","cleanupPendingPairings","skipPairing","pair","pairingTopic","removeListener","off","isWalletConnect","uri","approval","requiredNamespaces","persist","message","Tg","onConnect","info","pairing","getAll","Ca","deletePairings","expirer","relayer","subscriber","unsubscribe","abortPairingAttempt","checkStorage","getFromStore","createProviders","trace","createClient","registerEventListeners","bg","relayUrl","Fg","metadata","storageOptions","storage","event","data","onChainChanged","onSessionUpdate","setItem","xa","getItem","hv","UniversalProvider","default"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@walletconnect/universal-provider/src/constants/values.ts","/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@walletconnect/universal-provider/src/constants/events.ts","/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/node_modules/lodash/lodash.js","/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@walletconnect/universal-provider/src/utils/misc.ts","/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@walletconnect/universal-provider/src/utils/globals.ts","/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@walletconnect/universal-provider/src/providers/polkadot.ts","/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@walletconnect/universal-provider/src/providers/eip155.ts","/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@walletconnect/universal-provider/src/providers/solana.ts","/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@walletconnect/universal-provider/src/providers/cosmos.ts","/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@walletconnect/universal-provider/src/providers/cardano.ts","/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@walletconnect/universal-provider/src/providers/elrond.ts","/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@walletconnect/universal-provider/src/providers/multiversx.ts","/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@walletconnect/universal-provider/src/providers/near.ts","/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@walletconnect/universal-provider/src/UniversalProvider.ts","/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@walletconnect/universal-provider/src/index.ts"],"sourcesContent":["export const LOGGER = \"error\";\n\nexport const RELAY_URL = \"wss://relay.walletconnect.com\";\n\nexport const PROTOCOL = \"wc\";\nexport const WC_VERSION = 2;\nexport const CONTEXT = \"universal_provider\";\n\nexport const STORAGE = `${PROTOCOL}@${WC_VERSION}:${CONTEXT}:`;\n\nexport const RPC_URL = \"https://rpc.walletconnect.com/v1/\";\n","export const PROVIDER_EVENTS = {\n  DEFAULT_CHAIN_CHANGED: \"default_chain_changed\",\n};\n","/**\n * @license\n * Lodash <https://lodash.com/>\n * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n;(function() {\n\n  /** Used as a safe reference for `undefined` in pre-ES5 environments. */\n  var undefined;\n\n  /** Used as the semantic version number. */\n  var VERSION = '4.17.21';\n\n  /** Used as the size to enable large array optimizations. */\n  var LARGE_ARRAY_SIZE = 200;\n\n  /** Error message constants. */\n  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',\n      FUNC_ERROR_TEXT = 'Expected a function',\n      INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';\n\n  /** Used to stand-in for `undefined` hash values. */\n  var HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n  /** Used as the maximum memoize cache size. */\n  var MAX_MEMOIZE_SIZE = 500;\n\n  /** Used as the internal argument placeholder. */\n  var PLACEHOLDER = '__lodash_placeholder__';\n\n  /** Used to compose bitmasks for cloning. */\n  var CLONE_DEEP_FLAG = 1,\n      CLONE_FLAT_FLAG = 2,\n      CLONE_SYMBOLS_FLAG = 4;\n\n  /** Used to compose bitmasks for value comparisons. */\n  var COMPARE_PARTIAL_FLAG = 1,\n      COMPARE_UNORDERED_FLAG = 2;\n\n  /** Used to compose bitmasks for function metadata. */\n  var WRAP_BIND_FLAG = 1,\n      WRAP_BIND_KEY_FLAG = 2,\n      WRAP_CURRY_BOUND_FLAG = 4,\n      WRAP_CURRY_FLAG = 8,\n      WRAP_CURRY_RIGHT_FLAG = 16,\n      WRAP_PARTIAL_FLAG = 32,\n      WRAP_PARTIAL_RIGHT_FLAG = 64,\n      WRAP_ARY_FLAG = 128,\n      WRAP_REARG_FLAG = 256,\n      WRAP_FLIP_FLAG = 512;\n\n  /** Used as default options for `_.truncate`. */\n  var DEFAULT_TRUNC_LENGTH = 30,\n      DEFAULT_TRUNC_OMISSION = '...';\n\n  /** Used to detect hot functions by number of calls within a span of milliseconds. */\n  var HOT_COUNT = 800,\n      HOT_SPAN = 16;\n\n  /** Used to indicate the type of lazy iteratees. */\n  var LAZY_FILTER_FLAG = 1,\n      LAZY_MAP_FLAG = 2,\n      LAZY_WHILE_FLAG = 3;\n\n  /** Used as references for various `Number` constants. */\n  var INFINITY = 1 / 0,\n      MAX_SAFE_INTEGER = 9007199254740991,\n      MAX_INTEGER = 1.7976931348623157e+308,\n      NAN = 0 / 0;\n\n  /** Used as references for the maximum length and index of an array. */\n  var MAX_ARRAY_LENGTH = 4294967295,\n      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,\n      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;\n\n  /** Used to associate wrap methods with their bit flags. */\n  var wrapFlags = [\n    ['ary', WRAP_ARY_FLAG],\n    ['bind', WRAP_BIND_FLAG],\n    ['bindKey', WRAP_BIND_KEY_FLAG],\n    ['curry', WRAP_CURRY_FLAG],\n    ['curryRight', WRAP_CURRY_RIGHT_FLAG],\n    ['flip', WRAP_FLIP_FLAG],\n    ['partial', WRAP_PARTIAL_FLAG],\n    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],\n    ['rearg', WRAP_REARG_FLAG]\n  ];\n\n  /** `Object#toString` result references. */\n  var argsTag = '[object Arguments]',\n      arrayTag = '[object Array]',\n      asyncTag = '[object AsyncFunction]',\n      boolTag = '[object Boolean]',\n      dateTag = '[object Date]',\n      domExcTag = '[object DOMException]',\n      errorTag = '[object Error]',\n      funcTag = '[object Function]',\n      genTag = '[object GeneratorFunction]',\n      mapTag = '[object Map]',\n      numberTag = '[object Number]',\n      nullTag = '[object Null]',\n      objectTag = '[object Object]',\n      promiseTag = '[object Promise]',\n      proxyTag = '[object Proxy]',\n      regexpTag = '[object RegExp]',\n      setTag = '[object Set]',\n      stringTag = '[object String]',\n      symbolTag = '[object Symbol]',\n      undefinedTag = '[object Undefined]',\n      weakMapTag = '[object WeakMap]',\n      weakSetTag = '[object WeakSet]';\n\n  var arrayBufferTag = '[object ArrayBuffer]',\n      dataViewTag = '[object DataView]',\n      float32Tag = '[object Float32Array]',\n      float64Tag = '[object Float64Array]',\n      int8Tag = '[object Int8Array]',\n      int16Tag = '[object Int16Array]',\n      int32Tag = '[object Int32Array]',\n      uint8Tag = '[object Uint8Array]',\n      uint8ClampedTag = '[object Uint8ClampedArray]',\n      uint16Tag = '[object Uint16Array]',\n      uint32Tag = '[object Uint32Array]';\n\n  /** Used to match empty string literals in compiled template source. */\n  var reEmptyStringLeading = /\\b__p \\+= '';/g,\n      reEmptyStringMiddle = /\\b(__p \\+=) '' \\+/g,\n      reEmptyStringTrailing = /(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g;\n\n  /** Used to match HTML entities and HTML characters. */\n  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,\n      reUnescapedHtml = /[&<>\"']/g,\n      reHasEscapedHtml = RegExp(reEscapedHtml.source),\n      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);\n\n  /** Used to match template delimiters. */\n  var reEscape = /<%-([\\s\\S]+?)%>/g,\n      reEvaluate = /<%([\\s\\S]+?)%>/g,\n      reInterpolate = /<%=([\\s\\S]+?)%>/g;\n\n  /** Used to match property names within property paths. */\n  var reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n      reIsPlainProp = /^\\w*$/,\n      rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n  /**\n   * Used to match `RegExp`\n   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n   */\n  var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g,\n      reHasRegExpChar = RegExp(reRegExpChar.source);\n\n  /** Used to match leading whitespace. */\n  var reTrimStart = /^\\s+/;\n\n  /** Used to match a single whitespace character. */\n  var reWhitespace = /\\s/;\n\n  /** Used to match wrap detail comments. */\n  var reWrapComment = /\\{(?:\\n\\/\\* \\[wrapped with .+\\] \\*\\/)?\\n?/,\n      reWrapDetails = /\\{\\n\\/\\* \\[wrapped with (.+)\\] \\*/,\n      reSplitDetails = /,? & /;\n\n  /** Used to match words composed of alphanumeric characters. */\n  var reAsciiWord = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g;\n\n  /**\n   * Used to validate the `validate` option in `_.template` variable.\n   *\n   * Forbids characters which could potentially change the meaning of the function argument definition:\n   * - \"(),\" (modification of function parameters)\n   * - \"=\" (default value)\n   * - \"[]{}\" (destructuring of function parameters)\n   * - \"/\" (beginning of a comment)\n   * - whitespace\n   */\n  var reForbiddenIdentifierChars = /[()=,{}\\[\\]\\/\\s]/;\n\n  /** Used to match backslashes in property paths. */\n  var reEscapeChar = /\\\\(\\\\)?/g;\n\n  /**\n   * Used to match\n   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).\n   */\n  var reEsTemplate = /\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g;\n\n  /** Used to match `RegExp` flags from their coerced string values. */\n  var reFlags = /\\w*$/;\n\n  /** Used to detect bad signed hexadecimal string values. */\n  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n  /** Used to detect binary string values. */\n  var reIsBinary = /^0b[01]+$/i;\n\n  /** Used to detect host constructors (Safari). */\n  var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n  /** Used to detect octal string values. */\n  var reIsOctal = /^0o[0-7]+$/i;\n\n  /** Used to detect unsigned integer values. */\n  var reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n  /** Used to match Latin Unicode letters (excluding mathematical operators). */\n  var reLatin = /[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g;\n\n  /** Used to ensure capturing order of template delimiters. */\n  var reNoMatch = /($^)/;\n\n  /** Used to match unescaped characters in compiled string literals. */\n  var reUnescapedString = /['\\n\\r\\u2028\\u2029\\\\]/g;\n\n  /** Used to compose unicode character classes. */\n  var rsAstralRange = '\\\\ud800-\\\\udfff',\n      rsComboMarksRange = '\\\\u0300-\\\\u036f',\n      reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n      rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n      rsDingbatRange = '\\\\u2700-\\\\u27bf',\n      rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff',\n      rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7',\n      rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf',\n      rsPunctuationRange = '\\\\u2000-\\\\u206f',\n      rsSpaceRange = ' \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000',\n      rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde',\n      rsVarRange = '\\\\ufe0e\\\\ufe0f',\n      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;\n\n  /** Used to compose unicode capture groups. */\n  var rsApos = \"['\\u2019]\",\n      rsAstral = '[' + rsAstralRange + ']',\n      rsBreak = '[' + rsBreakRange + ']',\n      rsCombo = '[' + rsComboRange + ']',\n      rsDigits = '\\\\d+',\n      rsDingbat = '[' + rsDingbatRange + ']',\n      rsLower = '[' + rsLowerRange + ']',\n      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',\n      rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n      rsNonAstral = '[^' + rsAstralRange + ']',\n      rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n      rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n      rsUpper = '[' + rsUpperRange + ']',\n      rsZWJ = '\\\\u200d';\n\n  /** Used to compose unicode regexes. */\n  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',\n      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',\n      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',\n      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',\n      reOptMod = rsModifier + '?',\n      rsOptVar = '[' + rsVarRange + ']?',\n      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n      rsOrdLower = '\\\\d*(?:1st|2nd|3rd|(?![123])\\\\dth)(?=\\\\b|[A-Z_])',\n      rsOrdUpper = '\\\\d*(?:1ST|2ND|3RD|(?![123])\\\\dTH)(?=\\\\b|[a-z_])',\n      rsSeq = rsOptVar + reOptMod + rsOptJoin,\n      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,\n      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n  /** Used to match apostrophes. */\n  var reApos = RegExp(rsApos, 'g');\n\n  /**\n   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and\n   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).\n   */\n  var reComboMark = RegExp(rsCombo, 'g');\n\n  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\n  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n  /** Used to match complex or compound words. */\n  var reUnicodeWord = RegExp([\n    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',\n    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',\n    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,\n    rsUpper + '+' + rsOptContrUpper,\n    rsOrdUpper,\n    rsOrdLower,\n    rsDigits,\n    rsEmoji\n  ].join('|'), 'g');\n\n  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\n  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\n\n  /** Used to detect strings that need a more robust regexp to match words. */\n  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;\n\n  /** Used to assign default `context` object properties. */\n  var contextProps = [\n    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',\n    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',\n    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',\n    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',\n    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'\n  ];\n\n  /** Used to make template sourceURLs easier to identify. */\n  var templateCounter = -1;\n\n  /** Used to identify `toStringTag` values of typed arrays. */\n  var typedArrayTags = {};\n  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\n  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\n  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\n  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\n  typedArrayTags[uint32Tag] = true;\n  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =\n  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\n  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\n  typedArrayTags[errorTag] = typedArrayTags[funcTag] =\n  typedArrayTags[mapTag] = typedArrayTags[numberTag] =\n  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =\n  typedArrayTags[setTag] = typedArrayTags[stringTag] =\n  typedArrayTags[weakMapTag] = false;\n\n  /** Used to identify `toStringTag` values supported by `_.clone`. */\n  var cloneableTags = {};\n  cloneableTags[argsTag] = cloneableTags[arrayTag] =\n  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\n  cloneableTags[boolTag] = cloneableTags[dateTag] =\n  cloneableTags[float32Tag] = cloneableTags[float64Tag] =\n  cloneableTags[int8Tag] = cloneableTags[int16Tag] =\n  cloneableTags[int32Tag] = cloneableTags[mapTag] =\n  cloneableTags[numberTag] = cloneableTags[objectTag] =\n  cloneableTags[regexpTag] = cloneableTags[setTag] =\n  cloneableTags[stringTag] = cloneableTags[symbolTag] =\n  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\n  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\n  cloneableTags[errorTag] = cloneableTags[funcTag] =\n  cloneableTags[weakMapTag] = false;\n\n  /** Used to map Latin Unicode letters to basic Latin letters. */\n  var deburredLetters = {\n    // Latin-1 Supplement block.\n    '\\xc0': 'A',  '\\xc1': 'A', '\\xc2': 'A', '\\xc3': 'A', '\\xc4': 'A', '\\xc5': 'A',\n    '\\xe0': 'a',  '\\xe1': 'a', '\\xe2': 'a', '\\xe3': 'a', '\\xe4': 'a', '\\xe5': 'a',\n    '\\xc7': 'C',  '\\xe7': 'c',\n    '\\xd0': 'D',  '\\xf0': 'd',\n    '\\xc8': 'E',  '\\xc9': 'E', '\\xca': 'E', '\\xcb': 'E',\n    '\\xe8': 'e',  '\\xe9': 'e', '\\xea': 'e', '\\xeb': 'e',\n    '\\xcc': 'I',  '\\xcd': 'I', '\\xce': 'I', '\\xcf': 'I',\n    '\\xec': 'i',  '\\xed': 'i', '\\xee': 'i', '\\xef': 'i',\n    '\\xd1': 'N',  '\\xf1': 'n',\n    '\\xd2': 'O',  '\\xd3': 'O', '\\xd4': 'O', '\\xd5': 'O', '\\xd6': 'O', '\\xd8': 'O',\n    '\\xf2': 'o',  '\\xf3': 'o', '\\xf4': 'o', '\\xf5': 'o', '\\xf6': 'o', '\\xf8': 'o',\n    '\\xd9': 'U',  '\\xda': 'U', '\\xdb': 'U', '\\xdc': 'U',\n    '\\xf9': 'u',  '\\xfa': 'u', '\\xfb': 'u', '\\xfc': 'u',\n    '\\xdd': 'Y',  '\\xfd': 'y', '\\xff': 'y',\n    '\\xc6': 'Ae', '\\xe6': 'ae',\n    '\\xde': 'Th', '\\xfe': 'th',\n    '\\xdf': 'ss',\n    // Latin Extended-A block.\n    '\\u0100': 'A',  '\\u0102': 'A', '\\u0104': 'A',\n    '\\u0101': 'a',  '\\u0103': 'a', '\\u0105': 'a',\n    '\\u0106': 'C',  '\\u0108': 'C', '\\u010a': 'C', '\\u010c': 'C',\n    '\\u0107': 'c',  '\\u0109': 'c', '\\u010b': 'c', '\\u010d': 'c',\n    '\\u010e': 'D',  '\\u0110': 'D', '\\u010f': 'd', '\\u0111': 'd',\n    '\\u0112': 'E',  '\\u0114': 'E', '\\u0116': 'E', '\\u0118': 'E', '\\u011a': 'E',\n    '\\u0113': 'e',  '\\u0115': 'e', '\\u0117': 'e', '\\u0119': 'e', '\\u011b': 'e',\n    '\\u011c': 'G',  '\\u011e': 'G', '\\u0120': 'G', '\\u0122': 'G',\n    '\\u011d': 'g',  '\\u011f': 'g', '\\u0121': 'g', '\\u0123': 'g',\n    '\\u0124': 'H',  '\\u0126': 'H', '\\u0125': 'h', '\\u0127': 'h',\n    '\\u0128': 'I',  '\\u012a': 'I', '\\u012c': 'I', '\\u012e': 'I', '\\u0130': 'I',\n    '\\u0129': 'i',  '\\u012b': 'i', '\\u012d': 'i', '\\u012f': 'i', '\\u0131': 'i',\n    '\\u0134': 'J',  '\\u0135': 'j',\n    '\\u0136': 'K',  '\\u0137': 'k', '\\u0138': 'k',\n    '\\u0139': 'L',  '\\u013b': 'L', '\\u013d': 'L', '\\u013f': 'L', '\\u0141': 'L',\n    '\\u013a': 'l',  '\\u013c': 'l', '\\u013e': 'l', '\\u0140': 'l', '\\u0142': 'l',\n    '\\u0143': 'N',  '\\u0145': 'N', '\\u0147': 'N', '\\u014a': 'N',\n    '\\u0144': 'n',  '\\u0146': 'n', '\\u0148': 'n', '\\u014b': 'n',\n    '\\u014c': 'O',  '\\u014e': 'O', '\\u0150': 'O',\n    '\\u014d': 'o',  '\\u014f': 'o', '\\u0151': 'o',\n    '\\u0154': 'R',  '\\u0156': 'R', '\\u0158': 'R',\n    '\\u0155': 'r',  '\\u0157': 'r', '\\u0159': 'r',\n    '\\u015a': 'S',  '\\u015c': 'S', '\\u015e': 'S', '\\u0160': 'S',\n    '\\u015b': 's',  '\\u015d': 's', '\\u015f': 's', '\\u0161': 's',\n    '\\u0162': 'T',  '\\u0164': 'T', '\\u0166': 'T',\n    '\\u0163': 't',  '\\u0165': 't', '\\u0167': 't',\n    '\\u0168': 'U',  '\\u016a': 'U', '\\u016c': 'U', '\\u016e': 'U', '\\u0170': 'U', '\\u0172': 'U',\n    '\\u0169': 'u',  '\\u016b': 'u', '\\u016d': 'u', '\\u016f': 'u', '\\u0171': 'u', '\\u0173': 'u',\n    '\\u0174': 'W',  '\\u0175': 'w',\n    '\\u0176': 'Y',  '\\u0177': 'y', '\\u0178': 'Y',\n    '\\u0179': 'Z',  '\\u017b': 'Z', '\\u017d': 'Z',\n    '\\u017a': 'z',  '\\u017c': 'z', '\\u017e': 'z',\n    '\\u0132': 'IJ', '\\u0133': 'ij',\n    '\\u0152': 'Oe', '\\u0153': 'oe',\n    '\\u0149': \"'n\", '\\u017f': 's'\n  };\n\n  /** Used to map characters to HTML entities. */\n  var htmlEscapes = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n  };\n\n  /** Used to map HTML entities to characters. */\n  var htmlUnescapes = {\n    '&amp;': '&',\n    '&lt;': '<',\n    '&gt;': '>',\n    '&quot;': '\"',\n    '&#39;': \"'\"\n  };\n\n  /** Used to escape characters for inclusion in compiled string literals. */\n  var stringEscapes = {\n    '\\\\': '\\\\',\n    \"'\": \"'\",\n    '\\n': 'n',\n    '\\r': 'r',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  /** Built-in method references without a dependency on `root`. */\n  var freeParseFloat = parseFloat,\n      freeParseInt = parseInt;\n\n  /** Detect free variable `global` from Node.js. */\n  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n  /** Detect free variable `self`. */\n  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n  /** Used as a reference to the global object. */\n  var root = freeGlobal || freeSelf || Function('return this')();\n\n  /** Detect free variable `exports`. */\n  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n  /** Detect free variable `module`. */\n  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n  /** Detect the popular CommonJS extension `module.exports`. */\n  var moduleExports = freeModule && freeModule.exports === freeExports;\n\n  /** Detect free variable `process` from Node.js. */\n  var freeProcess = moduleExports && freeGlobal.process;\n\n  /** Used to access faster Node.js helpers. */\n  var nodeUtil = (function() {\n    try {\n      // Use `util.types` for Node.js 10+.\n      var types = freeModule && freeModule.require && freeModule.require('util').types;\n\n      if (types) {\n        return types;\n      }\n\n      // Legacy `process.binding('util')` for Node.js < 10.\n      return freeProcess && freeProcess.binding && freeProcess.binding('util');\n    } catch (e) {}\n  }());\n\n  /* Node.js helper references. */\n  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,\n      nodeIsDate = nodeUtil && nodeUtil.isDate,\n      nodeIsMap = nodeUtil && nodeUtil.isMap,\n      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,\n      nodeIsSet = nodeUtil && nodeUtil.isSet,\n      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * A faster alternative to `Function#apply`, this function invokes `func`\n   * with the `this` binding of `thisArg` and the arguments of `args`.\n   *\n   * @private\n   * @param {Function} func The function to invoke.\n   * @param {*} thisArg The `this` binding of `func`.\n   * @param {Array} args The arguments to invoke `func` with.\n   * @returns {*} Returns the result of `func`.\n   */\n  function apply(func, thisArg, args) {\n    switch (args.length) {\n      case 0: return func.call(thisArg);\n      case 1: return func.call(thisArg, args[0]);\n      case 2: return func.call(thisArg, args[0], args[1]);\n      case 3: return func.call(thisArg, args[0], args[1], args[2]);\n    }\n    return func.apply(thisArg, args);\n  }\n\n  /**\n   * A specialized version of `baseAggregator` for arrays.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} setter The function to set `accumulator` values.\n   * @param {Function} iteratee The iteratee to transform keys.\n   * @param {Object} accumulator The initial aggregated object.\n   * @returns {Function} Returns `accumulator`.\n   */\n  function arrayAggregator(array, setter, iteratee, accumulator) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      var value = array[index];\n      setter(accumulator, value, iteratee(value), array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.forEach` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayEach(array, iteratee) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (iteratee(array[index], index, array) === false) {\n        break;\n      }\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.forEachRight` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayEachRight(array, iteratee) {\n    var length = array == null ? 0 : array.length;\n\n    while (length--) {\n      if (iteratee(array[length], length, array) === false) {\n        break;\n      }\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.every` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if all elements pass the predicate check,\n   *  else `false`.\n   */\n  function arrayEvery(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (!predicate(array[index], index, array)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * A specialized version of `_.filter` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {Array} Returns the new filtered array.\n   */\n  function arrayFilter(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length,\n        resIndex = 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (predicate(value, index, array)) {\n        result[resIndex++] = value;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * A specialized version of `_.includes` for arrays without support for\n   * specifying an index to search from.\n   *\n   * @private\n   * @param {Array} [array] The array to inspect.\n   * @param {*} target The value to search for.\n   * @returns {boolean} Returns `true` if `target` is found, else `false`.\n   */\n  function arrayIncludes(array, value) {\n    var length = array == null ? 0 : array.length;\n    return !!length && baseIndexOf(array, value, 0) > -1;\n  }\n\n  /**\n   * This function is like `arrayIncludes` except that it accepts a comparator.\n   *\n   * @private\n   * @param {Array} [array] The array to inspect.\n   * @param {*} target The value to search for.\n   * @param {Function} comparator The comparator invoked per element.\n   * @returns {boolean} Returns `true` if `target` is found, else `false`.\n   */\n  function arrayIncludesWith(array, value, comparator) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (comparator(value, array[index])) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * A specialized version of `_.map` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the new mapped array.\n   */\n  function arrayMap(array, iteratee) {\n    var index = -1,\n        length = array == null ? 0 : array.length,\n        result = Array(length);\n\n    while (++index < length) {\n      result[index] = iteratee(array[index], index, array);\n    }\n    return result;\n  }\n\n  /**\n   * Appends the elements of `values` to `array`.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {Array} values The values to append.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayPush(array, values) {\n    var index = -1,\n        length = values.length,\n        offset = array.length;\n\n    while (++index < length) {\n      array[offset + index] = values[index];\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.reduce` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} [accumulator] The initial value.\n   * @param {boolean} [initAccum] Specify using the first element of `array` as\n   *  the initial value.\n   * @returns {*} Returns the accumulated value.\n   */\n  function arrayReduce(array, iteratee, accumulator, initAccum) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    if (initAccum && length) {\n      accumulator = array[++index];\n    }\n    while (++index < length) {\n      accumulator = iteratee(accumulator, array[index], index, array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.reduceRight` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} [accumulator] The initial value.\n   * @param {boolean} [initAccum] Specify using the last element of `array` as\n   *  the initial value.\n   * @returns {*} Returns the accumulated value.\n   */\n  function arrayReduceRight(array, iteratee, accumulator, initAccum) {\n    var length = array == null ? 0 : array.length;\n    if (initAccum && length) {\n      accumulator = array[--length];\n    }\n    while (length--) {\n      accumulator = iteratee(accumulator, array[length], length, array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.some` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if any element passes the predicate check,\n   *  else `false`.\n   */\n  function arraySome(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (predicate(array[index], index, array)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Gets the size of an ASCII `string`.\n   *\n   * @private\n   * @param {string} string The string inspect.\n   * @returns {number} Returns the string size.\n   */\n  var asciiSize = baseProperty('length');\n\n  /**\n   * Converts an ASCII `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function asciiToArray(string) {\n    return string.split('');\n  }\n\n  /**\n   * Splits an ASCII `string` into an array of its words.\n   *\n   * @private\n   * @param {string} The string to inspect.\n   * @returns {Array} Returns the words of `string`.\n   */\n  function asciiWords(string) {\n    return string.match(reAsciiWord) || [];\n  }\n\n  /**\n   * The base implementation of methods like `_.findKey` and `_.findLastKey`,\n   * without support for iteratee shorthands, which iterates over `collection`\n   * using `eachFunc`.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to inspect.\n   * @param {Function} predicate The function invoked per iteration.\n   * @param {Function} eachFunc The function to iterate over `collection`.\n   * @returns {*} Returns the found element or its key, else `undefined`.\n   */\n  function baseFindKey(collection, predicate, eachFunc) {\n    var result;\n    eachFunc(collection, function(value, key, collection) {\n      if (predicate(value, key, collection)) {\n        result = key;\n        return false;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.findIndex` and `_.findLastIndex` without\n   * support for iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {Function} predicate The function invoked per iteration.\n   * @param {number} fromIndex The index to search from.\n   * @param {boolean} [fromRight] Specify iterating from right to left.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseFindIndex(array, predicate, fromIndex, fromRight) {\n    var length = array.length,\n        index = fromIndex + (fromRight ? 1 : -1);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (predicate(array[index], index, array)) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseIndexOf(array, value, fromIndex) {\n    return value === value\n      ? strictIndexOf(array, value, fromIndex)\n      : baseFindIndex(array, baseIsNaN, fromIndex);\n  }\n\n  /**\n   * This function is like `baseIndexOf` except that it accepts a comparator.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @param {Function} comparator The comparator invoked per element.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseIndexOfWith(array, value, fromIndex, comparator) {\n    var index = fromIndex - 1,\n        length = array.length;\n\n    while (++index < length) {\n      if (comparator(array[index], value)) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * The base implementation of `_.isNaN` without support for number objects.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n   */\n  function baseIsNaN(value) {\n    return value !== value;\n  }\n\n  /**\n   * The base implementation of `_.mean` and `_.meanBy` without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {number} Returns the mean.\n   */\n  function baseMean(array, iteratee) {\n    var length = array == null ? 0 : array.length;\n    return length ? (baseSum(array, iteratee) / length) : NAN;\n  }\n\n  /**\n   * The base implementation of `_.property` without support for deep paths.\n   *\n   * @private\n   * @param {string} key The key of the property to get.\n   * @returns {Function} Returns the new accessor function.\n   */\n  function baseProperty(key) {\n    return function(object) {\n      return object == null ? undefined : object[key];\n    };\n  }\n\n  /**\n   * The base implementation of `_.propertyOf` without support for deep paths.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Function} Returns the new accessor function.\n   */\n  function basePropertyOf(object) {\n    return function(key) {\n      return object == null ? undefined : object[key];\n    };\n  }\n\n  /**\n   * The base implementation of `_.reduce` and `_.reduceRight`, without support\n   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} accumulator The initial value.\n   * @param {boolean} initAccum Specify using the first or last element of\n   *  `collection` as the initial value.\n   * @param {Function} eachFunc The function to iterate over `collection`.\n   * @returns {*} Returns the accumulated value.\n   */\n  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {\n    eachFunc(collection, function(value, index, collection) {\n      accumulator = initAccum\n        ? (initAccum = false, value)\n        : iteratee(accumulator, value, index, collection);\n    });\n    return accumulator;\n  }\n\n  /**\n   * The base implementation of `_.sortBy` which uses `comparer` to define the\n   * sort order of `array` and replaces criteria objects with their corresponding\n   * values.\n   *\n   * @private\n   * @param {Array} array The array to sort.\n   * @param {Function} comparer The function to define sort order.\n   * @returns {Array} Returns `array`.\n   */\n  function baseSortBy(array, comparer) {\n    var length = array.length;\n\n    array.sort(comparer);\n    while (length--) {\n      array[length] = array[length].value;\n    }\n    return array;\n  }\n\n  /**\n   * The base implementation of `_.sum` and `_.sumBy` without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {number} Returns the sum.\n   */\n  function baseSum(array, iteratee) {\n    var result,\n        index = -1,\n        length = array.length;\n\n    while (++index < length) {\n      var current = iteratee(array[index]);\n      if (current !== undefined) {\n        result = result === undefined ? current : (result + current);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.times` without support for iteratee shorthands\n   * or max array length checks.\n   *\n   * @private\n   * @param {number} n The number of times to invoke `iteratee`.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the array of results.\n   */\n  function baseTimes(n, iteratee) {\n    var index = -1,\n        result = Array(n);\n\n    while (++index < n) {\n      result[index] = iteratee(index);\n    }\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array\n   * of key-value pairs for `object` corresponding to the property names of `props`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array} props The property names to get values for.\n   * @returns {Object} Returns the key-value pairs.\n   */\n  function baseToPairs(object, props) {\n    return arrayMap(props, function(key) {\n      return [key, object[key]];\n    });\n  }\n\n  /**\n   * The base implementation of `_.trim`.\n   *\n   * @private\n   * @param {string} string The string to trim.\n   * @returns {string} Returns the trimmed string.\n   */\n  function baseTrim(string) {\n    return string\n      ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')\n      : string;\n  }\n\n  /**\n   * The base implementation of `_.unary` without support for storing metadata.\n   *\n   * @private\n   * @param {Function} func The function to cap arguments for.\n   * @returns {Function} Returns the new capped function.\n   */\n  function baseUnary(func) {\n    return function(value) {\n      return func(value);\n    };\n  }\n\n  /**\n   * The base implementation of `_.values` and `_.valuesIn` which creates an\n   * array of `object` property values corresponding to the property names\n   * of `props`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array} props The property names to get values for.\n   * @returns {Object} Returns the array of property values.\n   */\n  function baseValues(object, props) {\n    return arrayMap(props, function(key) {\n      return object[key];\n    });\n  }\n\n  /**\n   * Checks if a `cache` value for `key` exists.\n   *\n   * @private\n   * @param {Object} cache The cache to query.\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n  function cacheHas(cache, key) {\n    return cache.has(key);\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol\n   * that is not found in the character symbols.\n   *\n   * @private\n   * @param {Array} strSymbols The string symbols to inspect.\n   * @param {Array} chrSymbols The character symbols to find.\n   * @returns {number} Returns the index of the first unmatched string symbol.\n   */\n  function charsStartIndex(strSymbols, chrSymbols) {\n    var index = -1,\n        length = strSymbols.length;\n\n    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n    return index;\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol\n   * that is not found in the character symbols.\n   *\n   * @private\n   * @param {Array} strSymbols The string symbols to inspect.\n   * @param {Array} chrSymbols The character symbols to find.\n   * @returns {number} Returns the index of the last unmatched string symbol.\n   */\n  function charsEndIndex(strSymbols, chrSymbols) {\n    var index = strSymbols.length;\n\n    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n    return index;\n  }\n\n  /**\n   * Gets the number of `placeholder` occurrences in `array`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} placeholder The placeholder to search for.\n   * @returns {number} Returns the placeholder count.\n   */\n  function countHolders(array, placeholder) {\n    var length = array.length,\n        result = 0;\n\n    while (length--) {\n      if (array[length] === placeholder) {\n        ++result;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A\n   * letters to basic Latin letters.\n   *\n   * @private\n   * @param {string} letter The matched letter to deburr.\n   * @returns {string} Returns the deburred letter.\n   */\n  var deburrLetter = basePropertyOf(deburredLetters);\n\n  /**\n   * Used by `_.escape` to convert characters to HTML entities.\n   *\n   * @private\n   * @param {string} chr The matched character to escape.\n   * @returns {string} Returns the escaped character.\n   */\n  var escapeHtmlChar = basePropertyOf(htmlEscapes);\n\n  /**\n   * Used by `_.template` to escape characters for inclusion in compiled string literals.\n   *\n   * @private\n   * @param {string} chr The matched character to escape.\n   * @returns {string} Returns the escaped character.\n   */\n  function escapeStringChar(chr) {\n    return '\\\\' + stringEscapes[chr];\n  }\n\n  /**\n   * Gets the value at `key` of `object`.\n   *\n   * @private\n   * @param {Object} [object] The object to query.\n   * @param {string} key The key of the property to get.\n   * @returns {*} Returns the property value.\n   */\n  function getValue(object, key) {\n    return object == null ? undefined : object[key];\n  }\n\n  /**\n   * Checks if `string` contains Unicode symbols.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n   */\n  function hasUnicode(string) {\n    return reHasUnicode.test(string);\n  }\n\n  /**\n   * Checks if `string` contains a word composed of Unicode symbols.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {boolean} Returns `true` if a word is found, else `false`.\n   */\n  function hasUnicodeWord(string) {\n    return reHasUnicodeWord.test(string);\n  }\n\n  /**\n   * Converts `iterator` to an array.\n   *\n   * @private\n   * @param {Object} iterator The iterator to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function iteratorToArray(iterator) {\n    var data,\n        result = [];\n\n    while (!(data = iterator.next()).done) {\n      result.push(data.value);\n    }\n    return result;\n  }\n\n  /**\n   * Converts `map` to its key-value pairs.\n   *\n   * @private\n   * @param {Object} map The map to convert.\n   * @returns {Array} Returns the key-value pairs.\n   */\n  function mapToArray(map) {\n    var index = -1,\n        result = Array(map.size);\n\n    map.forEach(function(value, key) {\n      result[++index] = [key, value];\n    });\n    return result;\n  }\n\n  /**\n   * Creates a unary function that invokes `func` with its argument transformed.\n   *\n   * @private\n   * @param {Function} func The function to wrap.\n   * @param {Function} transform The argument transform.\n   * @returns {Function} Returns the new function.\n   */\n  function overArg(func, transform) {\n    return function(arg) {\n      return func(transform(arg));\n    };\n  }\n\n  /**\n   * Replaces all `placeholder` elements in `array` with an internal placeholder\n   * and returns an array of their indexes.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {*} placeholder The placeholder to replace.\n   * @returns {Array} Returns the new array of placeholder indexes.\n   */\n  function replaceHolders(array, placeholder) {\n    var index = -1,\n        length = array.length,\n        resIndex = 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (value === placeholder || value === PLACEHOLDER) {\n        array[index] = PLACEHOLDER;\n        result[resIndex++] = index;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Converts `set` to an array of its values.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the values.\n   */\n  function setToArray(set) {\n    var index = -1,\n        result = Array(set.size);\n\n    set.forEach(function(value) {\n      result[++index] = value;\n    });\n    return result;\n  }\n\n  /**\n   * Converts `set` to its value-value pairs.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the value-value pairs.\n   */\n  function setToPairs(set) {\n    var index = -1,\n        result = Array(set.size);\n\n    set.forEach(function(value) {\n      result[++index] = [value, value];\n    });\n    return result;\n  }\n\n  /**\n   * A specialized version of `_.indexOf` which performs strict equality\n   * comparisons of values, i.e. `===`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function strictIndexOf(array, value, fromIndex) {\n    var index = fromIndex - 1,\n        length = array.length;\n\n    while (++index < length) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * A specialized version of `_.lastIndexOf` which performs strict equality\n   * comparisons of values, i.e. `===`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function strictLastIndexOf(array, value, fromIndex) {\n    var index = fromIndex + 1;\n    while (index--) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return index;\n  }\n\n  /**\n   * Gets the number of symbols in `string`.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {number} Returns the string size.\n   */\n  function stringSize(string) {\n    return hasUnicode(string)\n      ? unicodeSize(string)\n      : asciiSize(string);\n  }\n\n  /**\n   * Converts `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function stringToArray(string) {\n    return hasUnicode(string)\n      ? unicodeToArray(string)\n      : asciiToArray(string);\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n   * character of `string`.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {number} Returns the index of the last non-whitespace character.\n   */\n  function trimmedEndIndex(string) {\n    var index = string.length;\n\n    while (index-- && reWhitespace.test(string.charAt(index))) {}\n    return index;\n  }\n\n  /**\n   * Used by `_.unescape` to convert HTML entities to characters.\n   *\n   * @private\n   * @param {string} chr The matched character to unescape.\n   * @returns {string} Returns the unescaped character.\n   */\n  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);\n\n  /**\n   * Gets the size of a Unicode `string`.\n   *\n   * @private\n   * @param {string} string The string inspect.\n   * @returns {number} Returns the string size.\n   */\n  function unicodeSize(string) {\n    var result = reUnicode.lastIndex = 0;\n    while (reUnicode.test(string)) {\n      ++result;\n    }\n    return result;\n  }\n\n  /**\n   * Converts a Unicode `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function unicodeToArray(string) {\n    return string.match(reUnicode) || [];\n  }\n\n  /**\n   * Splits a Unicode `string` into an array of its words.\n   *\n   * @private\n   * @param {string} The string to inspect.\n   * @returns {Array} Returns the words of `string`.\n   */\n  function unicodeWords(string) {\n    return string.match(reUnicodeWord) || [];\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Create a new pristine `lodash` function using the `context` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 1.1.0\n   * @category Util\n   * @param {Object} [context=root] The context object.\n   * @returns {Function} Returns a new `lodash` function.\n   * @example\n   *\n   * _.mixin({ 'foo': _.constant('foo') });\n   *\n   * var lodash = _.runInContext();\n   * lodash.mixin({ 'bar': lodash.constant('bar') });\n   *\n   * _.isFunction(_.foo);\n   * // => true\n   * _.isFunction(_.bar);\n   * // => false\n   *\n   * lodash.isFunction(lodash.foo);\n   * // => false\n   * lodash.isFunction(lodash.bar);\n   * // => true\n   *\n   * // Create a suped-up `defer` in Node.js.\n   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;\n   */\n  var runInContext = (function runInContext(context) {\n    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));\n\n    /** Built-in constructor references. */\n    var Array = context.Array,\n        Date = context.Date,\n        Error = context.Error,\n        Function = context.Function,\n        Math = context.Math,\n        Object = context.Object,\n        RegExp = context.RegExp,\n        String = context.String,\n        TypeError = context.TypeError;\n\n    /** Used for built-in method references. */\n    var arrayProto = Array.prototype,\n        funcProto = Function.prototype,\n        objectProto = Object.prototype;\n\n    /** Used to detect overreaching core-js shims. */\n    var coreJsData = context['__core-js_shared__'];\n\n    /** Used to resolve the decompiled source of functions. */\n    var funcToString = funcProto.toString;\n\n    /** Used to check objects for own properties. */\n    var hasOwnProperty = objectProto.hasOwnProperty;\n\n    /** Used to generate unique IDs. */\n    var idCounter = 0;\n\n    /** Used to detect methods masquerading as native. */\n    var maskSrcKey = (function() {\n      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n      return uid ? ('Symbol(src)_1.' + uid) : '';\n    }());\n\n    /**\n     * Used to resolve the\n     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n     * of values.\n     */\n    var nativeObjectToString = objectProto.toString;\n\n    /** Used to infer the `Object` constructor. */\n    var objectCtorString = funcToString.call(Object);\n\n    /** Used to restore the original `_` reference in `_.noConflict`. */\n    var oldDash = root._;\n\n    /** Used to detect if a method is native. */\n    var reIsNative = RegExp('^' +\n      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n      .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n    );\n\n    /** Built-in value references. */\n    var Buffer = moduleExports ? context.Buffer : undefined,\n        Symbol = context.Symbol,\n        Uint8Array = context.Uint8Array,\n        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,\n        getPrototype = overArg(Object.getPrototypeOf, Object),\n        objectCreate = Object.create,\n        propertyIsEnumerable = objectProto.propertyIsEnumerable,\n        splice = arrayProto.splice,\n        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,\n        symIterator = Symbol ? Symbol.iterator : undefined,\n        symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n    var defineProperty = (function() {\n      try {\n        var func = getNative(Object, 'defineProperty');\n        func({}, '', {});\n        return func;\n      } catch (e) {}\n    }());\n\n    /** Mocked built-ins. */\n    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,\n        ctxNow = Date && Date.now !== root.Date.now && Date.now,\n        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;\n\n    /* Built-in method references for those with the same name as other `lodash` methods. */\n    var nativeCeil = Math.ceil,\n        nativeFloor = Math.floor,\n        nativeGetSymbols = Object.getOwnPropertySymbols,\n        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n        nativeIsFinite = context.isFinite,\n        nativeJoin = arrayProto.join,\n        nativeKeys = overArg(Object.keys, Object),\n        nativeMax = Math.max,\n        nativeMin = Math.min,\n        nativeNow = Date.now,\n        nativeParseInt = context.parseInt,\n        nativeRandom = Math.random,\n        nativeReverse = arrayProto.reverse;\n\n    /* Built-in method references that are verified to be native. */\n    var DataView = getNative(context, 'DataView'),\n        Map = getNative(context, 'Map'),\n        Promise = getNative(context, 'Promise'),\n        Set = getNative(context, 'Set'),\n        WeakMap = getNative(context, 'WeakMap'),\n        nativeCreate = getNative(Object, 'create');\n\n    /** Used to store function metadata. */\n    var metaMap = WeakMap && new WeakMap;\n\n    /** Used to lookup unminified function names. */\n    var realNames = {};\n\n    /** Used to detect maps, sets, and weakmaps. */\n    var dataViewCtorString = toSource(DataView),\n        mapCtorString = toSource(Map),\n        promiseCtorString = toSource(Promise),\n        setCtorString = toSource(Set),\n        weakMapCtorString = toSource(WeakMap);\n\n    /** Used to convert symbols to primitives and strings. */\n    var symbolProto = Symbol ? Symbol.prototype : undefined,\n        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,\n        symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a `lodash` object which wraps `value` to enable implicit method\n     * chain sequences. Methods that operate on and return arrays, collections,\n     * and functions can be chained together. Methods that retrieve a single value\n     * or may return a primitive value will automatically end the chain sequence\n     * and return the unwrapped value. Otherwise, the value must be unwrapped\n     * with `_#value`.\n     *\n     * Explicit chain sequences, which must be unwrapped with `_#value`, may be\n     * enabled using `_.chain`.\n     *\n     * The execution of chained methods is lazy, that is, it's deferred until\n     * `_#value` is implicitly or explicitly called.\n     *\n     * Lazy evaluation allows several methods to support shortcut fusion.\n     * Shortcut fusion is an optimization to merge iteratee calls; this avoids\n     * the creation of intermediate arrays and can greatly reduce the number of\n     * iteratee executions. Sections of a chain sequence qualify for shortcut\n     * fusion if the section is applied to an array and iteratees accept only\n     * one argument. The heuristic for whether a section qualifies for shortcut\n     * fusion is subject to change.\n     *\n     * Chaining is supported in custom builds as long as the `_#value` method is\n     * directly or indirectly included in the build.\n     *\n     * In addition to lodash methods, wrappers have `Array` and `String` methods.\n     *\n     * The wrapper `Array` methods are:\n     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`\n     *\n     * The wrapper `String` methods are:\n     * `replace` and `split`\n     *\n     * The wrapper methods that support shortcut fusion are:\n     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,\n     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,\n     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`\n     *\n     * The chainable wrapper methods are:\n     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,\n     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,\n     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,\n     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,\n     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,\n     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,\n     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,\n     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,\n     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,\n     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,\n     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,\n     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,\n     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,\n     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,\n     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,\n     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,\n     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,\n     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,\n     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,\n     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,\n     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,\n     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,\n     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,\n     * `zipObject`, `zipObjectDeep`, and `zipWith`\n     *\n     * The wrapper methods that are **not** chainable by default are:\n     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,\n     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,\n     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,\n     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,\n     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,\n     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,\n     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,\n     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,\n     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,\n     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,\n     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,\n     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,\n     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,\n     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,\n     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,\n     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,\n     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,\n     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,\n     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,\n     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,\n     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,\n     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,\n     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,\n     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,\n     * `upperFirst`, `value`, and `words`\n     *\n     * @name _\n     * @constructor\n     * @category Seq\n     * @param {*} value The value to wrap in a `lodash` instance.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var wrapped = _([1, 2, 3]);\n     *\n     * // Returns an unwrapped value.\n     * wrapped.reduce(_.add);\n     * // => 6\n     *\n     * // Returns a wrapped value.\n     * var squares = wrapped.map(square);\n     *\n     * _.isArray(squares);\n     * // => false\n     *\n     * _.isArray(squares.value());\n     * // => true\n     */\n    function lodash(value) {\n      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {\n        if (value instanceof LodashWrapper) {\n          return value;\n        }\n        if (hasOwnProperty.call(value, '__wrapped__')) {\n          return wrapperClone(value);\n        }\n      }\n      return new LodashWrapper(value);\n    }\n\n    /**\n     * The base implementation of `_.create` without support for assigning\n     * properties to the created object.\n     *\n     * @private\n     * @param {Object} proto The object to inherit from.\n     * @returns {Object} Returns the new object.\n     */\n    var baseCreate = (function() {\n      function object() {}\n      return function(proto) {\n        if (!isObject(proto)) {\n          return {};\n        }\n        if (objectCreate) {\n          return objectCreate(proto);\n        }\n        object.prototype = proto;\n        var result = new object;\n        object.prototype = undefined;\n        return result;\n      };\n    }());\n\n    /**\n     * The function whose prototype chain sequence wrappers inherit from.\n     *\n     * @private\n     */\n    function baseLodash() {\n      // No operation performed.\n    }\n\n    /**\n     * The base constructor for creating `lodash` wrapper objects.\n     *\n     * @private\n     * @param {*} value The value to wrap.\n     * @param {boolean} [chainAll] Enable explicit method chain sequences.\n     */\n    function LodashWrapper(value, chainAll) {\n      this.__wrapped__ = value;\n      this.__actions__ = [];\n      this.__chain__ = !!chainAll;\n      this.__index__ = 0;\n      this.__values__ = undefined;\n    }\n\n    /**\n     * By default, the template delimiters used by lodash are like those in\n     * embedded Ruby (ERB) as well as ES2015 template strings. Change the\n     * following template settings to use alternative delimiters.\n     *\n     * @static\n     * @memberOf _\n     * @type {Object}\n     */\n    lodash.templateSettings = {\n\n      /**\n       * Used to detect `data` property values to be HTML-escaped.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'escape': reEscape,\n\n      /**\n       * Used to detect code to be evaluated.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'evaluate': reEvaluate,\n\n      /**\n       * Used to detect `data` property values to inject.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'interpolate': reInterpolate,\n\n      /**\n       * Used to reference the data object in the template text.\n       *\n       * @memberOf _.templateSettings\n       * @type {string}\n       */\n      'variable': '',\n\n      /**\n       * Used to import variables into the compiled template.\n       *\n       * @memberOf _.templateSettings\n       * @type {Object}\n       */\n      'imports': {\n\n        /**\n         * A reference to the `lodash` function.\n         *\n         * @memberOf _.templateSettings.imports\n         * @type {Function}\n         */\n        '_': lodash\n      }\n    };\n\n    // Ensure wrappers are instances of `baseLodash`.\n    lodash.prototype = baseLodash.prototype;\n    lodash.prototype.constructor = lodash;\n\n    LodashWrapper.prototype = baseCreate(baseLodash.prototype);\n    LodashWrapper.prototype.constructor = LodashWrapper;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.\n     *\n     * @private\n     * @constructor\n     * @param {*} value The value to wrap.\n     */\n    function LazyWrapper(value) {\n      this.__wrapped__ = value;\n      this.__actions__ = [];\n      this.__dir__ = 1;\n      this.__filtered__ = false;\n      this.__iteratees__ = [];\n      this.__takeCount__ = MAX_ARRAY_LENGTH;\n      this.__views__ = [];\n    }\n\n    /**\n     * Creates a clone of the lazy wrapper object.\n     *\n     * @private\n     * @name clone\n     * @memberOf LazyWrapper\n     * @returns {Object} Returns the cloned `LazyWrapper` object.\n     */\n    function lazyClone() {\n      var result = new LazyWrapper(this.__wrapped__);\n      result.__actions__ = copyArray(this.__actions__);\n      result.__dir__ = this.__dir__;\n      result.__filtered__ = this.__filtered__;\n      result.__iteratees__ = copyArray(this.__iteratees__);\n      result.__takeCount__ = this.__takeCount__;\n      result.__views__ = copyArray(this.__views__);\n      return result;\n    }\n\n    /**\n     * Reverses the direction of lazy iteration.\n     *\n     * @private\n     * @name reverse\n     * @memberOf LazyWrapper\n     * @returns {Object} Returns the new reversed `LazyWrapper` object.\n     */\n    function lazyReverse() {\n      if (this.__filtered__) {\n        var result = new LazyWrapper(this);\n        result.__dir__ = -1;\n        result.__filtered__ = true;\n      } else {\n        result = this.clone();\n        result.__dir__ *= -1;\n      }\n      return result;\n    }\n\n    /**\n     * Extracts the unwrapped value from its lazy wrapper.\n     *\n     * @private\n     * @name value\n     * @memberOf LazyWrapper\n     * @returns {*} Returns the unwrapped value.\n     */\n    function lazyValue() {\n      var array = this.__wrapped__.value(),\n          dir = this.__dir__,\n          isArr = isArray(array),\n          isRight = dir < 0,\n          arrLength = isArr ? array.length : 0,\n          view = getView(0, arrLength, this.__views__),\n          start = view.start,\n          end = view.end,\n          length = end - start,\n          index = isRight ? end : (start - 1),\n          iteratees = this.__iteratees__,\n          iterLength = iteratees.length,\n          resIndex = 0,\n          takeCount = nativeMin(length, this.__takeCount__);\n\n      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {\n        return baseWrapperValue(array, this.__actions__);\n      }\n      var result = [];\n\n      outer:\n      while (length-- && resIndex < takeCount) {\n        index += dir;\n\n        var iterIndex = -1,\n            value = array[index];\n\n        while (++iterIndex < iterLength) {\n          var data = iteratees[iterIndex],\n              iteratee = data.iteratee,\n              type = data.type,\n              computed = iteratee(value);\n\n          if (type == LAZY_MAP_FLAG) {\n            value = computed;\n          } else if (!computed) {\n            if (type == LAZY_FILTER_FLAG) {\n              continue outer;\n            } else {\n              break outer;\n            }\n          }\n        }\n        result[resIndex++] = value;\n      }\n      return result;\n    }\n\n    // Ensure `LazyWrapper` is an instance of `baseLodash`.\n    LazyWrapper.prototype = baseCreate(baseLodash.prototype);\n    LazyWrapper.prototype.constructor = LazyWrapper;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a hash object.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function Hash(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the hash.\n     *\n     * @private\n     * @name clear\n     * @memberOf Hash\n     */\n    function hashClear() {\n      this.__data__ = nativeCreate ? nativeCreate(null) : {};\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the hash.\n     *\n     * @private\n     * @name delete\n     * @memberOf Hash\n     * @param {Object} hash The hash to modify.\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function hashDelete(key) {\n      var result = this.has(key) && delete this.__data__[key];\n      this.size -= result ? 1 : 0;\n      return result;\n    }\n\n    /**\n     * Gets the hash value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf Hash\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function hashGet(key) {\n      var data = this.__data__;\n      if (nativeCreate) {\n        var result = data[key];\n        return result === HASH_UNDEFINED ? undefined : result;\n      }\n      return hasOwnProperty.call(data, key) ? data[key] : undefined;\n    }\n\n    /**\n     * Checks if a hash value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf Hash\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function hashHas(key) {\n      var data = this.__data__;\n      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n    }\n\n    /**\n     * Sets the hash `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf Hash\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the hash instance.\n     */\n    function hashSet(key, value) {\n      var data = this.__data__;\n      this.size += this.has(key) ? 0 : 1;\n      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n      return this;\n    }\n\n    // Add methods to `Hash`.\n    Hash.prototype.clear = hashClear;\n    Hash.prototype['delete'] = hashDelete;\n    Hash.prototype.get = hashGet;\n    Hash.prototype.has = hashHas;\n    Hash.prototype.set = hashSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an list cache object.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function ListCache(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the list cache.\n     *\n     * @private\n     * @name clear\n     * @memberOf ListCache\n     */\n    function listCacheClear() {\n      this.__data__ = [];\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the list cache.\n     *\n     * @private\n     * @name delete\n     * @memberOf ListCache\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function listCacheDelete(key) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      if (index < 0) {\n        return false;\n      }\n      var lastIndex = data.length - 1;\n      if (index == lastIndex) {\n        data.pop();\n      } else {\n        splice.call(data, index, 1);\n      }\n      --this.size;\n      return true;\n    }\n\n    /**\n     * Gets the list cache value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf ListCache\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function listCacheGet(key) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      return index < 0 ? undefined : data[index][1];\n    }\n\n    /**\n     * Checks if a list cache value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf ListCache\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function listCacheHas(key) {\n      return assocIndexOf(this.__data__, key) > -1;\n    }\n\n    /**\n     * Sets the list cache `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf ListCache\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the list cache instance.\n     */\n    function listCacheSet(key, value) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      if (index < 0) {\n        ++this.size;\n        data.push([key, value]);\n      } else {\n        data[index][1] = value;\n      }\n      return this;\n    }\n\n    // Add methods to `ListCache`.\n    ListCache.prototype.clear = listCacheClear;\n    ListCache.prototype['delete'] = listCacheDelete;\n    ListCache.prototype.get = listCacheGet;\n    ListCache.prototype.has = listCacheHas;\n    ListCache.prototype.set = listCacheSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a map cache object to store key-value pairs.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function MapCache(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the map.\n     *\n     * @private\n     * @name clear\n     * @memberOf MapCache\n     */\n    function mapCacheClear() {\n      this.size = 0;\n      this.__data__ = {\n        'hash': new Hash,\n        'map': new (Map || ListCache),\n        'string': new Hash\n      };\n    }\n\n    /**\n     * Removes `key` and its value from the map.\n     *\n     * @private\n     * @name delete\n     * @memberOf MapCache\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function mapCacheDelete(key) {\n      var result = getMapData(this, key)['delete'](key);\n      this.size -= result ? 1 : 0;\n      return result;\n    }\n\n    /**\n     * Gets the map value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf MapCache\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function mapCacheGet(key) {\n      return getMapData(this, key).get(key);\n    }\n\n    /**\n     * Checks if a map value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf MapCache\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function mapCacheHas(key) {\n      return getMapData(this, key).has(key);\n    }\n\n    /**\n     * Sets the map `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf MapCache\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the map cache instance.\n     */\n    function mapCacheSet(key, value) {\n      var data = getMapData(this, key),\n          size = data.size;\n\n      data.set(key, value);\n      this.size += data.size == size ? 0 : 1;\n      return this;\n    }\n\n    // Add methods to `MapCache`.\n    MapCache.prototype.clear = mapCacheClear;\n    MapCache.prototype['delete'] = mapCacheDelete;\n    MapCache.prototype.get = mapCacheGet;\n    MapCache.prototype.has = mapCacheHas;\n    MapCache.prototype.set = mapCacheSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     *\n     * Creates an array cache object to store unique values.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [values] The values to cache.\n     */\n    function SetCache(values) {\n      var index = -1,\n          length = values == null ? 0 : values.length;\n\n      this.__data__ = new MapCache;\n      while (++index < length) {\n        this.add(values[index]);\n      }\n    }\n\n    /**\n     * Adds `value` to the array cache.\n     *\n     * @private\n     * @name add\n     * @memberOf SetCache\n     * @alias push\n     * @param {*} value The value to cache.\n     * @returns {Object} Returns the cache instance.\n     */\n    function setCacheAdd(value) {\n      this.__data__.set(value, HASH_UNDEFINED);\n      return this;\n    }\n\n    /**\n     * Checks if `value` is in the array cache.\n     *\n     * @private\n     * @name has\n     * @memberOf SetCache\n     * @param {*} value The value to search for.\n     * @returns {number} Returns `true` if `value` is found, else `false`.\n     */\n    function setCacheHas(value) {\n      return this.__data__.has(value);\n    }\n\n    // Add methods to `SetCache`.\n    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\n    SetCache.prototype.has = setCacheHas;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a stack cache object to store key-value pairs.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function Stack(entries) {\n      var data = this.__data__ = new ListCache(entries);\n      this.size = data.size;\n    }\n\n    /**\n     * Removes all key-value entries from the stack.\n     *\n     * @private\n     * @name clear\n     * @memberOf Stack\n     */\n    function stackClear() {\n      this.__data__ = new ListCache;\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the stack.\n     *\n     * @private\n     * @name delete\n     * @memberOf Stack\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function stackDelete(key) {\n      var data = this.__data__,\n          result = data['delete'](key);\n\n      this.size = data.size;\n      return result;\n    }\n\n    /**\n     * Gets the stack value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf Stack\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function stackGet(key) {\n      return this.__data__.get(key);\n    }\n\n    /**\n     * Checks if a stack value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf Stack\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function stackHas(key) {\n      return this.__data__.has(key);\n    }\n\n    /**\n     * Sets the stack `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf Stack\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the stack cache instance.\n     */\n    function stackSet(key, value) {\n      var data = this.__data__;\n      if (data instanceof ListCache) {\n        var pairs = data.__data__;\n        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n          pairs.push([key, value]);\n          this.size = ++data.size;\n          return this;\n        }\n        data = this.__data__ = new MapCache(pairs);\n      }\n      data.set(key, value);\n      this.size = data.size;\n      return this;\n    }\n\n    // Add methods to `Stack`.\n    Stack.prototype.clear = stackClear;\n    Stack.prototype['delete'] = stackDelete;\n    Stack.prototype.get = stackGet;\n    Stack.prototype.has = stackHas;\n    Stack.prototype.set = stackSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an array of the enumerable property names of the array-like `value`.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @param {boolean} inherited Specify returning inherited property names.\n     * @returns {Array} Returns the array of property names.\n     */\n    function arrayLikeKeys(value, inherited) {\n      var isArr = isArray(value),\n          isArg = !isArr && isArguments(value),\n          isBuff = !isArr && !isArg && isBuffer(value),\n          isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n          skipIndexes = isArr || isArg || isBuff || isType,\n          result = skipIndexes ? baseTimes(value.length, String) : [],\n          length = result.length;\n\n      for (var key in value) {\n        if ((inherited || hasOwnProperty.call(value, key)) &&\n            !(skipIndexes && (\n               // Safari 9 has enumerable `arguments.length` in strict mode.\n               key == 'length' ||\n               // Node.js 0.10 has enumerable non-index properties on buffers.\n               (isBuff && (key == 'offset' || key == 'parent')) ||\n               // PhantomJS 2 has enumerable non-index properties on typed arrays.\n               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n               // Skip index properties.\n               isIndex(key, length)\n            ))) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * A specialized version of `_.sample` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to sample.\n     * @returns {*} Returns the random element.\n     */\n    function arraySample(array) {\n      var length = array.length;\n      return length ? array[baseRandom(0, length - 1)] : undefined;\n    }\n\n    /**\n     * A specialized version of `_.sampleSize` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to sample.\n     * @param {number} n The number of elements to sample.\n     * @returns {Array} Returns the random elements.\n     */\n    function arraySampleSize(array, n) {\n      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));\n    }\n\n    /**\n     * A specialized version of `_.shuffle` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     */\n    function arrayShuffle(array) {\n      return shuffleSelf(copyArray(array));\n    }\n\n    /**\n     * This function is like `assignValue` except that it doesn't assign\n     * `undefined` values.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function assignMergeValue(object, key, value) {\n      if ((value !== undefined && !eq(object[key], value)) ||\n          (value === undefined && !(key in object))) {\n        baseAssignValue(object, key, value);\n      }\n    }\n\n    /**\n     * Assigns `value` to `key` of `object` if the existing value is not equivalent\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function assignValue(object, key, value) {\n      var objValue = object[key];\n      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n          (value === undefined && !(key in object))) {\n        baseAssignValue(object, key, value);\n      }\n    }\n\n    /**\n     * Gets the index at which the `key` is found in `array` of key-value pairs.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {*} key The key to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     */\n    function assocIndexOf(array, key) {\n      var length = array.length;\n      while (length--) {\n        if (eq(array[length][0], key)) {\n          return length;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * Aggregates elements of `collection` on `accumulator` with keys transformed\n     * by `iteratee` and values set by `setter`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} setter The function to set `accumulator` values.\n     * @param {Function} iteratee The iteratee to transform keys.\n     * @param {Object} accumulator The initial aggregated object.\n     * @returns {Function} Returns `accumulator`.\n     */\n    function baseAggregator(collection, setter, iteratee, accumulator) {\n      baseEach(collection, function(value, key, collection) {\n        setter(accumulator, value, iteratee(value), collection);\n      });\n      return accumulator;\n    }\n\n    /**\n     * The base implementation of `_.assign` without support for multiple sources\n     * or `customizer` functions.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @returns {Object} Returns `object`.\n     */\n    function baseAssign(object, source) {\n      return object && copyObject(source, keys(source), object);\n    }\n\n    /**\n     * The base implementation of `_.assignIn` without support for multiple sources\n     * or `customizer` functions.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @returns {Object} Returns `object`.\n     */\n    function baseAssignIn(object, source) {\n      return object && copyObject(source, keysIn(source), object);\n    }\n\n    /**\n     * The base implementation of `assignValue` and `assignMergeValue` without\n     * value checks.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function baseAssignValue(object, key, value) {\n      if (key == '__proto__' && defineProperty) {\n        defineProperty(object, key, {\n          'configurable': true,\n          'enumerable': true,\n          'value': value,\n          'writable': true\n        });\n      } else {\n        object[key] = value;\n      }\n    }\n\n    /**\n     * The base implementation of `_.at` without support for individual paths.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {string[]} paths The property paths to pick.\n     * @returns {Array} Returns the picked elements.\n     */\n    function baseAt(object, paths) {\n      var index = -1,\n          length = paths.length,\n          result = Array(length),\n          skip = object == null;\n\n      while (++index < length) {\n        result[index] = skip ? undefined : get(object, paths[index]);\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.clamp` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {number} number The number to clamp.\n     * @param {number} [lower] The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the clamped number.\n     */\n    function baseClamp(number, lower, upper) {\n      if (number === number) {\n        if (upper !== undefined) {\n          number = number <= upper ? number : upper;\n        }\n        if (lower !== undefined) {\n          number = number >= lower ? number : lower;\n        }\n      }\n      return number;\n    }\n\n    /**\n     * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n     * traversed objects.\n     *\n     * @private\n     * @param {*} value The value to clone.\n     * @param {boolean} bitmask The bitmask flags.\n     *  1 - Deep clone\n     *  2 - Flatten inherited properties\n     *  4 - Clone symbols\n     * @param {Function} [customizer] The function to customize cloning.\n     * @param {string} [key] The key of `value`.\n     * @param {Object} [object] The parent object of `value`.\n     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n     * @returns {*} Returns the cloned value.\n     */\n    function baseClone(value, bitmask, customizer, key, object, stack) {\n      var result,\n          isDeep = bitmask & CLONE_DEEP_FLAG,\n          isFlat = bitmask & CLONE_FLAT_FLAG,\n          isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n      if (customizer) {\n        result = object ? customizer(value, key, object, stack) : customizer(value);\n      }\n      if (result !== undefined) {\n        return result;\n      }\n      if (!isObject(value)) {\n        return value;\n      }\n      var isArr = isArray(value);\n      if (isArr) {\n        result = initCloneArray(value);\n        if (!isDeep) {\n          return copyArray(value, result);\n        }\n      } else {\n        var tag = getTag(value),\n            isFunc = tag == funcTag || tag == genTag;\n\n        if (isBuffer(value)) {\n          return cloneBuffer(value, isDeep);\n        }\n        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n          result = (isFlat || isFunc) ? {} : initCloneObject(value);\n          if (!isDeep) {\n            return isFlat\n              ? copySymbolsIn(value, baseAssignIn(result, value))\n              : copySymbols(value, baseAssign(result, value));\n          }\n        } else {\n          if (!cloneableTags[tag]) {\n            return object ? value : {};\n          }\n          result = initCloneByTag(value, tag, isDeep);\n        }\n      }\n      // Check for circular references and return its corresponding clone.\n      stack || (stack = new Stack);\n      var stacked = stack.get(value);\n      if (stacked) {\n        return stacked;\n      }\n      stack.set(value, result);\n\n      if (isSet(value)) {\n        value.forEach(function(subValue) {\n          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\n        });\n      } else if (isMap(value)) {\n        value.forEach(function(subValue, key) {\n          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\n        });\n      }\n\n      var keysFunc = isFull\n        ? (isFlat ? getAllKeysIn : getAllKeys)\n        : (isFlat ? keysIn : keys);\n\n      var props = isArr ? undefined : keysFunc(value);\n      arrayEach(props || value, function(subValue, key) {\n        if (props) {\n          key = subValue;\n          subValue = value[key];\n        }\n        // Recursively populate clone (susceptible to call stack limits).\n        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.conforms` which doesn't clone `source`.\n     *\n     * @private\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseConforms(source) {\n      var props = keys(source);\n      return function(object) {\n        return baseConformsTo(object, source, props);\n      };\n    }\n\n    /**\n     * The base implementation of `_.conformsTo` which accepts `props` to check.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {boolean} Returns `true` if `object` conforms, else `false`.\n     */\n    function baseConformsTo(object, source, props) {\n      var length = props.length;\n      if (object == null) {\n        return !length;\n      }\n      object = Object(object);\n      while (length--) {\n        var key = props[length],\n            predicate = source[key],\n            value = object[key];\n\n        if ((value === undefined && !(key in object)) || !predicate(value)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /**\n     * The base implementation of `_.delay` and `_.defer` which accepts `args`\n     * to provide to `func`.\n     *\n     * @private\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @param {Array} args The arguments to provide to `func`.\n     * @returns {number|Object} Returns the timer id or timeout object.\n     */\n    function baseDelay(func, wait, args) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      return setTimeout(function() { func.apply(undefined, args); }, wait);\n    }\n\n    /**\n     * The base implementation of methods like `_.difference` without support\n     * for excluding multiple arrays or iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Array} values The values to exclude.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     */\n    function baseDifference(array, values, iteratee, comparator) {\n      var index = -1,\n          includes = arrayIncludes,\n          isCommon = true,\n          length = array.length,\n          result = [],\n          valuesLength = values.length;\n\n      if (!length) {\n        return result;\n      }\n      if (iteratee) {\n        values = arrayMap(values, baseUnary(iteratee));\n      }\n      if (comparator) {\n        includes = arrayIncludesWith;\n        isCommon = false;\n      }\n      else if (values.length >= LARGE_ARRAY_SIZE) {\n        includes = cacheHas;\n        isCommon = false;\n        values = new SetCache(values);\n      }\n      outer:\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee == null ? value : iteratee(value);\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (isCommon && computed === computed) {\n          var valuesIndex = valuesLength;\n          while (valuesIndex--) {\n            if (values[valuesIndex] === computed) {\n              continue outer;\n            }\n          }\n          result.push(value);\n        }\n        else if (!includes(values, computed, comparator)) {\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.forEach` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     */\n    var baseEach = createBaseEach(baseForOwn);\n\n    /**\n     * The base implementation of `_.forEachRight` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     */\n    var baseEachRight = createBaseEach(baseForOwnRight, true);\n\n    /**\n     * The base implementation of `_.every` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n     *  else `false`\n     */\n    function baseEvery(collection, predicate) {\n      var result = true;\n      baseEach(collection, function(value, index, collection) {\n        result = !!predicate(value, index, collection);\n        return result;\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of methods like `_.max` and `_.min` which accepts a\n     * `comparator` to determine the extremum value.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The iteratee invoked per iteration.\n     * @param {Function} comparator The comparator used to compare values.\n     * @returns {*} Returns the extremum value.\n     */\n    function baseExtremum(array, iteratee, comparator) {\n      var index = -1,\n          length = array.length;\n\n      while (++index < length) {\n        var value = array[index],\n            current = iteratee(value);\n\n        if (current != null && (computed === undefined\n              ? (current === current && !isSymbol(current))\n              : comparator(current, computed)\n            )) {\n          var computed = current,\n              result = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.fill` without an iteratee call guard.\n     *\n     * @private\n     * @param {Array} array The array to fill.\n     * @param {*} value The value to fill `array` with.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns `array`.\n     */\n    function baseFill(array, value, start, end) {\n      var length = array.length;\n\n      start = toInteger(start);\n      if (start < 0) {\n        start = -start > length ? 0 : (length + start);\n      }\n      end = (end === undefined || end > length) ? length : toInteger(end);\n      if (end < 0) {\n        end += length;\n      }\n      end = start > end ? 0 : toLength(end);\n      while (start < end) {\n        array[start++] = value;\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.filter` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     */\n    function baseFilter(collection, predicate) {\n      var result = [];\n      baseEach(collection, function(value, index, collection) {\n        if (predicate(value, index, collection)) {\n          result.push(value);\n        }\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.flatten` with support for restricting flattening.\n     *\n     * @private\n     * @param {Array} array The array to flatten.\n     * @param {number} depth The maximum recursion depth.\n     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n     * @param {Array} [result=[]] The initial result value.\n     * @returns {Array} Returns the new flattened array.\n     */\n    function baseFlatten(array, depth, predicate, isStrict, result) {\n      var index = -1,\n          length = array.length;\n\n      predicate || (predicate = isFlattenable);\n      result || (result = []);\n\n      while (++index < length) {\n        var value = array[index];\n        if (depth > 0 && predicate(value)) {\n          if (depth > 1) {\n            // Recursively flatten arrays (susceptible to call stack limits).\n            baseFlatten(value, depth - 1, predicate, isStrict, result);\n          } else {\n            arrayPush(result, value);\n          }\n        } else if (!isStrict) {\n          result[result.length] = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `baseForOwn` which iterates over `object`\n     * properties returned by `keysFunc` and invokes `iteratee` for each property.\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @returns {Object} Returns `object`.\n     */\n    var baseFor = createBaseFor();\n\n    /**\n     * This function is like `baseFor` except that it iterates over properties\n     * in the opposite order.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @returns {Object} Returns `object`.\n     */\n    var baseForRight = createBaseFor(true);\n\n    /**\n     * The base implementation of `_.forOwn` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     */\n    function baseForOwn(object, iteratee) {\n      return object && baseFor(object, iteratee, keys);\n    }\n\n    /**\n     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     */\n    function baseForOwnRight(object, iteratee) {\n      return object && baseForRight(object, iteratee, keys);\n    }\n\n    /**\n     * The base implementation of `_.functions` which creates an array of\n     * `object` function property names filtered from `props`.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Array} props The property names to filter.\n     * @returns {Array} Returns the function names.\n     */\n    function baseFunctions(object, props) {\n      return arrayFilter(props, function(key) {\n        return isFunction(object[key]);\n      });\n    }\n\n    /**\n     * The base implementation of `_.get` without support for default values.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to get.\n     * @returns {*} Returns the resolved value.\n     */\n    function baseGet(object, path) {\n      path = castPath(path, object);\n\n      var index = 0,\n          length = path.length;\n\n      while (object != null && index < length) {\n        object = object[toKey(path[index++])];\n      }\n      return (index && index == length) ? object : undefined;\n    }\n\n    /**\n     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n     * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n     * symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @param {Function} symbolsFunc The function to get the symbols of `object`.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function baseGetAllKeys(object, keysFunc, symbolsFunc) {\n      var result = keysFunc(object);\n      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n    }\n\n    /**\n     * The base implementation of `getTag` without fallbacks for buggy environments.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the `toStringTag`.\n     */\n    function baseGetTag(value) {\n      if (value == null) {\n        return value === undefined ? undefinedTag : nullTag;\n      }\n      return (symToStringTag && symToStringTag in Object(value))\n        ? getRawTag(value)\n        : objectToString(value);\n    }\n\n    /**\n     * The base implementation of `_.gt` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than `other`,\n     *  else `false`.\n     */\n    function baseGt(value, other) {\n      return value > other;\n    }\n\n    /**\n     * The base implementation of `_.has` without support for deep paths.\n     *\n     * @private\n     * @param {Object} [object] The object to query.\n     * @param {Array|string} key The key to check.\n     * @returns {boolean} Returns `true` if `key` exists, else `false`.\n     */\n    function baseHas(object, key) {\n      return object != null && hasOwnProperty.call(object, key);\n    }\n\n    /**\n     * The base implementation of `_.hasIn` without support for deep paths.\n     *\n     * @private\n     * @param {Object} [object] The object to query.\n     * @param {Array|string} key The key to check.\n     * @returns {boolean} Returns `true` if `key` exists, else `false`.\n     */\n    function baseHasIn(object, key) {\n      return object != null && key in Object(object);\n    }\n\n    /**\n     * The base implementation of `_.inRange` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {number} number The number to check.\n     * @param {number} start The start of the range.\n     * @param {number} end The end of the range.\n     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n     */\n    function baseInRange(number, start, end) {\n      return number >= nativeMin(start, end) && number < nativeMax(start, end);\n    }\n\n    /**\n     * The base implementation of methods like `_.intersection`, without support\n     * for iteratee shorthands, that accepts an array of arrays to inspect.\n     *\n     * @private\n     * @param {Array} arrays The arrays to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of shared values.\n     */\n    function baseIntersection(arrays, iteratee, comparator) {\n      var includes = comparator ? arrayIncludesWith : arrayIncludes,\n          length = arrays[0].length,\n          othLength = arrays.length,\n          othIndex = othLength,\n          caches = Array(othLength),\n          maxLength = Infinity,\n          result = [];\n\n      while (othIndex--) {\n        var array = arrays[othIndex];\n        if (othIndex && iteratee) {\n          array = arrayMap(array, baseUnary(iteratee));\n        }\n        maxLength = nativeMin(array.length, maxLength);\n        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))\n          ? new SetCache(othIndex && array)\n          : undefined;\n      }\n      array = arrays[0];\n\n      var index = -1,\n          seen = caches[0];\n\n      outer:\n      while (++index < length && result.length < maxLength) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (!(seen\n              ? cacheHas(seen, computed)\n              : includes(result, computed, comparator)\n            )) {\n          othIndex = othLength;\n          while (--othIndex) {\n            var cache = caches[othIndex];\n            if (!(cache\n                  ? cacheHas(cache, computed)\n                  : includes(arrays[othIndex], computed, comparator))\n                ) {\n              continue outer;\n            }\n          }\n          if (seen) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.invert` and `_.invertBy` which inverts\n     * `object` with values transformed by `iteratee` and set by `setter`.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} setter The function to set `accumulator` values.\n     * @param {Function} iteratee The iteratee to transform values.\n     * @param {Object} accumulator The initial inverted object.\n     * @returns {Function} Returns `accumulator`.\n     */\n    function baseInverter(object, setter, iteratee, accumulator) {\n      baseForOwn(object, function(value, key, object) {\n        setter(accumulator, iteratee(value), key, object);\n      });\n      return accumulator;\n    }\n\n    /**\n     * The base implementation of `_.invoke` without support for individual\n     * method arguments.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {Array} args The arguments to invoke the method with.\n     * @returns {*} Returns the result of the invoked method.\n     */\n    function baseInvoke(object, path, args) {\n      path = castPath(path, object);\n      object = parent(object, path);\n      var func = object == null ? object : object[toKey(last(path))];\n      return func == null ? undefined : apply(func, object, args);\n    }\n\n    /**\n     * The base implementation of `_.isArguments`.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n     */\n    function baseIsArguments(value) {\n      return isObjectLike(value) && baseGetTag(value) == argsTag;\n    }\n\n    /**\n     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.\n     */\n    function baseIsArrayBuffer(value) {\n      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;\n    }\n\n    /**\n     * The base implementation of `_.isDate` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n     */\n    function baseIsDate(value) {\n      return isObjectLike(value) && baseGetTag(value) == dateTag;\n    }\n\n    /**\n     * The base implementation of `_.isEqual` which supports partial comparisons\n     * and tracks traversed objects.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @param {boolean} bitmask The bitmask flags.\n     *  1 - Unordered comparison\n     *  2 - Partial comparison\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     */\n    function baseIsEqual(value, other, bitmask, customizer, stack) {\n      if (value === other) {\n        return true;\n      }\n      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n        return value !== value && other !== other;\n      }\n      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n    }\n\n    /**\n     * A specialized version of `baseIsEqual` for arrays and objects which performs\n     * deep comparisons and tracks traversed objects enabling objects with circular\n     * references to be compared.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n      var objIsArr = isArray(object),\n          othIsArr = isArray(other),\n          objTag = objIsArr ? arrayTag : getTag(object),\n          othTag = othIsArr ? arrayTag : getTag(other);\n\n      objTag = objTag == argsTag ? objectTag : objTag;\n      othTag = othTag == argsTag ? objectTag : othTag;\n\n      var objIsObj = objTag == objectTag,\n          othIsObj = othTag == objectTag,\n          isSameTag = objTag == othTag;\n\n      if (isSameTag && isBuffer(object)) {\n        if (!isBuffer(other)) {\n          return false;\n        }\n        objIsArr = true;\n        objIsObj = false;\n      }\n      if (isSameTag && !objIsObj) {\n        stack || (stack = new Stack);\n        return (objIsArr || isTypedArray(object))\n          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n      }\n      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n        if (objIsWrapped || othIsWrapped) {\n          var objUnwrapped = objIsWrapped ? object.value() : object,\n              othUnwrapped = othIsWrapped ? other.value() : other;\n\n          stack || (stack = new Stack);\n          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n        }\n      }\n      if (!isSameTag) {\n        return false;\n      }\n      stack || (stack = new Stack);\n      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n    }\n\n    /**\n     * The base implementation of `_.isMap` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n     */\n    function baseIsMap(value) {\n      return isObjectLike(value) && getTag(value) == mapTag;\n    }\n\n    /**\n     * The base implementation of `_.isMatch` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @param {Array} matchData The property names, values, and compare flags to match.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     */\n    function baseIsMatch(object, source, matchData, customizer) {\n      var index = matchData.length,\n          length = index,\n          noCustomizer = !customizer;\n\n      if (object == null) {\n        return !length;\n      }\n      object = Object(object);\n      while (index--) {\n        var data = matchData[index];\n        if ((noCustomizer && data[2])\n              ? data[1] !== object[data[0]]\n              : !(data[0] in object)\n            ) {\n          return false;\n        }\n      }\n      while (++index < length) {\n        data = matchData[index];\n        var key = data[0],\n            objValue = object[key],\n            srcValue = data[1];\n\n        if (noCustomizer && data[2]) {\n          if (objValue === undefined && !(key in object)) {\n            return false;\n          }\n        } else {\n          var stack = new Stack;\n          if (customizer) {\n            var result = customizer(objValue, srcValue, key, object, source, stack);\n          }\n          if (!(result === undefined\n                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\n                : result\n              )) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n\n    /**\n     * The base implementation of `_.isNative` without bad shim checks.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a native function,\n     *  else `false`.\n     */\n    function baseIsNative(value) {\n      if (!isObject(value) || isMasked(value)) {\n        return false;\n      }\n      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n      return pattern.test(toSource(value));\n    }\n\n    /**\n     * The base implementation of `_.isRegExp` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n     */\n    function baseIsRegExp(value) {\n      return isObjectLike(value) && baseGetTag(value) == regexpTag;\n    }\n\n    /**\n     * The base implementation of `_.isSet` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n     */\n    function baseIsSet(value) {\n      return isObjectLike(value) && getTag(value) == setTag;\n    }\n\n    /**\n     * The base implementation of `_.isTypedArray` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n     */\n    function baseIsTypedArray(value) {\n      return isObjectLike(value) &&\n        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n    }\n\n    /**\n     * The base implementation of `_.iteratee`.\n     *\n     * @private\n     * @param {*} [value=_.identity] The value to convert to an iteratee.\n     * @returns {Function} Returns the iteratee.\n     */\n    function baseIteratee(value) {\n      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n      if (typeof value == 'function') {\n        return value;\n      }\n      if (value == null) {\n        return identity;\n      }\n      if (typeof value == 'object') {\n        return isArray(value)\n          ? baseMatchesProperty(value[0], value[1])\n          : baseMatches(value);\n      }\n      return property(value);\n    }\n\n    /**\n     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function baseKeys(object) {\n      if (!isPrototype(object)) {\n        return nativeKeys(object);\n      }\n      var result = [];\n      for (var key in Object(object)) {\n        if (hasOwnProperty.call(object, key) && key != 'constructor') {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function baseKeysIn(object) {\n      if (!isObject(object)) {\n        return nativeKeysIn(object);\n      }\n      var isProto = isPrototype(object),\n          result = [];\n\n      for (var key in object) {\n        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.lt` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than `other`,\n     *  else `false`.\n     */\n    function baseLt(value, other) {\n      return value < other;\n    }\n\n    /**\n     * The base implementation of `_.map` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     */\n    function baseMap(collection, iteratee) {\n      var index = -1,\n          result = isArrayLike(collection) ? Array(collection.length) : [];\n\n      baseEach(collection, function(value, key, collection) {\n        result[++index] = iteratee(value, key, collection);\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.matches` which doesn't clone `source`.\n     *\n     * @private\n     * @param {Object} source The object of property values to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseMatches(source) {\n      var matchData = getMatchData(source);\n      if (matchData.length == 1 && matchData[0][2]) {\n        return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n      }\n      return function(object) {\n        return object === source || baseIsMatch(object, source, matchData);\n      };\n    }\n\n    /**\n     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n     *\n     * @private\n     * @param {string} path The path of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseMatchesProperty(path, srcValue) {\n      if (isKey(path) && isStrictComparable(srcValue)) {\n        return matchesStrictComparable(toKey(path), srcValue);\n      }\n      return function(object) {\n        var objValue = get(object, path);\n        return (objValue === undefined && objValue === srcValue)\n          ? hasIn(object, path)\n          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n      };\n    }\n\n    /**\n     * The base implementation of `_.merge` without support for multiple sources.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @param {number} srcIndex The index of `source`.\n     * @param {Function} [customizer] The function to customize merged values.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     */\n    function baseMerge(object, source, srcIndex, customizer, stack) {\n      if (object === source) {\n        return;\n      }\n      baseFor(source, function(srcValue, key) {\n        stack || (stack = new Stack);\n        if (isObject(srcValue)) {\n          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n        }\n        else {\n          var newValue = customizer\n            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)\n            : undefined;\n\n          if (newValue === undefined) {\n            newValue = srcValue;\n          }\n          assignMergeValue(object, key, newValue);\n        }\n      }, keysIn);\n    }\n\n    /**\n     * A specialized version of `baseMerge` for arrays and objects which performs\n     * deep merges and tracks traversed objects enabling objects with circular\n     * references to be merged.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @param {string} key The key of the value to merge.\n     * @param {number} srcIndex The index of `source`.\n     * @param {Function} mergeFunc The function to merge values.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     */\n    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n      var objValue = safeGet(object, key),\n          srcValue = safeGet(source, key),\n          stacked = stack.get(srcValue);\n\n      if (stacked) {\n        assignMergeValue(object, key, stacked);\n        return;\n      }\n      var newValue = customizer\n        ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n        : undefined;\n\n      var isCommon = newValue === undefined;\n\n      if (isCommon) {\n        var isArr = isArray(srcValue),\n            isBuff = !isArr && isBuffer(srcValue),\n            isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n\n        newValue = srcValue;\n        if (isArr || isBuff || isTyped) {\n          if (isArray(objValue)) {\n            newValue = objValue;\n          }\n          else if (isArrayLikeObject(objValue)) {\n            newValue = copyArray(objValue);\n          }\n          else if (isBuff) {\n            isCommon = false;\n            newValue = cloneBuffer(srcValue, true);\n          }\n          else if (isTyped) {\n            isCommon = false;\n            newValue = cloneTypedArray(srcValue, true);\n          }\n          else {\n            newValue = [];\n          }\n        }\n        else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n          newValue = objValue;\n          if (isArguments(objValue)) {\n            newValue = toPlainObject(objValue);\n          }\n          else if (!isObject(objValue) || isFunction(objValue)) {\n            newValue = initCloneObject(srcValue);\n          }\n        }\n        else {\n          isCommon = false;\n        }\n      }\n      if (isCommon) {\n        // Recursively merge objects and arrays (susceptible to call stack limits).\n        stack.set(srcValue, newValue);\n        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n        stack['delete'](srcValue);\n      }\n      assignMergeValue(object, key, newValue);\n    }\n\n    /**\n     * The base implementation of `_.nth` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {Array} array The array to query.\n     * @param {number} n The index of the element to return.\n     * @returns {*} Returns the nth element of `array`.\n     */\n    function baseNth(array, n) {\n      var length = array.length;\n      if (!length) {\n        return;\n      }\n      n += n < 0 ? length : 0;\n      return isIndex(n, length) ? array[n] : undefined;\n    }\n\n    /**\n     * The base implementation of `_.orderBy` without param guards.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n     * @param {string[]} orders The sort orders of `iteratees`.\n     * @returns {Array} Returns the new sorted array.\n     */\n    function baseOrderBy(collection, iteratees, orders) {\n      if (iteratees.length) {\n        iteratees = arrayMap(iteratees, function(iteratee) {\n          if (isArray(iteratee)) {\n            return function(value) {\n              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);\n            }\n          }\n          return iteratee;\n        });\n      } else {\n        iteratees = [identity];\n      }\n\n      var index = -1;\n      iteratees = arrayMap(iteratees, baseUnary(getIteratee()));\n\n      var result = baseMap(collection, function(value, key, collection) {\n        var criteria = arrayMap(iteratees, function(iteratee) {\n          return iteratee(value);\n        });\n        return { 'criteria': criteria, 'index': ++index, 'value': value };\n      });\n\n      return baseSortBy(result, function(object, other) {\n        return compareMultiple(object, other, orders);\n      });\n    }\n\n    /**\n     * The base implementation of `_.pick` without support for individual\n     * property identifiers.\n     *\n     * @private\n     * @param {Object} object The source object.\n     * @param {string[]} paths The property paths to pick.\n     * @returns {Object} Returns the new object.\n     */\n    function basePick(object, paths) {\n      return basePickBy(object, paths, function(value, path) {\n        return hasIn(object, path);\n      });\n    }\n\n    /**\n     * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The source object.\n     * @param {string[]} paths The property paths to pick.\n     * @param {Function} predicate The function invoked per property.\n     * @returns {Object} Returns the new object.\n     */\n    function basePickBy(object, paths, predicate) {\n      var index = -1,\n          length = paths.length,\n          result = {};\n\n      while (++index < length) {\n        var path = paths[index],\n            value = baseGet(object, path);\n\n        if (predicate(value, path)) {\n          baseSet(result, castPath(path, object), value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseProperty` which supports deep paths.\n     *\n     * @private\n     * @param {Array|string} path The path of the property to get.\n     * @returns {Function} Returns the new accessor function.\n     */\n    function basePropertyDeep(path) {\n      return function(object) {\n        return baseGet(object, path);\n      };\n    }\n\n    /**\n     * The base implementation of `_.pullAllBy` without support for iteratee\n     * shorthands.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns `array`.\n     */\n    function basePullAll(array, values, iteratee, comparator) {\n      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,\n          index = -1,\n          length = values.length,\n          seen = array;\n\n      if (array === values) {\n        values = copyArray(values);\n      }\n      if (iteratee) {\n        seen = arrayMap(array, baseUnary(iteratee));\n      }\n      while (++index < length) {\n        var fromIndex = 0,\n            value = values[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {\n          if (seen !== array) {\n            splice.call(seen, fromIndex, 1);\n          }\n          splice.call(array, fromIndex, 1);\n        }\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.pullAt` without support for individual\n     * indexes or capturing the removed elements.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {number[]} indexes The indexes of elements to remove.\n     * @returns {Array} Returns `array`.\n     */\n    function basePullAt(array, indexes) {\n      var length = array ? indexes.length : 0,\n          lastIndex = length - 1;\n\n      while (length--) {\n        var index = indexes[length];\n        if (length == lastIndex || index !== previous) {\n          var previous = index;\n          if (isIndex(index)) {\n            splice.call(array, index, 1);\n          } else {\n            baseUnset(array, index);\n          }\n        }\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.random` without support for returning\n     * floating-point numbers.\n     *\n     * @private\n     * @param {number} lower The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the random number.\n     */\n    function baseRandom(lower, upper) {\n      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n    }\n\n    /**\n     * The base implementation of `_.range` and `_.rangeRight` which doesn't\n     * coerce arguments.\n     *\n     * @private\n     * @param {number} start The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} step The value to increment or decrement by.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Array} Returns the range of numbers.\n     */\n    function baseRange(start, end, step, fromRight) {\n      var index = -1,\n          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\n          result = Array(length);\n\n      while (length--) {\n        result[fromRight ? length : ++index] = start;\n        start += step;\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.repeat` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {string} string The string to repeat.\n     * @param {number} n The number of times to repeat the string.\n     * @returns {string} Returns the repeated string.\n     */\n    function baseRepeat(string, n) {\n      var result = '';\n      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {\n        return result;\n      }\n      // Leverage the exponentiation by squaring algorithm for a faster repeat.\n      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.\n      do {\n        if (n % 2) {\n          result += string;\n        }\n        n = nativeFloor(n / 2);\n        if (n) {\n          string += string;\n        }\n      } while (n);\n\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @returns {Function} Returns the new function.\n     */\n    function baseRest(func, start) {\n      return setToString(overRest(func, start, identity), func + '');\n    }\n\n    /**\n     * The base implementation of `_.sample`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to sample.\n     * @returns {*} Returns the random element.\n     */\n    function baseSample(collection) {\n      return arraySample(values(collection));\n    }\n\n    /**\n     * The base implementation of `_.sampleSize` without param guards.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to sample.\n     * @param {number} n The number of elements to sample.\n     * @returns {Array} Returns the random elements.\n     */\n    function baseSampleSize(collection, n) {\n      var array = values(collection);\n      return shuffleSelf(array, baseClamp(n, 0, array.length));\n    }\n\n    /**\n     * The base implementation of `_.set`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @param {Function} [customizer] The function to customize path creation.\n     * @returns {Object} Returns `object`.\n     */\n    function baseSet(object, path, value, customizer) {\n      if (!isObject(object)) {\n        return object;\n      }\n      path = castPath(path, object);\n\n      var index = -1,\n          length = path.length,\n          lastIndex = length - 1,\n          nested = object;\n\n      while (nested != null && ++index < length) {\n        var key = toKey(path[index]),\n            newValue = value;\n\n        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n          return object;\n        }\n\n        if (index != lastIndex) {\n          var objValue = nested[key];\n          newValue = customizer ? customizer(objValue, key, nested) : undefined;\n          if (newValue === undefined) {\n            newValue = isObject(objValue)\n              ? objValue\n              : (isIndex(path[index + 1]) ? [] : {});\n          }\n        }\n        assignValue(nested, key, newValue);\n        nested = nested[key];\n      }\n      return object;\n    }\n\n    /**\n     * The base implementation of `setData` without support for hot loop shorting.\n     *\n     * @private\n     * @param {Function} func The function to associate metadata with.\n     * @param {*} data The metadata.\n     * @returns {Function} Returns `func`.\n     */\n    var baseSetData = !metaMap ? identity : function(func, data) {\n      metaMap.set(func, data);\n      return func;\n    };\n\n    /**\n     * The base implementation of `setToString` without support for hot loop shorting.\n     *\n     * @private\n     * @param {Function} func The function to modify.\n     * @param {Function} string The `toString` result.\n     * @returns {Function} Returns `func`.\n     */\n    var baseSetToString = !defineProperty ? identity : function(func, string) {\n      return defineProperty(func, 'toString', {\n        'configurable': true,\n        'enumerable': false,\n        'value': constant(string),\n        'writable': true\n      });\n    };\n\n    /**\n     * The base implementation of `_.shuffle`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     */\n    function baseShuffle(collection) {\n      return shuffleSelf(values(collection));\n    }\n\n    /**\n     * The base implementation of `_.slice` without an iteratee call guard.\n     *\n     * @private\n     * @param {Array} array The array to slice.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function baseSlice(array, start, end) {\n      var index = -1,\n          length = array.length;\n\n      if (start < 0) {\n        start = -start > length ? 0 : (length + start);\n      }\n      end = end > length ? length : end;\n      if (end < 0) {\n        end += length;\n      }\n      length = start > end ? 0 : ((end - start) >>> 0);\n      start >>>= 0;\n\n      var result = Array(length);\n      while (++index < length) {\n        result[index] = array[index + start];\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.some` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\n     *  else `false`.\n     */\n    function baseSome(collection, predicate) {\n      var result;\n\n      baseEach(collection, function(value, index, collection) {\n        result = predicate(value, index, collection);\n        return !result;\n      });\n      return !!result;\n    }\n\n    /**\n     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\n     * performs a binary search of `array` to determine the index at which `value`\n     * should be inserted into `array` in order to maintain its sort order.\n     *\n     * @private\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     */\n    function baseSortedIndex(array, value, retHighest) {\n      var low = 0,\n          high = array == null ? low : array.length;\n\n      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {\n        while (low < high) {\n          var mid = (low + high) >>> 1,\n              computed = array[mid];\n\n          if (computed !== null && !isSymbol(computed) &&\n              (retHighest ? (computed <= value) : (computed < value))) {\n            low = mid + 1;\n          } else {\n            high = mid;\n          }\n        }\n        return high;\n      }\n      return baseSortedIndexBy(array, value, identity, retHighest);\n    }\n\n    /**\n     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`\n     * which invokes `iteratee` for `value` and each element of `array` to compute\n     * their sort ranking. The iteratee is invoked with one argument; (value).\n     *\n     * @private\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} iteratee The iteratee invoked per element.\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     */\n    function baseSortedIndexBy(array, value, iteratee, retHighest) {\n      var low = 0,\n          high = array == null ? 0 : array.length;\n      if (high === 0) {\n        return 0;\n      }\n\n      value = iteratee(value);\n      var valIsNaN = value !== value,\n          valIsNull = value === null,\n          valIsSymbol = isSymbol(value),\n          valIsUndefined = value === undefined;\n\n      while (low < high) {\n        var mid = nativeFloor((low + high) / 2),\n            computed = iteratee(array[mid]),\n            othIsDefined = computed !== undefined,\n            othIsNull = computed === null,\n            othIsReflexive = computed === computed,\n            othIsSymbol = isSymbol(computed);\n\n        if (valIsNaN) {\n          var setLow = retHighest || othIsReflexive;\n        } else if (valIsUndefined) {\n          setLow = othIsReflexive && (retHighest || othIsDefined);\n        } else if (valIsNull) {\n          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);\n        } else if (valIsSymbol) {\n          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);\n        } else if (othIsNull || othIsSymbol) {\n          setLow = false;\n        } else {\n          setLow = retHighest ? (computed <= value) : (computed < value);\n        }\n        if (setLow) {\n          low = mid + 1;\n        } else {\n          high = mid;\n        }\n      }\n      return nativeMin(high, MAX_ARRAY_INDEX);\n    }\n\n    /**\n     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without\n     * support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     */\n    function baseSortedUniq(array, iteratee) {\n      var index = -1,\n          length = array.length,\n          resIndex = 0,\n          result = [];\n\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        if (!index || !eq(computed, seen)) {\n          var seen = computed;\n          result[resIndex++] = value === 0 ? 0 : value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.toNumber` which doesn't ensure correct\n     * conversions of binary, hexadecimal, or octal string values.\n     *\n     * @private\n     * @param {*} value The value to process.\n     * @returns {number} Returns the number.\n     */\n    function baseToNumber(value) {\n      if (typeof value == 'number') {\n        return value;\n      }\n      if (isSymbol(value)) {\n        return NAN;\n      }\n      return +value;\n    }\n\n    /**\n     * The base implementation of `_.toString` which doesn't convert nullish\n     * values to empty strings.\n     *\n     * @private\n     * @param {*} value The value to process.\n     * @returns {string} Returns the string.\n     */\n    function baseToString(value) {\n      // Exit early for strings to avoid a performance hit in some environments.\n      if (typeof value == 'string') {\n        return value;\n      }\n      if (isArray(value)) {\n        // Recursively convert values (susceptible to call stack limits).\n        return arrayMap(value, baseToString) + '';\n      }\n      if (isSymbol(value)) {\n        return symbolToString ? symbolToString.call(value) : '';\n      }\n      var result = (value + '');\n      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n    }\n\n    /**\n     * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     */\n    function baseUniq(array, iteratee, comparator) {\n      var index = -1,\n          includes = arrayIncludes,\n          length = array.length,\n          isCommon = true,\n          result = [],\n          seen = result;\n\n      if (comparator) {\n        isCommon = false;\n        includes = arrayIncludesWith;\n      }\n      else if (length >= LARGE_ARRAY_SIZE) {\n        var set = iteratee ? null : createSet(array);\n        if (set) {\n          return setToArray(set);\n        }\n        isCommon = false;\n        includes = cacheHas;\n        seen = new SetCache;\n      }\n      else {\n        seen = iteratee ? [] : result;\n      }\n      outer:\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (isCommon && computed === computed) {\n          var seenIndex = seen.length;\n          while (seenIndex--) {\n            if (seen[seenIndex] === computed) {\n              continue outer;\n            }\n          }\n          if (iteratee) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n        else if (!includes(seen, computed, comparator)) {\n          if (seen !== result) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.unset`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The property path to unset.\n     * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n     */\n    function baseUnset(object, path) {\n      path = castPath(path, object);\n      object = parent(object, path);\n      return object == null || delete object[toKey(last(path))];\n    }\n\n    /**\n     * The base implementation of `_.update`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to update.\n     * @param {Function} updater The function to produce the updated value.\n     * @param {Function} [customizer] The function to customize path creation.\n     * @returns {Object} Returns `object`.\n     */\n    function baseUpdate(object, path, updater, customizer) {\n      return baseSet(object, path, updater(baseGet(object, path)), customizer);\n    }\n\n    /**\n     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`\n     * without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to query.\n     * @param {Function} predicate The function invoked per iteration.\n     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function baseWhile(array, predicate, isDrop, fromRight) {\n      var length = array.length,\n          index = fromRight ? length : -1;\n\n      while ((fromRight ? index-- : ++index < length) &&\n        predicate(array[index], index, array)) {}\n\n      return isDrop\n        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))\n        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));\n    }\n\n    /**\n     * The base implementation of `wrapperValue` which returns the result of\n     * performing a sequence of actions on the unwrapped `value`, where each\n     * successive action is supplied the return value of the previous.\n     *\n     * @private\n     * @param {*} value The unwrapped value.\n     * @param {Array} actions Actions to perform to resolve the unwrapped value.\n     * @returns {*} Returns the resolved value.\n     */\n    function baseWrapperValue(value, actions) {\n      var result = value;\n      if (result instanceof LazyWrapper) {\n        result = result.value();\n      }\n      return arrayReduce(actions, function(result, action) {\n        return action.func.apply(action.thisArg, arrayPush([result], action.args));\n      }, result);\n    }\n\n    /**\n     * The base implementation of methods like `_.xor`, without support for\n     * iteratee shorthands, that accepts an array of arrays to inspect.\n     *\n     * @private\n     * @param {Array} arrays The arrays to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of values.\n     */\n    function baseXor(arrays, iteratee, comparator) {\n      var length = arrays.length;\n      if (length < 2) {\n        return length ? baseUniq(arrays[0]) : [];\n      }\n      var index = -1,\n          result = Array(length);\n\n      while (++index < length) {\n        var array = arrays[index],\n            othIndex = -1;\n\n        while (++othIndex < length) {\n          if (othIndex != index) {\n            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);\n          }\n        }\n      }\n      return baseUniq(baseFlatten(result, 1), iteratee, comparator);\n    }\n\n    /**\n     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.\n     *\n     * @private\n     * @param {Array} props The property identifiers.\n     * @param {Array} values The property values.\n     * @param {Function} assignFunc The function to assign values.\n     * @returns {Object} Returns the new object.\n     */\n    function baseZipObject(props, values, assignFunc) {\n      var index = -1,\n          length = props.length,\n          valsLength = values.length,\n          result = {};\n\n      while (++index < length) {\n        var value = index < valsLength ? values[index] : undefined;\n        assignFunc(result, props[index], value);\n      }\n      return result;\n    }\n\n    /**\n     * Casts `value` to an empty array if it's not an array like object.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {Array|Object} Returns the cast array-like object.\n     */\n    function castArrayLikeObject(value) {\n      return isArrayLikeObject(value) ? value : [];\n    }\n\n    /**\n     * Casts `value` to `identity` if it's not a function.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {Function} Returns cast function.\n     */\n    function castFunction(value) {\n      return typeof value == 'function' ? value : identity;\n    }\n\n    /**\n     * Casts `value` to a path array if it's not one.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @param {Object} [object] The object to query keys on.\n     * @returns {Array} Returns the cast property path array.\n     */\n    function castPath(value, object) {\n      if (isArray(value)) {\n        return value;\n      }\n      return isKey(value, object) ? [value] : stringToPath(toString(value));\n    }\n\n    /**\n     * A `baseRest` alias which can be replaced with `identity` by module\n     * replacement plugins.\n     *\n     * @private\n     * @type {Function}\n     * @param {Function} func The function to apply a rest parameter to.\n     * @returns {Function} Returns the new function.\n     */\n    var castRest = baseRest;\n\n    /**\n     * Casts `array` to a slice if it's needed.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {number} start The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the cast slice.\n     */\n    function castSlice(array, start, end) {\n      var length = array.length;\n      end = end === undefined ? length : end;\n      return (!start && end >= length) ? array : baseSlice(array, start, end);\n    }\n\n    /**\n     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).\n     *\n     * @private\n     * @param {number|Object} id The timer id or timeout object of the timer to clear.\n     */\n    var clearTimeout = ctxClearTimeout || function(id) {\n      return root.clearTimeout(id);\n    };\n\n    /**\n     * Creates a clone of  `buffer`.\n     *\n     * @private\n     * @param {Buffer} buffer The buffer to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Buffer} Returns the cloned buffer.\n     */\n    function cloneBuffer(buffer, isDeep) {\n      if (isDeep) {\n        return buffer.slice();\n      }\n      var length = buffer.length,\n          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n      buffer.copy(result);\n      return result;\n    }\n\n    /**\n     * Creates a clone of `arrayBuffer`.\n     *\n     * @private\n     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n     * @returns {ArrayBuffer} Returns the cloned array buffer.\n     */\n    function cloneArrayBuffer(arrayBuffer) {\n      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n      new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n      return result;\n    }\n\n    /**\n     * Creates a clone of `dataView`.\n     *\n     * @private\n     * @param {Object} dataView The data view to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned data view.\n     */\n    function cloneDataView(dataView, isDeep) {\n      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n    }\n\n    /**\n     * Creates a clone of `regexp`.\n     *\n     * @private\n     * @param {Object} regexp The regexp to clone.\n     * @returns {Object} Returns the cloned regexp.\n     */\n    function cloneRegExp(regexp) {\n      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n      result.lastIndex = regexp.lastIndex;\n      return result;\n    }\n\n    /**\n     * Creates a clone of the `symbol` object.\n     *\n     * @private\n     * @param {Object} symbol The symbol object to clone.\n     * @returns {Object} Returns the cloned symbol object.\n     */\n    function cloneSymbol(symbol) {\n      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n    }\n\n    /**\n     * Creates a clone of `typedArray`.\n     *\n     * @private\n     * @param {Object} typedArray The typed array to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned typed array.\n     */\n    function cloneTypedArray(typedArray, isDeep) {\n      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n    }\n\n    /**\n     * Compares values to sort them in ascending order.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {number} Returns the sort order indicator for `value`.\n     */\n    function compareAscending(value, other) {\n      if (value !== other) {\n        var valIsDefined = value !== undefined,\n            valIsNull = value === null,\n            valIsReflexive = value === value,\n            valIsSymbol = isSymbol(value);\n\n        var othIsDefined = other !== undefined,\n            othIsNull = other === null,\n            othIsReflexive = other === other,\n            othIsSymbol = isSymbol(other);\n\n        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n            (valIsNull && othIsDefined && othIsReflexive) ||\n            (!valIsDefined && othIsReflexive) ||\n            !valIsReflexive) {\n          return 1;\n        }\n        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n            (othIsNull && valIsDefined && valIsReflexive) ||\n            (!othIsDefined && valIsReflexive) ||\n            !othIsReflexive) {\n          return -1;\n        }\n      }\n      return 0;\n    }\n\n    /**\n     * Used by `_.orderBy` to compare multiple properties of a value to another\n     * and stable sort them.\n     *\n     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n     * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n     * of corresponding values.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {boolean[]|string[]} orders The order to sort by for each property.\n     * @returns {number} Returns the sort order indicator for `object`.\n     */\n    function compareMultiple(object, other, orders) {\n      var index = -1,\n          objCriteria = object.criteria,\n          othCriteria = other.criteria,\n          length = objCriteria.length,\n          ordersLength = orders.length;\n\n      while (++index < length) {\n        var result = compareAscending(objCriteria[index], othCriteria[index]);\n        if (result) {\n          if (index >= ordersLength) {\n            return result;\n          }\n          var order = orders[index];\n          return result * (order == 'desc' ? -1 : 1);\n        }\n      }\n      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n      // that causes it, under certain circumstances, to provide the same value for\n      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n      // for more details.\n      //\n      // This also ensures a stable sort in V8 and other engines.\n      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n      return object.index - other.index;\n    }\n\n    /**\n     * Creates an array that is the composition of partially applied arguments,\n     * placeholders, and provided arguments into a single array of arguments.\n     *\n     * @private\n     * @param {Array} args The provided arguments.\n     * @param {Array} partials The arguments to prepend to those provided.\n     * @param {Array} holders The `partials` placeholder indexes.\n     * @params {boolean} [isCurried] Specify composing for a curried function.\n     * @returns {Array} Returns the new array of composed arguments.\n     */\n    function composeArgs(args, partials, holders, isCurried) {\n      var argsIndex = -1,\n          argsLength = args.length,\n          holdersLength = holders.length,\n          leftIndex = -1,\n          leftLength = partials.length,\n          rangeLength = nativeMax(argsLength - holdersLength, 0),\n          result = Array(leftLength + rangeLength),\n          isUncurried = !isCurried;\n\n      while (++leftIndex < leftLength) {\n        result[leftIndex] = partials[leftIndex];\n      }\n      while (++argsIndex < holdersLength) {\n        if (isUncurried || argsIndex < argsLength) {\n          result[holders[argsIndex]] = args[argsIndex];\n        }\n      }\n      while (rangeLength--) {\n        result[leftIndex++] = args[argsIndex++];\n      }\n      return result;\n    }\n\n    /**\n     * This function is like `composeArgs` except that the arguments composition\n     * is tailored for `_.partialRight`.\n     *\n     * @private\n     * @param {Array} args The provided arguments.\n     * @param {Array} partials The arguments to append to those provided.\n     * @param {Array} holders The `partials` placeholder indexes.\n     * @params {boolean} [isCurried] Specify composing for a curried function.\n     * @returns {Array} Returns the new array of composed arguments.\n     */\n    function composeArgsRight(args, partials, holders, isCurried) {\n      var argsIndex = -1,\n          argsLength = args.length,\n          holdersIndex = -1,\n          holdersLength = holders.length,\n          rightIndex = -1,\n          rightLength = partials.length,\n          rangeLength = nativeMax(argsLength - holdersLength, 0),\n          result = Array(rangeLength + rightLength),\n          isUncurried = !isCurried;\n\n      while (++argsIndex < rangeLength) {\n        result[argsIndex] = args[argsIndex];\n      }\n      var offset = argsIndex;\n      while (++rightIndex < rightLength) {\n        result[offset + rightIndex] = partials[rightIndex];\n      }\n      while (++holdersIndex < holdersLength) {\n        if (isUncurried || argsIndex < argsLength) {\n          result[offset + holders[holdersIndex]] = args[argsIndex++];\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Copies the values of `source` to `array`.\n     *\n     * @private\n     * @param {Array} source The array to copy values from.\n     * @param {Array} [array=[]] The array to copy values to.\n     * @returns {Array} Returns `array`.\n     */\n    function copyArray(source, array) {\n      var index = -1,\n          length = source.length;\n\n      array || (array = Array(length));\n      while (++index < length) {\n        array[index] = source[index];\n      }\n      return array;\n    }\n\n    /**\n     * Copies properties of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy properties from.\n     * @param {Array} props The property identifiers to copy.\n     * @param {Object} [object={}] The object to copy properties to.\n     * @param {Function} [customizer] The function to customize copied values.\n     * @returns {Object} Returns `object`.\n     */\n    function copyObject(source, props, object, customizer) {\n      var isNew = !object;\n      object || (object = {});\n\n      var index = -1,\n          length = props.length;\n\n      while (++index < length) {\n        var key = props[index];\n\n        var newValue = customizer\n          ? customizer(object[key], source[key], key, object, source)\n          : undefined;\n\n        if (newValue === undefined) {\n          newValue = source[key];\n        }\n        if (isNew) {\n          baseAssignValue(object, key, newValue);\n        } else {\n          assignValue(object, key, newValue);\n        }\n      }\n      return object;\n    }\n\n    /**\n     * Copies own symbols of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy symbols from.\n     * @param {Object} [object={}] The object to copy symbols to.\n     * @returns {Object} Returns `object`.\n     */\n    function copySymbols(source, object) {\n      return copyObject(source, getSymbols(source), object);\n    }\n\n    /**\n     * Copies own and inherited symbols of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy symbols from.\n     * @param {Object} [object={}] The object to copy symbols to.\n     * @returns {Object} Returns `object`.\n     */\n    function copySymbolsIn(source, object) {\n      return copyObject(source, getSymbolsIn(source), object);\n    }\n\n    /**\n     * Creates a function like `_.groupBy`.\n     *\n     * @private\n     * @param {Function} setter The function to set accumulator values.\n     * @param {Function} [initializer] The accumulator object initializer.\n     * @returns {Function} Returns the new aggregator function.\n     */\n    function createAggregator(setter, initializer) {\n      return function(collection, iteratee) {\n        var func = isArray(collection) ? arrayAggregator : baseAggregator,\n            accumulator = initializer ? initializer() : {};\n\n        return func(collection, setter, getIteratee(iteratee, 2), accumulator);\n      };\n    }\n\n    /**\n     * Creates a function like `_.assign`.\n     *\n     * @private\n     * @param {Function} assigner The function to assign values.\n     * @returns {Function} Returns the new assigner function.\n     */\n    function createAssigner(assigner) {\n      return baseRest(function(object, sources) {\n        var index = -1,\n            length = sources.length,\n            customizer = length > 1 ? sources[length - 1] : undefined,\n            guard = length > 2 ? sources[2] : undefined;\n\n        customizer = (assigner.length > 3 && typeof customizer == 'function')\n          ? (length--, customizer)\n          : undefined;\n\n        if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n          customizer = length < 3 ? undefined : customizer;\n          length = 1;\n        }\n        object = Object(object);\n        while (++index < length) {\n          var source = sources[index];\n          if (source) {\n            assigner(object, source, index, customizer);\n          }\n        }\n        return object;\n      });\n    }\n\n    /**\n     * Creates a `baseEach` or `baseEachRight` function.\n     *\n     * @private\n     * @param {Function} eachFunc The function to iterate over a collection.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new base function.\n     */\n    function createBaseEach(eachFunc, fromRight) {\n      return function(collection, iteratee) {\n        if (collection == null) {\n          return collection;\n        }\n        if (!isArrayLike(collection)) {\n          return eachFunc(collection, iteratee);\n        }\n        var length = collection.length,\n            index = fromRight ? length : -1,\n            iterable = Object(collection);\n\n        while ((fromRight ? index-- : ++index < length)) {\n          if (iteratee(iterable[index], index, iterable) === false) {\n            break;\n          }\n        }\n        return collection;\n      };\n    }\n\n    /**\n     * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new base function.\n     */\n    function createBaseFor(fromRight) {\n      return function(object, iteratee, keysFunc) {\n        var index = -1,\n            iterable = Object(object),\n            props = keysFunc(object),\n            length = props.length;\n\n        while (length--) {\n          var key = props[fromRight ? length : ++index];\n          if (iteratee(iterable[key], key, iterable) === false) {\n            break;\n          }\n        }\n        return object;\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with the optional `this`\n     * binding of `thisArg`.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createBind(func, bitmask, thisArg) {\n      var isBind = bitmask & WRAP_BIND_FLAG,\n          Ctor = createCtor(func);\n\n      function wrapper() {\n        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n        return fn.apply(isBind ? thisArg : this, arguments);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a function like `_.lowerFirst`.\n     *\n     * @private\n     * @param {string} methodName The name of the `String` case method to use.\n     * @returns {Function} Returns the new case function.\n     */\n    function createCaseFirst(methodName) {\n      return function(string) {\n        string = toString(string);\n\n        var strSymbols = hasUnicode(string)\n          ? stringToArray(string)\n          : undefined;\n\n        var chr = strSymbols\n          ? strSymbols[0]\n          : string.charAt(0);\n\n        var trailing = strSymbols\n          ? castSlice(strSymbols, 1).join('')\n          : string.slice(1);\n\n        return chr[methodName]() + trailing;\n      };\n    }\n\n    /**\n     * Creates a function like `_.camelCase`.\n     *\n     * @private\n     * @param {Function} callback The function to combine each word.\n     * @returns {Function} Returns the new compounder function.\n     */\n    function createCompounder(callback) {\n      return function(string) {\n        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');\n      };\n    }\n\n    /**\n     * Creates a function that produces an instance of `Ctor` regardless of\n     * whether it was invoked as part of a `new` expression or by `call` or `apply`.\n     *\n     * @private\n     * @param {Function} Ctor The constructor to wrap.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createCtor(Ctor) {\n      return function() {\n        // Use a `switch` statement to work with class constructors. See\n        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist\n        // for more details.\n        var args = arguments;\n        switch (args.length) {\n          case 0: return new Ctor;\n          case 1: return new Ctor(args[0]);\n          case 2: return new Ctor(args[0], args[1]);\n          case 3: return new Ctor(args[0], args[1], args[2]);\n          case 4: return new Ctor(args[0], args[1], args[2], args[3]);\n          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);\n          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);\n          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);\n        }\n        var thisBinding = baseCreate(Ctor.prototype),\n            result = Ctor.apply(thisBinding, args);\n\n        // Mimic the constructor's `return` behavior.\n        // See https://es5.github.io/#x13.2.2 for more details.\n        return isObject(result) ? result : thisBinding;\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to enable currying.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {number} arity The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createCurry(func, bitmask, arity) {\n      var Ctor = createCtor(func);\n\n      function wrapper() {\n        var length = arguments.length,\n            args = Array(length),\n            index = length,\n            placeholder = getHolder(wrapper);\n\n        while (index--) {\n          args[index] = arguments[index];\n        }\n        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)\n          ? []\n          : replaceHolders(args, placeholder);\n\n        length -= holders.length;\n        if (length < arity) {\n          return createRecurry(\n            func, bitmask, createHybrid, wrapper.placeholder, undefined,\n            args, holders, undefined, undefined, arity - length);\n        }\n        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n        return apply(fn, this, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a `_.find` or `_.findLast` function.\n     *\n     * @private\n     * @param {Function} findIndexFunc The function to find the collection index.\n     * @returns {Function} Returns the new find function.\n     */\n    function createFind(findIndexFunc) {\n      return function(collection, predicate, fromIndex) {\n        var iterable = Object(collection);\n        if (!isArrayLike(collection)) {\n          var iteratee = getIteratee(predicate, 3);\n          collection = keys(collection);\n          predicate = function(key) { return iteratee(iterable[key], key, iterable); };\n        }\n        var index = findIndexFunc(collection, predicate, fromIndex);\n        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;\n      };\n    }\n\n    /**\n     * Creates a `_.flow` or `_.flowRight` function.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new flow function.\n     */\n    function createFlow(fromRight) {\n      return flatRest(function(funcs) {\n        var length = funcs.length,\n            index = length,\n            prereq = LodashWrapper.prototype.thru;\n\n        if (fromRight) {\n          funcs.reverse();\n        }\n        while (index--) {\n          var func = funcs[index];\n          if (typeof func != 'function') {\n            throw new TypeError(FUNC_ERROR_TEXT);\n          }\n          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {\n            var wrapper = new LodashWrapper([], true);\n          }\n        }\n        index = wrapper ? index : length;\n        while (++index < length) {\n          func = funcs[index];\n\n          var funcName = getFuncName(func),\n              data = funcName == 'wrapper' ? getData(func) : undefined;\n\n          if (data && isLaziable(data[0]) &&\n                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&\n                !data[4].length && data[9] == 1\n              ) {\n            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);\n          } else {\n            wrapper = (func.length == 1 && isLaziable(func))\n              ? wrapper[funcName]()\n              : wrapper.thru(func);\n          }\n        }\n        return function() {\n          var args = arguments,\n              value = args[0];\n\n          if (wrapper && args.length == 1 && isArray(value)) {\n            return wrapper.plant(value).value();\n          }\n          var index = 0,\n              result = length ? funcs[index].apply(this, args) : value;\n\n          while (++index < length) {\n            result = funcs[index].call(this, result);\n          }\n          return result;\n        };\n      });\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with optional `this`\n     * binding of `thisArg`, partial application, and currying.\n     *\n     * @private\n     * @param {Function|string} func The function or method name to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to prepend to those provided to\n     *  the new function.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [partialsRight] The arguments to append to those provided\n     *  to the new function.\n     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {\n      var isAry = bitmask & WRAP_ARY_FLAG,\n          isBind = bitmask & WRAP_BIND_FLAG,\n          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,\n          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),\n          isFlip = bitmask & WRAP_FLIP_FLAG,\n          Ctor = isBindKey ? undefined : createCtor(func);\n\n      function wrapper() {\n        var length = arguments.length,\n            args = Array(length),\n            index = length;\n\n        while (index--) {\n          args[index] = arguments[index];\n        }\n        if (isCurried) {\n          var placeholder = getHolder(wrapper),\n              holdersCount = countHolders(args, placeholder);\n        }\n        if (partials) {\n          args = composeArgs(args, partials, holders, isCurried);\n        }\n        if (partialsRight) {\n          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);\n        }\n        length -= holdersCount;\n        if (isCurried && length < arity) {\n          var newHolders = replaceHolders(args, placeholder);\n          return createRecurry(\n            func, bitmask, createHybrid, wrapper.placeholder, thisArg,\n            args, newHolders, argPos, ary, arity - length\n          );\n        }\n        var thisBinding = isBind ? thisArg : this,\n            fn = isBindKey ? thisBinding[func] : func;\n\n        length = args.length;\n        if (argPos) {\n          args = reorder(args, argPos);\n        } else if (isFlip && length > 1) {\n          args.reverse();\n        }\n        if (isAry && ary < length) {\n          args.length = ary;\n        }\n        if (this && this !== root && this instanceof wrapper) {\n          fn = Ctor || createCtor(fn);\n        }\n        return fn.apply(thisBinding, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a function like `_.invertBy`.\n     *\n     * @private\n     * @param {Function} setter The function to set accumulator values.\n     * @param {Function} toIteratee The function to resolve iteratees.\n     * @returns {Function} Returns the new inverter function.\n     */\n    function createInverter(setter, toIteratee) {\n      return function(object, iteratee) {\n        return baseInverter(object, setter, toIteratee(iteratee), {});\n      };\n    }\n\n    /**\n     * Creates a function that performs a mathematical operation on two values.\n     *\n     * @private\n     * @param {Function} operator The function to perform the operation.\n     * @param {number} [defaultValue] The value used for `undefined` arguments.\n     * @returns {Function} Returns the new mathematical operation function.\n     */\n    function createMathOperation(operator, defaultValue) {\n      return function(value, other) {\n        var result;\n        if (value === undefined && other === undefined) {\n          return defaultValue;\n        }\n        if (value !== undefined) {\n          result = value;\n        }\n        if (other !== undefined) {\n          if (result === undefined) {\n            return other;\n          }\n          if (typeof value == 'string' || typeof other == 'string') {\n            value = baseToString(value);\n            other = baseToString(other);\n          } else {\n            value = baseToNumber(value);\n            other = baseToNumber(other);\n          }\n          result = operator(value, other);\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Creates a function like `_.over`.\n     *\n     * @private\n     * @param {Function} arrayFunc The function to iterate over iteratees.\n     * @returns {Function} Returns the new over function.\n     */\n    function createOver(arrayFunc) {\n      return flatRest(function(iteratees) {\n        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));\n        return baseRest(function(args) {\n          var thisArg = this;\n          return arrayFunc(iteratees, function(iteratee) {\n            return apply(iteratee, thisArg, args);\n          });\n        });\n      });\n    }\n\n    /**\n     * Creates the padding for `string` based on `length`. The `chars` string\n     * is truncated if the number of characters exceeds `length`.\n     *\n     * @private\n     * @param {number} length The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padding for `string`.\n     */\n    function createPadding(length, chars) {\n      chars = chars === undefined ? ' ' : baseToString(chars);\n\n      var charsLength = chars.length;\n      if (charsLength < 2) {\n        return charsLength ? baseRepeat(chars, length) : chars;\n      }\n      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));\n      return hasUnicode(chars)\n        ? castSlice(stringToArray(result), 0, length).join('')\n        : result.slice(0, length);\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with the `this` binding\n     * of `thisArg` and `partials` prepended to the arguments it receives.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {Array} partials The arguments to prepend to those provided to\n     *  the new function.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createPartial(func, bitmask, thisArg, partials) {\n      var isBind = bitmask & WRAP_BIND_FLAG,\n          Ctor = createCtor(func);\n\n      function wrapper() {\n        var argsIndex = -1,\n            argsLength = arguments.length,\n            leftIndex = -1,\n            leftLength = partials.length,\n            args = Array(leftLength + argsLength),\n            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n\n        while (++leftIndex < leftLength) {\n          args[leftIndex] = partials[leftIndex];\n        }\n        while (argsLength--) {\n          args[leftIndex++] = arguments[++argsIndex];\n        }\n        return apply(fn, isBind ? thisArg : this, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a `_.range` or `_.rangeRight` function.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new range function.\n     */\n    function createRange(fromRight) {\n      return function(start, end, step) {\n        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {\n          end = step = undefined;\n        }\n        // Ensure the sign of `-0` is preserved.\n        start = toFinite(start);\n        if (end === undefined) {\n          end = start;\n          start = 0;\n        } else {\n          end = toFinite(end);\n        }\n        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);\n        return baseRange(start, end, step, fromRight);\n      };\n    }\n\n    /**\n     * Creates a function that performs a relational operation on two values.\n     *\n     * @private\n     * @param {Function} operator The function to perform the operation.\n     * @returns {Function} Returns the new relational operation function.\n     */\n    function createRelationalOperation(operator) {\n      return function(value, other) {\n        if (!(typeof value == 'string' && typeof other == 'string')) {\n          value = toNumber(value);\n          other = toNumber(other);\n        }\n        return operator(value, other);\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to continue currying.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {Function} wrapFunc The function to create the `func` wrapper.\n     * @param {*} placeholder The placeholder value.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to prepend to those provided to\n     *  the new function.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {\n      var isCurry = bitmask & WRAP_CURRY_FLAG,\n          newHolders = isCurry ? holders : undefined,\n          newHoldersRight = isCurry ? undefined : holders,\n          newPartials = isCurry ? partials : undefined,\n          newPartialsRight = isCurry ? undefined : partials;\n\n      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);\n      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);\n\n      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {\n        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);\n      }\n      var newData = [\n        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,\n        newHoldersRight, argPos, ary, arity\n      ];\n\n      var result = wrapFunc.apply(undefined, newData);\n      if (isLaziable(func)) {\n        setData(result, newData);\n      }\n      result.placeholder = placeholder;\n      return setWrapToString(result, func, bitmask);\n    }\n\n    /**\n     * Creates a function like `_.round`.\n     *\n     * @private\n     * @param {string} methodName The name of the `Math` method to use when rounding.\n     * @returns {Function} Returns the new round function.\n     */\n    function createRound(methodName) {\n      var func = Math[methodName];\n      return function(number, precision) {\n        number = toNumber(number);\n        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);\n        if (precision && nativeIsFinite(number)) {\n          // Shift with exponential notation to avoid floating-point issues.\n          // See [MDN](https://mdn.io/round#Examples) for more details.\n          var pair = (toString(number) + 'e').split('e'),\n              value = func(pair[0] + 'e' + (+pair[1] + precision));\n\n          pair = (toString(value) + 'e').split('e');\n          return +(pair[0] + 'e' + (+pair[1] - precision));\n        }\n        return func(number);\n      };\n    }\n\n    /**\n     * Creates a set object of `values`.\n     *\n     * @private\n     * @param {Array} values The values to add to the set.\n     * @returns {Object} Returns the new set.\n     */\n    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {\n      return new Set(values);\n    };\n\n    /**\n     * Creates a `_.toPairs` or `_.toPairsIn` function.\n     *\n     * @private\n     * @param {Function} keysFunc The function to get the keys of a given object.\n     * @returns {Function} Returns the new pairs function.\n     */\n    function createToPairs(keysFunc) {\n      return function(object) {\n        var tag = getTag(object);\n        if (tag == mapTag) {\n          return mapToArray(object);\n        }\n        if (tag == setTag) {\n          return setToPairs(object);\n        }\n        return baseToPairs(object, keysFunc(object));\n      };\n    }\n\n    /**\n     * Creates a function that either curries or invokes `func` with optional\n     * `this` binding and partially applied arguments.\n     *\n     * @private\n     * @param {Function|string} func The function or method name to wrap.\n     * @param {number} bitmask The bitmask flags.\n     *    1 - `_.bind`\n     *    2 - `_.bindKey`\n     *    4 - `_.curry` or `_.curryRight` of a bound function\n     *    8 - `_.curry`\n     *   16 - `_.curryRight`\n     *   32 - `_.partial`\n     *   64 - `_.partialRight`\n     *  128 - `_.rearg`\n     *  256 - `_.ary`\n     *  512 - `_.flip`\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to be partially applied.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {\n      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;\n      if (!isBindKey && typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      var length = partials ? partials.length : 0;\n      if (!length) {\n        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);\n        partials = holders = undefined;\n      }\n      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);\n      arity = arity === undefined ? arity : toInteger(arity);\n      length -= holders ? holders.length : 0;\n\n      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {\n        var partialsRight = partials,\n            holdersRight = holders;\n\n        partials = holders = undefined;\n      }\n      var data = isBindKey ? undefined : getData(func);\n\n      var newData = [\n        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,\n        argPos, ary, arity\n      ];\n\n      if (data) {\n        mergeData(newData, data);\n      }\n      func = newData[0];\n      bitmask = newData[1];\n      thisArg = newData[2];\n      partials = newData[3];\n      holders = newData[4];\n      arity = newData[9] = newData[9] === undefined\n        ? (isBindKey ? 0 : func.length)\n        : nativeMax(newData[9] - length, 0);\n\n      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {\n        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);\n      }\n      if (!bitmask || bitmask == WRAP_BIND_FLAG) {\n        var result = createBind(func, bitmask, thisArg);\n      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {\n        result = createCurry(func, bitmask, arity);\n      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {\n        result = createPartial(func, bitmask, thisArg, partials);\n      } else {\n        result = createHybrid.apply(undefined, newData);\n      }\n      var setter = data ? baseSetData : setData;\n      return setWrapToString(setter(result, newData), func, bitmask);\n    }\n\n    /**\n     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties\n     * of source objects to the destination object for all destination properties\n     * that resolve to `undefined`.\n     *\n     * @private\n     * @param {*} objValue The destination value.\n     * @param {*} srcValue The source value.\n     * @param {string} key The key of the property to assign.\n     * @param {Object} object The parent object of `objValue`.\n     * @returns {*} Returns the value to assign.\n     */\n    function customDefaultsAssignIn(objValue, srcValue, key, object) {\n      if (objValue === undefined ||\n          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n        return srcValue;\n      }\n      return objValue;\n    }\n\n    /**\n     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source\n     * objects into destination objects that are passed thru.\n     *\n     * @private\n     * @param {*} objValue The destination value.\n     * @param {*} srcValue The source value.\n     * @param {string} key The key of the property to merge.\n     * @param {Object} object The parent object of `objValue`.\n     * @param {Object} source The parent object of `srcValue`.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     * @returns {*} Returns the value to assign.\n     */\n    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {\n      if (isObject(objValue) && isObject(srcValue)) {\n        // Recursively merge objects and arrays (susceptible to call stack limits).\n        stack.set(srcValue, objValue);\n        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);\n        stack['delete'](srcValue);\n      }\n      return objValue;\n    }\n\n    /**\n     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain\n     * objects.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @param {string} key The key of the property to inspect.\n     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.\n     */\n    function customOmitClone(value) {\n      return isPlainObject(value) ? undefined : value;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for arrays with support for\n     * partial deep comparisons.\n     *\n     * @private\n     * @param {Array} array The array to compare.\n     * @param {Array} other The other array to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `array` and `other` objects.\n     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n     */\n    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n          arrLength = array.length,\n          othLength = other.length;\n\n      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n        return false;\n      }\n      // Check that cyclic values are equal.\n      var arrStacked = stack.get(array);\n      var othStacked = stack.get(other);\n      if (arrStacked && othStacked) {\n        return arrStacked == other && othStacked == array;\n      }\n      var index = -1,\n          result = true,\n          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n      stack.set(array, other);\n      stack.set(other, array);\n\n      // Ignore non-index properties.\n      while (++index < arrLength) {\n        var arrValue = array[index],\n            othValue = other[index];\n\n        if (customizer) {\n          var compared = isPartial\n            ? customizer(othValue, arrValue, index, other, array, stack)\n            : customizer(arrValue, othValue, index, array, other, stack);\n        }\n        if (compared !== undefined) {\n          if (compared) {\n            continue;\n          }\n          result = false;\n          break;\n        }\n        // Recursively compare arrays (susceptible to call stack limits).\n        if (seen) {\n          if (!arraySome(other, function(othValue, othIndex) {\n                if (!cacheHas(seen, othIndex) &&\n                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n                  return seen.push(othIndex);\n                }\n              })) {\n            result = false;\n            break;\n          }\n        } else if (!(\n              arrValue === othValue ||\n                equalFunc(arrValue, othValue, bitmask, customizer, stack)\n            )) {\n          result = false;\n          break;\n        }\n      }\n      stack['delete'](array);\n      stack['delete'](other);\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for comparing objects of\n     * the same `toStringTag`.\n     *\n     * **Note:** This function only supports comparing values with tags of\n     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {string} tag The `toStringTag` of the objects to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n      switch (tag) {\n        case dataViewTag:\n          if ((object.byteLength != other.byteLength) ||\n              (object.byteOffset != other.byteOffset)) {\n            return false;\n          }\n          object = object.buffer;\n          other = other.buffer;\n\n        case arrayBufferTag:\n          if ((object.byteLength != other.byteLength) ||\n              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n            return false;\n          }\n          return true;\n\n        case boolTag:\n        case dateTag:\n        case numberTag:\n          // Coerce booleans to `1` or `0` and dates to milliseconds.\n          // Invalid dates are coerced to `NaN`.\n          return eq(+object, +other);\n\n        case errorTag:\n          return object.name == other.name && object.message == other.message;\n\n        case regexpTag:\n        case stringTag:\n          // Coerce regexes to strings and treat strings, primitives and objects,\n          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n          // for more details.\n          return object == (other + '');\n\n        case mapTag:\n          var convert = mapToArray;\n\n        case setTag:\n          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n          convert || (convert = setToArray);\n\n          if (object.size != other.size && !isPartial) {\n            return false;\n          }\n          // Assume cyclic values are equal.\n          var stacked = stack.get(object);\n          if (stacked) {\n            return stacked == other;\n          }\n          bitmask |= COMPARE_UNORDERED_FLAG;\n\n          // Recursively compare objects (susceptible to call stack limits).\n          stack.set(object, other);\n          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n          stack['delete'](object);\n          return result;\n\n        case symbolTag:\n          if (symbolValueOf) {\n            return symbolValueOf.call(object) == symbolValueOf.call(other);\n          }\n      }\n      return false;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for objects with support for\n     * partial deep comparisons.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n          objProps = getAllKeys(object),\n          objLength = objProps.length,\n          othProps = getAllKeys(other),\n          othLength = othProps.length;\n\n      if (objLength != othLength && !isPartial) {\n        return false;\n      }\n      var index = objLength;\n      while (index--) {\n        var key = objProps[index];\n        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n          return false;\n        }\n      }\n      // Check that cyclic values are equal.\n      var objStacked = stack.get(object);\n      var othStacked = stack.get(other);\n      if (objStacked && othStacked) {\n        return objStacked == other && othStacked == object;\n      }\n      var result = true;\n      stack.set(object, other);\n      stack.set(other, object);\n\n      var skipCtor = isPartial;\n      while (++index < objLength) {\n        key = objProps[index];\n        var objValue = object[key],\n            othValue = other[key];\n\n        if (customizer) {\n          var compared = isPartial\n            ? customizer(othValue, objValue, key, other, object, stack)\n            : customizer(objValue, othValue, key, object, other, stack);\n        }\n        // Recursively compare objects (susceptible to call stack limits).\n        if (!(compared === undefined\n              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n              : compared\n            )) {\n          result = false;\n          break;\n        }\n        skipCtor || (skipCtor = key == 'constructor');\n      }\n      if (result && !skipCtor) {\n        var objCtor = object.constructor,\n            othCtor = other.constructor;\n\n        // Non `Object` object instances with different constructors are not equal.\n        if (objCtor != othCtor &&\n            ('constructor' in object && 'constructor' in other) &&\n            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n              typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n          result = false;\n        }\n      }\n      stack['delete'](object);\n      stack['delete'](other);\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseRest` which flattens the rest array.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @returns {Function} Returns the new function.\n     */\n    function flatRest(func) {\n      return setToString(overRest(func, undefined, flatten), func + '');\n    }\n\n    /**\n     * Creates an array of own enumerable property names and symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function getAllKeys(object) {\n      return baseGetAllKeys(object, keys, getSymbols);\n    }\n\n    /**\n     * Creates an array of own and inherited enumerable property names and\n     * symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function getAllKeysIn(object) {\n      return baseGetAllKeys(object, keysIn, getSymbolsIn);\n    }\n\n    /**\n     * Gets metadata for `func`.\n     *\n     * @private\n     * @param {Function} func The function to query.\n     * @returns {*} Returns the metadata for `func`.\n     */\n    var getData = !metaMap ? noop : function(func) {\n      return metaMap.get(func);\n    };\n\n    /**\n     * Gets the name of `func`.\n     *\n     * @private\n     * @param {Function} func The function to query.\n     * @returns {string} Returns the function name.\n     */\n    function getFuncName(func) {\n      var result = (func.name + ''),\n          array = realNames[result],\n          length = hasOwnProperty.call(realNames, result) ? array.length : 0;\n\n      while (length--) {\n        var data = array[length],\n            otherFunc = data.func;\n        if (otherFunc == null || otherFunc == func) {\n          return data.name;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Gets the argument placeholder value for `func`.\n     *\n     * @private\n     * @param {Function} func The function to inspect.\n     * @returns {*} Returns the placeholder value.\n     */\n    function getHolder(func) {\n      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;\n      return object.placeholder;\n    }\n\n    /**\n     * Gets the appropriate \"iteratee\" function. If `_.iteratee` is customized,\n     * this function returns the custom method, otherwise it returns `baseIteratee`.\n     * If arguments are provided, the chosen function is invoked with them and\n     * its result is returned.\n     *\n     * @private\n     * @param {*} [value] The value to convert to an iteratee.\n     * @param {number} [arity] The arity of the created iteratee.\n     * @returns {Function} Returns the chosen function or its result.\n     */\n    function getIteratee() {\n      var result = lodash.iteratee || iteratee;\n      result = result === iteratee ? baseIteratee : result;\n      return arguments.length ? result(arguments[0], arguments[1]) : result;\n    }\n\n    /**\n     * Gets the data for `map`.\n     *\n     * @private\n     * @param {Object} map The map to query.\n     * @param {string} key The reference key.\n     * @returns {*} Returns the map data.\n     */\n    function getMapData(map, key) {\n      var data = map.__data__;\n      return isKeyable(key)\n        ? data[typeof key == 'string' ? 'string' : 'hash']\n        : data.map;\n    }\n\n    /**\n     * Gets the property names, values, and compare flags of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the match data of `object`.\n     */\n    function getMatchData(object) {\n      var result = keys(object),\n          length = result.length;\n\n      while (length--) {\n        var key = result[length],\n            value = object[key];\n\n        result[length] = [key, value, isStrictComparable(value)];\n      }\n      return result;\n    }\n\n    /**\n     * Gets the native function at `key` of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {string} key The key of the method to get.\n     * @returns {*} Returns the function if it's native, else `undefined`.\n     */\n    function getNative(object, key) {\n      var value = getValue(object, key);\n      return baseIsNative(value) ? value : undefined;\n    }\n\n    /**\n     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the raw `toStringTag`.\n     */\n    function getRawTag(value) {\n      var isOwn = hasOwnProperty.call(value, symToStringTag),\n          tag = value[symToStringTag];\n\n      try {\n        value[symToStringTag] = undefined;\n        var unmasked = true;\n      } catch (e) {}\n\n      var result = nativeObjectToString.call(value);\n      if (unmasked) {\n        if (isOwn) {\n          value[symToStringTag] = tag;\n        } else {\n          delete value[symToStringTag];\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Creates an array of the own enumerable symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of symbols.\n     */\n    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n      if (object == null) {\n        return [];\n      }\n      object = Object(object);\n      return arrayFilter(nativeGetSymbols(object), function(symbol) {\n        return propertyIsEnumerable.call(object, symbol);\n      });\n    };\n\n    /**\n     * Creates an array of the own and inherited enumerable symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of symbols.\n     */\n    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n      var result = [];\n      while (object) {\n        arrayPush(result, getSymbols(object));\n        object = getPrototype(object);\n      }\n      return result;\n    };\n\n    /**\n     * Gets the `toStringTag` of `value`.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the `toStringTag`.\n     */\n    var getTag = baseGetTag;\n\n    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\n    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n        (Map && getTag(new Map) != mapTag) ||\n        (Promise && getTag(Promise.resolve()) != promiseTag) ||\n        (Set && getTag(new Set) != setTag) ||\n        (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n      getTag = function(value) {\n        var result = baseGetTag(value),\n            Ctor = result == objectTag ? value.constructor : undefined,\n            ctorString = Ctor ? toSource(Ctor) : '';\n\n        if (ctorString) {\n          switch (ctorString) {\n            case dataViewCtorString: return dataViewTag;\n            case mapCtorString: return mapTag;\n            case promiseCtorString: return promiseTag;\n            case setCtorString: return setTag;\n            case weakMapCtorString: return weakMapTag;\n          }\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Gets the view, applying any `transforms` to the `start` and `end` positions.\n     *\n     * @private\n     * @param {number} start The start of the view.\n     * @param {number} end The end of the view.\n     * @param {Array} transforms The transformations to apply to the view.\n     * @returns {Object} Returns an object containing the `start` and `end`\n     *  positions of the view.\n     */\n    function getView(start, end, transforms) {\n      var index = -1,\n          length = transforms.length;\n\n      while (++index < length) {\n        var data = transforms[index],\n            size = data.size;\n\n        switch (data.type) {\n          case 'drop':      start += size; break;\n          case 'dropRight': end -= size; break;\n          case 'take':      end = nativeMin(end, start + size); break;\n          case 'takeRight': start = nativeMax(start, end - size); break;\n        }\n      }\n      return { 'start': start, 'end': end };\n    }\n\n    /**\n     * Extracts wrapper details from the `source` body comment.\n     *\n     * @private\n     * @param {string} source The source to inspect.\n     * @returns {Array} Returns the wrapper details.\n     */\n    function getWrapDetails(source) {\n      var match = source.match(reWrapDetails);\n      return match ? match[1].split(reSplitDetails) : [];\n    }\n\n    /**\n     * Checks if `path` exists on `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @param {Function} hasFunc The function to check properties.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     */\n    function hasPath(object, path, hasFunc) {\n      path = castPath(path, object);\n\n      var index = -1,\n          length = path.length,\n          result = false;\n\n      while (++index < length) {\n        var key = toKey(path[index]);\n        if (!(result = object != null && hasFunc(object, key))) {\n          break;\n        }\n        object = object[key];\n      }\n      if (result || ++index != length) {\n        return result;\n      }\n      length = object == null ? 0 : object.length;\n      return !!length && isLength(length) && isIndex(key, length) &&\n        (isArray(object) || isArguments(object));\n    }\n\n    /**\n     * Initializes an array clone.\n     *\n     * @private\n     * @param {Array} array The array to clone.\n     * @returns {Array} Returns the initialized clone.\n     */\n    function initCloneArray(array) {\n      var length = array.length,\n          result = new array.constructor(length);\n\n      // Add properties assigned by `RegExp#exec`.\n      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n        result.index = array.index;\n        result.input = array.input;\n      }\n      return result;\n    }\n\n    /**\n     * Initializes an object clone.\n     *\n     * @private\n     * @param {Object} object The object to clone.\n     * @returns {Object} Returns the initialized clone.\n     */\n    function initCloneObject(object) {\n      return (typeof object.constructor == 'function' && !isPrototype(object))\n        ? baseCreate(getPrototype(object))\n        : {};\n    }\n\n    /**\n     * Initializes an object clone based on its `toStringTag`.\n     *\n     * **Note:** This function only supports cloning values with tags of\n     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.\n     *\n     * @private\n     * @param {Object} object The object to clone.\n     * @param {string} tag The `toStringTag` of the object to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the initialized clone.\n     */\n    function initCloneByTag(object, tag, isDeep) {\n      var Ctor = object.constructor;\n      switch (tag) {\n        case arrayBufferTag:\n          return cloneArrayBuffer(object);\n\n        case boolTag:\n        case dateTag:\n          return new Ctor(+object);\n\n        case dataViewTag:\n          return cloneDataView(object, isDeep);\n\n        case float32Tag: case float64Tag:\n        case int8Tag: case int16Tag: case int32Tag:\n        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n          return cloneTypedArray(object, isDeep);\n\n        case mapTag:\n          return new Ctor;\n\n        case numberTag:\n        case stringTag:\n          return new Ctor(object);\n\n        case regexpTag:\n          return cloneRegExp(object);\n\n        case setTag:\n          return new Ctor;\n\n        case symbolTag:\n          return cloneSymbol(object);\n      }\n    }\n\n    /**\n     * Inserts wrapper `details` in a comment at the top of the `source` body.\n     *\n     * @private\n     * @param {string} source The source to modify.\n     * @returns {Array} details The details to insert.\n     * @returns {string} Returns the modified source.\n     */\n    function insertWrapDetails(source, details) {\n      var length = details.length;\n      if (!length) {\n        return source;\n      }\n      var lastIndex = length - 1;\n      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];\n      details = details.join(length > 2 ? ', ' : ' ');\n      return source.replace(reWrapComment, '{\\n/* [wrapped with ' + details + '] */\\n');\n    }\n\n    /**\n     * Checks if `value` is a flattenable `arguments` object or array.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n     */\n    function isFlattenable(value) {\n      return isArray(value) || isArguments(value) ||\n        !!(spreadableSymbol && value && value[spreadableSymbol]);\n    }\n\n    /**\n     * Checks if `value` is a valid array-like index.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n     */\n    function isIndex(value, length) {\n      var type = typeof value;\n      length = length == null ? MAX_SAFE_INTEGER : length;\n\n      return !!length &&\n        (type == 'number' ||\n          (type != 'symbol' && reIsUint.test(value))) &&\n            (value > -1 && value % 1 == 0 && value < length);\n    }\n\n    /**\n     * Checks if the given arguments are from an iteratee call.\n     *\n     * @private\n     * @param {*} value The potential iteratee value argument.\n     * @param {*} index The potential iteratee index or key argument.\n     * @param {*} object The potential iteratee object argument.\n     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n     *  else `false`.\n     */\n    function isIterateeCall(value, index, object) {\n      if (!isObject(object)) {\n        return false;\n      }\n      var type = typeof index;\n      if (type == 'number'\n            ? (isArrayLike(object) && isIndex(index, object.length))\n            : (type == 'string' && index in object)\n          ) {\n        return eq(object[index], value);\n      }\n      return false;\n    }\n\n    /**\n     * Checks if `value` is a property name and not a property path.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {Object} [object] The object to query keys on.\n     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n     */\n    function isKey(value, object) {\n      if (isArray(value)) {\n        return false;\n      }\n      var type = typeof value;\n      if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n          value == null || isSymbol(value)) {\n        return true;\n      }\n      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n        (object != null && value in Object(object));\n    }\n\n    /**\n     * Checks if `value` is suitable for use as unique object key.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n     */\n    function isKeyable(value) {\n      var type = typeof value;\n      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n        ? (value !== '__proto__')\n        : (value === null);\n    }\n\n    /**\n     * Checks if `func` has a lazy counterpart.\n     *\n     * @private\n     * @param {Function} func The function to check.\n     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,\n     *  else `false`.\n     */\n    function isLaziable(func) {\n      var funcName = getFuncName(func),\n          other = lodash[funcName];\n\n      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {\n        return false;\n      }\n      if (func === other) {\n        return true;\n      }\n      var data = getData(other);\n      return !!data && func === data[0];\n    }\n\n    /**\n     * Checks if `func` has its source masked.\n     *\n     * @private\n     * @param {Function} func The function to check.\n     * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n     */\n    function isMasked(func) {\n      return !!maskSrcKey && (maskSrcKey in func);\n    }\n\n    /**\n     * Checks if `func` is capable of being masked.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.\n     */\n    var isMaskable = coreJsData ? isFunction : stubFalse;\n\n    /**\n     * Checks if `value` is likely a prototype object.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n     */\n    function isPrototype(value) {\n      var Ctor = value && value.constructor,\n          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n      return value === proto;\n    }\n\n    /**\n     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` if suitable for strict\n     *  equality comparisons, else `false`.\n     */\n    function isStrictComparable(value) {\n      return value === value && !isObject(value);\n    }\n\n    /**\n     * A specialized version of `matchesProperty` for source values suitable\n     * for strict equality comparisons, i.e. `===`.\n     *\n     * @private\n     * @param {string} key The key of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function matchesStrictComparable(key, srcValue) {\n      return function(object) {\n        if (object == null) {\n          return false;\n        }\n        return object[key] === srcValue &&\n          (srcValue !== undefined || (key in Object(object)));\n      };\n    }\n\n    /**\n     * A specialized version of `_.memoize` which clears the memoized function's\n     * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n     *\n     * @private\n     * @param {Function} func The function to have its output memoized.\n     * @returns {Function} Returns the new memoized function.\n     */\n    function memoizeCapped(func) {\n      var result = memoize(func, function(key) {\n        if (cache.size === MAX_MEMOIZE_SIZE) {\n          cache.clear();\n        }\n        return key;\n      });\n\n      var cache = result.cache;\n      return result;\n    }\n\n    /**\n     * Merges the function metadata of `source` into `data`.\n     *\n     * Merging metadata reduces the number of wrappers used to invoke a function.\n     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`\n     * may be applied regardless of execution order. Methods like `_.ary` and\n     * `_.rearg` modify function arguments, making the order in which they are\n     * executed important, preventing the merging of metadata. However, we make\n     * an exception for a safe combined case where curried functions have `_.ary`\n     * and or `_.rearg` applied.\n     *\n     * @private\n     * @param {Array} data The destination metadata.\n     * @param {Array} source The source metadata.\n     * @returns {Array} Returns `data`.\n     */\n    function mergeData(data, source) {\n      var bitmask = data[1],\n          srcBitmask = source[1],\n          newBitmask = bitmask | srcBitmask,\n          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);\n\n      var isCombo =\n        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||\n        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||\n        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));\n\n      // Exit early if metadata can't be merged.\n      if (!(isCommon || isCombo)) {\n        return data;\n      }\n      // Use source `thisArg` if available.\n      if (srcBitmask & WRAP_BIND_FLAG) {\n        data[2] = source[2];\n        // Set when currying a bound function.\n        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;\n      }\n      // Compose partial arguments.\n      var value = source[3];\n      if (value) {\n        var partials = data[3];\n        data[3] = partials ? composeArgs(partials, value, source[4]) : value;\n        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];\n      }\n      // Compose partial right arguments.\n      value = source[5];\n      if (value) {\n        partials = data[5];\n        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;\n        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];\n      }\n      // Use source `argPos` if available.\n      value = source[7];\n      if (value) {\n        data[7] = value;\n      }\n      // Use source `ary` if it's smaller.\n      if (srcBitmask & WRAP_ARY_FLAG) {\n        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);\n      }\n      // Use source `arity` if one is not provided.\n      if (data[9] == null) {\n        data[9] = source[9];\n      }\n      // Use source `func` and merge bitmasks.\n      data[0] = source[0];\n      data[1] = newBitmask;\n\n      return data;\n    }\n\n    /**\n     * This function is like\n     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n     * except that it includes inherited enumerable properties.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function nativeKeysIn(object) {\n      var result = [];\n      if (object != null) {\n        for (var key in Object(object)) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Converts `value` to a string using `Object.prototype.toString`.\n     *\n     * @private\n     * @param {*} value The value to convert.\n     * @returns {string} Returns the converted string.\n     */\n    function objectToString(value) {\n      return nativeObjectToString.call(value);\n    }\n\n    /**\n     * A specialized version of `baseRest` which transforms the rest array.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @param {Function} transform The rest array transform.\n     * @returns {Function} Returns the new function.\n     */\n    function overRest(func, start, transform) {\n      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n      return function() {\n        var args = arguments,\n            index = -1,\n            length = nativeMax(args.length - start, 0),\n            array = Array(length);\n\n        while (++index < length) {\n          array[index] = args[start + index];\n        }\n        index = -1;\n        var otherArgs = Array(start + 1);\n        while (++index < start) {\n          otherArgs[index] = args[index];\n        }\n        otherArgs[start] = transform(array);\n        return apply(func, this, otherArgs);\n      };\n    }\n\n    /**\n     * Gets the parent value at `path` of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array} path The path to get the parent value of.\n     * @returns {*} Returns the parent value.\n     */\n    function parent(object, path) {\n      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));\n    }\n\n    /**\n     * Reorder `array` according to the specified indexes where the element at\n     * the first index is assigned as the first element, the element at\n     * the second index is assigned as the second element, and so on.\n     *\n     * @private\n     * @param {Array} array The array to reorder.\n     * @param {Array} indexes The arranged array indexes.\n     * @returns {Array} Returns `array`.\n     */\n    function reorder(array, indexes) {\n      var arrLength = array.length,\n          length = nativeMin(indexes.length, arrLength),\n          oldArray = copyArray(array);\n\n      while (length--) {\n        var index = indexes[length];\n        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;\n      }\n      return array;\n    }\n\n    /**\n     * Gets the value at `key`, unless `key` is \"__proto__\" or \"constructor\".\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {string} key The key of the property to get.\n     * @returns {*} Returns the property value.\n     */\n    function safeGet(object, key) {\n      if (key === 'constructor' && typeof object[key] === 'function') {\n        return;\n      }\n\n      if (key == '__proto__') {\n        return;\n      }\n\n      return object[key];\n    }\n\n    /**\n     * Sets metadata for `func`.\n     *\n     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short\n     * period of time, it will trip its breaker and transition to an identity\n     * function to avoid garbage collection pauses in V8. See\n     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)\n     * for more details.\n     *\n     * @private\n     * @param {Function} func The function to associate metadata with.\n     * @param {*} data The metadata.\n     * @returns {Function} Returns `func`.\n     */\n    var setData = shortOut(baseSetData);\n\n    /**\n     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).\n     *\n     * @private\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @returns {number|Object} Returns the timer id or timeout object.\n     */\n    var setTimeout = ctxSetTimeout || function(func, wait) {\n      return root.setTimeout(func, wait);\n    };\n\n    /**\n     * Sets the `toString` method of `func` to return `string`.\n     *\n     * @private\n     * @param {Function} func The function to modify.\n     * @param {Function} string The `toString` result.\n     * @returns {Function} Returns `func`.\n     */\n    var setToString = shortOut(baseSetToString);\n\n    /**\n     * Sets the `toString` method of `wrapper` to mimic the source of `reference`\n     * with wrapper details in a comment at the top of the source body.\n     *\n     * @private\n     * @param {Function} wrapper The function to modify.\n     * @param {Function} reference The reference function.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @returns {Function} Returns `wrapper`.\n     */\n    function setWrapToString(wrapper, reference, bitmask) {\n      var source = (reference + '');\n      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));\n    }\n\n    /**\n     * Creates a function that'll short out and invoke `identity` instead\n     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n     * milliseconds.\n     *\n     * @private\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new shortable function.\n     */\n    function shortOut(func) {\n      var count = 0,\n          lastCalled = 0;\n\n      return function() {\n        var stamp = nativeNow(),\n            remaining = HOT_SPAN - (stamp - lastCalled);\n\n        lastCalled = stamp;\n        if (remaining > 0) {\n          if (++count >= HOT_COUNT) {\n            return arguments[0];\n          }\n        } else {\n          count = 0;\n        }\n        return func.apply(undefined, arguments);\n      };\n    }\n\n    /**\n     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.\n     *\n     * @private\n     * @param {Array} array The array to shuffle.\n     * @param {number} [size=array.length] The size of `array`.\n     * @returns {Array} Returns `array`.\n     */\n    function shuffleSelf(array, size) {\n      var index = -1,\n          length = array.length,\n          lastIndex = length - 1;\n\n      size = size === undefined ? length : size;\n      while (++index < size) {\n        var rand = baseRandom(index, lastIndex),\n            value = array[rand];\n\n        array[rand] = array[index];\n        array[index] = value;\n      }\n      array.length = size;\n      return array;\n    }\n\n    /**\n     * Converts `string` to a property path array.\n     *\n     * @private\n     * @param {string} string The string to convert.\n     * @returns {Array} Returns the property path array.\n     */\n    var stringToPath = memoizeCapped(function(string) {\n      var result = [];\n      if (string.charCodeAt(0) === 46 /* . */) {\n        result.push('');\n      }\n      string.replace(rePropName, function(match, number, quote, subString) {\n        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n      });\n      return result;\n    });\n\n    /**\n     * Converts `value` to a string key if it's not a string or symbol.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {string|symbol} Returns the key.\n     */\n    function toKey(value) {\n      if (typeof value == 'string' || isSymbol(value)) {\n        return value;\n      }\n      var result = (value + '');\n      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n    }\n\n    /**\n     * Converts `func` to its source code.\n     *\n     * @private\n     * @param {Function} func The function to convert.\n     * @returns {string} Returns the source code.\n     */\n    function toSource(func) {\n      if (func != null) {\n        try {\n          return funcToString.call(func);\n        } catch (e) {}\n        try {\n          return (func + '');\n        } catch (e) {}\n      }\n      return '';\n    }\n\n    /**\n     * Updates wrapper `details` based on `bitmask` flags.\n     *\n     * @private\n     * @returns {Array} details The details to modify.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @returns {Array} Returns `details`.\n     */\n    function updateWrapDetails(details, bitmask) {\n      arrayEach(wrapFlags, function(pair) {\n        var value = '_.' + pair[0];\n        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {\n          details.push(value);\n        }\n      });\n      return details.sort();\n    }\n\n    /**\n     * Creates a clone of `wrapper`.\n     *\n     * @private\n     * @param {Object} wrapper The wrapper to clone.\n     * @returns {Object} Returns the cloned wrapper.\n     */\n    function wrapperClone(wrapper) {\n      if (wrapper instanceof LazyWrapper) {\n        return wrapper.clone();\n      }\n      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);\n      result.__actions__ = copyArray(wrapper.__actions__);\n      result.__index__  = wrapper.__index__;\n      result.__values__ = wrapper.__values__;\n      return result;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an array of elements split into groups the length of `size`.\n     * If `array` can't be split evenly, the final chunk will be the remaining\n     * elements.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to process.\n     * @param {number} [size=1] The length of each chunk\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the new array of chunks.\n     * @example\n     *\n     * _.chunk(['a', 'b', 'c', 'd'], 2);\n     * // => [['a', 'b'], ['c', 'd']]\n     *\n     * _.chunk(['a', 'b', 'c', 'd'], 3);\n     * // => [['a', 'b', 'c'], ['d']]\n     */\n    function chunk(array, size, guard) {\n      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {\n        size = 1;\n      } else {\n        size = nativeMax(toInteger(size), 0);\n      }\n      var length = array == null ? 0 : array.length;\n      if (!length || size < 1) {\n        return [];\n      }\n      var index = 0,\n          resIndex = 0,\n          result = Array(nativeCeil(length / size));\n\n      while (index < length) {\n        result[resIndex++] = baseSlice(array, index, (index += size));\n      }\n      return result;\n    }\n\n    /**\n     * Creates an array with all falsey values removed. The values `false`, `null`,\n     * `0`, `\"\"`, `undefined`, and `NaN` are falsey.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to compact.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.compact([0, 1, false, 2, '', 3]);\n     * // => [1, 2, 3]\n     */\n    function compact(array) {\n      var index = -1,\n          length = array == null ? 0 : array.length,\n          resIndex = 0,\n          result = [];\n\n      while (++index < length) {\n        var value = array[index];\n        if (value) {\n          result[resIndex++] = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Creates a new array concatenating `array` with any additional arrays\n     * and/or values.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to concatenate.\n     * @param {...*} [values] The values to concatenate.\n     * @returns {Array} Returns the new concatenated array.\n     * @example\n     *\n     * var array = [1];\n     * var other = _.concat(array, 2, [3], [[4]]);\n     *\n     * console.log(other);\n     * // => [1, 2, 3, [4]]\n     *\n     * console.log(array);\n     * // => [1]\n     */\n    function concat() {\n      var length = arguments.length;\n      if (!length) {\n        return [];\n      }\n      var args = Array(length - 1),\n          array = arguments[0],\n          index = length;\n\n      while (index--) {\n        args[index - 1] = arguments[index];\n      }\n      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));\n    }\n\n    /**\n     * Creates an array of `array` values not included in the other given arrays\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. The order and references of result values are\n     * determined by the first array.\n     *\n     * **Note:** Unlike `_.pullAll`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.without, _.xor\n     * @example\n     *\n     * _.difference([2, 1], [2, 3]);\n     * // => [1]\n     */\n    var difference = baseRest(function(array, values) {\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))\n        : [];\n    });\n\n    /**\n     * This method is like `_.difference` except that it accepts `iteratee` which\n     * is invoked for each element of `array` and `values` to generate the criterion\n     * by which they're compared. The order and references of result values are\n     * determined by the first array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');\n     * // => [{ 'x': 2 }]\n     */\n    var differenceBy = baseRest(function(array, values) {\n      var iteratee = last(values);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))\n        : [];\n    });\n\n    /**\n     * This method is like `_.difference` except that it accepts `comparator`\n     * which is invoked to compare elements of `array` to `values`. The order and\n     * references of result values are determined by the first array. The comparator\n     * is invoked with two arguments: (arrVal, othVal).\n     *\n     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     *\n     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);\n     * // => [{ 'x': 2, 'y': 1 }]\n     */\n    var differenceWith = baseRest(function(array, values) {\n      var comparator = last(values);\n      if (isArrayLikeObject(comparator)) {\n        comparator = undefined;\n      }\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)\n        : [];\n    });\n\n    /**\n     * Creates a slice of `array` with `n` elements dropped from the beginning.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to drop.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.drop([1, 2, 3]);\n     * // => [2, 3]\n     *\n     * _.drop([1, 2, 3], 2);\n     * // => [3]\n     *\n     * _.drop([1, 2, 3], 5);\n     * // => []\n     *\n     * _.drop([1, 2, 3], 0);\n     * // => [1, 2, 3]\n     */\n    function drop(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      return baseSlice(array, n < 0 ? 0 : n, length);\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements dropped from the end.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to drop.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.dropRight([1, 2, 3]);\n     * // => [1, 2]\n     *\n     * _.dropRight([1, 2, 3], 2);\n     * // => [1]\n     *\n     * _.dropRight([1, 2, 3], 5);\n     * // => []\n     *\n     * _.dropRight([1, 2, 3], 0);\n     * // => [1, 2, 3]\n     */\n    function dropRight(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      n = length - n;\n      return baseSlice(array, 0, n < 0 ? 0 : n);\n    }\n\n    /**\n     * Creates a slice of `array` excluding elements dropped from the end.\n     * Elements are dropped until `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.dropRightWhile(users, function(o) { return !o.active; });\n     * // => objects for ['barney']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.dropRightWhile(users, ['active', false]);\n     * // => objects for ['barney']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.dropRightWhile(users, 'active');\n     * // => objects for ['barney', 'fred', 'pebbles']\n     */\n    function dropRightWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), true, true)\n        : [];\n    }\n\n    /**\n     * Creates a slice of `array` excluding elements dropped from the beginning.\n     * Elements are dropped until `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.dropWhile(users, function(o) { return !o.active; });\n     * // => objects for ['pebbles']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.dropWhile(users, { 'user': 'barney', 'active': false });\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.dropWhile(users, ['active', false]);\n     * // => objects for ['pebbles']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.dropWhile(users, 'active');\n     * // => objects for ['barney', 'fred', 'pebbles']\n     */\n    function dropWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), true)\n        : [];\n    }\n\n    /**\n     * Fills elements of `array` with `value` from `start` up to, but not\n     * including, `end`.\n     *\n     * **Note:** This method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Array\n     * @param {Array} array The array to fill.\n     * @param {*} value The value to fill `array` with.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _.fill(array, 'a');\n     * console.log(array);\n     * // => ['a', 'a', 'a']\n     *\n     * _.fill(Array(3), 2);\n     * // => [2, 2, 2]\n     *\n     * _.fill([4, 6, 8, 10], '*', 1, 3);\n     * // => [4, '*', '*', 10]\n     */\n    function fill(array, value, start, end) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {\n        start = 0;\n        end = length;\n      }\n      return baseFill(array, value, start, end);\n    }\n\n    /**\n     * This method is like `_.find` except that it returns the index of the first\n     * element `predicate` returns truthy for instead of the element itself.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.findIndex(users, function(o) { return o.user == 'barney'; });\n     * // => 0\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findIndex(users, { 'user': 'fred', 'active': false });\n     * // => 1\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findIndex(users, ['active', false]);\n     * // => 0\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findIndex(users, 'active');\n     * // => 2\n     */\n    function findIndex(array, predicate, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = fromIndex == null ? 0 : toInteger(fromIndex);\n      if (index < 0) {\n        index = nativeMax(length + index, 0);\n      }\n      return baseFindIndex(array, getIteratee(predicate, 3), index);\n    }\n\n    /**\n     * This method is like `_.findIndex` except that it iterates over elements\n     * of `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=array.length-1] The index to search from.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });\n     * // => 2\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findLastIndex(users, { 'user': 'barney', 'active': true });\n     * // => 0\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findLastIndex(users, ['active', false]);\n     * // => 2\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findLastIndex(users, 'active');\n     * // => 0\n     */\n    function findLastIndex(array, predicate, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = length - 1;\n      if (fromIndex !== undefined) {\n        index = toInteger(fromIndex);\n        index = fromIndex < 0\n          ? nativeMax(length + index, 0)\n          : nativeMin(index, length - 1);\n      }\n      return baseFindIndex(array, getIteratee(predicate, 3), index, true);\n    }\n\n    /**\n     * Flattens `array` a single level deep.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * _.flatten([1, [2, [3, [4]], 5]]);\n     * // => [1, 2, [3, [4]], 5]\n     */\n    function flatten(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseFlatten(array, 1) : [];\n    }\n\n    /**\n     * Recursively flattens `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * _.flattenDeep([1, [2, [3, [4]], 5]]);\n     * // => [1, 2, 3, 4, 5]\n     */\n    function flattenDeep(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseFlatten(array, INFINITY) : [];\n    }\n\n    /**\n     * Recursively flatten `array` up to `depth` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.4.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @param {number} [depth=1] The maximum recursion depth.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * var array = [1, [2, [3, [4]], 5]];\n     *\n     * _.flattenDepth(array, 1);\n     * // => [1, 2, [3, [4]], 5]\n     *\n     * _.flattenDepth(array, 2);\n     * // => [1, 2, 3, [4], 5]\n     */\n    function flattenDepth(array, depth) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      depth = depth === undefined ? 1 : toInteger(depth);\n      return baseFlatten(array, depth);\n    }\n\n    /**\n     * The inverse of `_.toPairs`; this method returns an object composed\n     * from key-value `pairs`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} pairs The key-value pairs.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.fromPairs([['a', 1], ['b', 2]]);\n     * // => { 'a': 1, 'b': 2 }\n     */\n    function fromPairs(pairs) {\n      var index = -1,\n          length = pairs == null ? 0 : pairs.length,\n          result = {};\n\n      while (++index < length) {\n        var pair = pairs[index];\n        result[pair[0]] = pair[1];\n      }\n      return result;\n    }\n\n    /**\n     * Gets the first element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @alias first\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {*} Returns the first element of `array`.\n     * @example\n     *\n     * _.head([1, 2, 3]);\n     * // => 1\n     *\n     * _.head([]);\n     * // => undefined\n     */\n    function head(array) {\n      return (array && array.length) ? array[0] : undefined;\n    }\n\n    /**\n     * Gets the index at which the first occurrence of `value` is found in `array`\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. If `fromIndex` is negative, it's used as the\n     * offset from the end of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.indexOf([1, 2, 1, 2], 2);\n     * // => 1\n     *\n     * // Search from the `fromIndex`.\n     * _.indexOf([1, 2, 1, 2], 2, 2);\n     * // => 3\n     */\n    function indexOf(array, value, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = fromIndex == null ? 0 : toInteger(fromIndex);\n      if (index < 0) {\n        index = nativeMax(length + index, 0);\n      }\n      return baseIndexOf(array, value, index);\n    }\n\n    /**\n     * Gets all but the last element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.initial([1, 2, 3]);\n     * // => [1, 2]\n     */\n    function initial(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseSlice(array, 0, -1) : [];\n    }\n\n    /**\n     * Creates an array of unique values that are included in all given arrays\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. The order and references of result values are\n     * determined by the first array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * _.intersection([2, 1], [2, 3]);\n     * // => [2]\n     */\n    var intersection = baseRest(function(arrays) {\n      var mapped = arrayMap(arrays, castArrayLikeObject);\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped)\n        : [];\n    });\n\n    /**\n     * This method is like `_.intersection` except that it accepts `iteratee`\n     * which is invoked for each element of each `arrays` to generate the criterion\n     * by which they're compared. The order and references of result values are\n     * determined by the first array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [2.1]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }]\n     */\n    var intersectionBy = baseRest(function(arrays) {\n      var iteratee = last(arrays),\n          mapped = arrayMap(arrays, castArrayLikeObject);\n\n      if (iteratee === last(mapped)) {\n        iteratee = undefined;\n      } else {\n        mapped.pop();\n      }\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped, getIteratee(iteratee, 2))\n        : [];\n    });\n\n    /**\n     * This method is like `_.intersection` except that it accepts `comparator`\n     * which is invoked to compare elements of `arrays`. The order and references\n     * of result values are determined by the first array. The comparator is\n     * invoked with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.intersectionWith(objects, others, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }]\n     */\n    var intersectionWith = baseRest(function(arrays) {\n      var comparator = last(arrays),\n          mapped = arrayMap(arrays, castArrayLikeObject);\n\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      if (comparator) {\n        mapped.pop();\n      }\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped, undefined, comparator)\n        : [];\n    });\n\n    /**\n     * Converts all elements in `array` into a string separated by `separator`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to convert.\n     * @param {string} [separator=','] The element separator.\n     * @returns {string} Returns the joined string.\n     * @example\n     *\n     * _.join(['a', 'b', 'c'], '~');\n     * // => 'a~b~c'\n     */\n    function join(array, separator) {\n      return array == null ? '' : nativeJoin.call(array, separator);\n    }\n\n    /**\n     * Gets the last element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {*} Returns the last element of `array`.\n     * @example\n     *\n     * _.last([1, 2, 3]);\n     * // => 3\n     */\n    function last(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? array[length - 1] : undefined;\n    }\n\n    /**\n     * This method is like `_.indexOf` except that it iterates over elements of\n     * `array` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=array.length-1] The index to search from.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.lastIndexOf([1, 2, 1, 2], 2);\n     * // => 3\n     *\n     * // Search from the `fromIndex`.\n     * _.lastIndexOf([1, 2, 1, 2], 2, 2);\n     * // => 1\n     */\n    function lastIndexOf(array, value, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = length;\n      if (fromIndex !== undefined) {\n        index = toInteger(fromIndex);\n        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);\n      }\n      return value === value\n        ? strictLastIndexOf(array, value, index)\n        : baseFindIndex(array, baseIsNaN, index, true);\n    }\n\n    /**\n     * Gets the element at index `n` of `array`. If `n` is negative, the nth\n     * element from the end is returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.11.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=0] The index of the element to return.\n     * @returns {*} Returns the nth element of `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'd'];\n     *\n     * _.nth(array, 1);\n     * // => 'b'\n     *\n     * _.nth(array, -2);\n     * // => 'c';\n     */\n    function nth(array, n) {\n      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;\n    }\n\n    /**\n     * Removes all given values from `array` using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`\n     * to remove elements from an array by predicate.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {...*} [values] The values to remove.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n     *\n     * _.pull(array, 'a', 'c');\n     * console.log(array);\n     * // => ['b', 'b']\n     */\n    var pull = baseRest(pullAll);\n\n    /**\n     * This method is like `_.pull` except that it accepts an array of values to remove.\n     *\n     * **Note:** Unlike `_.difference`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n     *\n     * _.pullAll(array, ['a', 'c']);\n     * console.log(array);\n     * // => ['b', 'b']\n     */\n    function pullAll(array, values) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values)\n        : array;\n    }\n\n    /**\n     * This method is like `_.pullAll` except that it accepts `iteratee` which is\n     * invoked for each element of `array` and `values` to generate the criterion\n     * by which they're compared. The iteratee is invoked with one argument: (value).\n     *\n     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];\n     *\n     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');\n     * console.log(array);\n     * // => [{ 'x': 2 }]\n     */\n    function pullAllBy(array, values, iteratee) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values, getIteratee(iteratee, 2))\n        : array;\n    }\n\n    /**\n     * This method is like `_.pullAll` except that it accepts `comparator` which\n     * is invoked to compare elements of `array` to `values`. The comparator is\n     * invoked with two arguments: (arrVal, othVal).\n     *\n     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];\n     *\n     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);\n     * console.log(array);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]\n     */\n    function pullAllWith(array, values, comparator) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values, undefined, comparator)\n        : array;\n    }\n\n    /**\n     * Removes elements from `array` corresponding to `indexes` and returns an\n     * array of removed elements.\n     *\n     * **Note:** Unlike `_.at`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {...(number|number[])} [indexes] The indexes of elements to remove.\n     * @returns {Array} Returns the new array of removed elements.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'd'];\n     * var pulled = _.pullAt(array, [1, 3]);\n     *\n     * console.log(array);\n     * // => ['a', 'c']\n     *\n     * console.log(pulled);\n     * // => ['b', 'd']\n     */\n    var pullAt = flatRest(function(array, indexes) {\n      var length = array == null ? 0 : array.length,\n          result = baseAt(array, indexes);\n\n      basePullAt(array, arrayMap(indexes, function(index) {\n        return isIndex(index, length) ? +index : index;\n      }).sort(compareAscending));\n\n      return result;\n    });\n\n    /**\n     * Removes all elements from `array` that `predicate` returns truthy for\n     * and returns an array of the removed elements. The predicate is invoked\n     * with three arguments: (value, index, array).\n     *\n     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`\n     * to pull elements from an array by value.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new array of removed elements.\n     * @example\n     *\n     * var array = [1, 2, 3, 4];\n     * var evens = _.remove(array, function(n) {\n     *   return n % 2 == 0;\n     * });\n     *\n     * console.log(array);\n     * // => [1, 3]\n     *\n     * console.log(evens);\n     * // => [2, 4]\n     */\n    function remove(array, predicate) {\n      var result = [];\n      if (!(array && array.length)) {\n        return result;\n      }\n      var index = -1,\n          indexes = [],\n          length = array.length;\n\n      predicate = getIteratee(predicate, 3);\n      while (++index < length) {\n        var value = array[index];\n        if (predicate(value, index, array)) {\n          result.push(value);\n          indexes.push(index);\n        }\n      }\n      basePullAt(array, indexes);\n      return result;\n    }\n\n    /**\n     * Reverses `array` so that the first element becomes the last, the second\n     * element becomes the second to last, and so on.\n     *\n     * **Note:** This method mutates `array` and is based on\n     * [`Array#reverse`](https://mdn.io/Array/reverse).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _.reverse(array);\n     * // => [3, 2, 1]\n     *\n     * console.log(array);\n     * // => [3, 2, 1]\n     */\n    function reverse(array) {\n      return array == null ? array : nativeReverse.call(array);\n    }\n\n    /**\n     * Creates a slice of `array` from `start` up to, but not including, `end`.\n     *\n     * **Note:** This method is used instead of\n     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are\n     * returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to slice.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function slice(array, start, end) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {\n        start = 0;\n        end = length;\n      }\n      else {\n        start = start == null ? 0 : toInteger(start);\n        end = end === undefined ? length : toInteger(end);\n      }\n      return baseSlice(array, start, end);\n    }\n\n    /**\n     * Uses a binary search to determine the lowest index at which `value`\n     * should be inserted into `array` in order to maintain its sort order.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * _.sortedIndex([30, 50], 40);\n     * // => 1\n     */\n    function sortedIndex(array, value) {\n      return baseSortedIndex(array, value);\n    }\n\n    /**\n     * This method is like `_.sortedIndex` except that it accepts `iteratee`\n     * which is invoked for `value` and each element of `array` to compute their\n     * sort ranking. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\n     *\n     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n     * // => 0\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');\n     * // => 0\n     */\n    function sortedIndexBy(array, value, iteratee) {\n      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));\n    }\n\n    /**\n     * This method is like `_.indexOf` except that it performs a binary\n     * search on a sorted `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);\n     * // => 1\n     */\n    function sortedIndexOf(array, value) {\n      var length = array == null ? 0 : array.length;\n      if (length) {\n        var index = baseSortedIndex(array, value);\n        if (index < length && eq(array[index], value)) {\n          return index;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * This method is like `_.sortedIndex` except that it returns the highest\n     * index at which `value` should be inserted into `array` in order to\n     * maintain its sort order.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);\n     * // => 4\n     */\n    function sortedLastIndex(array, value) {\n      return baseSortedIndex(array, value, true);\n    }\n\n    /**\n     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`\n     * which is invoked for `value` and each element of `array` to compute their\n     * sort ranking. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\n     *\n     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n     * // => 1\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');\n     * // => 1\n     */\n    function sortedLastIndexBy(array, value, iteratee) {\n      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);\n    }\n\n    /**\n     * This method is like `_.lastIndexOf` except that it performs a binary\n     * search on a sorted `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);\n     * // => 3\n     */\n    function sortedLastIndexOf(array, value) {\n      var length = array == null ? 0 : array.length;\n      if (length) {\n        var index = baseSortedIndex(array, value, true) - 1;\n        if (eq(array[index], value)) {\n          return index;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * This method is like `_.uniq` except that it's designed and optimized\n     * for sorted arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.sortedUniq([1, 1, 2]);\n     * // => [1, 2]\n     */\n    function sortedUniq(array) {\n      return (array && array.length)\n        ? baseSortedUniq(array)\n        : [];\n    }\n\n    /**\n     * This method is like `_.uniqBy` except that it's designed and optimized\n     * for sorted arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);\n     * // => [1.1, 2.3]\n     */\n    function sortedUniqBy(array, iteratee) {\n      return (array && array.length)\n        ? baseSortedUniq(array, getIteratee(iteratee, 2))\n        : [];\n    }\n\n    /**\n     * Gets all but the first element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.tail([1, 2, 3]);\n     * // => [2, 3]\n     */\n    function tail(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseSlice(array, 1, length) : [];\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements taken from the beginning.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to take.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.take([1, 2, 3]);\n     * // => [1]\n     *\n     * _.take([1, 2, 3], 2);\n     * // => [1, 2]\n     *\n     * _.take([1, 2, 3], 5);\n     * // => [1, 2, 3]\n     *\n     * _.take([1, 2, 3], 0);\n     * // => []\n     */\n    function take(array, n, guard) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      return baseSlice(array, 0, n < 0 ? 0 : n);\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements taken from the end.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to take.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.takeRight([1, 2, 3]);\n     * // => [3]\n     *\n     * _.takeRight([1, 2, 3], 2);\n     * // => [2, 3]\n     *\n     * _.takeRight([1, 2, 3], 5);\n     * // => [1, 2, 3]\n     *\n     * _.takeRight([1, 2, 3], 0);\n     * // => []\n     */\n    function takeRight(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      n = length - n;\n      return baseSlice(array, n < 0 ? 0 : n, length);\n    }\n\n    /**\n     * Creates a slice of `array` with elements taken from the end. Elements are\n     * taken until `predicate` returns falsey. The predicate is invoked with\n     * three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.takeRightWhile(users, function(o) { return !o.active; });\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });\n     * // => objects for ['pebbles']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.takeRightWhile(users, ['active', false]);\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.takeRightWhile(users, 'active');\n     * // => []\n     */\n    function takeRightWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), false, true)\n        : [];\n    }\n\n    /**\n     * Creates a slice of `array` with elements taken from the beginning. Elements\n     * are taken until `predicate` returns falsey. The predicate is invoked with\n     * three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.takeWhile(users, function(o) { return !o.active; });\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.takeWhile(users, { 'user': 'barney', 'active': false });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.takeWhile(users, ['active', false]);\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.takeWhile(users, 'active');\n     * // => []\n     */\n    function takeWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3))\n        : [];\n    }\n\n    /**\n     * Creates an array of unique values, in order, from all given arrays using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * _.union([2], [1, 2]);\n     * // => [2, 1]\n     */\n    var union = baseRest(function(arrays) {\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));\n    });\n\n    /**\n     * This method is like `_.union` except that it accepts `iteratee` which is\n     * invoked for each element of each `arrays` to generate the criterion by\n     * which uniqueness is computed. Result values are chosen from the first\n     * array in which the value occurs. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * _.unionBy([2.1], [1.2, 2.3], Math.floor);\n     * // => [2.1, 1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }, { 'x': 2 }]\n     */\n    var unionBy = baseRest(function(arrays) {\n      var iteratee = last(arrays);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));\n    });\n\n    /**\n     * This method is like `_.union` except that it accepts `comparator` which\n     * is invoked to compare elements of `arrays`. Result values are chosen from\n     * the first array in which the value occurs. The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.unionWith(objects, others, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n     */\n    var unionWith = baseRest(function(arrays) {\n      var comparator = last(arrays);\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);\n    });\n\n    /**\n     * Creates a duplicate-free version of an array, using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons, in which only the first occurrence of each element\n     * is kept. The order of result values is determined by the order they occur\n     * in the array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.uniq([2, 1, 2]);\n     * // => [2, 1]\n     */\n    function uniq(array) {\n      return (array && array.length) ? baseUniq(array) : [];\n    }\n\n    /**\n     * This method is like `_.uniq` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * uniqueness is computed. The order of result values is determined by the\n     * order they occur in the array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);\n     * // => [2.1, 1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }, { 'x': 2 }]\n     */\n    function uniqBy(array, iteratee) {\n      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];\n    }\n\n    /**\n     * This method is like `_.uniq` except that it accepts `comparator` which\n     * is invoked to compare elements of `array`. The order of result values is\n     * determined by the order they occur in the array.The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.uniqWith(objects, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n     */\n    function uniqWith(array, comparator) {\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];\n    }\n\n    /**\n     * This method is like `_.zip` except that it accepts an array of grouped\n     * elements and creates an array regrouping the elements to their pre-zip\n     * configuration.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.2.0\n     * @category Array\n     * @param {Array} array The array of grouped elements to process.\n     * @returns {Array} Returns the new array of regrouped elements.\n     * @example\n     *\n     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);\n     * // => [['a', 1, true], ['b', 2, false]]\n     *\n     * _.unzip(zipped);\n     * // => [['a', 'b'], [1, 2], [true, false]]\n     */\n    function unzip(array) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      var length = 0;\n      array = arrayFilter(array, function(group) {\n        if (isArrayLikeObject(group)) {\n          length = nativeMax(group.length, length);\n          return true;\n        }\n      });\n      return baseTimes(length, function(index) {\n        return arrayMap(array, baseProperty(index));\n      });\n    }\n\n    /**\n     * This method is like `_.unzip` except that it accepts `iteratee` to specify\n     * how regrouped values should be combined. The iteratee is invoked with the\n     * elements of each group: (...group).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Array\n     * @param {Array} array The array of grouped elements to process.\n     * @param {Function} [iteratee=_.identity] The function to combine\n     *  regrouped values.\n     * @returns {Array} Returns the new array of regrouped elements.\n     * @example\n     *\n     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);\n     * // => [[1, 10, 100], [2, 20, 200]]\n     *\n     * _.unzipWith(zipped, _.add);\n     * // => [3, 30, 300]\n     */\n    function unzipWith(array, iteratee) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      var result = unzip(array);\n      if (iteratee == null) {\n        return result;\n      }\n      return arrayMap(result, function(group) {\n        return apply(iteratee, undefined, group);\n      });\n    }\n\n    /**\n     * Creates an array excluding all given values using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * **Note:** Unlike `_.pull`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...*} [values] The values to exclude.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.difference, _.xor\n     * @example\n     *\n     * _.without([2, 1, 2, 3], 1, 2);\n     * // => [3]\n     */\n    var without = baseRest(function(array, values) {\n      return isArrayLikeObject(array)\n        ? baseDifference(array, values)\n        : [];\n    });\n\n    /**\n     * Creates an array of unique values that is the\n     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)\n     * of the given arrays. The order of result values is determined by the order\n     * they occur in the arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.difference, _.without\n     * @example\n     *\n     * _.xor([2, 1], [2, 3]);\n     * // => [1, 3]\n     */\n    var xor = baseRest(function(arrays) {\n      return baseXor(arrayFilter(arrays, isArrayLikeObject));\n    });\n\n    /**\n     * This method is like `_.xor` except that it accepts `iteratee` which is\n     * invoked for each element of each `arrays` to generate the criterion by\n     * which by which they're compared. The order of result values is determined\n     * by the order they occur in the arrays. The iteratee is invoked with one\n     * argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [1.2, 3.4]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 2 }]\n     */\n    var xorBy = baseRest(function(arrays) {\n      var iteratee = last(arrays);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));\n    });\n\n    /**\n     * This method is like `_.xor` except that it accepts `comparator` which is\n     * invoked to compare elements of `arrays`. The order of result values is\n     * determined by the order they occur in the arrays. The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.xorWith(objects, others, _.isEqual);\n     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n     */\n    var xorWith = baseRest(function(arrays) {\n      var comparator = last(arrays);\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);\n    });\n\n    /**\n     * Creates an array of grouped elements, the first of which contains the\n     * first elements of the given arrays, the second of which contains the\n     * second elements of the given arrays, and so on.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to process.\n     * @returns {Array} Returns the new array of grouped elements.\n     * @example\n     *\n     * _.zip(['a', 'b'], [1, 2], [true, false]);\n     * // => [['a', 1, true], ['b', 2, false]]\n     */\n    var zip = baseRest(unzip);\n\n    /**\n     * This method is like `_.fromPairs` except that it accepts two arrays,\n     * one of property identifiers and one of corresponding values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.4.0\n     * @category Array\n     * @param {Array} [props=[]] The property identifiers.\n     * @param {Array} [values=[]] The property values.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.zipObject(['a', 'b'], [1, 2]);\n     * // => { 'a': 1, 'b': 2 }\n     */\n    function zipObject(props, values) {\n      return baseZipObject(props || [], values || [], assignValue);\n    }\n\n    /**\n     * This method is like `_.zipObject` except that it supports property paths.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.1.0\n     * @category Array\n     * @param {Array} [props=[]] The property identifiers.\n     * @param {Array} [values=[]] The property values.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);\n     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }\n     */\n    function zipObjectDeep(props, values) {\n      return baseZipObject(props || [], values || [], baseSet);\n    }\n\n    /**\n     * This method is like `_.zip` except that it accepts `iteratee` to specify\n     * how grouped values should be combined. The iteratee is invoked with the\n     * elements of each group: (...group).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to process.\n     * @param {Function} [iteratee=_.identity] The function to combine\n     *  grouped values.\n     * @returns {Array} Returns the new array of grouped elements.\n     * @example\n     *\n     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {\n     *   return a + b + c;\n     * });\n     * // => [111, 222]\n     */\n    var zipWith = baseRest(function(arrays) {\n      var length = arrays.length,\n          iteratee = length > 1 ? arrays[length - 1] : undefined;\n\n      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;\n      return unzipWith(arrays, iteratee);\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a `lodash` wrapper instance that wraps `value` with explicit method\n     * chain sequences enabled. The result of such sequences must be unwrapped\n     * with `_#value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.3.0\n     * @category Seq\n     * @param {*} value The value to wrap.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36 },\n     *   { 'user': 'fred',    'age': 40 },\n     *   { 'user': 'pebbles', 'age': 1 }\n     * ];\n     *\n     * var youngest = _\n     *   .chain(users)\n     *   .sortBy('age')\n     *   .map(function(o) {\n     *     return o.user + ' is ' + o.age;\n     *   })\n     *   .head()\n     *   .value();\n     * // => 'pebbles is 1'\n     */\n    function chain(value) {\n      var result = lodash(value);\n      result.__chain__ = true;\n      return result;\n    }\n\n    /**\n     * This method invokes `interceptor` and returns `value`. The interceptor\n     * is invoked with one argument; (value). The purpose of this method is to\n     * \"tap into\" a method chain sequence in order to modify intermediate results.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @param {*} value The value to provide to `interceptor`.\n     * @param {Function} interceptor The function to invoke.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * _([1, 2, 3])\n     *  .tap(function(array) {\n     *    // Mutate input array.\n     *    array.pop();\n     *  })\n     *  .reverse()\n     *  .value();\n     * // => [2, 1]\n     */\n    function tap(value, interceptor) {\n      interceptor(value);\n      return value;\n    }\n\n    /**\n     * This method is like `_.tap` except that it returns the result of `interceptor`.\n     * The purpose of this method is to \"pass thru\" values replacing intermediate\n     * results in a method chain sequence.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Seq\n     * @param {*} value The value to provide to `interceptor`.\n     * @param {Function} interceptor The function to invoke.\n     * @returns {*} Returns the result of `interceptor`.\n     * @example\n     *\n     * _('  abc  ')\n     *  .chain()\n     *  .trim()\n     *  .thru(function(value) {\n     *    return [value];\n     *  })\n     *  .value();\n     * // => ['abc']\n     */\n    function thru(value, interceptor) {\n      return interceptor(value);\n    }\n\n    /**\n     * This method is the wrapper version of `_.at`.\n     *\n     * @name at\n     * @memberOf _\n     * @since 1.0.0\n     * @category Seq\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n     *\n     * _(object).at(['a[0].b.c', 'a[1]']).value();\n     * // => [3, 4]\n     */\n    var wrapperAt = flatRest(function(paths) {\n      var length = paths.length,\n          start = length ? paths[0] : 0,\n          value = this.__wrapped__,\n          interceptor = function(object) { return baseAt(object, paths); };\n\n      if (length > 1 || this.__actions__.length ||\n          !(value instanceof LazyWrapper) || !isIndex(start)) {\n        return this.thru(interceptor);\n      }\n      value = value.slice(start, +start + (length ? 1 : 0));\n      value.__actions__.push({\n        'func': thru,\n        'args': [interceptor],\n        'thisArg': undefined\n      });\n      return new LodashWrapper(value, this.__chain__).thru(function(array) {\n        if (length && !array.length) {\n          array.push(undefined);\n        }\n        return array;\n      });\n    });\n\n    /**\n     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.\n     *\n     * @name chain\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 40 }\n     * ];\n     *\n     * // A sequence without explicit chaining.\n     * _(users).head();\n     * // => { 'user': 'barney', 'age': 36 }\n     *\n     * // A sequence with explicit chaining.\n     * _(users)\n     *   .chain()\n     *   .head()\n     *   .pick('user')\n     *   .value();\n     * // => { 'user': 'barney' }\n     */\n    function wrapperChain() {\n      return chain(this);\n    }\n\n    /**\n     * Executes the chain sequence and returns the wrapped result.\n     *\n     * @name commit\n     * @memberOf _\n     * @since 3.2.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var array = [1, 2];\n     * var wrapped = _(array).push(3);\n     *\n     * console.log(array);\n     * // => [1, 2]\n     *\n     * wrapped = wrapped.commit();\n     * console.log(array);\n     * // => [1, 2, 3]\n     *\n     * wrapped.last();\n     * // => 3\n     *\n     * console.log(array);\n     * // => [1, 2, 3]\n     */\n    function wrapperCommit() {\n      return new LodashWrapper(this.value(), this.__chain__);\n    }\n\n    /**\n     * Gets the next value on a wrapped object following the\n     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).\n     *\n     * @name next\n     * @memberOf _\n     * @since 4.0.0\n     * @category Seq\n     * @returns {Object} Returns the next iterator value.\n     * @example\n     *\n     * var wrapped = _([1, 2]);\n     *\n     * wrapped.next();\n     * // => { 'done': false, 'value': 1 }\n     *\n     * wrapped.next();\n     * // => { 'done': false, 'value': 2 }\n     *\n     * wrapped.next();\n     * // => { 'done': true, 'value': undefined }\n     */\n    function wrapperNext() {\n      if (this.__values__ === undefined) {\n        this.__values__ = toArray(this.value());\n      }\n      var done = this.__index__ >= this.__values__.length,\n          value = done ? undefined : this.__values__[this.__index__++];\n\n      return { 'done': done, 'value': value };\n    }\n\n    /**\n     * Enables the wrapper to be iterable.\n     *\n     * @name Symbol.iterator\n     * @memberOf _\n     * @since 4.0.0\n     * @category Seq\n     * @returns {Object} Returns the wrapper object.\n     * @example\n     *\n     * var wrapped = _([1, 2]);\n     *\n     * wrapped[Symbol.iterator]() === wrapped;\n     * // => true\n     *\n     * Array.from(wrapped);\n     * // => [1, 2]\n     */\n    function wrapperToIterator() {\n      return this;\n    }\n\n    /**\n     * Creates a clone of the chain sequence planting `value` as the wrapped value.\n     *\n     * @name plant\n     * @memberOf _\n     * @since 3.2.0\n     * @category Seq\n     * @param {*} value The value to plant.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var wrapped = _([1, 2]).map(square);\n     * var other = wrapped.plant([3, 4]);\n     *\n     * other.value();\n     * // => [9, 16]\n     *\n     * wrapped.value();\n     * // => [1, 4]\n     */\n    function wrapperPlant(value) {\n      var result,\n          parent = this;\n\n      while (parent instanceof baseLodash) {\n        var clone = wrapperClone(parent);\n        clone.__index__ = 0;\n        clone.__values__ = undefined;\n        if (result) {\n          previous.__wrapped__ = clone;\n        } else {\n          result = clone;\n        }\n        var previous = clone;\n        parent = parent.__wrapped__;\n      }\n      previous.__wrapped__ = value;\n      return result;\n    }\n\n    /**\n     * This method is the wrapper version of `_.reverse`.\n     *\n     * **Note:** This method mutates the wrapped array.\n     *\n     * @name reverse\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _(array).reverse().value()\n     * // => [3, 2, 1]\n     *\n     * console.log(array);\n     * // => [3, 2, 1]\n     */\n    function wrapperReverse() {\n      var value = this.__wrapped__;\n      if (value instanceof LazyWrapper) {\n        var wrapped = value;\n        if (this.__actions__.length) {\n          wrapped = new LazyWrapper(this);\n        }\n        wrapped = wrapped.reverse();\n        wrapped.__actions__.push({\n          'func': thru,\n          'args': [reverse],\n          'thisArg': undefined\n        });\n        return new LodashWrapper(wrapped, this.__chain__);\n      }\n      return this.thru(reverse);\n    }\n\n    /**\n     * Executes the chain sequence to resolve the unwrapped value.\n     *\n     * @name value\n     * @memberOf _\n     * @since 0.1.0\n     * @alias toJSON, valueOf\n     * @category Seq\n     * @returns {*} Returns the resolved unwrapped value.\n     * @example\n     *\n     * _([1, 2, 3]).value();\n     * // => [1, 2, 3]\n     */\n    function wrapperValue() {\n      return baseWrapperValue(this.__wrapped__, this.__actions__);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The corresponding value of\n     * each key is the number of times the key was returned by `iteratee`. The\n     * iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.countBy([6.1, 4.2, 6.3], Math.floor);\n     * // => { '4': 1, '6': 2 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.countBy(['one', 'two', 'three'], 'length');\n     * // => { '3': 2, '5': 1 }\n     */\n    var countBy = createAggregator(function(result, value, key) {\n      if (hasOwnProperty.call(result, key)) {\n        ++result[key];\n      } else {\n        baseAssignValue(result, key, 1);\n      }\n    });\n\n    /**\n     * Checks if `predicate` returns truthy for **all** elements of `collection`.\n     * Iteration is stopped once `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index|key, collection).\n     *\n     * **Note:** This method returns `true` for\n     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because\n     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of\n     * elements of empty collections.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n     *  else `false`.\n     * @example\n     *\n     * _.every([true, 1, null, 'yes'], Boolean);\n     * // => false\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': false },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.every(users, { 'user': 'barney', 'active': false });\n     * // => false\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.every(users, ['active', false]);\n     * // => true\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.every(users, 'active');\n     * // => false\n     */\n    function every(collection, predicate, guard) {\n      var func = isArray(collection) ? arrayEvery : baseEvery;\n      if (guard && isIterateeCall(collection, predicate, guard)) {\n        predicate = undefined;\n      }\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Iterates over elements of `collection`, returning an array of all elements\n     * `predicate` returns truthy for. The predicate is invoked with three\n     * arguments: (value, index|key, collection).\n     *\n     * **Note:** Unlike `_.remove`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     * @see _.reject\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': true },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * _.filter(users, function(o) { return !o.active; });\n     * // => objects for ['fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.filter(users, { 'age': 36, 'active': true });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.filter(users, ['active', false]);\n     * // => objects for ['fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.filter(users, 'active');\n     * // => objects for ['barney']\n     *\n     * // Combining several predicates using `_.overEvery` or `_.overSome`.\n     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));\n     * // => objects for ['fred', 'barney']\n     */\n    function filter(collection, predicate) {\n      var func = isArray(collection) ? arrayFilter : baseFilter;\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Iterates over elements of `collection`, returning the first element\n     * `predicate` returns truthy for. The predicate is invoked with three\n     * arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {*} Returns the matched element, else `undefined`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36, 'active': true },\n     *   { 'user': 'fred',    'age': 40, 'active': false },\n     *   { 'user': 'pebbles', 'age': 1,  'active': true }\n     * ];\n     *\n     * _.find(users, function(o) { return o.age < 40; });\n     * // => object for 'barney'\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.find(users, { 'age': 1, 'active': true });\n     * // => object for 'pebbles'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.find(users, ['active', false]);\n     * // => object for 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.find(users, 'active');\n     * // => object for 'barney'\n     */\n    var find = createFind(findIndex);\n\n    /**\n     * This method is like `_.find` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=collection.length-1] The index to search from.\n     * @returns {*} Returns the matched element, else `undefined`.\n     * @example\n     *\n     * _.findLast([1, 2, 3, 4], function(n) {\n     *   return n % 2 == 1;\n     * });\n     * // => 3\n     */\n    var findLast = createFind(findLastIndex);\n\n    /**\n     * Creates a flattened array of values by running each element in `collection`\n     * thru `iteratee` and flattening the mapped results. The iteratee is invoked\n     * with three arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [n, n];\n     * }\n     *\n     * _.flatMap([1, 2], duplicate);\n     * // => [1, 1, 2, 2]\n     */\n    function flatMap(collection, iteratee) {\n      return baseFlatten(map(collection, iteratee), 1);\n    }\n\n    /**\n     * This method is like `_.flatMap` except that it recursively flattens the\n     * mapped results.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [[[n, n]]];\n     * }\n     *\n     * _.flatMapDeep([1, 2], duplicate);\n     * // => [1, 1, 2, 2]\n     */\n    function flatMapDeep(collection, iteratee) {\n      return baseFlatten(map(collection, iteratee), INFINITY);\n    }\n\n    /**\n     * This method is like `_.flatMap` except that it recursively flattens the\n     * mapped results up to `depth` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {number} [depth=1] The maximum recursion depth.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [[[n, n]]];\n     * }\n     *\n     * _.flatMapDepth([1, 2], duplicate, 2);\n     * // => [[1, 1], [2, 2]]\n     */\n    function flatMapDepth(collection, iteratee, depth) {\n      depth = depth === undefined ? 1 : toInteger(depth);\n      return baseFlatten(map(collection, iteratee), depth);\n    }\n\n    /**\n     * Iterates over elements of `collection` and invokes `iteratee` for each element.\n     * The iteratee is invoked with three arguments: (value, index|key, collection).\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * **Note:** As with other \"Collections\" methods, objects with a \"length\"\n     * property are iterated like arrays. To avoid this behavior use `_.forIn`\n     * or `_.forOwn` for object iteration.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @alias each\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     * @see _.forEachRight\n     * @example\n     *\n     * _.forEach([1, 2], function(value) {\n     *   console.log(value);\n     * });\n     * // => Logs `1` then `2`.\n     *\n     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n     */\n    function forEach(collection, iteratee) {\n      var func = isArray(collection) ? arrayEach : baseEach;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.forEach` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @alias eachRight\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     * @see _.forEach\n     * @example\n     *\n     * _.forEachRight([1, 2], function(value) {\n     *   console.log(value);\n     * });\n     * // => Logs `2` then `1`.\n     */\n    function forEachRight(collection, iteratee) {\n      var func = isArray(collection) ? arrayEachRight : baseEachRight;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The order of grouped values\n     * is determined by the order they occur in `collection`. The corresponding\n     * value of each key is an array of elements responsible for generating the\n     * key. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.groupBy([6.1, 4.2, 6.3], Math.floor);\n     * // => { '4': [4.2], '6': [6.1, 6.3] }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.groupBy(['one', 'two', 'three'], 'length');\n     * // => { '3': ['one', 'two'], '5': ['three'] }\n     */\n    var groupBy = createAggregator(function(result, value, key) {\n      if (hasOwnProperty.call(result, key)) {\n        result[key].push(value);\n      } else {\n        baseAssignValue(result, key, [value]);\n      }\n    });\n\n    /**\n     * Checks if `value` is in `collection`. If `collection` is a string, it's\n     * checked for a substring of `value`, otherwise\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * is used for equality comparisons. If `fromIndex` is negative, it's used as\n     * the offset from the end of `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n     * @returns {boolean} Returns `true` if `value` is found, else `false`.\n     * @example\n     *\n     * _.includes([1, 2, 3], 1);\n     * // => true\n     *\n     * _.includes([1, 2, 3], 1, 2);\n     * // => false\n     *\n     * _.includes({ 'a': 1, 'b': 2 }, 1);\n     * // => true\n     *\n     * _.includes('abcd', 'bc');\n     * // => true\n     */\n    function includes(collection, value, fromIndex, guard) {\n      collection = isArrayLike(collection) ? collection : values(collection);\n      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;\n\n      var length = collection.length;\n      if (fromIndex < 0) {\n        fromIndex = nativeMax(length + fromIndex, 0);\n      }\n      return isString(collection)\n        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\n        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\n    }\n\n    /**\n     * Invokes the method at `path` of each element in `collection`, returning\n     * an array of the results of each invoked method. Any additional arguments\n     * are provided to each invoked method. If `path` is a function, it's invoked\n     * for, and `this` bound to, each element in `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Array|Function|string} path The path of the method to invoke or\n     *  the function invoked per iteration.\n     * @param {...*} [args] The arguments to invoke each method with.\n     * @returns {Array} Returns the array of results.\n     * @example\n     *\n     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');\n     * // => [[1, 5, 7], [1, 2, 3]]\n     *\n     * _.invokeMap([123, 456], String.prototype.split, '');\n     * // => [['1', '2', '3'], ['4', '5', '6']]\n     */\n    var invokeMap = baseRest(function(collection, path, args) {\n      var index = -1,\n          isFunc = typeof path == 'function',\n          result = isArrayLike(collection) ? Array(collection.length) : [];\n\n      baseEach(collection, function(value) {\n        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);\n      });\n      return result;\n    });\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The corresponding value of\n     * each key is the last element responsible for generating the key. The\n     * iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * var array = [\n     *   { 'dir': 'left', 'code': 97 },\n     *   { 'dir': 'right', 'code': 100 }\n     * ];\n     *\n     * _.keyBy(array, function(o) {\n     *   return String.fromCharCode(o.code);\n     * });\n     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n     *\n     * _.keyBy(array, 'dir');\n     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }\n     */\n    var keyBy = createAggregator(function(result, value, key) {\n      baseAssignValue(result, key, value);\n    });\n\n    /**\n     * Creates an array of values by running each element in `collection` thru\n     * `iteratee`. The iteratee is invoked with three arguments:\n     * (value, index|key, collection).\n     *\n     * Many lodash methods are guarded to work as iteratees for methods like\n     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n     *\n     * The guarded methods are:\n     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * _.map([4, 8], square);\n     * // => [16, 64]\n     *\n     * _.map({ 'a': 4, 'b': 8 }, square);\n     * // => [16, 64] (iteration order is not guaranteed)\n     *\n     * var users = [\n     *   { 'user': 'barney' },\n     *   { 'user': 'fred' }\n     * ];\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.map(users, 'user');\n     * // => ['barney', 'fred']\n     */\n    function map(collection, iteratee) {\n      var func = isArray(collection) ? arrayMap : baseMap;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.sortBy` except that it allows specifying the sort\n     * orders of the iteratees to sort by. If `orders` is unspecified, all values\n     * are sorted in ascending order. Otherwise, specify an order of \"desc\" for\n     * descending or \"asc\" for ascending sort order of corresponding values.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\n     *  The iteratees to sort by.\n     * @param {string[]} [orders] The sort orders of `iteratees`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n     * @returns {Array} Returns the new sorted array.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'fred',   'age': 48 },\n     *   { 'user': 'barney', 'age': 34 },\n     *   { 'user': 'fred',   'age': 40 },\n     *   { 'user': 'barney', 'age': 36 }\n     * ];\n     *\n     * // Sort by `user` in ascending order and by `age` in descending order.\n     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n     */\n    function orderBy(collection, iteratees, orders, guard) {\n      if (collection == null) {\n        return [];\n      }\n      if (!isArray(iteratees)) {\n        iteratees = iteratees == null ? [] : [iteratees];\n      }\n      orders = guard ? undefined : orders;\n      if (!isArray(orders)) {\n        orders = orders == null ? [] : [orders];\n      }\n      return baseOrderBy(collection, iteratees, orders);\n    }\n\n    /**\n     * Creates an array of elements split into two groups, the first of which\n     * contains elements `predicate` returns truthy for, the second of which\n     * contains elements `predicate` returns falsey for. The predicate is\n     * invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the array of grouped elements.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36, 'active': false },\n     *   { 'user': 'fred',    'age': 40, 'active': true },\n     *   { 'user': 'pebbles', 'age': 1,  'active': false }\n     * ];\n     *\n     * _.partition(users, function(o) { return o.active; });\n     * // => objects for [['fred'], ['barney', 'pebbles']]\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.partition(users, { 'age': 1, 'active': false });\n     * // => objects for [['pebbles'], ['barney', 'fred']]\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.partition(users, ['active', false]);\n     * // => objects for [['barney', 'pebbles'], ['fred']]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.partition(users, 'active');\n     * // => objects for [['fred'], ['barney', 'pebbles']]\n     */\n    var partition = createAggregator(function(result, value, key) {\n      result[key ? 0 : 1].push(value);\n    }, function() { return [[], []]; });\n\n    /**\n     * Reduces `collection` to a value which is the accumulated result of running\n     * each element in `collection` thru `iteratee`, where each successive\n     * invocation is supplied the return value of the previous. If `accumulator`\n     * is not given, the first element of `collection` is used as the initial\n     * value. The iteratee is invoked with four arguments:\n     * (accumulator, value, index|key, collection).\n     *\n     * Many lodash methods are guarded to work as iteratees for methods like\n     * `_.reduce`, `_.reduceRight`, and `_.transform`.\n     *\n     * The guarded methods are:\n     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,\n     * and `sortBy`\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @returns {*} Returns the accumulated value.\n     * @see _.reduceRight\n     * @example\n     *\n     * _.reduce([1, 2], function(sum, n) {\n     *   return sum + n;\n     * }, 0);\n     * // => 3\n     *\n     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n     *   (result[value] || (result[value] = [])).push(key);\n     *   return result;\n     * }, {});\n     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)\n     */\n    function reduce(collection, iteratee, accumulator) {\n      var func = isArray(collection) ? arrayReduce : baseReduce,\n          initAccum = arguments.length < 3;\n\n      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);\n    }\n\n    /**\n     * This method is like `_.reduce` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @returns {*} Returns the accumulated value.\n     * @see _.reduce\n     * @example\n     *\n     * var array = [[0, 1], [2, 3], [4, 5]];\n     *\n     * _.reduceRight(array, function(flattened, other) {\n     *   return flattened.concat(other);\n     * }, []);\n     * // => [4, 5, 2, 3, 0, 1]\n     */\n    function reduceRight(collection, iteratee, accumulator) {\n      var func = isArray(collection) ? arrayReduceRight : baseReduce,\n          initAccum = arguments.length < 3;\n\n      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);\n    }\n\n    /**\n     * The opposite of `_.filter`; this method returns the elements of `collection`\n     * that `predicate` does **not** return truthy for.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     * @see _.filter\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': false },\n     *   { 'user': 'fred',   'age': 40, 'active': true }\n     * ];\n     *\n     * _.reject(users, function(o) { return !o.active; });\n     * // => objects for ['fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.reject(users, { 'age': 40, 'active': true });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.reject(users, ['active', false]);\n     * // => objects for ['fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.reject(users, 'active');\n     * // => objects for ['barney']\n     */\n    function reject(collection, predicate) {\n      var func = isArray(collection) ? arrayFilter : baseFilter;\n      return func(collection, negate(getIteratee(predicate, 3)));\n    }\n\n    /**\n     * Gets a random element from `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to sample.\n     * @returns {*} Returns the random element.\n     * @example\n     *\n     * _.sample([1, 2, 3, 4]);\n     * // => 2\n     */\n    function sample(collection) {\n      var func = isArray(collection) ? arraySample : baseSample;\n      return func(collection);\n    }\n\n    /**\n     * Gets `n` random elements at unique keys from `collection` up to the\n     * size of `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to sample.\n     * @param {number} [n=1] The number of elements to sample.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the random elements.\n     * @example\n     *\n     * _.sampleSize([1, 2, 3], 2);\n     * // => [3, 1]\n     *\n     * _.sampleSize([1, 2, 3], 4);\n     * // => [2, 3, 1]\n     */\n    function sampleSize(collection, n, guard) {\n      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {\n        n = 1;\n      } else {\n        n = toInteger(n);\n      }\n      var func = isArray(collection) ? arraySampleSize : baseSampleSize;\n      return func(collection, n);\n    }\n\n    /**\n     * Creates an array of shuffled values, using a version of the\n     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     * @example\n     *\n     * _.shuffle([1, 2, 3, 4]);\n     * // => [4, 1, 3, 2]\n     */\n    function shuffle(collection) {\n      var func = isArray(collection) ? arrayShuffle : baseShuffle;\n      return func(collection);\n    }\n\n    /**\n     * Gets the size of `collection` by returning its length for array-like\n     * values or the number of own enumerable string keyed properties for objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to inspect.\n     * @returns {number} Returns the collection size.\n     * @example\n     *\n     * _.size([1, 2, 3]);\n     * // => 3\n     *\n     * _.size({ 'a': 1, 'b': 2 });\n     * // => 2\n     *\n     * _.size('pebbles');\n     * // => 7\n     */\n    function size(collection) {\n      if (collection == null) {\n        return 0;\n      }\n      if (isArrayLike(collection)) {\n        return isString(collection) ? stringSize(collection) : collection.length;\n      }\n      var tag = getTag(collection);\n      if (tag == mapTag || tag == setTag) {\n        return collection.size;\n      }\n      return baseKeys(collection).length;\n    }\n\n    /**\n     * Checks if `predicate` returns truthy for **any** element of `collection`.\n     * Iteration is stopped once `predicate` returns truthy. The predicate is\n     * invoked with three arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\n     *  else `false`.\n     * @example\n     *\n     * _.some([null, 0, 'yes', false], Boolean);\n     * // => true\n     *\n     * var users = [\n     *   { 'user': 'barney', 'active': true },\n     *   { 'user': 'fred',   'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.some(users, { 'user': 'barney', 'active': false });\n     * // => false\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.some(users, ['active', false]);\n     * // => true\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.some(users, 'active');\n     * // => true\n     */\n    function some(collection, predicate, guard) {\n      var func = isArray(collection) ? arraySome : baseSome;\n      if (guard && isIterateeCall(collection, predicate, guard)) {\n        predicate = undefined;\n      }\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Creates an array of elements, sorted in ascending order by the results of\n     * running each element in a collection thru each iteratee. This method\n     * performs a stable sort, that is, it preserves the original sort order of\n     * equal elements. The iteratees are invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {...(Function|Function[])} [iteratees=[_.identity]]\n     *  The iteratees to sort by.\n     * @returns {Array} Returns the new sorted array.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'fred',   'age': 48 },\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 30 },\n     *   { 'user': 'barney', 'age': 34 }\n     * ];\n     *\n     * _.sortBy(users, [function(o) { return o.user; }]);\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]\n     *\n     * _.sortBy(users, ['user', 'age']);\n     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]\n     */\n    var sortBy = baseRest(function(collection, iteratees) {\n      if (collection == null) {\n        return [];\n      }\n      var length = iteratees.length;\n      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n        iteratees = [];\n      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n        iteratees = [iteratees[0]];\n      }\n      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Gets the timestamp of the number of milliseconds that have elapsed since\n     * the Unix epoch (1 January 1970 00:00:00 UTC).\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Date\n     * @returns {number} Returns the timestamp.\n     * @example\n     *\n     * _.defer(function(stamp) {\n     *   console.log(_.now() - stamp);\n     * }, _.now());\n     * // => Logs the number of milliseconds it took for the deferred invocation.\n     */\n    var now = ctxNow || function() {\n      return root.Date.now();\n    };\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The opposite of `_.before`; this method creates a function that invokes\n     * `func` once it's called `n` or more times.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {number} n The number of calls before `func` is invoked.\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var saves = ['profile', 'settings'];\n     *\n     * var done = _.after(saves.length, function() {\n     *   console.log('done saving!');\n     * });\n     *\n     * _.forEach(saves, function(type) {\n     *   asyncSave({ 'type': type, 'complete': done });\n     * });\n     * // => Logs 'done saving!' after the two async saves have completed.\n     */\n    function after(n, func) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      n = toInteger(n);\n      return function() {\n        if (--n < 1) {\n          return func.apply(this, arguments);\n        }\n      };\n    }\n\n    /**\n     * Creates a function that invokes `func`, with up to `n` arguments,\n     * ignoring any additional arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to cap arguments for.\n     * @param {number} [n=func.length] The arity cap.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new capped function.\n     * @example\n     *\n     * _.map(['6', '8', '10'], _.ary(parseInt, 1));\n     * // => [6, 8, 10]\n     */\n    function ary(func, n, guard) {\n      n = guard ? undefined : n;\n      n = (func && n == null) ? func.length : n;\n      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);\n    }\n\n    /**\n     * Creates a function that invokes `func`, with the `this` binding and arguments\n     * of the created function, while it's called less than `n` times. Subsequent\n     * calls to the created function return the result of the last `func` invocation.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {number} n The number of calls at which `func` is no longer invoked.\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * jQuery(element).on('click', _.before(5, addContactToList));\n     * // => Allows adding up to 4 contacts to the list.\n     */\n    function before(n, func) {\n      var result;\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      n = toInteger(n);\n      return function() {\n        if (--n > 0) {\n          result = func.apply(this, arguments);\n        }\n        if (n <= 1) {\n          func = undefined;\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of `thisArg`\n     * and `partials` prepended to the arguments it receives.\n     *\n     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,\n     * may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** Unlike native `Function#bind`, this method doesn't set the \"length\"\n     * property of bound functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to bind.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * function greet(greeting, punctuation) {\n     *   return greeting + ' ' + this.user + punctuation;\n     * }\n     *\n     * var object = { 'user': 'fred' };\n     *\n     * var bound = _.bind(greet, object, 'hi');\n     * bound('!');\n     * // => 'hi fred!'\n     *\n     * // Bound with placeholders.\n     * var bound = _.bind(greet, object, _, '!');\n     * bound('hi');\n     * // => 'hi fred!'\n     */\n    var bind = baseRest(function(func, thisArg, partials) {\n      var bitmask = WRAP_BIND_FLAG;\n      if (partials.length) {\n        var holders = replaceHolders(partials, getHolder(bind));\n        bitmask |= WRAP_PARTIAL_FLAG;\n      }\n      return createWrap(func, bitmask, thisArg, partials, holders);\n    });\n\n    /**\n     * Creates a function that invokes the method at `object[key]` with `partials`\n     * prepended to the arguments it receives.\n     *\n     * This method differs from `_.bind` by allowing bound functions to reference\n     * methods that may be redefined or don't yet exist. See\n     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)\n     * for more details.\n     *\n     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.10.0\n     * @category Function\n     * @param {Object} object The object to invoke the method on.\n     * @param {string} key The key of the method.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * var object = {\n     *   'user': 'fred',\n     *   'greet': function(greeting, punctuation) {\n     *     return greeting + ' ' + this.user + punctuation;\n     *   }\n     * };\n     *\n     * var bound = _.bindKey(object, 'greet', 'hi');\n     * bound('!');\n     * // => 'hi fred!'\n     *\n     * object.greet = function(greeting, punctuation) {\n     *   return greeting + 'ya ' + this.user + punctuation;\n     * };\n     *\n     * bound('!');\n     * // => 'hiya fred!'\n     *\n     * // Bound with placeholders.\n     * var bound = _.bindKey(object, 'greet', _, '!');\n     * bound('hi');\n     * // => 'hiya fred!'\n     */\n    var bindKey = baseRest(function(object, key, partials) {\n      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;\n      if (partials.length) {\n        var holders = replaceHolders(partials, getHolder(bindKey));\n        bitmask |= WRAP_PARTIAL_FLAG;\n      }\n      return createWrap(key, bitmask, object, partials, holders);\n    });\n\n    /**\n     * Creates a function that accepts arguments of `func` and either invokes\n     * `func` returning its result, if at least `arity` number of arguments have\n     * been provided, or returns a function that accepts the remaining `func`\n     * arguments, and so on. The arity of `func` may be specified if `func.length`\n     * is not sufficient.\n     *\n     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,\n     * may be used as a placeholder for provided arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of curried functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Function\n     * @param {Function} func The function to curry.\n     * @param {number} [arity=func.length] The arity of `func`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new curried function.\n     * @example\n     *\n     * var abc = function(a, b, c) {\n     *   return [a, b, c];\n     * };\n     *\n     * var curried = _.curry(abc);\n     *\n     * curried(1)(2)(3);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2)(3);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2, 3);\n     * // => [1, 2, 3]\n     *\n     * // Curried with placeholders.\n     * curried(1)(_, 3)(2);\n     * // => [1, 2, 3]\n     */\n    function curry(func, arity, guard) {\n      arity = guard ? undefined : arity;\n      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\n      result.placeholder = curry.placeholder;\n      return result;\n    }\n\n    /**\n     * This method is like `_.curry` except that arguments are applied to `func`\n     * in the manner of `_.partialRight` instead of `_.partial`.\n     *\n     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for provided arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of curried functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to curry.\n     * @param {number} [arity=func.length] The arity of `func`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new curried function.\n     * @example\n     *\n     * var abc = function(a, b, c) {\n     *   return [a, b, c];\n     * };\n     *\n     * var curried = _.curryRight(abc);\n     *\n     * curried(3)(2)(1);\n     * // => [1, 2, 3]\n     *\n     * curried(2, 3)(1);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2, 3);\n     * // => [1, 2, 3]\n     *\n     * // Curried with placeholders.\n     * curried(3)(1, _)(2);\n     * // => [1, 2, 3]\n     */\n    function curryRight(func, arity, guard) {\n      arity = guard ? undefined : arity;\n      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\n      result.placeholder = curryRight.placeholder;\n      return result;\n    }\n\n    /**\n     * Creates a debounced function that delays invoking `func` until after `wait`\n     * milliseconds have elapsed since the last time the debounced function was\n     * invoked. The debounced function comes with a `cancel` method to cancel\n     * delayed `func` invocations and a `flush` method to immediately invoke them.\n     * Provide `options` to indicate whether `func` should be invoked on the\n     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n     * with the last arguments provided to the debounced function. Subsequent\n     * calls to the debounced function return the result of the last `func`\n     * invocation.\n     *\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\n     * invoked on the trailing edge of the timeout only if the debounced function\n     * is invoked more than once during the `wait` timeout.\n     *\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n     *\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n     * for details over the differences between `_.debounce` and `_.throttle`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to debounce.\n     * @param {number} [wait=0] The number of milliseconds to delay.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.leading=false]\n     *  Specify invoking on the leading edge of the timeout.\n     * @param {number} [options.maxWait]\n     *  The maximum time `func` is allowed to be delayed before it's invoked.\n     * @param {boolean} [options.trailing=true]\n     *  Specify invoking on the trailing edge of the timeout.\n     * @returns {Function} Returns the new debounced function.\n     * @example\n     *\n     * // Avoid costly calculations while the window size is in flux.\n     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n     *\n     * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n     * jQuery(element).on('click', _.debounce(sendMail, 300, {\n     *   'leading': true,\n     *   'trailing': false\n     * }));\n     *\n     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n     * var source = new EventSource('/stream');\n     * jQuery(source).on('message', debounced);\n     *\n     * // Cancel the trailing debounced invocation.\n     * jQuery(window).on('popstate', debounced.cancel);\n     */\n    function debounce(func, wait, options) {\n      var lastArgs,\n          lastThis,\n          maxWait,\n          result,\n          timerId,\n          lastCallTime,\n          lastInvokeTime = 0,\n          leading = false,\n          maxing = false,\n          trailing = true;\n\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      wait = toNumber(wait) || 0;\n      if (isObject(options)) {\n        leading = !!options.leading;\n        maxing = 'maxWait' in options;\n        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n        trailing = 'trailing' in options ? !!options.trailing : trailing;\n      }\n\n      function invokeFunc(time) {\n        var args = lastArgs,\n            thisArg = lastThis;\n\n        lastArgs = lastThis = undefined;\n        lastInvokeTime = time;\n        result = func.apply(thisArg, args);\n        return result;\n      }\n\n      function leadingEdge(time) {\n        // Reset any `maxWait` timer.\n        lastInvokeTime = time;\n        // Start the timer for the trailing edge.\n        timerId = setTimeout(timerExpired, wait);\n        // Invoke the leading edge.\n        return leading ? invokeFunc(time) : result;\n      }\n\n      function remainingWait(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime,\n            timeWaiting = wait - timeSinceLastCall;\n\n        return maxing\n          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n          : timeWaiting;\n      }\n\n      function shouldInvoke(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime;\n\n        // Either this is the first call, activity has stopped and we're at the\n        // trailing edge, the system time has gone backwards and we're treating\n        // it as the trailing edge, or we've hit the `maxWait` limit.\n        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n      }\n\n      function timerExpired() {\n        var time = now();\n        if (shouldInvoke(time)) {\n          return trailingEdge(time);\n        }\n        // Restart the timer.\n        timerId = setTimeout(timerExpired, remainingWait(time));\n      }\n\n      function trailingEdge(time) {\n        timerId = undefined;\n\n        // Only invoke if we have `lastArgs` which means `func` has been\n        // debounced at least once.\n        if (trailing && lastArgs) {\n          return invokeFunc(time);\n        }\n        lastArgs = lastThis = undefined;\n        return result;\n      }\n\n      function cancel() {\n        if (timerId !== undefined) {\n          clearTimeout(timerId);\n        }\n        lastInvokeTime = 0;\n        lastArgs = lastCallTime = lastThis = timerId = undefined;\n      }\n\n      function flush() {\n        return timerId === undefined ? result : trailingEdge(now());\n      }\n\n      function debounced() {\n        var time = now(),\n            isInvoking = shouldInvoke(time);\n\n        lastArgs = arguments;\n        lastThis = this;\n        lastCallTime = time;\n\n        if (isInvoking) {\n          if (timerId === undefined) {\n            return leadingEdge(lastCallTime);\n          }\n          if (maxing) {\n            // Handle invocations in a tight loop.\n            clearTimeout(timerId);\n            timerId = setTimeout(timerExpired, wait);\n            return invokeFunc(lastCallTime);\n          }\n        }\n        if (timerId === undefined) {\n          timerId = setTimeout(timerExpired, wait);\n        }\n        return result;\n      }\n      debounced.cancel = cancel;\n      debounced.flush = flush;\n      return debounced;\n    }\n\n    /**\n     * Defers invoking the `func` until the current call stack has cleared. Any\n     * additional arguments are provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to defer.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.defer(function(text) {\n     *   console.log(text);\n     * }, 'deferred');\n     * // => Logs 'deferred' after one millisecond.\n     */\n    var defer = baseRest(function(func, args) {\n      return baseDelay(func, 1, args);\n    });\n\n    /**\n     * Invokes `func` after `wait` milliseconds. Any additional arguments are\n     * provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.delay(function(text) {\n     *   console.log(text);\n     * }, 1000, 'later');\n     * // => Logs 'later' after one second.\n     */\n    var delay = baseRest(function(func, wait, args) {\n      return baseDelay(func, toNumber(wait) || 0, args);\n    });\n\n    /**\n     * Creates a function that invokes `func` with arguments reversed.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to flip arguments for.\n     * @returns {Function} Returns the new flipped function.\n     * @example\n     *\n     * var flipped = _.flip(function() {\n     *   return _.toArray(arguments);\n     * });\n     *\n     * flipped('a', 'b', 'c', 'd');\n     * // => ['d', 'c', 'b', 'a']\n     */\n    function flip(func) {\n      return createWrap(func, WRAP_FLIP_FLAG);\n    }\n\n    /**\n     * Creates a function that memoizes the result of `func`. If `resolver` is\n     * provided, it determines the cache key for storing the result based on the\n     * arguments provided to the memoized function. By default, the first argument\n     * provided to the memoized function is used as the map cache key. The `func`\n     * is invoked with the `this` binding of the memoized function.\n     *\n     * **Note:** The cache is exposed as the `cache` property on the memoized\n     * function. Its creation may be customized by replacing the `_.memoize.Cache`\n     * constructor with one whose instances implement the\n     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n     * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to have its output memoized.\n     * @param {Function} [resolver] The function to resolve the cache key.\n     * @returns {Function} Returns the new memoized function.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     * var other = { 'c': 3, 'd': 4 };\n     *\n     * var values = _.memoize(_.values);\n     * values(object);\n     * // => [1, 2]\n     *\n     * values(other);\n     * // => [3, 4]\n     *\n     * object.a = 2;\n     * values(object);\n     * // => [1, 2]\n     *\n     * // Modify the result cache.\n     * values.cache.set(object, ['a', 'b']);\n     * values(object);\n     * // => ['a', 'b']\n     *\n     * // Replace `_.memoize.Cache`.\n     * _.memoize.Cache = WeakMap;\n     */\n    function memoize(func, resolver) {\n      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      var memoized = function() {\n        var args = arguments,\n            key = resolver ? resolver.apply(this, args) : args[0],\n            cache = memoized.cache;\n\n        if (cache.has(key)) {\n          return cache.get(key);\n        }\n        var result = func.apply(this, args);\n        memoized.cache = cache.set(key, result) || cache;\n        return result;\n      };\n      memoized.cache = new (memoize.Cache || MapCache);\n      return memoized;\n    }\n\n    // Expose `MapCache`.\n    memoize.Cache = MapCache;\n\n    /**\n     * Creates a function that negates the result of the predicate `func`. The\n     * `func` predicate is invoked with the `this` binding and arguments of the\n     * created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} predicate The predicate to negate.\n     * @returns {Function} Returns the new negated function.\n     * @example\n     *\n     * function isEven(n) {\n     *   return n % 2 == 0;\n     * }\n     *\n     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n     * // => [1, 3, 5]\n     */\n    function negate(predicate) {\n      if (typeof predicate != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      return function() {\n        var args = arguments;\n        switch (args.length) {\n          case 0: return !predicate.call(this);\n          case 1: return !predicate.call(this, args[0]);\n          case 2: return !predicate.call(this, args[0], args[1]);\n          case 3: return !predicate.call(this, args[0], args[1], args[2]);\n        }\n        return !predicate.apply(this, args);\n      };\n    }\n\n    /**\n     * Creates a function that is restricted to invoking `func` once. Repeat calls\n     * to the function return the value of the first invocation. The `func` is\n     * invoked with the `this` binding and arguments of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var initialize = _.once(createApplication);\n     * initialize();\n     * initialize();\n     * // => `createApplication` is invoked once\n     */\n    function once(func) {\n      return before(2, func);\n    }\n\n    /**\n     * Creates a function that invokes `func` with its arguments transformed.\n     *\n     * @static\n     * @since 4.0.0\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to wrap.\n     * @param {...(Function|Function[])} [transforms=[_.identity]]\n     *  The argument transforms.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * function doubled(n) {\n     *   return n * 2;\n     * }\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var func = _.overArgs(function(x, y) {\n     *   return [x, y];\n     * }, [square, doubled]);\n     *\n     * func(9, 3);\n     * // => [81, 6]\n     *\n     * func(10, 5);\n     * // => [100, 10]\n     */\n    var overArgs = castRest(function(func, transforms) {\n      transforms = (transforms.length == 1 && isArray(transforms[0]))\n        ? arrayMap(transforms[0], baseUnary(getIteratee()))\n        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));\n\n      var funcsLength = transforms.length;\n      return baseRest(function(args) {\n        var index = -1,\n            length = nativeMin(args.length, funcsLength);\n\n        while (++index < length) {\n          args[index] = transforms[index].call(this, args[index]);\n        }\n        return apply(func, this, args);\n      });\n    });\n\n    /**\n     * Creates a function that invokes `func` with `partials` prepended to the\n     * arguments it receives. This method is like `_.bind` except it does **not**\n     * alter the `this` binding.\n     *\n     * The `_.partial.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of partially\n     * applied functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.2.0\n     * @category Function\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * function greet(greeting, name) {\n     *   return greeting + ' ' + name;\n     * }\n     *\n     * var sayHelloTo = _.partial(greet, 'hello');\n     * sayHelloTo('fred');\n     * // => 'hello fred'\n     *\n     * // Partially applied with placeholders.\n     * var greetFred = _.partial(greet, _, 'fred');\n     * greetFred('hi');\n     * // => 'hi fred'\n     */\n    var partial = baseRest(function(func, partials) {\n      var holders = replaceHolders(partials, getHolder(partial));\n      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);\n    });\n\n    /**\n     * This method is like `_.partial` except that partially applied arguments\n     * are appended to the arguments it receives.\n     *\n     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of partially\n     * applied functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Function\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * function greet(greeting, name) {\n     *   return greeting + ' ' + name;\n     * }\n     *\n     * var greetFred = _.partialRight(greet, 'fred');\n     * greetFred('hi');\n     * // => 'hi fred'\n     *\n     * // Partially applied with placeholders.\n     * var sayHelloTo = _.partialRight(greet, 'hello', _);\n     * sayHelloTo('fred');\n     * // => 'hello fred'\n     */\n    var partialRight = baseRest(function(func, partials) {\n      var holders = replaceHolders(partials, getHolder(partialRight));\n      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);\n    });\n\n    /**\n     * Creates a function that invokes `func` with arguments arranged according\n     * to the specified `indexes` where the argument value at the first index is\n     * provided as the first argument, the argument value at the second index is\n     * provided as the second argument, and so on.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to rearrange arguments for.\n     * @param {...(number|number[])} indexes The arranged argument indexes.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var rearged = _.rearg(function(a, b, c) {\n     *   return [a, b, c];\n     * }, [2, 0, 1]);\n     *\n     * rearged('b', 'c', 'a')\n     * // => ['a', 'b', 'c']\n     */\n    var rearg = flatRest(function(func, indexes) {\n      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);\n    });\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of the\n     * created function and arguments from `start` and beyond provided as\n     * an array.\n     *\n     * **Note:** This method is based on the\n     * [rest parameter](https://mdn.io/rest_parameters).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var say = _.rest(function(what, names) {\n     *   return what + ' ' + _.initial(names).join(', ') +\n     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);\n     * });\n     *\n     * say('hello', 'fred', 'barney', 'pebbles');\n     * // => 'hello fred, barney, & pebbles'\n     */\n    function rest(func, start) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      start = start === undefined ? start : toInteger(start);\n      return baseRest(func, start);\n    }\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of the\n     * create function and an array of arguments much like\n     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).\n     *\n     * **Note:** This method is based on the\n     * [spread operator](https://mdn.io/spread_operator).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Function\n     * @param {Function} func The function to spread arguments over.\n     * @param {number} [start=0] The start position of the spread.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var say = _.spread(function(who, what) {\n     *   return who + ' says ' + what;\n     * });\n     *\n     * say(['fred', 'hello']);\n     * // => 'fred says hello'\n     *\n     * var numbers = Promise.all([\n     *   Promise.resolve(40),\n     *   Promise.resolve(36)\n     * ]);\n     *\n     * numbers.then(_.spread(function(x, y) {\n     *   return x + y;\n     * }));\n     * // => a Promise of 76\n     */\n    function spread(func, start) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      start = start == null ? 0 : nativeMax(toInteger(start), 0);\n      return baseRest(function(args) {\n        var array = args[start],\n            otherArgs = castSlice(args, 0, start);\n\n        if (array) {\n          arrayPush(otherArgs, array);\n        }\n        return apply(func, this, otherArgs);\n      });\n    }\n\n    /**\n     * Creates a throttled function that only invokes `func` at most once per\n     * every `wait` milliseconds. The throttled function comes with a `cancel`\n     * method to cancel delayed `func` invocations and a `flush` method to\n     * immediately invoke them. Provide `options` to indicate whether `func`\n     * should be invoked on the leading and/or trailing edge of the `wait`\n     * timeout. The `func` is invoked with the last arguments provided to the\n     * throttled function. Subsequent calls to the throttled function return the\n     * result of the last `func` invocation.\n     *\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\n     * invoked on the trailing edge of the timeout only if the throttled function\n     * is invoked more than once during the `wait` timeout.\n     *\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n     *\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n     * for details over the differences between `_.throttle` and `_.debounce`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to throttle.\n     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.leading=true]\n     *  Specify invoking on the leading edge of the timeout.\n     * @param {boolean} [options.trailing=true]\n     *  Specify invoking on the trailing edge of the timeout.\n     * @returns {Function} Returns the new throttled function.\n     * @example\n     *\n     * // Avoid excessively updating the position while scrolling.\n     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n     *\n     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n     * jQuery(element).on('click', throttled);\n     *\n     * // Cancel the trailing throttled invocation.\n     * jQuery(window).on('popstate', throttled.cancel);\n     */\n    function throttle(func, wait, options) {\n      var leading = true,\n          trailing = true;\n\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      if (isObject(options)) {\n        leading = 'leading' in options ? !!options.leading : leading;\n        trailing = 'trailing' in options ? !!options.trailing : trailing;\n      }\n      return debounce(func, wait, {\n        'leading': leading,\n        'maxWait': wait,\n        'trailing': trailing\n      });\n    }\n\n    /**\n     * Creates a function that accepts up to one argument, ignoring any\n     * additional arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to cap arguments for.\n     * @returns {Function} Returns the new capped function.\n     * @example\n     *\n     * _.map(['6', '8', '10'], _.unary(parseInt));\n     * // => [6, 8, 10]\n     */\n    function unary(func) {\n      return ary(func, 1);\n    }\n\n    /**\n     * Creates a function that provides `value` to `wrapper` as its first\n     * argument. Any additional arguments provided to the function are appended\n     * to those provided to the `wrapper`. The wrapper is invoked with the `this`\n     * binding of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {*} value The value to wrap.\n     * @param {Function} [wrapper=identity] The wrapper function.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var p = _.wrap(_.escape, function(func, text) {\n     *   return '<p>' + func(text) + '</p>';\n     * });\n     *\n     * p('fred, barney, & pebbles');\n     * // => '<p>fred, barney, &amp; pebbles</p>'\n     */\n    function wrap(value, wrapper) {\n      return partial(castFunction(wrapper), value);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Casts `value` as an array if it's not one.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.4.0\n     * @category Lang\n     * @param {*} value The value to inspect.\n     * @returns {Array} Returns the cast array.\n     * @example\n     *\n     * _.castArray(1);\n     * // => [1]\n     *\n     * _.castArray({ 'a': 1 });\n     * // => [{ 'a': 1 }]\n     *\n     * _.castArray('abc');\n     * // => ['abc']\n     *\n     * _.castArray(null);\n     * // => [null]\n     *\n     * _.castArray(undefined);\n     * // => [undefined]\n     *\n     * _.castArray();\n     * // => []\n     *\n     * var array = [1, 2, 3];\n     * console.log(_.castArray(array) === array);\n     * // => true\n     */\n    function castArray() {\n      if (!arguments.length) {\n        return [];\n      }\n      var value = arguments[0];\n      return isArray(value) ? value : [value];\n    }\n\n    /**\n     * Creates a shallow clone of `value`.\n     *\n     * **Note:** This method is loosely based on the\n     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n     * and supports cloning arrays, array buffers, booleans, date objects, maps,\n     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n     * arrays. The own enumerable properties of `arguments` objects are cloned\n     * as plain objects. An empty object is returned for uncloneable values such\n     * as error objects, functions, DOM nodes, and WeakMaps.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to clone.\n     * @returns {*} Returns the cloned value.\n     * @see _.cloneDeep\n     * @example\n     *\n     * var objects = [{ 'a': 1 }, { 'b': 2 }];\n     *\n     * var shallow = _.clone(objects);\n     * console.log(shallow[0] === objects[0]);\n     * // => true\n     */\n    function clone(value) {\n      return baseClone(value, CLONE_SYMBOLS_FLAG);\n    }\n\n    /**\n     * This method is like `_.clone` except that it accepts `customizer` which\n     * is invoked to produce the cloned value. If `customizer` returns `undefined`,\n     * cloning is handled by the method instead. The `customizer` is invoked with\n     * up to four arguments; (value [, index|key, object, stack]).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to clone.\n     * @param {Function} [customizer] The function to customize cloning.\n     * @returns {*} Returns the cloned value.\n     * @see _.cloneDeepWith\n     * @example\n     *\n     * function customizer(value) {\n     *   if (_.isElement(value)) {\n     *     return value.cloneNode(false);\n     *   }\n     * }\n     *\n     * var el = _.cloneWith(document.body, customizer);\n     *\n     * console.log(el === document.body);\n     * // => false\n     * console.log(el.nodeName);\n     * // => 'BODY'\n     * console.log(el.childNodes.length);\n     * // => 0\n     */\n    function cloneWith(value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);\n    }\n\n    /**\n     * This method is like `_.clone` except that it recursively clones `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Lang\n     * @param {*} value The value to recursively clone.\n     * @returns {*} Returns the deep cloned value.\n     * @see _.clone\n     * @example\n     *\n     * var objects = [{ 'a': 1 }, { 'b': 2 }];\n     *\n     * var deep = _.cloneDeep(objects);\n     * console.log(deep[0] === objects[0]);\n     * // => false\n     */\n    function cloneDeep(value) {\n      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n    }\n\n    /**\n     * This method is like `_.cloneWith` except that it recursively clones `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to recursively clone.\n     * @param {Function} [customizer] The function to customize cloning.\n     * @returns {*} Returns the deep cloned value.\n     * @see _.cloneWith\n     * @example\n     *\n     * function customizer(value) {\n     *   if (_.isElement(value)) {\n     *     return value.cloneNode(true);\n     *   }\n     * }\n     *\n     * var el = _.cloneDeepWith(document.body, customizer);\n     *\n     * console.log(el === document.body);\n     * // => false\n     * console.log(el.nodeName);\n     * // => 'BODY'\n     * console.log(el.childNodes.length);\n     * // => 20\n     */\n    function cloneDeepWith(value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);\n    }\n\n    /**\n     * Checks if `object` conforms to `source` by invoking the predicate\n     * properties of `source` with the corresponding property values of `object`.\n     *\n     * **Note:** This method is equivalent to `_.conforms` when `source` is\n     * partially applied.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.14.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {boolean} Returns `true` if `object` conforms, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     *\n     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });\n     * // => true\n     *\n     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });\n     * // => false\n     */\n    function conformsTo(object, source) {\n      return source == null || baseConformsTo(object, source, keys(source));\n    }\n\n    /**\n     * Performs a\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * comparison between two values to determine if they are equivalent.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     * var other = { 'a': 1 };\n     *\n     * _.eq(object, object);\n     * // => true\n     *\n     * _.eq(object, other);\n     * // => false\n     *\n     * _.eq('a', 'a');\n     * // => true\n     *\n     * _.eq('a', Object('a'));\n     * // => false\n     *\n     * _.eq(NaN, NaN);\n     * // => true\n     */\n    function eq(value, other) {\n      return value === other || (value !== value && other !== other);\n    }\n\n    /**\n     * Checks if `value` is greater than `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than `other`,\n     *  else `false`.\n     * @see _.lt\n     * @example\n     *\n     * _.gt(3, 1);\n     * // => true\n     *\n     * _.gt(3, 3);\n     * // => false\n     *\n     * _.gt(1, 3);\n     * // => false\n     */\n    var gt = createRelationalOperation(baseGt);\n\n    /**\n     * Checks if `value` is greater than or equal to `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than or equal to\n     *  `other`, else `false`.\n     * @see _.lte\n     * @example\n     *\n     * _.gte(3, 1);\n     * // => true\n     *\n     * _.gte(3, 3);\n     * // => true\n     *\n     * _.gte(1, 3);\n     * // => false\n     */\n    var gte = createRelationalOperation(function(value, other) {\n      return value >= other;\n    });\n\n    /**\n     * Checks if `value` is likely an `arguments` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n     *  else `false`.\n     * @example\n     *\n     * _.isArguments(function() { return arguments; }());\n     * // => true\n     *\n     * _.isArguments([1, 2, 3]);\n     * // => false\n     */\n    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n        !propertyIsEnumerable.call(value, 'callee');\n    };\n\n    /**\n     * Checks if `value` is classified as an `Array` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n     * @example\n     *\n     * _.isArray([1, 2, 3]);\n     * // => true\n     *\n     * _.isArray(document.body.children);\n     * // => false\n     *\n     * _.isArray('abc');\n     * // => false\n     *\n     * _.isArray(_.noop);\n     * // => false\n     */\n    var isArray = Array.isArray;\n\n    /**\n     * Checks if `value` is classified as an `ArrayBuffer` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.\n     * @example\n     *\n     * _.isArrayBuffer(new ArrayBuffer(2));\n     * // => true\n     *\n     * _.isArrayBuffer(new Array(2));\n     * // => false\n     */\n    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;\n\n    /**\n     * Checks if `value` is array-like. A value is considered array-like if it's\n     * not a function and has a `value.length` that's an integer greater than or\n     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n     * @example\n     *\n     * _.isArrayLike([1, 2, 3]);\n     * // => true\n     *\n     * _.isArrayLike(document.body.children);\n     * // => true\n     *\n     * _.isArrayLike('abc');\n     * // => true\n     *\n     * _.isArrayLike(_.noop);\n     * // => false\n     */\n    function isArrayLike(value) {\n      return value != null && isLength(value.length) && !isFunction(value);\n    }\n\n    /**\n     * This method is like `_.isArrayLike` except that it also checks if `value`\n     * is an object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array-like object,\n     *  else `false`.\n     * @example\n     *\n     * _.isArrayLikeObject([1, 2, 3]);\n     * // => true\n     *\n     * _.isArrayLikeObject(document.body.children);\n     * // => true\n     *\n     * _.isArrayLikeObject('abc');\n     * // => false\n     *\n     * _.isArrayLikeObject(_.noop);\n     * // => false\n     */\n    function isArrayLikeObject(value) {\n      return isObjectLike(value) && isArrayLike(value);\n    }\n\n    /**\n     * Checks if `value` is classified as a boolean primitive or object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.\n     * @example\n     *\n     * _.isBoolean(false);\n     * // => true\n     *\n     * _.isBoolean(null);\n     * // => false\n     */\n    function isBoolean(value) {\n      return value === true || value === false ||\n        (isObjectLike(value) && baseGetTag(value) == boolTag);\n    }\n\n    /**\n     * Checks if `value` is a buffer.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n     * @example\n     *\n     * _.isBuffer(new Buffer(2));\n     * // => true\n     *\n     * _.isBuffer(new Uint8Array(2));\n     * // => false\n     */\n    var isBuffer = nativeIsBuffer || stubFalse;\n\n    /**\n     * Checks if `value` is classified as a `Date` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n     * @example\n     *\n     * _.isDate(new Date);\n     * // => true\n     *\n     * _.isDate('Mon April 23 2012');\n     * // => false\n     */\n    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;\n\n    /**\n     * Checks if `value` is likely a DOM element.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.\n     * @example\n     *\n     * _.isElement(document.body);\n     * // => true\n     *\n     * _.isElement('<body>');\n     * // => false\n     */\n    function isElement(value) {\n      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);\n    }\n\n    /**\n     * Checks if `value` is an empty object, collection, map, or set.\n     *\n     * Objects are considered empty if they have no own enumerable string keyed\n     * properties.\n     *\n     * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n     * jQuery-like collections are considered empty if they have a `length` of `0`.\n     * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n     * @example\n     *\n     * _.isEmpty(null);\n     * // => true\n     *\n     * _.isEmpty(true);\n     * // => true\n     *\n     * _.isEmpty(1);\n     * // => true\n     *\n     * _.isEmpty([1, 2, 3]);\n     * // => false\n     *\n     * _.isEmpty({ 'a': 1 });\n     * // => false\n     */\n    function isEmpty(value) {\n      if (value == null) {\n        return true;\n      }\n      if (isArrayLike(value) &&\n          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n            isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n        return !value.length;\n      }\n      var tag = getTag(value);\n      if (tag == mapTag || tag == setTag) {\n        return !value.size;\n      }\n      if (isPrototype(value)) {\n        return !baseKeys(value).length;\n      }\n      for (var key in value) {\n        if (hasOwnProperty.call(value, key)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /**\n     * Performs a deep comparison between two values to determine if they are\n     * equivalent.\n     *\n     * **Note:** This method supports comparing arrays, array buffers, booleans,\n     * date objects, error objects, maps, numbers, `Object` objects, regexes,\n     * sets, strings, symbols, and typed arrays. `Object` objects are compared\n     * by their own, not inherited, enumerable properties. Functions and DOM\n     * nodes are compared by strict equality, i.e. `===`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     * var other = { 'a': 1 };\n     *\n     * _.isEqual(object, other);\n     * // => true\n     *\n     * object === other;\n     * // => false\n     */\n    function isEqual(value, other) {\n      return baseIsEqual(value, other);\n    }\n\n    /**\n     * This method is like `_.isEqual` except that it accepts `customizer` which\n     * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n     * are handled by the method instead. The `customizer` is invoked with up to\n     * six arguments: (objValue, othValue [, index|key, object, other, stack]).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * function isGreeting(value) {\n     *   return /^h(?:i|ello)$/.test(value);\n     * }\n     *\n     * function customizer(objValue, othValue) {\n     *   if (isGreeting(objValue) && isGreeting(othValue)) {\n     *     return true;\n     *   }\n     * }\n     *\n     * var array = ['hello', 'goodbye'];\n     * var other = ['hi', 'goodbye'];\n     *\n     * _.isEqualWith(array, other, customizer);\n     * // => true\n     */\n    function isEqualWith(value, other, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      var result = customizer ? customizer(value, other) : undefined;\n      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;\n    }\n\n    /**\n     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,\n     * `SyntaxError`, `TypeError`, or `URIError` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.\n     * @example\n     *\n     * _.isError(new Error);\n     * // => true\n     *\n     * _.isError(Error);\n     * // => false\n     */\n    function isError(value) {\n      if (!isObjectLike(value)) {\n        return false;\n      }\n      var tag = baseGetTag(value);\n      return tag == errorTag || tag == domExcTag ||\n        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));\n    }\n\n    /**\n     * Checks if `value` is a finite primitive number.\n     *\n     * **Note:** This method is based on\n     * [`Number.isFinite`](https://mdn.io/Number/isFinite).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.\n     * @example\n     *\n     * _.isFinite(3);\n     * // => true\n     *\n     * _.isFinite(Number.MIN_VALUE);\n     * // => true\n     *\n     * _.isFinite(Infinity);\n     * // => false\n     *\n     * _.isFinite('3');\n     * // => false\n     */\n    function isFinite(value) {\n      return typeof value == 'number' && nativeIsFinite(value);\n    }\n\n    /**\n     * Checks if `value` is classified as a `Function` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n     * @example\n     *\n     * _.isFunction(_);\n     * // => true\n     *\n     * _.isFunction(/abc/);\n     * // => false\n     */\n    function isFunction(value) {\n      if (!isObject(value)) {\n        return false;\n      }\n      // The use of `Object#toString` avoids issues with the `typeof` operator\n      // in Safari 9 which returns 'object' for typed arrays and other constructors.\n      var tag = baseGetTag(value);\n      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n    }\n\n    /**\n     * Checks if `value` is an integer.\n     *\n     * **Note:** This method is based on\n     * [`Number.isInteger`](https://mdn.io/Number/isInteger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.\n     * @example\n     *\n     * _.isInteger(3);\n     * // => true\n     *\n     * _.isInteger(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isInteger(Infinity);\n     * // => false\n     *\n     * _.isInteger('3');\n     * // => false\n     */\n    function isInteger(value) {\n      return typeof value == 'number' && value == toInteger(value);\n    }\n\n    /**\n     * Checks if `value` is a valid array-like length.\n     *\n     * **Note:** This method is loosely based on\n     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n     * @example\n     *\n     * _.isLength(3);\n     * // => true\n     *\n     * _.isLength(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isLength(Infinity);\n     * // => false\n     *\n     * _.isLength('3');\n     * // => false\n     */\n    function isLength(value) {\n      return typeof value == 'number' &&\n        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n    }\n\n    /**\n     * Checks if `value` is the\n     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n     * @example\n     *\n     * _.isObject({});\n     * // => true\n     *\n     * _.isObject([1, 2, 3]);\n     * // => true\n     *\n     * _.isObject(_.noop);\n     * // => true\n     *\n     * _.isObject(null);\n     * // => false\n     */\n    function isObject(value) {\n      var type = typeof value;\n      return value != null && (type == 'object' || type == 'function');\n    }\n\n    /**\n     * Checks if `value` is object-like. A value is object-like if it's not `null`\n     * and has a `typeof` result of \"object\".\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n     * @example\n     *\n     * _.isObjectLike({});\n     * // => true\n     *\n     * _.isObjectLike([1, 2, 3]);\n     * // => true\n     *\n     * _.isObjectLike(_.noop);\n     * // => false\n     *\n     * _.isObjectLike(null);\n     * // => false\n     */\n    function isObjectLike(value) {\n      return value != null && typeof value == 'object';\n    }\n\n    /**\n     * Checks if `value` is classified as a `Map` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n     * @example\n     *\n     * _.isMap(new Map);\n     * // => true\n     *\n     * _.isMap(new WeakMap);\n     * // => false\n     */\n    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;\n\n    /**\n     * Performs a partial deep comparison between `object` and `source` to\n     * determine if `object` contains equivalent property values.\n     *\n     * **Note:** This method is equivalent to `_.matches` when `source` is\n     * partially applied.\n     *\n     * Partial comparisons will match empty array and empty object `source`\n     * values against any array or object value, respectively. See `_.isEqual`\n     * for a list of supported value comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     *\n     * _.isMatch(object, { 'b': 2 });\n     * // => true\n     *\n     * _.isMatch(object, { 'b': 1 });\n     * // => false\n     */\n    function isMatch(object, source) {\n      return object === source || baseIsMatch(object, source, getMatchData(source));\n    }\n\n    /**\n     * This method is like `_.isMatch` except that it accepts `customizer` which\n     * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n     * are handled by the method instead. The `customizer` is invoked with five\n     * arguments: (objValue, srcValue, index|key, object, source).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     * @example\n     *\n     * function isGreeting(value) {\n     *   return /^h(?:i|ello)$/.test(value);\n     * }\n     *\n     * function customizer(objValue, srcValue) {\n     *   if (isGreeting(objValue) && isGreeting(srcValue)) {\n     *     return true;\n     *   }\n     * }\n     *\n     * var object = { 'greeting': 'hello' };\n     * var source = { 'greeting': 'hi' };\n     *\n     * _.isMatchWith(object, source, customizer);\n     * // => true\n     */\n    function isMatchWith(object, source, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseIsMatch(object, source, getMatchData(source), customizer);\n    }\n\n    /**\n     * Checks if `value` is `NaN`.\n     *\n     * **Note:** This method is based on\n     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as\n     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for\n     * `undefined` and other non-number values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n     * @example\n     *\n     * _.isNaN(NaN);\n     * // => true\n     *\n     * _.isNaN(new Number(NaN));\n     * // => true\n     *\n     * isNaN(undefined);\n     * // => true\n     *\n     * _.isNaN(undefined);\n     * // => false\n     */\n    function isNaN(value) {\n      // An `NaN` primitive is the only value that is not equal to itself.\n      // Perform the `toStringTag` check first to avoid errors with some\n      // ActiveX objects in IE.\n      return isNumber(value) && value != +value;\n    }\n\n    /**\n     * Checks if `value` is a pristine native function.\n     *\n     * **Note:** This method can't reliably detect native functions in the presence\n     * of the core-js package because core-js circumvents this kind of detection.\n     * Despite multiple requests, the core-js maintainer has made it clear: any\n     * attempt to fix the detection will be obstructed. As a result, we're left\n     * with little choice but to throw an error. Unfortunately, this also affects\n     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),\n     * which rely on core-js.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a native function,\n     *  else `false`.\n     * @example\n     *\n     * _.isNative(Array.prototype.push);\n     * // => true\n     *\n     * _.isNative(_);\n     * // => false\n     */\n    function isNative(value) {\n      if (isMaskable(value)) {\n        throw new Error(CORE_ERROR_TEXT);\n      }\n      return baseIsNative(value);\n    }\n\n    /**\n     * Checks if `value` is `null`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.\n     * @example\n     *\n     * _.isNull(null);\n     * // => true\n     *\n     * _.isNull(void 0);\n     * // => false\n     */\n    function isNull(value) {\n      return value === null;\n    }\n\n    /**\n     * Checks if `value` is `null` or `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.\n     * @example\n     *\n     * _.isNil(null);\n     * // => true\n     *\n     * _.isNil(void 0);\n     * // => true\n     *\n     * _.isNil(NaN);\n     * // => false\n     */\n    function isNil(value) {\n      return value == null;\n    }\n\n    /**\n     * Checks if `value` is classified as a `Number` primitive or object.\n     *\n     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\n     * classified as numbers, use the `_.isFinite` method.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a number, else `false`.\n     * @example\n     *\n     * _.isNumber(3);\n     * // => true\n     *\n     * _.isNumber(Number.MIN_VALUE);\n     * // => true\n     *\n     * _.isNumber(Infinity);\n     * // => true\n     *\n     * _.isNumber('3');\n     * // => false\n     */\n    function isNumber(value) {\n      return typeof value == 'number' ||\n        (isObjectLike(value) && baseGetTag(value) == numberTag);\n    }\n\n    /**\n     * Checks if `value` is a plain object, that is, an object created by the\n     * `Object` constructor or one with a `[[Prototype]]` of `null`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.8.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * _.isPlainObject(new Foo);\n     * // => false\n     *\n     * _.isPlainObject([1, 2, 3]);\n     * // => false\n     *\n     * _.isPlainObject({ 'x': 0, 'y': 0 });\n     * // => true\n     *\n     * _.isPlainObject(Object.create(null));\n     * // => true\n     */\n    function isPlainObject(value) {\n      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n        return false;\n      }\n      var proto = getPrototype(value);\n      if (proto === null) {\n        return true;\n      }\n      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n      return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n        funcToString.call(Ctor) == objectCtorString;\n    }\n\n    /**\n     * Checks if `value` is classified as a `RegExp` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n     * @example\n     *\n     * _.isRegExp(/abc/);\n     * // => true\n     *\n     * _.isRegExp('/abc/');\n     * // => false\n     */\n    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;\n\n    /**\n     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754\n     * double precision number which isn't the result of a rounded unsafe integer.\n     *\n     * **Note:** This method is based on\n     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.\n     * @example\n     *\n     * _.isSafeInteger(3);\n     * // => true\n     *\n     * _.isSafeInteger(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isSafeInteger(Infinity);\n     * // => false\n     *\n     * _.isSafeInteger('3');\n     * // => false\n     */\n    function isSafeInteger(value) {\n      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;\n    }\n\n    /**\n     * Checks if `value` is classified as a `Set` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n     * @example\n     *\n     * _.isSet(new Set);\n     * // => true\n     *\n     * _.isSet(new WeakSet);\n     * // => false\n     */\n    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;\n\n    /**\n     * Checks if `value` is classified as a `String` primitive or object.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n     * @example\n     *\n     * _.isString('abc');\n     * // => true\n     *\n     * _.isString(1);\n     * // => false\n     */\n    function isString(value) {\n      return typeof value == 'string' ||\n        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\n    }\n\n    /**\n     * Checks if `value` is classified as a `Symbol` primitive or object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n     * @example\n     *\n     * _.isSymbol(Symbol.iterator);\n     * // => true\n     *\n     * _.isSymbol('abc');\n     * // => false\n     */\n    function isSymbol(value) {\n      return typeof value == 'symbol' ||\n        (isObjectLike(value) && baseGetTag(value) == symbolTag);\n    }\n\n    /**\n     * Checks if `value` is classified as a typed array.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n     * @example\n     *\n     * _.isTypedArray(new Uint8Array);\n     * // => true\n     *\n     * _.isTypedArray([]);\n     * // => false\n     */\n    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n    /**\n     * Checks if `value` is `undefined`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n     * @example\n     *\n     * _.isUndefined(void 0);\n     * // => true\n     *\n     * _.isUndefined(null);\n     * // => false\n     */\n    function isUndefined(value) {\n      return value === undefined;\n    }\n\n    /**\n     * Checks if `value` is classified as a `WeakMap` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.\n     * @example\n     *\n     * _.isWeakMap(new WeakMap);\n     * // => true\n     *\n     * _.isWeakMap(new Map);\n     * // => false\n     */\n    function isWeakMap(value) {\n      return isObjectLike(value) && getTag(value) == weakMapTag;\n    }\n\n    /**\n     * Checks if `value` is classified as a `WeakSet` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.\n     * @example\n     *\n     * _.isWeakSet(new WeakSet);\n     * // => true\n     *\n     * _.isWeakSet(new Set);\n     * // => false\n     */\n    function isWeakSet(value) {\n      return isObjectLike(value) && baseGetTag(value) == weakSetTag;\n    }\n\n    /**\n     * Checks if `value` is less than `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than `other`,\n     *  else `false`.\n     * @see _.gt\n     * @example\n     *\n     * _.lt(1, 3);\n     * // => true\n     *\n     * _.lt(3, 3);\n     * // => false\n     *\n     * _.lt(3, 1);\n     * // => false\n     */\n    var lt = createRelationalOperation(baseLt);\n\n    /**\n     * Checks if `value` is less than or equal to `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than or equal to\n     *  `other`, else `false`.\n     * @see _.gte\n     * @example\n     *\n     * _.lte(1, 3);\n     * // => true\n     *\n     * _.lte(3, 3);\n     * // => true\n     *\n     * _.lte(3, 1);\n     * // => false\n     */\n    var lte = createRelationalOperation(function(value, other) {\n      return value <= other;\n    });\n\n    /**\n     * Converts `value` to an array.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {Array} Returns the converted array.\n     * @example\n     *\n     * _.toArray({ 'a': 1, 'b': 2 });\n     * // => [1, 2]\n     *\n     * _.toArray('abc');\n     * // => ['a', 'b', 'c']\n     *\n     * _.toArray(1);\n     * // => []\n     *\n     * _.toArray(null);\n     * // => []\n     */\n    function toArray(value) {\n      if (!value) {\n        return [];\n      }\n      if (isArrayLike(value)) {\n        return isString(value) ? stringToArray(value) : copyArray(value);\n      }\n      if (symIterator && value[symIterator]) {\n        return iteratorToArray(value[symIterator]());\n      }\n      var tag = getTag(value),\n          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);\n\n      return func(value);\n    }\n\n    /**\n     * Converts `value` to a finite number.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.12.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted number.\n     * @example\n     *\n     * _.toFinite(3.2);\n     * // => 3.2\n     *\n     * _.toFinite(Number.MIN_VALUE);\n     * // => 5e-324\n     *\n     * _.toFinite(Infinity);\n     * // => 1.7976931348623157e+308\n     *\n     * _.toFinite('3.2');\n     * // => 3.2\n     */\n    function toFinite(value) {\n      if (!value) {\n        return value === 0 ? value : 0;\n      }\n      value = toNumber(value);\n      if (value === INFINITY || value === -INFINITY) {\n        var sign = (value < 0 ? -1 : 1);\n        return sign * MAX_INTEGER;\n      }\n      return value === value ? value : 0;\n    }\n\n    /**\n     * Converts `value` to an integer.\n     *\n     * **Note:** This method is loosely based on\n     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toInteger(3.2);\n     * // => 3\n     *\n     * _.toInteger(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toInteger(Infinity);\n     * // => 1.7976931348623157e+308\n     *\n     * _.toInteger('3.2');\n     * // => 3\n     */\n    function toInteger(value) {\n      var result = toFinite(value),\n          remainder = result % 1;\n\n      return result === result ? (remainder ? result - remainder : result) : 0;\n    }\n\n    /**\n     * Converts `value` to an integer suitable for use as the length of an\n     * array-like object.\n     *\n     * **Note:** This method is based on\n     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toLength(3.2);\n     * // => 3\n     *\n     * _.toLength(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toLength(Infinity);\n     * // => 4294967295\n     *\n     * _.toLength('3.2');\n     * // => 3\n     */\n    function toLength(value) {\n      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;\n    }\n\n    /**\n     * Converts `value` to a number.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to process.\n     * @returns {number} Returns the number.\n     * @example\n     *\n     * _.toNumber(3.2);\n     * // => 3.2\n     *\n     * _.toNumber(Number.MIN_VALUE);\n     * // => 5e-324\n     *\n     * _.toNumber(Infinity);\n     * // => Infinity\n     *\n     * _.toNumber('3.2');\n     * // => 3.2\n     */\n    function toNumber(value) {\n      if (typeof value == 'number') {\n        return value;\n      }\n      if (isSymbol(value)) {\n        return NAN;\n      }\n      if (isObject(value)) {\n        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n        value = isObject(other) ? (other + '') : other;\n      }\n      if (typeof value != 'string') {\n        return value === 0 ? value : +value;\n      }\n      value = baseTrim(value);\n      var isBinary = reIsBinary.test(value);\n      return (isBinary || reIsOctal.test(value))\n        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n        : (reIsBadHex.test(value) ? NAN : +value);\n    }\n\n    /**\n     * Converts `value` to a plain object flattening inherited enumerable string\n     * keyed properties of `value` to own properties of the plain object.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {Object} Returns the converted plain object.\n     * @example\n     *\n     * function Foo() {\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.assign({ 'a': 1 }, new Foo);\n     * // => { 'a': 1, 'b': 2 }\n     *\n     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n     * // => { 'a': 1, 'b': 2, 'c': 3 }\n     */\n    function toPlainObject(value) {\n      return copyObject(value, keysIn(value));\n    }\n\n    /**\n     * Converts `value` to a safe integer. A safe integer can be compared and\n     * represented correctly.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toSafeInteger(3.2);\n     * // => 3\n     *\n     * _.toSafeInteger(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toSafeInteger(Infinity);\n     * // => 9007199254740991\n     *\n     * _.toSafeInteger('3.2');\n     * // => 3\n     */\n    function toSafeInteger(value) {\n      return value\n        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)\n        : (value === 0 ? value : 0);\n    }\n\n    /**\n     * Converts `value` to a string. An empty string is returned for `null`\n     * and `undefined` values. The sign of `-0` is preserved.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.toString(null);\n     * // => ''\n     *\n     * _.toString(-0);\n     * // => '-0'\n     *\n     * _.toString([1, 2, 3]);\n     * // => '1,2,3'\n     */\n    function toString(value) {\n      return value == null ? '' : baseToString(value);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Assigns own enumerable string keyed properties of source objects to the\n     * destination object. Source objects are applied from left to right.\n     * Subsequent sources overwrite property assignments of previous sources.\n     *\n     * **Note:** This method mutates `object` and is loosely based on\n     * [`Object.assign`](https://mdn.io/Object/assign).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.10.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.assignIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * function Bar() {\n     *   this.c = 3;\n     * }\n     *\n     * Foo.prototype.b = 2;\n     * Bar.prototype.d = 4;\n     *\n     * _.assign({ 'a': 0 }, new Foo, new Bar);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    var assign = createAssigner(function(object, source) {\n      if (isPrototype(source) || isArrayLike(source)) {\n        copyObject(source, keys(source), object);\n        return;\n      }\n      for (var key in source) {\n        if (hasOwnProperty.call(source, key)) {\n          assignValue(object, key, source[key]);\n        }\n      }\n    });\n\n    /**\n     * This method is like `_.assign` except that it iterates over own and\n     * inherited source properties.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias extend\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.assign\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * function Bar() {\n     *   this.c = 3;\n     * }\n     *\n     * Foo.prototype.b = 2;\n     * Bar.prototype.d = 4;\n     *\n     * _.assignIn({ 'a': 0 }, new Foo, new Bar);\n     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }\n     */\n    var assignIn = createAssigner(function(object, source) {\n      copyObject(source, keysIn(source), object);\n    });\n\n    /**\n     * This method is like `_.assignIn` except that it accepts `customizer`\n     * which is invoked to produce the assigned values. If `customizer` returns\n     * `undefined`, assignment is handled by the method instead. The `customizer`\n     * is invoked with five arguments: (objValue, srcValue, key, object, source).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias extendWith\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @see _.assignWith\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   return _.isUndefined(objValue) ? srcValue : objValue;\n     * }\n     *\n     * var defaults = _.partialRight(_.assignInWith, customizer);\n     *\n     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {\n      copyObject(source, keysIn(source), object, customizer);\n    });\n\n    /**\n     * This method is like `_.assign` except that it accepts `customizer`\n     * which is invoked to produce the assigned values. If `customizer` returns\n     * `undefined`, assignment is handled by the method instead. The `customizer`\n     * is invoked with five arguments: (objValue, srcValue, key, object, source).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @see _.assignInWith\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   return _.isUndefined(objValue) ? srcValue : objValue;\n     * }\n     *\n     * var defaults = _.partialRight(_.assignWith, customizer);\n     *\n     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {\n      copyObject(source, keys(source), object, customizer);\n    });\n\n    /**\n     * Creates an array of values corresponding to `paths` of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Array} Returns the picked values.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n     *\n     * _.at(object, ['a[0].b.c', 'a[1]']);\n     * // => [3, 4]\n     */\n    var at = flatRest(baseAt);\n\n    /**\n     * Creates an object that inherits from the `prototype` object. If a\n     * `properties` object is given, its own enumerable string keyed properties\n     * are assigned to the created object.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.3.0\n     * @category Object\n     * @param {Object} prototype The object to inherit from.\n     * @param {Object} [properties] The properties to assign to the object.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * function Shape() {\n     *   this.x = 0;\n     *   this.y = 0;\n     * }\n     *\n     * function Circle() {\n     *   Shape.call(this);\n     * }\n     *\n     * Circle.prototype = _.create(Shape.prototype, {\n     *   'constructor': Circle\n     * });\n     *\n     * var circle = new Circle;\n     * circle instanceof Circle;\n     * // => true\n     *\n     * circle instanceof Shape;\n     * // => true\n     */\n    function create(prototype, properties) {\n      var result = baseCreate(prototype);\n      return properties == null ? result : baseAssign(result, properties);\n    }\n\n    /**\n     * Assigns own and inherited enumerable string keyed properties of source\n     * objects to the destination object for all destination properties that\n     * resolve to `undefined`. Source objects are applied from left to right.\n     * Once a property is set, additional values of the same property are ignored.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.defaultsDeep\n     * @example\n     *\n     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var defaults = baseRest(function(object, sources) {\n      object = Object(object);\n\n      var index = -1;\n      var length = sources.length;\n      var guard = length > 2 ? sources[2] : undefined;\n\n      if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n        length = 1;\n      }\n\n      while (++index < length) {\n        var source = sources[index];\n        var props = keysIn(source);\n        var propsIndex = -1;\n        var propsLength = props.length;\n\n        while (++propsIndex < propsLength) {\n          var key = props[propsIndex];\n          var value = object[key];\n\n          if (value === undefined ||\n              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n            object[key] = source[key];\n          }\n        }\n      }\n\n      return object;\n    });\n\n    /**\n     * This method is like `_.defaults` except that it recursively assigns\n     * default properties.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.defaults\n     * @example\n     *\n     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });\n     * // => { 'a': { 'b': 2, 'c': 3 } }\n     */\n    var defaultsDeep = baseRest(function(args) {\n      args.push(undefined, customDefaultsMerge);\n      return apply(mergeWith, undefined, args);\n    });\n\n    /**\n     * This method is like `_.find` except that it returns the key of the first\n     * element `predicate` returns truthy for instead of the element itself.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {string|undefined} Returns the key of the matched element,\n     *  else `undefined`.\n     * @example\n     *\n     * var users = {\n     *   'barney':  { 'age': 36, 'active': true },\n     *   'fred':    { 'age': 40, 'active': false },\n     *   'pebbles': { 'age': 1,  'active': true }\n     * };\n     *\n     * _.findKey(users, function(o) { return o.age < 40; });\n     * // => 'barney' (iteration order is not guaranteed)\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findKey(users, { 'age': 1, 'active': true });\n     * // => 'pebbles'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findKey(users, ['active', false]);\n     * // => 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findKey(users, 'active');\n     * // => 'barney'\n     */\n    function findKey(object, predicate) {\n      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);\n    }\n\n    /**\n     * This method is like `_.findKey` except that it iterates over elements of\n     * a collection in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {string|undefined} Returns the key of the matched element,\n     *  else `undefined`.\n     * @example\n     *\n     * var users = {\n     *   'barney':  { 'age': 36, 'active': true },\n     *   'fred':    { 'age': 40, 'active': false },\n     *   'pebbles': { 'age': 1,  'active': true }\n     * };\n     *\n     * _.findLastKey(users, function(o) { return o.age < 40; });\n     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findLastKey(users, { 'age': 36, 'active': true });\n     * // => 'barney'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findLastKey(users, ['active', false]);\n     * // => 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findLastKey(users, 'active');\n     * // => 'pebbles'\n     */\n    function findLastKey(object, predicate) {\n      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);\n    }\n\n    /**\n     * Iterates over own and inherited enumerable string keyed properties of an\n     * object and invokes `iteratee` for each property. The iteratee is invoked\n     * with three arguments: (value, key, object). Iteratee functions may exit\n     * iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forInRight\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forIn(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).\n     */\n    function forIn(object, iteratee) {\n      return object == null\n        ? object\n        : baseFor(object, getIteratee(iteratee, 3), keysIn);\n    }\n\n    /**\n     * This method is like `_.forIn` except that it iterates over properties of\n     * `object` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forInRight(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.\n     */\n    function forInRight(object, iteratee) {\n      return object == null\n        ? object\n        : baseForRight(object, getIteratee(iteratee, 3), keysIn);\n    }\n\n    /**\n     * Iterates over own enumerable string keyed properties of an object and\n     * invokes `iteratee` for each property. The iteratee is invoked with three\n     * arguments: (value, key, object). Iteratee functions may exit iteration\n     * early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forOwnRight\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forOwn(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n     */\n    function forOwn(object, iteratee) {\n      return object && baseForOwn(object, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.forOwn` except that it iterates over properties of\n     * `object` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forOwn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forOwnRight(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.\n     */\n    function forOwnRight(object, iteratee) {\n      return object && baseForOwnRight(object, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * Creates an array of function property names from own enumerable properties\n     * of `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns the function names.\n     * @see _.functionsIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = _.constant('a');\n     *   this.b = _.constant('b');\n     * }\n     *\n     * Foo.prototype.c = _.constant('c');\n     *\n     * _.functions(new Foo);\n     * // => ['a', 'b']\n     */\n    function functions(object) {\n      return object == null ? [] : baseFunctions(object, keys(object));\n    }\n\n    /**\n     * Creates an array of function property names from own and inherited\n     * enumerable properties of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns the function names.\n     * @see _.functions\n     * @example\n     *\n     * function Foo() {\n     *   this.a = _.constant('a');\n     *   this.b = _.constant('b');\n     * }\n     *\n     * Foo.prototype.c = _.constant('c');\n     *\n     * _.functionsIn(new Foo);\n     * // => ['a', 'b', 'c']\n     */\n    function functionsIn(object) {\n      return object == null ? [] : baseFunctions(object, keysIn(object));\n    }\n\n    /**\n     * Gets the value at `path` of `object`. If the resolved value is\n     * `undefined`, the `defaultValue` is returned in its place.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to get.\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.get(object, 'a[0].b.c');\n     * // => 3\n     *\n     * _.get(object, ['a', '0', 'b', 'c']);\n     * // => 3\n     *\n     * _.get(object, 'a.b.c', 'default');\n     * // => 'default'\n     */\n    function get(object, path, defaultValue) {\n      var result = object == null ? undefined : baseGet(object, path);\n      return result === undefined ? defaultValue : result;\n    }\n\n    /**\n     * Checks if `path` is a direct property of `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     * @example\n     *\n     * var object = { 'a': { 'b': 2 } };\n     * var other = _.create({ 'a': _.create({ 'b': 2 }) });\n     *\n     * _.has(object, 'a');\n     * // => true\n     *\n     * _.has(object, 'a.b');\n     * // => true\n     *\n     * _.has(object, ['a', 'b']);\n     * // => true\n     *\n     * _.has(other, 'a');\n     * // => false\n     */\n    function has(object, path) {\n      return object != null && hasPath(object, path, baseHas);\n    }\n\n    /**\n     * Checks if `path` is a direct or inherited property of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     * @example\n     *\n     * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n     *\n     * _.hasIn(object, 'a');\n     * // => true\n     *\n     * _.hasIn(object, 'a.b');\n     * // => true\n     *\n     * _.hasIn(object, ['a', 'b']);\n     * // => true\n     *\n     * _.hasIn(object, 'b');\n     * // => false\n     */\n    function hasIn(object, path) {\n      return object != null && hasPath(object, path, baseHasIn);\n    }\n\n    /**\n     * Creates an object composed of the inverted keys and values of `object`.\n     * If `object` contains duplicate values, subsequent values overwrite\n     * property assignments of previous values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.7.0\n     * @category Object\n     * @param {Object} object The object to invert.\n     * @returns {Object} Returns the new inverted object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };\n     *\n     * _.invert(object);\n     * // => { '1': 'c', '2': 'b' }\n     */\n    var invert = createInverter(function(result, value, key) {\n      if (value != null &&\n          typeof value.toString != 'function') {\n        value = nativeObjectToString.call(value);\n      }\n\n      result[value] = key;\n    }, constant(identity));\n\n    /**\n     * This method is like `_.invert` except that the inverted object is generated\n     * from the results of running each element of `object` thru `iteratee`. The\n     * corresponding inverted value of each inverted key is an array of keys\n     * responsible for generating the inverted value. The iteratee is invoked\n     * with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.1.0\n     * @category Object\n     * @param {Object} object The object to invert.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Object} Returns the new inverted object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };\n     *\n     * _.invertBy(object);\n     * // => { '1': ['a', 'c'], '2': ['b'] }\n     *\n     * _.invertBy(object, function(value) {\n     *   return 'group' + value;\n     * });\n     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }\n     */\n    var invertBy = createInverter(function(result, value, key) {\n      if (value != null &&\n          typeof value.toString != 'function') {\n        value = nativeObjectToString.call(value);\n      }\n\n      if (hasOwnProperty.call(result, value)) {\n        result[value].push(key);\n      } else {\n        result[value] = [key];\n      }\n    }, getIteratee);\n\n    /**\n     * Invokes the method at `path` of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {*} Returns the result of the invoked method.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };\n     *\n     * _.invoke(object, 'a[0].b.c.slice', 1, 3);\n     * // => [2, 3]\n     */\n    var invoke = baseRest(baseInvoke);\n\n    /**\n     * Creates an array of the own enumerable property names of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects. See the\n     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n     * for more details.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.keys(new Foo);\n     * // => ['a', 'b'] (iteration order is not guaranteed)\n     *\n     * _.keys('hi');\n     * // => ['0', '1']\n     */\n    function keys(object) {\n      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n    }\n\n    /**\n     * Creates an array of the own and inherited enumerable property names of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.keysIn(new Foo);\n     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n     */\n    function keysIn(object) {\n      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n    }\n\n    /**\n     * The opposite of `_.mapValues`; this method creates an object with the\n     * same values as `object` and keys generated by running each own enumerable\n     * string keyed property of `object` thru `iteratee`. The iteratee is invoked\n     * with three arguments: (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns the new mapped object.\n     * @see _.mapValues\n     * @example\n     *\n     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {\n     *   return key + value;\n     * });\n     * // => { 'a1': 1, 'b2': 2 }\n     */\n    function mapKeys(object, iteratee) {\n      var result = {};\n      iteratee = getIteratee(iteratee, 3);\n\n      baseForOwn(object, function(value, key, object) {\n        baseAssignValue(result, iteratee(value, key, object), value);\n      });\n      return result;\n    }\n\n    /**\n     * Creates an object with the same keys as `object` and values generated\n     * by running each own enumerable string keyed property of `object` thru\n     * `iteratee`. The iteratee is invoked with three arguments:\n     * (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns the new mapped object.\n     * @see _.mapKeys\n     * @example\n     *\n     * var users = {\n     *   'fred':    { 'user': 'fred',    'age': 40 },\n     *   'pebbles': { 'user': 'pebbles', 'age': 1 }\n     * };\n     *\n     * _.mapValues(users, function(o) { return o.age; });\n     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.mapValues(users, 'age');\n     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n     */\n    function mapValues(object, iteratee) {\n      var result = {};\n      iteratee = getIteratee(iteratee, 3);\n\n      baseForOwn(object, function(value, key, object) {\n        baseAssignValue(result, key, iteratee(value, key, object));\n      });\n      return result;\n    }\n\n    /**\n     * This method is like `_.assign` except that it recursively merges own and\n     * inherited enumerable string keyed properties of source objects into the\n     * destination object. Source properties that resolve to `undefined` are\n     * skipped if a destination value exists. Array and plain object properties\n     * are merged recursively. Other objects and value types are overridden by\n     * assignment. Source objects are applied from left to right. Subsequent\n     * sources overwrite property assignments of previous sources.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {\n     *   'a': [{ 'b': 2 }, { 'd': 4 }]\n     * };\n     *\n     * var other = {\n     *   'a': [{ 'c': 3 }, { 'e': 5 }]\n     * };\n     *\n     * _.merge(object, other);\n     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n     */\n    var merge = createAssigner(function(object, source, srcIndex) {\n      baseMerge(object, source, srcIndex);\n    });\n\n    /**\n     * This method is like `_.merge` except that it accepts `customizer` which\n     * is invoked to produce the merged values of the destination and source\n     * properties. If `customizer` returns `undefined`, merging is handled by the\n     * method instead. The `customizer` is invoked with six arguments:\n     * (objValue, srcValue, key, object, source, stack).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} customizer The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   if (_.isArray(objValue)) {\n     *     return objValue.concat(srcValue);\n     *   }\n     * }\n     *\n     * var object = { 'a': [1], 'b': [2] };\n     * var other = { 'a': [3], 'b': [4] };\n     *\n     * _.mergeWith(object, other, customizer);\n     * // => { 'a': [1, 3], 'b': [2, 4] }\n     */\n    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {\n      baseMerge(object, source, srcIndex, customizer);\n    });\n\n    /**\n     * The opposite of `_.pick`; this method creates an object composed of the\n     * own and inherited enumerable property paths of `object` that are not omitted.\n     *\n     * **Note:** This method is considerably slower than `_.pick`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {...(string|string[])} [paths] The property paths to omit.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.omit(object, ['a', 'c']);\n     * // => { 'b': '2' }\n     */\n    var omit = flatRest(function(object, paths) {\n      var result = {};\n      if (object == null) {\n        return result;\n      }\n      var isDeep = false;\n      paths = arrayMap(paths, function(path) {\n        path = castPath(path, object);\n        isDeep || (isDeep = path.length > 1);\n        return path;\n      });\n      copyObject(object, getAllKeysIn(object), result);\n      if (isDeep) {\n        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);\n      }\n      var length = paths.length;\n      while (length--) {\n        baseUnset(result, paths[length]);\n      }\n      return result;\n    });\n\n    /**\n     * The opposite of `_.pickBy`; this method creates an object composed of\n     * the own and inherited enumerable string keyed properties of `object` that\n     * `predicate` doesn't return truthy for. The predicate is invoked with two\n     * arguments: (value, key).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {Function} [predicate=_.identity] The function invoked per property.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.omitBy(object, _.isNumber);\n     * // => { 'b': '2' }\n     */\n    function omitBy(object, predicate) {\n      return pickBy(object, negate(getIteratee(predicate)));\n    }\n\n    /**\n     * Creates an object composed of the picked `object` properties.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.pick(object, ['a', 'c']);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    var pick = flatRest(function(object, paths) {\n      return object == null ? {} : basePick(object, paths);\n    });\n\n    /**\n     * Creates an object composed of the `object` properties `predicate` returns\n     * truthy for. The predicate is invoked with two arguments: (value, key).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {Function} [predicate=_.identity] The function invoked per property.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.pickBy(object, _.isNumber);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    function pickBy(object, predicate) {\n      if (object == null) {\n        return {};\n      }\n      var props = arrayMap(getAllKeysIn(object), function(prop) {\n        return [prop];\n      });\n      predicate = getIteratee(predicate);\n      return basePickBy(object, props, function(value, path) {\n        return predicate(value, path[0]);\n      });\n    }\n\n    /**\n     * This method is like `_.get` except that if the resolved value is a\n     * function it's invoked with the `this` binding of its parent object and\n     * its result is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to resolve.\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };\n     *\n     * _.result(object, 'a[0].b.c1');\n     * // => 3\n     *\n     * _.result(object, 'a[0].b.c2');\n     * // => 4\n     *\n     * _.result(object, 'a[0].b.c3', 'default');\n     * // => 'default'\n     *\n     * _.result(object, 'a[0].b.c3', _.constant('default'));\n     * // => 'default'\n     */\n    function result(object, path, defaultValue) {\n      path = castPath(path, object);\n\n      var index = -1,\n          length = path.length;\n\n      // Ensure the loop is entered when path is empty.\n      if (!length) {\n        length = 1;\n        object = undefined;\n      }\n      while (++index < length) {\n        var value = object == null ? undefined : object[toKey(path[index])];\n        if (value === undefined) {\n          index = length;\n          value = defaultValue;\n        }\n        object = isFunction(value) ? value.call(object) : value;\n      }\n      return object;\n    }\n\n    /**\n     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,\n     * it's created. Arrays are created for missing index properties while objects\n     * are created for all other missing properties. Use `_.setWith` to customize\n     * `path` creation.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.set(object, 'a[0].b.c', 4);\n     * console.log(object.a[0].b.c);\n     * // => 4\n     *\n     * _.set(object, ['x', '0', 'y', 'z'], 5);\n     * console.log(object.x[0].y.z);\n     * // => 5\n     */\n    function set(object, path, value) {\n      return object == null ? object : baseSet(object, path, value);\n    }\n\n    /**\n     * This method is like `_.set` except that it accepts `customizer` which is\n     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\n     * path creation is handled by the method instead. The `customizer` is invoked\n     * with three arguments: (nsValue, key, nsObject).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {};\n     *\n     * _.setWith(object, '[0][1]', 'a', Object);\n     * // => { '0': { '1': 'a' } }\n     */\n    function setWith(object, path, value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return object == null ? object : baseSet(object, path, value, customizer);\n    }\n\n    /**\n     * Creates an array of own enumerable string keyed-value pairs for `object`\n     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its\n     * entries are returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias entries\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the key-value pairs.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.toPairs(new Foo);\n     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)\n     */\n    var toPairs = createToPairs(keys);\n\n    /**\n     * Creates an array of own and inherited enumerable string keyed-value pairs\n     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map\n     * or set, its entries are returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias entriesIn\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the key-value pairs.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.toPairsIn(new Foo);\n     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)\n     */\n    var toPairsIn = createToPairs(keysIn);\n\n    /**\n     * An alternative to `_.reduce`; this method transforms `object` to a new\n     * `accumulator` object which is the result of running each of its own\n     * enumerable string keyed properties thru `iteratee`, with each invocation\n     * potentially mutating the `accumulator` object. If `accumulator` is not\n     * provided, a new object with the same `[[Prototype]]` will be used. The\n     * iteratee is invoked with four arguments: (accumulator, value, key, object).\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The custom accumulator value.\n     * @returns {*} Returns the accumulated value.\n     * @example\n     *\n     * _.transform([2, 3, 4], function(result, n) {\n     *   result.push(n *= n);\n     *   return n % 2 == 0;\n     * }, []);\n     * // => [4, 9]\n     *\n     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n     *   (result[value] || (result[value] = [])).push(key);\n     * }, {});\n     * // => { '1': ['a', 'c'], '2': ['b'] }\n     */\n    function transform(object, iteratee, accumulator) {\n      var isArr = isArray(object),\n          isArrLike = isArr || isBuffer(object) || isTypedArray(object);\n\n      iteratee = getIteratee(iteratee, 4);\n      if (accumulator == null) {\n        var Ctor = object && object.constructor;\n        if (isArrLike) {\n          accumulator = isArr ? new Ctor : [];\n        }\n        else if (isObject(object)) {\n          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};\n        }\n        else {\n          accumulator = {};\n        }\n      }\n      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {\n        return iteratee(accumulator, value, index, object);\n      });\n      return accumulator;\n    }\n\n    /**\n     * Removes the property at `path` of `object`.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to unset.\n     * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 7 } }] };\n     * _.unset(object, 'a[0].b.c');\n     * // => true\n     *\n     * console.log(object);\n     * // => { 'a': [{ 'b': {} }] };\n     *\n     * _.unset(object, ['a', '0', 'b', 'c']);\n     * // => true\n     *\n     * console.log(object);\n     * // => { 'a': [{ 'b': {} }] };\n     */\n    function unset(object, path) {\n      return object == null ? true : baseUnset(object, path);\n    }\n\n    /**\n     * This method is like `_.set` except that accepts `updater` to produce the\n     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`\n     * is invoked with one argument: (value).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {Function} updater The function to produce the updated value.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.update(object, 'a[0].b.c', function(n) { return n * n; });\n     * console.log(object.a[0].b.c);\n     * // => 9\n     *\n     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });\n     * console.log(object.x[0].y.z);\n     * // => 0\n     */\n    function update(object, path, updater) {\n      return object == null ? object : baseUpdate(object, path, castFunction(updater));\n    }\n\n    /**\n     * This method is like `_.update` except that it accepts `customizer` which is\n     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\n     * path creation is handled by the method instead. The `customizer` is invoked\n     * with three arguments: (nsValue, key, nsObject).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {Function} updater The function to produce the updated value.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {};\n     *\n     * _.updateWith(object, '[0][1]', _.constant('a'), Object);\n     * // => { '0': { '1': 'a' } }\n     */\n    function updateWith(object, path, updater, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);\n    }\n\n    /**\n     * Creates an array of the own enumerable string keyed property values of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property values.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.values(new Foo);\n     * // => [1, 2] (iteration order is not guaranteed)\n     *\n     * _.values('hi');\n     * // => ['h', 'i']\n     */\n    function values(object) {\n      return object == null ? [] : baseValues(object, keys(object));\n    }\n\n    /**\n     * Creates an array of the own and inherited enumerable string keyed property\n     * values of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property values.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.valuesIn(new Foo);\n     * // => [1, 2, 3] (iteration order is not guaranteed)\n     */\n    function valuesIn(object) {\n      return object == null ? [] : baseValues(object, keysIn(object));\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Clamps `number` within the inclusive `lower` and `upper` bounds.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Number\n     * @param {number} number The number to clamp.\n     * @param {number} [lower] The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the clamped number.\n     * @example\n     *\n     * _.clamp(-10, -5, 5);\n     * // => -5\n     *\n     * _.clamp(10, -5, 5);\n     * // => 5\n     */\n    function clamp(number, lower, upper) {\n      if (upper === undefined) {\n        upper = lower;\n        lower = undefined;\n      }\n      if (upper !== undefined) {\n        upper = toNumber(upper);\n        upper = upper === upper ? upper : 0;\n      }\n      if (lower !== undefined) {\n        lower = toNumber(lower);\n        lower = lower === lower ? lower : 0;\n      }\n      return baseClamp(toNumber(number), lower, upper);\n    }\n\n    /**\n     * Checks if `n` is between `start` and up to, but not including, `end`. If\n     * `end` is not specified, it's set to `start` with `start` then set to `0`.\n     * If `start` is greater than `end` the params are swapped to support\n     * negative ranges.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.3.0\n     * @category Number\n     * @param {number} number The number to check.\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n     * @see _.range, _.rangeRight\n     * @example\n     *\n     * _.inRange(3, 2, 4);\n     * // => true\n     *\n     * _.inRange(4, 8);\n     * // => true\n     *\n     * _.inRange(4, 2);\n     * // => false\n     *\n     * _.inRange(2, 2);\n     * // => false\n     *\n     * _.inRange(1.2, 2);\n     * // => true\n     *\n     * _.inRange(5.2, 4);\n     * // => false\n     *\n     * _.inRange(-3, -2, -6);\n     * // => true\n     */\n    function inRange(number, start, end) {\n      start = toFinite(start);\n      if (end === undefined) {\n        end = start;\n        start = 0;\n      } else {\n        end = toFinite(end);\n      }\n      number = toNumber(number);\n      return baseInRange(number, start, end);\n    }\n\n    /**\n     * Produces a random number between the inclusive `lower` and `upper` bounds.\n     * If only one argument is provided a number between `0` and the given number\n     * is returned. If `floating` is `true`, or either `lower` or `upper` are\n     * floats, a floating-point number is returned instead of an integer.\n     *\n     * **Note:** JavaScript follows the IEEE-754 standard for resolving\n     * floating-point values which can produce unexpected results.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.7.0\n     * @category Number\n     * @param {number} [lower=0] The lower bound.\n     * @param {number} [upper=1] The upper bound.\n     * @param {boolean} [floating] Specify returning a floating-point number.\n     * @returns {number} Returns the random number.\n     * @example\n     *\n     * _.random(0, 5);\n     * // => an integer between 0 and 5\n     *\n     * _.random(5);\n     * // => also an integer between 0 and 5\n     *\n     * _.random(5, true);\n     * // => a floating-point number between 0 and 5\n     *\n     * _.random(1.2, 5.2);\n     * // => a floating-point number between 1.2 and 5.2\n     */\n    function random(lower, upper, floating) {\n      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {\n        upper = floating = undefined;\n      }\n      if (floating === undefined) {\n        if (typeof upper == 'boolean') {\n          floating = upper;\n          upper = undefined;\n        }\n        else if (typeof lower == 'boolean') {\n          floating = lower;\n          lower = undefined;\n        }\n      }\n      if (lower === undefined && upper === undefined) {\n        lower = 0;\n        upper = 1;\n      }\n      else {\n        lower = toFinite(lower);\n        if (upper === undefined) {\n          upper = lower;\n          lower = 0;\n        } else {\n          upper = toFinite(upper);\n        }\n      }\n      if (lower > upper) {\n        var temp = lower;\n        lower = upper;\n        upper = temp;\n      }\n      if (floating || lower % 1 || upper % 1) {\n        var rand = nativeRandom();\n        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);\n      }\n      return baseRandom(lower, upper);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the camel cased string.\n     * @example\n     *\n     * _.camelCase('Foo Bar');\n     * // => 'fooBar'\n     *\n     * _.camelCase('--foo-bar--');\n     * // => 'fooBar'\n     *\n     * _.camelCase('__FOO_BAR__');\n     * // => 'fooBar'\n     */\n    var camelCase = createCompounder(function(result, word, index) {\n      word = word.toLowerCase();\n      return result + (index ? capitalize(word) : word);\n    });\n\n    /**\n     * Converts the first character of `string` to upper case and the remaining\n     * to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to capitalize.\n     * @returns {string} Returns the capitalized string.\n     * @example\n     *\n     * _.capitalize('FRED');\n     * // => 'Fred'\n     */\n    function capitalize(string) {\n      return upperFirst(toString(string).toLowerCase());\n    }\n\n    /**\n     * Deburrs `string` by converting\n     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\n     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)\n     * letters to basic Latin letters and removing\n     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to deburr.\n     * @returns {string} Returns the deburred string.\n     * @example\n     *\n     * _.deburr('déjà vu');\n     * // => 'deja vu'\n     */\n    function deburr(string) {\n      string = toString(string);\n      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');\n    }\n\n    /**\n     * Checks if `string` ends with the given target string.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {string} [target] The string to search for.\n     * @param {number} [position=string.length] The position to search up to.\n     * @returns {boolean} Returns `true` if `string` ends with `target`,\n     *  else `false`.\n     * @example\n     *\n     * _.endsWith('abc', 'c');\n     * // => true\n     *\n     * _.endsWith('abc', 'b');\n     * // => false\n     *\n     * _.endsWith('abc', 'b', 2);\n     * // => true\n     */\n    function endsWith(string, target, position) {\n      string = toString(string);\n      target = baseToString(target);\n\n      var length = string.length;\n      position = position === undefined\n        ? length\n        : baseClamp(toInteger(position), 0, length);\n\n      var end = position;\n      position -= target.length;\n      return position >= 0 && string.slice(position, end) == target;\n    }\n\n    /**\n     * Converts the characters \"&\", \"<\", \">\", '\"', and \"'\" in `string` to their\n     * corresponding HTML entities.\n     *\n     * **Note:** No other characters are escaped. To escape additional\n     * characters use a third-party library like [_he_](https://mths.be/he).\n     *\n     * Though the \">\" character is escaped for symmetry, characters like\n     * \">\" and \"/\" don't need escaping in HTML and have no special meaning\n     * unless they're part of a tag or unquoted attribute value. See\n     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\n     * (under \"semi-related fun fact\") for more details.\n     *\n     * When working with HTML you should always\n     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce\n     * XSS vectors.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to escape.\n     * @returns {string} Returns the escaped string.\n     * @example\n     *\n     * _.escape('fred, barney, & pebbles');\n     * // => 'fred, barney, &amp; pebbles'\n     */\n    function escape(string) {\n      string = toString(string);\n      return (string && reHasUnescapedHtml.test(string))\n        ? string.replace(reUnescapedHtml, escapeHtmlChar)\n        : string;\n    }\n\n    /**\n     * Escapes the `RegExp` special characters \"^\", \"$\", \"\\\", \".\", \"*\", \"+\",\n     * \"?\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", and \"|\" in `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to escape.\n     * @returns {string} Returns the escaped string.\n     * @example\n     *\n     * _.escapeRegExp('[lodash](https://lodash.com/)');\n     * // => '\\[lodash\\]\\(https://lodash\\.com/\\)'\n     */\n    function escapeRegExp(string) {\n      string = toString(string);\n      return (string && reHasRegExpChar.test(string))\n        ? string.replace(reRegExpChar, '\\\\$&')\n        : string;\n    }\n\n    /**\n     * Converts `string` to\n     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the kebab cased string.\n     * @example\n     *\n     * _.kebabCase('Foo Bar');\n     * // => 'foo-bar'\n     *\n     * _.kebabCase('fooBar');\n     * // => 'foo-bar'\n     *\n     * _.kebabCase('__FOO_BAR__');\n     * // => 'foo-bar'\n     */\n    var kebabCase = createCompounder(function(result, word, index) {\n      return result + (index ? '-' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Converts `string`, as space separated words, to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the lower cased string.\n     * @example\n     *\n     * _.lowerCase('--Foo-Bar--');\n     * // => 'foo bar'\n     *\n     * _.lowerCase('fooBar');\n     * // => 'foo bar'\n     *\n     * _.lowerCase('__FOO_BAR__');\n     * // => 'foo bar'\n     */\n    var lowerCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Converts the first character of `string` to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.lowerFirst('Fred');\n     * // => 'fred'\n     *\n     * _.lowerFirst('FRED');\n     * // => 'fRED'\n     */\n    var lowerFirst = createCaseFirst('toLowerCase');\n\n    /**\n     * Pads `string` on the left and right sides if it's shorter than `length`.\n     * Padding characters are truncated if they can't be evenly divided by `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.pad('abc', 8);\n     * // => '  abc   '\n     *\n     * _.pad('abc', 8, '_-');\n     * // => '_-abc_-_'\n     *\n     * _.pad('abc', 3);\n     * // => 'abc'\n     */\n    function pad(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      if (!length || strLength >= length) {\n        return string;\n      }\n      var mid = (length - strLength) / 2;\n      return (\n        createPadding(nativeFloor(mid), chars) +\n        string +\n        createPadding(nativeCeil(mid), chars)\n      );\n    }\n\n    /**\n     * Pads `string` on the right side if it's shorter than `length`. Padding\n     * characters are truncated if they exceed `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.padEnd('abc', 6);\n     * // => 'abc   '\n     *\n     * _.padEnd('abc', 6, '_-');\n     * // => 'abc_-_'\n     *\n     * _.padEnd('abc', 3);\n     * // => 'abc'\n     */\n    function padEnd(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      return (length && strLength < length)\n        ? (string + createPadding(length - strLength, chars))\n        : string;\n    }\n\n    /**\n     * Pads `string` on the left side if it's shorter than `length`. Padding\n     * characters are truncated if they exceed `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.padStart('abc', 6);\n     * // => '   abc'\n     *\n     * _.padStart('abc', 6, '_-');\n     * // => '_-_abc'\n     *\n     * _.padStart('abc', 3);\n     * // => 'abc'\n     */\n    function padStart(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      return (length && strLength < length)\n        ? (createPadding(length - strLength, chars) + string)\n        : string;\n    }\n\n    /**\n     * Converts `string` to an integer of the specified radix. If `radix` is\n     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a\n     * hexadecimal, in which case a `radix` of `16` is used.\n     *\n     * **Note:** This method aligns with the\n     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category String\n     * @param {string} string The string to convert.\n     * @param {number} [radix=10] The radix to interpret `value` by.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.parseInt('08');\n     * // => 8\n     *\n     * _.map(['6', '08', '10'], _.parseInt);\n     * // => [6, 8, 10]\n     */\n    function parseInt(string, radix, guard) {\n      if (guard || radix == null) {\n        radix = 0;\n      } else if (radix) {\n        radix = +radix;\n      }\n      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);\n    }\n\n    /**\n     * Repeats the given string `n` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to repeat.\n     * @param {number} [n=1] The number of times to repeat the string.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the repeated string.\n     * @example\n     *\n     * _.repeat('*', 3);\n     * // => '***'\n     *\n     * _.repeat('abc', 2);\n     * // => 'abcabc'\n     *\n     * _.repeat('abc', 0);\n     * // => ''\n     */\n    function repeat(string, n, guard) {\n      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {\n        n = 1;\n      } else {\n        n = toInteger(n);\n      }\n      return baseRepeat(toString(string), n);\n    }\n\n    /**\n     * Replaces matches for `pattern` in `string` with `replacement`.\n     *\n     * **Note:** This method is based on\n     * [`String#replace`](https://mdn.io/String/replace).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to modify.\n     * @param {RegExp|string} pattern The pattern to replace.\n     * @param {Function|string} replacement The match replacement.\n     * @returns {string} Returns the modified string.\n     * @example\n     *\n     * _.replace('Hi Fred', 'Fred', 'Barney');\n     * // => 'Hi Barney'\n     */\n    function replace() {\n      var args = arguments,\n          string = toString(args[0]);\n\n      return args.length < 3 ? string : string.replace(args[1], args[2]);\n    }\n\n    /**\n     * Converts `string` to\n     * [snake case](https://en.wikipedia.org/wiki/Snake_case).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the snake cased string.\n     * @example\n     *\n     * _.snakeCase('Foo Bar');\n     * // => 'foo_bar'\n     *\n     * _.snakeCase('fooBar');\n     * // => 'foo_bar'\n     *\n     * _.snakeCase('--FOO-BAR--');\n     * // => 'foo_bar'\n     */\n    var snakeCase = createCompounder(function(result, word, index) {\n      return result + (index ? '_' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Splits `string` by `separator`.\n     *\n     * **Note:** This method is based on\n     * [`String#split`](https://mdn.io/String/split).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to split.\n     * @param {RegExp|string} separator The separator pattern to split by.\n     * @param {number} [limit] The length to truncate results to.\n     * @returns {Array} Returns the string segments.\n     * @example\n     *\n     * _.split('a-b-c', '-', 2);\n     * // => ['a', 'b']\n     */\n    function split(string, separator, limit) {\n      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {\n        separator = limit = undefined;\n      }\n      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;\n      if (!limit) {\n        return [];\n      }\n      string = toString(string);\n      if (string && (\n            typeof separator == 'string' ||\n            (separator != null && !isRegExp(separator))\n          )) {\n        separator = baseToString(separator);\n        if (!separator && hasUnicode(string)) {\n          return castSlice(stringToArray(string), 0, limit);\n        }\n      }\n      return string.split(separator, limit);\n    }\n\n    /**\n     * Converts `string` to\n     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.1.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the start cased string.\n     * @example\n     *\n     * _.startCase('--foo-bar--');\n     * // => 'Foo Bar'\n     *\n     * _.startCase('fooBar');\n     * // => 'Foo Bar'\n     *\n     * _.startCase('__FOO_BAR__');\n     * // => 'FOO BAR'\n     */\n    var startCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + upperFirst(word);\n    });\n\n    /**\n     * Checks if `string` starts with the given target string.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {string} [target] The string to search for.\n     * @param {number} [position=0] The position to search from.\n     * @returns {boolean} Returns `true` if `string` starts with `target`,\n     *  else `false`.\n     * @example\n     *\n     * _.startsWith('abc', 'a');\n     * // => true\n     *\n     * _.startsWith('abc', 'b');\n     * // => false\n     *\n     * _.startsWith('abc', 'b', 1);\n     * // => true\n     */\n    function startsWith(string, target, position) {\n      string = toString(string);\n      position = position == null\n        ? 0\n        : baseClamp(toInteger(position), 0, string.length);\n\n      target = baseToString(target);\n      return string.slice(position, position + target.length) == target;\n    }\n\n    /**\n     * Creates a compiled template function that can interpolate data properties\n     * in \"interpolate\" delimiters, HTML-escape interpolated data properties in\n     * \"escape\" delimiters, and execute JavaScript in \"evaluate\" delimiters. Data\n     * properties may be accessed as free variables in the template. If a setting\n     * object is given, it takes precedence over `_.templateSettings` values.\n     *\n     * **Note:** In the development build `_.template` utilizes\n     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)\n     * for easier debugging.\n     *\n     * For more information on precompiling templates see\n     * [lodash's custom builds documentation](https://lodash.com/custom-builds).\n     *\n     * For more information on Chrome extension sandboxes see\n     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The template string.\n     * @param {Object} [options={}] The options object.\n     * @param {RegExp} [options.escape=_.templateSettings.escape]\n     *  The HTML \"escape\" delimiter.\n     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]\n     *  The \"evaluate\" delimiter.\n     * @param {Object} [options.imports=_.templateSettings.imports]\n     *  An object to import into the template as free variables.\n     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]\n     *  The \"interpolate\" delimiter.\n     * @param {string} [options.sourceURL='lodash.templateSources[n]']\n     *  The sourceURL of the compiled template.\n     * @param {string} [options.variable='obj']\n     *  The data object variable name.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the compiled template function.\n     * @example\n     *\n     * // Use the \"interpolate\" delimiter to create a compiled template.\n     * var compiled = _.template('hello <%= user %>!');\n     * compiled({ 'user': 'fred' });\n     * // => 'hello fred!'\n     *\n     * // Use the HTML \"escape\" delimiter to escape data property values.\n     * var compiled = _.template('<b><%- value %></b>');\n     * compiled({ 'value': '<script>' });\n     * // => '<b>&lt;script&gt;</b>'\n     *\n     * // Use the \"evaluate\" delimiter to execute JavaScript and generate HTML.\n     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');\n     * compiled({ 'users': ['fred', 'barney'] });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // Use the internal `print` function in \"evaluate\" delimiters.\n     * var compiled = _.template('<% print(\"hello \" + user); %>!');\n     * compiled({ 'user': 'barney' });\n     * // => 'hello barney!'\n     *\n     * // Use the ES template literal delimiter as an \"interpolate\" delimiter.\n     * // Disable support by replacing the \"interpolate\" delimiter.\n     * var compiled = _.template('hello ${ user }!');\n     * compiled({ 'user': 'pebbles' });\n     * // => 'hello pebbles!'\n     *\n     * // Use backslashes to treat delimiters as plain text.\n     * var compiled = _.template('<%= \"\\\\<%- value %\\\\>\" %>');\n     * compiled({ 'value': 'ignored' });\n     * // => '<%- value %>'\n     *\n     * // Use the `imports` option to import `jQuery` as `jq`.\n     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';\n     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });\n     * compiled({ 'users': ['fred', 'barney'] });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // Use the `sourceURL` option to specify a custom sourceURL for the template.\n     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });\n     * compiled(data);\n     * // => Find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector.\n     *\n     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.\n     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });\n     * compiled.source;\n     * // => function(data) {\n     * //   var __t, __p = '';\n     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';\n     * //   return __p;\n     * // }\n     *\n     * // Use custom template delimiters.\n     * _.templateSettings.interpolate = /{{([\\s\\S]+?)}}/g;\n     * var compiled = _.template('hello {{ user }}!');\n     * compiled({ 'user': 'mustache' });\n     * // => 'hello mustache!'\n     *\n     * // Use the `source` property to inline compiled templates for meaningful\n     * // line numbers in error messages and stack traces.\n     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\\\n     *   var JST = {\\\n     *     \"main\": ' + _.template(mainText).source + '\\\n     *   };\\\n     * ');\n     */\n    function template(string, options, guard) {\n      // Based on John Resig's `tmpl` implementation\n      // (http://ejohn.org/blog/javascript-micro-templating/)\n      // and Laura Doktorova's doT.js (https://github.com/olado/doT).\n      var settings = lodash.templateSettings;\n\n      if (guard && isIterateeCall(string, options, guard)) {\n        options = undefined;\n      }\n      string = toString(string);\n      options = assignInWith({}, options, settings, customDefaultsAssignIn);\n\n      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),\n          importsKeys = keys(imports),\n          importsValues = baseValues(imports, importsKeys);\n\n      var isEscaping,\n          isEvaluating,\n          index = 0,\n          interpolate = options.interpolate || reNoMatch,\n          source = \"__p += '\";\n\n      // Compile the regexp to match each delimiter.\n      var reDelimiters = RegExp(\n        (options.escape || reNoMatch).source + '|' +\n        interpolate.source + '|' +\n        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +\n        (options.evaluate || reNoMatch).source + '|$'\n      , 'g');\n\n      // Use a sourceURL for easier debugging.\n      // The sourceURL gets injected into the source that's eval-ed, so be careful\n      // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in\n      // and escape the comment, thus injecting code that gets evaled.\n      var sourceURL = '//# sourceURL=' +\n        (hasOwnProperty.call(options, 'sourceURL')\n          ? (options.sourceURL + '').replace(/\\s/g, ' ')\n          : ('lodash.templateSources[' + (++templateCounter) + ']')\n        ) + '\\n';\n\n      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {\n        interpolateValue || (interpolateValue = esTemplateValue);\n\n        // Escape characters that can't be included in string literals.\n        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);\n\n        // Replace delimiters with snippets.\n        if (escapeValue) {\n          isEscaping = true;\n          source += \"' +\\n__e(\" + escapeValue + \") +\\n'\";\n        }\n        if (evaluateValue) {\n          isEvaluating = true;\n          source += \"';\\n\" + evaluateValue + \";\\n__p += '\";\n        }\n        if (interpolateValue) {\n          source += \"' +\\n((__t = (\" + interpolateValue + \")) == null ? '' : __t) +\\n'\";\n        }\n        index = offset + match.length;\n\n        // The JS engine embedded in Adobe products needs `match` returned in\n        // order to produce the correct `offset` value.\n        return match;\n      });\n\n      source += \"';\\n\";\n\n      // If `variable` is not specified wrap a with-statement around the generated\n      // code to add the data object to the top of the scope chain.\n      var variable = hasOwnProperty.call(options, 'variable') && options.variable;\n      if (!variable) {\n        source = 'with (obj) {\\n' + source + '\\n}\\n';\n      }\n      // Throw an error if a forbidden character was found in `variable`, to prevent\n      // potential command injection attacks.\n      else if (reForbiddenIdentifierChars.test(variable)) {\n        throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);\n      }\n\n      // Cleanup code by stripping empty strings.\n      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)\n        .replace(reEmptyStringMiddle, '$1')\n        .replace(reEmptyStringTrailing, '$1;');\n\n      // Frame code as the function body.\n      source = 'function(' + (variable || 'obj') + ') {\\n' +\n        (variable\n          ? ''\n          : 'obj || (obj = {});\\n'\n        ) +\n        \"var __t, __p = ''\" +\n        (isEscaping\n           ? ', __e = _.escape'\n           : ''\n        ) +\n        (isEvaluating\n          ? ', __j = Array.prototype.join;\\n' +\n            \"function print() { __p += __j.call(arguments, '') }\\n\"\n          : ';\\n'\n        ) +\n        source +\n        'return __p\\n}';\n\n      var result = attempt(function() {\n        return Function(importsKeys, sourceURL + 'return ' + source)\n          .apply(undefined, importsValues);\n      });\n\n      // Provide the compiled function's source by its `toString` method or\n      // the `source` property as a convenience for inlining compiled templates.\n      result.source = source;\n      if (isError(result)) {\n        throw result;\n      }\n      return result;\n    }\n\n    /**\n     * Converts `string`, as a whole, to lower case just like\n     * [String#toLowerCase](https://mdn.io/toLowerCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the lower cased string.\n     * @example\n     *\n     * _.toLower('--Foo-Bar--');\n     * // => '--foo-bar--'\n     *\n     * _.toLower('fooBar');\n     * // => 'foobar'\n     *\n     * _.toLower('__FOO_BAR__');\n     * // => '__foo_bar__'\n     */\n    function toLower(value) {\n      return toString(value).toLowerCase();\n    }\n\n    /**\n     * Converts `string`, as a whole, to upper case just like\n     * [String#toUpperCase](https://mdn.io/toUpperCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the upper cased string.\n     * @example\n     *\n     * _.toUpper('--foo-bar--');\n     * // => '--FOO-BAR--'\n     *\n     * _.toUpper('fooBar');\n     * // => 'FOOBAR'\n     *\n     * _.toUpper('__foo_bar__');\n     * // => '__FOO_BAR__'\n     */\n    function toUpper(value) {\n      return toString(value).toUpperCase();\n    }\n\n    /**\n     * Removes leading and trailing whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trim('  abc  ');\n     * // => 'abc'\n     *\n     * _.trim('-_-abc-_-', '_-');\n     * // => 'abc'\n     *\n     * _.map(['  foo  ', '  bar  '], _.trim);\n     * // => ['foo', 'bar']\n     */\n    function trim(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return baseTrim(string);\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          chrSymbols = stringToArray(chars),\n          start = charsStartIndex(strSymbols, chrSymbols),\n          end = charsEndIndex(strSymbols, chrSymbols) + 1;\n\n      return castSlice(strSymbols, start, end).join('');\n    }\n\n    /**\n     * Removes trailing whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trimEnd('  abc  ');\n     * // => '  abc'\n     *\n     * _.trimEnd('-_-abc-_-', '_-');\n     * // => '-_-abc'\n     */\n    function trimEnd(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.slice(0, trimmedEndIndex(string) + 1);\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;\n\n      return castSlice(strSymbols, 0, end).join('');\n    }\n\n    /**\n     * Removes leading whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trimStart('  abc  ');\n     * // => 'abc  '\n     *\n     * _.trimStart('-_-abc-_-', '_-');\n     * // => 'abc-_-'\n     */\n    function trimStart(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.replace(reTrimStart, '');\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          start = charsStartIndex(strSymbols, stringToArray(chars));\n\n      return castSlice(strSymbols, start).join('');\n    }\n\n    /**\n     * Truncates `string` if it's longer than the given maximum string length.\n     * The last characters of the truncated string are replaced with the omission\n     * string which defaults to \"...\".\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to truncate.\n     * @param {Object} [options={}] The options object.\n     * @param {number} [options.length=30] The maximum string length.\n     * @param {string} [options.omission='...'] The string to indicate text is omitted.\n     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.\n     * @returns {string} Returns the truncated string.\n     * @example\n     *\n     * _.truncate('hi-diddly-ho there, neighborino');\n     * // => 'hi-diddly-ho there, neighbo...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'length': 24,\n     *   'separator': ' '\n     * });\n     * // => 'hi-diddly-ho there,...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'length': 24,\n     *   'separator': /,? +/\n     * });\n     * // => 'hi-diddly-ho there...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'omission': ' [...]'\n     * });\n     * // => 'hi-diddly-ho there, neig [...]'\n     */\n    function truncate(string, options) {\n      var length = DEFAULT_TRUNC_LENGTH,\n          omission = DEFAULT_TRUNC_OMISSION;\n\n      if (isObject(options)) {\n        var separator = 'separator' in options ? options.separator : separator;\n        length = 'length' in options ? toInteger(options.length) : length;\n        omission = 'omission' in options ? baseToString(options.omission) : omission;\n      }\n      string = toString(string);\n\n      var strLength = string.length;\n      if (hasUnicode(string)) {\n        var strSymbols = stringToArray(string);\n        strLength = strSymbols.length;\n      }\n      if (length >= strLength) {\n        return string;\n      }\n      var end = length - stringSize(omission);\n      if (end < 1) {\n        return omission;\n      }\n      var result = strSymbols\n        ? castSlice(strSymbols, 0, end).join('')\n        : string.slice(0, end);\n\n      if (separator === undefined) {\n        return result + omission;\n      }\n      if (strSymbols) {\n        end += (result.length - end);\n      }\n      if (isRegExp(separator)) {\n        if (string.slice(end).search(separator)) {\n          var match,\n              substring = result;\n\n          if (!separator.global) {\n            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');\n          }\n          separator.lastIndex = 0;\n          while ((match = separator.exec(substring))) {\n            var newEnd = match.index;\n          }\n          result = result.slice(0, newEnd === undefined ? end : newEnd);\n        }\n      } else if (string.indexOf(baseToString(separator), end) != end) {\n        var index = result.lastIndexOf(separator);\n        if (index > -1) {\n          result = result.slice(0, index);\n        }\n      }\n      return result + omission;\n    }\n\n    /**\n     * The inverse of `_.escape`; this method converts the HTML entities\n     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to\n     * their corresponding characters.\n     *\n     * **Note:** No other HTML entities are unescaped. To unescape additional\n     * HTML entities use a third-party library like [_he_](https://mths.be/he).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.6.0\n     * @category String\n     * @param {string} [string=''] The string to unescape.\n     * @returns {string} Returns the unescaped string.\n     * @example\n     *\n     * _.unescape('fred, barney, &amp; pebbles');\n     * // => 'fred, barney, & pebbles'\n     */\n    function unescape(string) {\n      string = toString(string);\n      return (string && reHasEscapedHtml.test(string))\n        ? string.replace(reEscapedHtml, unescapeHtmlChar)\n        : string;\n    }\n\n    /**\n     * Converts `string`, as space separated words, to upper case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the upper cased string.\n     * @example\n     *\n     * _.upperCase('--foo-bar');\n     * // => 'FOO BAR'\n     *\n     * _.upperCase('fooBar');\n     * // => 'FOO BAR'\n     *\n     * _.upperCase('__foo_bar__');\n     * // => 'FOO BAR'\n     */\n    var upperCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + word.toUpperCase();\n    });\n\n    /**\n     * Converts the first character of `string` to upper case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.upperFirst('fred');\n     * // => 'Fred'\n     *\n     * _.upperFirst('FRED');\n     * // => 'FRED'\n     */\n    var upperFirst = createCaseFirst('toUpperCase');\n\n    /**\n     * Splits `string` into an array of its words.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {RegExp|string} [pattern] The pattern to match words.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the words of `string`.\n     * @example\n     *\n     * _.words('fred, barney, & pebbles');\n     * // => ['fred', 'barney', 'pebbles']\n     *\n     * _.words('fred, barney, & pebbles', /[^, ]+/g);\n     * // => ['fred', 'barney', '&', 'pebbles']\n     */\n    function words(string, pattern, guard) {\n      string = toString(string);\n      pattern = guard ? undefined : pattern;\n\n      if (pattern === undefined) {\n        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\n      }\n      return string.match(pattern) || [];\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Attempts to invoke `func`, returning either the result or the caught error\n     * object. Any additional arguments are provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Function} func The function to attempt.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {*} Returns the `func` result or error object.\n     * @example\n     *\n     * // Avoid throwing errors for invalid selectors.\n     * var elements = _.attempt(function(selector) {\n     *   return document.querySelectorAll(selector);\n     * }, '>_>');\n     *\n     * if (_.isError(elements)) {\n     *   elements = [];\n     * }\n     */\n    var attempt = baseRest(function(func, args) {\n      try {\n        return apply(func, undefined, args);\n      } catch (e) {\n        return isError(e) ? e : new Error(e);\n      }\n    });\n\n    /**\n     * Binds methods of an object to the object itself, overwriting the existing\n     * method.\n     *\n     * **Note:** This method doesn't set the \"length\" property of bound functions.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {Object} object The object to bind and assign the bound methods to.\n     * @param {...(string|string[])} methodNames The object method names to bind.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var view = {\n     *   'label': 'docs',\n     *   'click': function() {\n     *     console.log('clicked ' + this.label);\n     *   }\n     * };\n     *\n     * _.bindAll(view, ['click']);\n     * jQuery(element).on('click', view.click);\n     * // => Logs 'clicked docs' when clicked.\n     */\n    var bindAll = flatRest(function(object, methodNames) {\n      arrayEach(methodNames, function(key) {\n        key = toKey(key);\n        baseAssignValue(object, key, bind(object[key], object));\n      });\n      return object;\n    });\n\n    /**\n     * Creates a function that iterates over `pairs` and invokes the corresponding\n     * function of the first predicate to return truthy. The predicate-function\n     * pairs are invoked with the `this` binding and arguments of the created\n     * function.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {Array} pairs The predicate-function pairs.\n     * @returns {Function} Returns the new composite function.\n     * @example\n     *\n     * var func = _.cond([\n     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],\n     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],\n     *   [_.stubTrue,                      _.constant('no match')]\n     * ]);\n     *\n     * func({ 'a': 1, 'b': 2 });\n     * // => 'matches A'\n     *\n     * func({ 'a': 0, 'b': 1 });\n     * // => 'matches B'\n     *\n     * func({ 'a': '1', 'b': '2' });\n     * // => 'no match'\n     */\n    function cond(pairs) {\n      var length = pairs == null ? 0 : pairs.length,\n          toIteratee = getIteratee();\n\n      pairs = !length ? [] : arrayMap(pairs, function(pair) {\n        if (typeof pair[1] != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        return [toIteratee(pair[0]), pair[1]];\n      });\n\n      return baseRest(function(args) {\n        var index = -1;\n        while (++index < length) {\n          var pair = pairs[index];\n          if (apply(pair[0], this, args)) {\n            return apply(pair[1], this, args);\n          }\n        }\n      });\n    }\n\n    /**\n     * Creates a function that invokes the predicate properties of `source` with\n     * the corresponding property values of a given object, returning `true` if\n     * all predicates return truthy, else `false`.\n     *\n     * **Note:** The created function is equivalent to `_.conformsTo` with\n     * `source` partially applied.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 2, 'b': 1 },\n     *   { 'a': 1, 'b': 2 }\n     * ];\n     *\n     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));\n     * // => [{ 'a': 1, 'b': 2 }]\n     */\n    function conforms(source) {\n      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that returns `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Util\n     * @param {*} value The value to return from the new function.\n     * @returns {Function} Returns the new constant function.\n     * @example\n     *\n     * var objects = _.times(2, _.constant({ 'a': 1 }));\n     *\n     * console.log(objects);\n     * // => [{ 'a': 1 }, { 'a': 1 }]\n     *\n     * console.log(objects[0] === objects[1]);\n     * // => true\n     */\n    function constant(value) {\n      return function() {\n        return value;\n      };\n    }\n\n    /**\n     * Checks `value` to determine whether a default value should be returned in\n     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,\n     * or `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.14.0\n     * @category Util\n     * @param {*} value The value to check.\n     * @param {*} defaultValue The default value.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * _.defaultTo(1, 10);\n     * // => 1\n     *\n     * _.defaultTo(undefined, 10);\n     * // => 10\n     */\n    function defaultTo(value, defaultValue) {\n      return (value == null || value !== value) ? defaultValue : value;\n    }\n\n    /**\n     * Creates a function that returns the result of invoking the given functions\n     * with the `this` binding of the created function, where each successive\n     * invocation is supplied the return value of the previous.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [funcs] The functions to invoke.\n     * @returns {Function} Returns the new composite function.\n     * @see _.flowRight\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var addSquare = _.flow([_.add, square]);\n     * addSquare(1, 2);\n     * // => 9\n     */\n    var flow = createFlow();\n\n    /**\n     * This method is like `_.flow` except that it creates a function that\n     * invokes the given functions from right to left.\n     *\n     * @static\n     * @since 3.0.0\n     * @memberOf _\n     * @category Util\n     * @param {...(Function|Function[])} [funcs] The functions to invoke.\n     * @returns {Function} Returns the new composite function.\n     * @see _.flow\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var addSquare = _.flowRight([square, _.add]);\n     * addSquare(1, 2);\n     * // => 9\n     */\n    var flowRight = createFlow(true);\n\n    /**\n     * This method returns the first argument it receives.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {*} value Any value.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     *\n     * console.log(_.identity(object) === object);\n     * // => true\n     */\n    function identity(value) {\n      return value;\n    }\n\n    /**\n     * Creates a function that invokes `func` with the arguments of the created\n     * function. If `func` is a property name, the created function returns the\n     * property value for a given element. If `func` is an array or object, the\n     * created function returns `true` for elements that contain the equivalent\n     * source properties, otherwise it returns `false`.\n     *\n     * @static\n     * @since 4.0.0\n     * @memberOf _\n     * @category Util\n     * @param {*} [func=_.identity] The value to convert to a callback.\n     * @returns {Function} Returns the callback.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': true },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));\n     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.filter(users, _.iteratee(['user', 'fred']));\n     * // => [{ 'user': 'fred', 'age': 40 }]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.map(users, _.iteratee('user'));\n     * // => ['barney', 'fred']\n     *\n     * // Create custom iteratee shorthands.\n     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {\n     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {\n     *     return func.test(string);\n     *   };\n     * });\n     *\n     * _.filter(['abc', 'def'], /ef/);\n     * // => ['def']\n     */\n    function iteratee(func) {\n      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that performs a partial deep comparison between a given\n     * object and `source`, returning `true` if the given object has equivalent\n     * property values, else `false`.\n     *\n     * **Note:** The created function is equivalent to `_.isMatch` with `source`\n     * partially applied.\n     *\n     * Partial comparisons will match empty array and empty object `source`\n     * values against any array or object value, respectively. See `_.isEqual`\n     * for a list of supported value comparisons.\n     *\n     * **Note:** Multiple values can be checked by combining several matchers\n     * using `_.overSome`\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Object} source The object of property values to match.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 1, 'b': 2, 'c': 3 },\n     *   { 'a': 4, 'b': 5, 'c': 6 }\n     * ];\n     *\n     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));\n     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]\n     *\n     * // Checking for several possible values\n     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));\n     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]\n     */\n    function matches(source) {\n      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that performs a partial deep comparison between the\n     * value at `path` of a given object to `srcValue`, returning `true` if the\n     * object value is equivalent, else `false`.\n     *\n     * **Note:** Partial comparisons will match empty array and empty object\n     * `srcValue` values against any array or object value, respectively. See\n     * `_.isEqual` for a list of supported value comparisons.\n     *\n     * **Note:** Multiple values can be checked by combining several matchers\n     * using `_.overSome`\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Util\n     * @param {Array|string} path The path of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 1, 'b': 2, 'c': 3 },\n     *   { 'a': 4, 'b': 5, 'c': 6 }\n     * ];\n     *\n     * _.find(objects, _.matchesProperty('a', 4));\n     * // => { 'a': 4, 'b': 5, 'c': 6 }\n     *\n     * // Checking for several possible values\n     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));\n     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]\n     */\n    function matchesProperty(path, srcValue) {\n      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that invokes the method at `path` of a given object.\n     * Any additional arguments are provided to the invoked method.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Util\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {Function} Returns the new invoker function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': { 'b': _.constant(2) } },\n     *   { 'a': { 'b': _.constant(1) } }\n     * ];\n     *\n     * _.map(objects, _.method('a.b'));\n     * // => [2, 1]\n     *\n     * _.map(objects, _.method(['a', 'b']));\n     * // => [2, 1]\n     */\n    var method = baseRest(function(path, args) {\n      return function(object) {\n        return baseInvoke(object, path, args);\n      };\n    });\n\n    /**\n     * The opposite of `_.method`; this method creates a function that invokes\n     * the method at a given path of `object`. Any additional arguments are\n     * provided to the invoked method.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Util\n     * @param {Object} object The object to query.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {Function} Returns the new invoker function.\n     * @example\n     *\n     * var array = _.times(3, _.constant),\n     *     object = { 'a': array, 'b': array, 'c': array };\n     *\n     * _.map(['a[2]', 'c[0]'], _.methodOf(object));\n     * // => [2, 0]\n     *\n     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));\n     * // => [2, 0]\n     */\n    var methodOf = baseRest(function(object, args) {\n      return function(path) {\n        return baseInvoke(object, path, args);\n      };\n    });\n\n    /**\n     * Adds all own enumerable string keyed function properties of a source\n     * object to the destination object. If `object` is a function, then methods\n     * are added to its prototype as well.\n     *\n     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to\n     * avoid conflicts caused by modifying the original.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {Function|Object} [object=lodash] The destination object.\n     * @param {Object} source The object of functions to add.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.\n     * @returns {Function|Object} Returns `object`.\n     * @example\n     *\n     * function vowels(string) {\n     *   return _.filter(string, function(v) {\n     *     return /[aeiou]/i.test(v);\n     *   });\n     * }\n     *\n     * _.mixin({ 'vowels': vowels });\n     * _.vowels('fred');\n     * // => ['e']\n     *\n     * _('fred').vowels().value();\n     * // => ['e']\n     *\n     * _.mixin({ 'vowels': vowels }, { 'chain': false });\n     * _('fred').vowels();\n     * // => ['e']\n     */\n    function mixin(object, source, options) {\n      var props = keys(source),\n          methodNames = baseFunctions(source, props);\n\n      if (options == null &&\n          !(isObject(source) && (methodNames.length || !props.length))) {\n        options = source;\n        source = object;\n        object = this;\n        methodNames = baseFunctions(source, keys(source));\n      }\n      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,\n          isFunc = isFunction(object);\n\n      arrayEach(methodNames, function(methodName) {\n        var func = source[methodName];\n        object[methodName] = func;\n        if (isFunc) {\n          object.prototype[methodName] = function() {\n            var chainAll = this.__chain__;\n            if (chain || chainAll) {\n              var result = object(this.__wrapped__),\n                  actions = result.__actions__ = copyArray(this.__actions__);\n\n              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });\n              result.__chain__ = chainAll;\n              return result;\n            }\n            return func.apply(object, arrayPush([this.value()], arguments));\n          };\n        }\n      });\n\n      return object;\n    }\n\n    /**\n     * Reverts the `_` variable to its previous value and returns a reference to\n     * the `lodash` function.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @returns {Function} Returns the `lodash` function.\n     * @example\n     *\n     * var lodash = _.noConflict();\n     */\n    function noConflict() {\n      if (root._ === this) {\n        root._ = oldDash;\n      }\n      return this;\n    }\n\n    /**\n     * This method returns `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.3.0\n     * @category Util\n     * @example\n     *\n     * _.times(2, _.noop);\n     * // => [undefined, undefined]\n     */\n    function noop() {\n      // No operation performed.\n    }\n\n    /**\n     * Creates a function that gets the argument at index `n`. If `n` is negative,\n     * the nth argument from the end is returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {number} [n=0] The index of the argument to return.\n     * @returns {Function} Returns the new pass-thru function.\n     * @example\n     *\n     * var func = _.nthArg(1);\n     * func('a', 'b', 'c', 'd');\n     * // => 'b'\n     *\n     * var func = _.nthArg(-2);\n     * func('a', 'b', 'c', 'd');\n     * // => 'c'\n     */\n    function nthArg(n) {\n      n = toInteger(n);\n      return baseRest(function(args) {\n        return baseNth(args, n);\n      });\n    }\n\n    /**\n     * Creates a function that invokes `iteratees` with the arguments it receives\n     * and returns their results.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [iteratees=[_.identity]]\n     *  The iteratees to invoke.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.over([Math.max, Math.min]);\n     *\n     * func(1, 2, 3, 4);\n     * // => [4, 1]\n     */\n    var over = createOver(arrayMap);\n\n    /**\n     * Creates a function that checks if **all** of the `predicates` return\n     * truthy when invoked with the arguments it receives.\n     *\n     * Following shorthands are possible for providing predicates.\n     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.\n     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [predicates=[_.identity]]\n     *  The predicates to check.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.overEvery([Boolean, isFinite]);\n     *\n     * func('1');\n     * // => true\n     *\n     * func(null);\n     * // => false\n     *\n     * func(NaN);\n     * // => false\n     */\n    var overEvery = createOver(arrayEvery);\n\n    /**\n     * Creates a function that checks if **any** of the `predicates` return\n     * truthy when invoked with the arguments it receives.\n     *\n     * Following shorthands are possible for providing predicates.\n     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.\n     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [predicates=[_.identity]]\n     *  The predicates to check.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.overSome([Boolean, isFinite]);\n     *\n     * func('1');\n     * // => true\n     *\n     * func(null);\n     * // => true\n     *\n     * func(NaN);\n     * // => false\n     *\n     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])\n     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])\n     */\n    var overSome = createOver(arraySome);\n\n    /**\n     * Creates a function that returns the value at `path` of a given object.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Util\n     * @param {Array|string} path The path of the property to get.\n     * @returns {Function} Returns the new accessor function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': { 'b': 2 } },\n     *   { 'a': { 'b': 1 } }\n     * ];\n     *\n     * _.map(objects, _.property('a.b'));\n     * // => [2, 1]\n     *\n     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n     * // => [1, 2]\n     */\n    function property(path) {\n      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n    }\n\n    /**\n     * The opposite of `_.property`; this method creates a function that returns\n     * the value at a given path of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Object} object The object to query.\n     * @returns {Function} Returns the new accessor function.\n     * @example\n     *\n     * var array = [0, 1, 2],\n     *     object = { 'a': array, 'b': array, 'c': array };\n     *\n     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));\n     * // => [2, 0]\n     *\n     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));\n     * // => [2, 0]\n     */\n    function propertyOf(object) {\n      return function(path) {\n        return object == null ? undefined : baseGet(object, path);\n      };\n    }\n\n    /**\n     * Creates an array of numbers (positive and/or negative) progressing from\n     * `start` up to, but not including, `end`. A step of `-1` is used if a negative\n     * `start` is specified without an `end` or `step`. If `end` is not specified,\n     * it's set to `start` with `start` then set to `0`.\n     *\n     * **Note:** JavaScript follows the IEEE-754 standard for resolving\n     * floating-point values which can produce unexpected results.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} [step=1] The value to increment or decrement by.\n     * @returns {Array} Returns the range of numbers.\n     * @see _.inRange, _.rangeRight\n     * @example\n     *\n     * _.range(4);\n     * // => [0, 1, 2, 3]\n     *\n     * _.range(-4);\n     * // => [0, -1, -2, -3]\n     *\n     * _.range(1, 5);\n     * // => [1, 2, 3, 4]\n     *\n     * _.range(0, 20, 5);\n     * // => [0, 5, 10, 15]\n     *\n     * _.range(0, -4, -1);\n     * // => [0, -1, -2, -3]\n     *\n     * _.range(1, 4, 0);\n     * // => [1, 1, 1]\n     *\n     * _.range(0);\n     * // => []\n     */\n    var range = createRange();\n\n    /**\n     * This method is like `_.range` except that it populates values in\n     * descending order.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} [step=1] The value to increment or decrement by.\n     * @returns {Array} Returns the range of numbers.\n     * @see _.inRange, _.range\n     * @example\n     *\n     * _.rangeRight(4);\n     * // => [3, 2, 1, 0]\n     *\n     * _.rangeRight(-4);\n     * // => [-3, -2, -1, 0]\n     *\n     * _.rangeRight(1, 5);\n     * // => [4, 3, 2, 1]\n     *\n     * _.rangeRight(0, 20, 5);\n     * // => [15, 10, 5, 0]\n     *\n     * _.rangeRight(0, -4, -1);\n     * // => [-3, -2, -1, 0]\n     *\n     * _.rangeRight(1, 4, 0);\n     * // => [1, 1, 1]\n     *\n     * _.rangeRight(0);\n     * // => []\n     */\n    var rangeRight = createRange(true);\n\n    /**\n     * This method returns a new empty array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {Array} Returns the new empty array.\n     * @example\n     *\n     * var arrays = _.times(2, _.stubArray);\n     *\n     * console.log(arrays);\n     * // => [[], []]\n     *\n     * console.log(arrays[0] === arrays[1]);\n     * // => false\n     */\n    function stubArray() {\n      return [];\n    }\n\n    /**\n     * This method returns `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {boolean} Returns `false`.\n     * @example\n     *\n     * _.times(2, _.stubFalse);\n     * // => [false, false]\n     */\n    function stubFalse() {\n      return false;\n    }\n\n    /**\n     * This method returns a new empty object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {Object} Returns the new empty object.\n     * @example\n     *\n     * var objects = _.times(2, _.stubObject);\n     *\n     * console.log(objects);\n     * // => [{}, {}]\n     *\n     * console.log(objects[0] === objects[1]);\n     * // => false\n     */\n    function stubObject() {\n      return {};\n    }\n\n    /**\n     * This method returns an empty string.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {string} Returns the empty string.\n     * @example\n     *\n     * _.times(2, _.stubString);\n     * // => ['', '']\n     */\n    function stubString() {\n      return '';\n    }\n\n    /**\n     * This method returns `true`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {boolean} Returns `true`.\n     * @example\n     *\n     * _.times(2, _.stubTrue);\n     * // => [true, true]\n     */\n    function stubTrue() {\n      return true;\n    }\n\n    /**\n     * Invokes the iteratee `n` times, returning an array of the results of\n     * each invocation. The iteratee is invoked with one argument; (index).\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {number} n The number of times to invoke `iteratee`.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the array of results.\n     * @example\n     *\n     * _.times(3, String);\n     * // => ['0', '1', '2']\n     *\n     *  _.times(4, _.constant(0));\n     * // => [0, 0, 0, 0]\n     */\n    function times(n, iteratee) {\n      n = toInteger(n);\n      if (n < 1 || n > MAX_SAFE_INTEGER) {\n        return [];\n      }\n      var index = MAX_ARRAY_LENGTH,\n          length = nativeMin(n, MAX_ARRAY_LENGTH);\n\n      iteratee = getIteratee(iteratee);\n      n -= MAX_ARRAY_LENGTH;\n\n      var result = baseTimes(length, iteratee);\n      while (++index < n) {\n        iteratee(index);\n      }\n      return result;\n    }\n\n    /**\n     * Converts `value` to a property path array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {*} value The value to convert.\n     * @returns {Array} Returns the new property path array.\n     * @example\n     *\n     * _.toPath('a.b.c');\n     * // => ['a', 'b', 'c']\n     *\n     * _.toPath('a[0].b.c');\n     * // => ['a', '0', 'b', 'c']\n     */\n    function toPath(value) {\n      if (isArray(value)) {\n        return arrayMap(value, toKey);\n      }\n      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));\n    }\n\n    /**\n     * Generates a unique ID. If `prefix` is given, the ID is appended to it.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {string} [prefix=''] The value to prefix the ID with.\n     * @returns {string} Returns the unique ID.\n     * @example\n     *\n     * _.uniqueId('contact_');\n     * // => 'contact_104'\n     *\n     * _.uniqueId();\n     * // => '105'\n     */\n    function uniqueId(prefix) {\n      var id = ++idCounter;\n      return toString(prefix) + id;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Adds two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.4.0\n     * @category Math\n     * @param {number} augend The first number in an addition.\n     * @param {number} addend The second number in an addition.\n     * @returns {number} Returns the total.\n     * @example\n     *\n     * _.add(6, 4);\n     * // => 10\n     */\n    var add = createMathOperation(function(augend, addend) {\n      return augend + addend;\n    }, 0);\n\n    /**\n     * Computes `number` rounded up to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round up.\n     * @param {number} [precision=0] The precision to round up to.\n     * @returns {number} Returns the rounded up number.\n     * @example\n     *\n     * _.ceil(4.006);\n     * // => 5\n     *\n     * _.ceil(6.004, 2);\n     * // => 6.01\n     *\n     * _.ceil(6040, -2);\n     * // => 6100\n     */\n    var ceil = createRound('ceil');\n\n    /**\n     * Divide two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {number} dividend The first number in a division.\n     * @param {number} divisor The second number in a division.\n     * @returns {number} Returns the quotient.\n     * @example\n     *\n     * _.divide(6, 4);\n     * // => 1.5\n     */\n    var divide = createMathOperation(function(dividend, divisor) {\n      return dividend / divisor;\n    }, 1);\n\n    /**\n     * Computes `number` rounded down to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round down.\n     * @param {number} [precision=0] The precision to round down to.\n     * @returns {number} Returns the rounded down number.\n     * @example\n     *\n     * _.floor(4.006);\n     * // => 4\n     *\n     * _.floor(0.046, 2);\n     * // => 0.04\n     *\n     * _.floor(4060, -2);\n     * // => 4000\n     */\n    var floor = createRound('floor');\n\n    /**\n     * Computes the maximum value of `array`. If `array` is empty or falsey,\n     * `undefined` is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {*} Returns the maximum value.\n     * @example\n     *\n     * _.max([4, 2, 8, 6]);\n     * // => 8\n     *\n     * _.max([]);\n     * // => undefined\n     */\n    function max(array) {\n      return (array && array.length)\n        ? baseExtremum(array, identity, baseGt)\n        : undefined;\n    }\n\n    /**\n     * This method is like `_.max` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * the value is ranked. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {*} Returns the maximum value.\n     * @example\n     *\n     * var objects = [{ 'n': 1 }, { 'n': 2 }];\n     *\n     * _.maxBy(objects, function(o) { return o.n; });\n     * // => { 'n': 2 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.maxBy(objects, 'n');\n     * // => { 'n': 2 }\n     */\n    function maxBy(array, iteratee) {\n      return (array && array.length)\n        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)\n        : undefined;\n    }\n\n    /**\n     * Computes the mean of the values in `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {number} Returns the mean.\n     * @example\n     *\n     * _.mean([4, 2, 8, 6]);\n     * // => 5\n     */\n    function mean(array) {\n      return baseMean(array, identity);\n    }\n\n    /**\n     * This method is like `_.mean` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the value to be averaged.\n     * The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the mean.\n     * @example\n     *\n     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n     *\n     * _.meanBy(objects, function(o) { return o.n; });\n     * // => 5\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.meanBy(objects, 'n');\n     * // => 5\n     */\n    function meanBy(array, iteratee) {\n      return baseMean(array, getIteratee(iteratee, 2));\n    }\n\n    /**\n     * Computes the minimum value of `array`. If `array` is empty or falsey,\n     * `undefined` is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {*} Returns the minimum value.\n     * @example\n     *\n     * _.min([4, 2, 8, 6]);\n     * // => 2\n     *\n     * _.min([]);\n     * // => undefined\n     */\n    function min(array) {\n      return (array && array.length)\n        ? baseExtremum(array, identity, baseLt)\n        : undefined;\n    }\n\n    /**\n     * This method is like `_.min` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * the value is ranked. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {*} Returns the minimum value.\n     * @example\n     *\n     * var objects = [{ 'n': 1 }, { 'n': 2 }];\n     *\n     * _.minBy(objects, function(o) { return o.n; });\n     * // => { 'n': 1 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.minBy(objects, 'n');\n     * // => { 'n': 1 }\n     */\n    function minBy(array, iteratee) {\n      return (array && array.length)\n        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)\n        : undefined;\n    }\n\n    /**\n     * Multiply two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {number} multiplier The first number in a multiplication.\n     * @param {number} multiplicand The second number in a multiplication.\n     * @returns {number} Returns the product.\n     * @example\n     *\n     * _.multiply(6, 4);\n     * // => 24\n     */\n    var multiply = createMathOperation(function(multiplier, multiplicand) {\n      return multiplier * multiplicand;\n    }, 1);\n\n    /**\n     * Computes `number` rounded to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round.\n     * @param {number} [precision=0] The precision to round to.\n     * @returns {number} Returns the rounded number.\n     * @example\n     *\n     * _.round(4.006);\n     * // => 4\n     *\n     * _.round(4.006, 2);\n     * // => 4.01\n     *\n     * _.round(4060, -2);\n     * // => 4100\n     */\n    var round = createRound('round');\n\n    /**\n     * Subtract two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {number} minuend The first number in a subtraction.\n     * @param {number} subtrahend The second number in a subtraction.\n     * @returns {number} Returns the difference.\n     * @example\n     *\n     * _.subtract(6, 4);\n     * // => 2\n     */\n    var subtract = createMathOperation(function(minuend, subtrahend) {\n      return minuend - subtrahend;\n    }, 0);\n\n    /**\n     * Computes the sum of the values in `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.4.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {number} Returns the sum.\n     * @example\n     *\n     * _.sum([4, 2, 8, 6]);\n     * // => 20\n     */\n    function sum(array) {\n      return (array && array.length)\n        ? baseSum(array, identity)\n        : 0;\n    }\n\n    /**\n     * This method is like `_.sum` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the value to be summed.\n     * The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the sum.\n     * @example\n     *\n     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n     *\n     * _.sumBy(objects, function(o) { return o.n; });\n     * // => 20\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sumBy(objects, 'n');\n     * // => 20\n     */\n    function sumBy(array, iteratee) {\n      return (array && array.length)\n        ? baseSum(array, getIteratee(iteratee, 2))\n        : 0;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    // Add methods that return wrapped values in chain sequences.\n    lodash.after = after;\n    lodash.ary = ary;\n    lodash.assign = assign;\n    lodash.assignIn = assignIn;\n    lodash.assignInWith = assignInWith;\n    lodash.assignWith = assignWith;\n    lodash.at = at;\n    lodash.before = before;\n    lodash.bind = bind;\n    lodash.bindAll = bindAll;\n    lodash.bindKey = bindKey;\n    lodash.castArray = castArray;\n    lodash.chain = chain;\n    lodash.chunk = chunk;\n    lodash.compact = compact;\n    lodash.concat = concat;\n    lodash.cond = cond;\n    lodash.conforms = conforms;\n    lodash.constant = constant;\n    lodash.countBy = countBy;\n    lodash.create = create;\n    lodash.curry = curry;\n    lodash.curryRight = curryRight;\n    lodash.debounce = debounce;\n    lodash.defaults = defaults;\n    lodash.defaultsDeep = defaultsDeep;\n    lodash.defer = defer;\n    lodash.delay = delay;\n    lodash.difference = difference;\n    lodash.differenceBy = differenceBy;\n    lodash.differenceWith = differenceWith;\n    lodash.drop = drop;\n    lodash.dropRight = dropRight;\n    lodash.dropRightWhile = dropRightWhile;\n    lodash.dropWhile = dropWhile;\n    lodash.fill = fill;\n    lodash.filter = filter;\n    lodash.flatMap = flatMap;\n    lodash.flatMapDeep = flatMapDeep;\n    lodash.flatMapDepth = flatMapDepth;\n    lodash.flatten = flatten;\n    lodash.flattenDeep = flattenDeep;\n    lodash.flattenDepth = flattenDepth;\n    lodash.flip = flip;\n    lodash.flow = flow;\n    lodash.flowRight = flowRight;\n    lodash.fromPairs = fromPairs;\n    lodash.functions = functions;\n    lodash.functionsIn = functionsIn;\n    lodash.groupBy = groupBy;\n    lodash.initial = initial;\n    lodash.intersection = intersection;\n    lodash.intersectionBy = intersectionBy;\n    lodash.intersectionWith = intersectionWith;\n    lodash.invert = invert;\n    lodash.invertBy = invertBy;\n    lodash.invokeMap = invokeMap;\n    lodash.iteratee = iteratee;\n    lodash.keyBy = keyBy;\n    lodash.keys = keys;\n    lodash.keysIn = keysIn;\n    lodash.map = map;\n    lodash.mapKeys = mapKeys;\n    lodash.mapValues = mapValues;\n    lodash.matches = matches;\n    lodash.matchesProperty = matchesProperty;\n    lodash.memoize = memoize;\n    lodash.merge = merge;\n    lodash.mergeWith = mergeWith;\n    lodash.method = method;\n    lodash.methodOf = methodOf;\n    lodash.mixin = mixin;\n    lodash.negate = negate;\n    lodash.nthArg = nthArg;\n    lodash.omit = omit;\n    lodash.omitBy = omitBy;\n    lodash.once = once;\n    lodash.orderBy = orderBy;\n    lodash.over = over;\n    lodash.overArgs = overArgs;\n    lodash.overEvery = overEvery;\n    lodash.overSome = overSome;\n    lodash.partial = partial;\n    lodash.partialRight = partialRight;\n    lodash.partition = partition;\n    lodash.pick = pick;\n    lodash.pickBy = pickBy;\n    lodash.property = property;\n    lodash.propertyOf = propertyOf;\n    lodash.pull = pull;\n    lodash.pullAll = pullAll;\n    lodash.pullAllBy = pullAllBy;\n    lodash.pullAllWith = pullAllWith;\n    lodash.pullAt = pullAt;\n    lodash.range = range;\n    lodash.rangeRight = rangeRight;\n    lodash.rearg = rearg;\n    lodash.reject = reject;\n    lodash.remove = remove;\n    lodash.rest = rest;\n    lodash.reverse = reverse;\n    lodash.sampleSize = sampleSize;\n    lodash.set = set;\n    lodash.setWith = setWith;\n    lodash.shuffle = shuffle;\n    lodash.slice = slice;\n    lodash.sortBy = sortBy;\n    lodash.sortedUniq = sortedUniq;\n    lodash.sortedUniqBy = sortedUniqBy;\n    lodash.split = split;\n    lodash.spread = spread;\n    lodash.tail = tail;\n    lodash.take = take;\n    lodash.takeRight = takeRight;\n    lodash.takeRightWhile = takeRightWhile;\n    lodash.takeWhile = takeWhile;\n    lodash.tap = tap;\n    lodash.throttle = throttle;\n    lodash.thru = thru;\n    lodash.toArray = toArray;\n    lodash.toPairs = toPairs;\n    lodash.toPairsIn = toPairsIn;\n    lodash.toPath = toPath;\n    lodash.toPlainObject = toPlainObject;\n    lodash.transform = transform;\n    lodash.unary = unary;\n    lodash.union = union;\n    lodash.unionBy = unionBy;\n    lodash.unionWith = unionWith;\n    lodash.uniq = uniq;\n    lodash.uniqBy = uniqBy;\n    lodash.uniqWith = uniqWith;\n    lodash.unset = unset;\n    lodash.unzip = unzip;\n    lodash.unzipWith = unzipWith;\n    lodash.update = update;\n    lodash.updateWith = updateWith;\n    lodash.values = values;\n    lodash.valuesIn = valuesIn;\n    lodash.without = without;\n    lodash.words = words;\n    lodash.wrap = wrap;\n    lodash.xor = xor;\n    lodash.xorBy = xorBy;\n    lodash.xorWith = xorWith;\n    lodash.zip = zip;\n    lodash.zipObject = zipObject;\n    lodash.zipObjectDeep = zipObjectDeep;\n    lodash.zipWith = zipWith;\n\n    // Add aliases.\n    lodash.entries = toPairs;\n    lodash.entriesIn = toPairsIn;\n    lodash.extend = assignIn;\n    lodash.extendWith = assignInWith;\n\n    // Add methods to `lodash.prototype`.\n    mixin(lodash, lodash);\n\n    /*------------------------------------------------------------------------*/\n\n    // Add methods that return unwrapped values in chain sequences.\n    lodash.add = add;\n    lodash.attempt = attempt;\n    lodash.camelCase = camelCase;\n    lodash.capitalize = capitalize;\n    lodash.ceil = ceil;\n    lodash.clamp = clamp;\n    lodash.clone = clone;\n    lodash.cloneDeep = cloneDeep;\n    lodash.cloneDeepWith = cloneDeepWith;\n    lodash.cloneWith = cloneWith;\n    lodash.conformsTo = conformsTo;\n    lodash.deburr = deburr;\n    lodash.defaultTo = defaultTo;\n    lodash.divide = divide;\n    lodash.endsWith = endsWith;\n    lodash.eq = eq;\n    lodash.escape = escape;\n    lodash.escapeRegExp = escapeRegExp;\n    lodash.every = every;\n    lodash.find = find;\n    lodash.findIndex = findIndex;\n    lodash.findKey = findKey;\n    lodash.findLast = findLast;\n    lodash.findLastIndex = findLastIndex;\n    lodash.findLastKey = findLastKey;\n    lodash.floor = floor;\n    lodash.forEach = forEach;\n    lodash.forEachRight = forEachRight;\n    lodash.forIn = forIn;\n    lodash.forInRight = forInRight;\n    lodash.forOwn = forOwn;\n    lodash.forOwnRight = forOwnRight;\n    lodash.get = get;\n    lodash.gt = gt;\n    lodash.gte = gte;\n    lodash.has = has;\n    lodash.hasIn = hasIn;\n    lodash.head = head;\n    lodash.identity = identity;\n    lodash.includes = includes;\n    lodash.indexOf = indexOf;\n    lodash.inRange = inRange;\n    lodash.invoke = invoke;\n    lodash.isArguments = isArguments;\n    lodash.isArray = isArray;\n    lodash.isArrayBuffer = isArrayBuffer;\n    lodash.isArrayLike = isArrayLike;\n    lodash.isArrayLikeObject = isArrayLikeObject;\n    lodash.isBoolean = isBoolean;\n    lodash.isBuffer = isBuffer;\n    lodash.isDate = isDate;\n    lodash.isElement = isElement;\n    lodash.isEmpty = isEmpty;\n    lodash.isEqual = isEqual;\n    lodash.isEqualWith = isEqualWith;\n    lodash.isError = isError;\n    lodash.isFinite = isFinite;\n    lodash.isFunction = isFunction;\n    lodash.isInteger = isInteger;\n    lodash.isLength = isLength;\n    lodash.isMap = isMap;\n    lodash.isMatch = isMatch;\n    lodash.isMatchWith = isMatchWith;\n    lodash.isNaN = isNaN;\n    lodash.isNative = isNative;\n    lodash.isNil = isNil;\n    lodash.isNull = isNull;\n    lodash.isNumber = isNumber;\n    lodash.isObject = isObject;\n    lodash.isObjectLike = isObjectLike;\n    lodash.isPlainObject = isPlainObject;\n    lodash.isRegExp = isRegExp;\n    lodash.isSafeInteger = isSafeInteger;\n    lodash.isSet = isSet;\n    lodash.isString = isString;\n    lodash.isSymbol = isSymbol;\n    lodash.isTypedArray = isTypedArray;\n    lodash.isUndefined = isUndefined;\n    lodash.isWeakMap = isWeakMap;\n    lodash.isWeakSet = isWeakSet;\n    lodash.join = join;\n    lodash.kebabCase = kebabCase;\n    lodash.last = last;\n    lodash.lastIndexOf = lastIndexOf;\n    lodash.lowerCase = lowerCase;\n    lodash.lowerFirst = lowerFirst;\n    lodash.lt = lt;\n    lodash.lte = lte;\n    lodash.max = max;\n    lodash.maxBy = maxBy;\n    lodash.mean = mean;\n    lodash.meanBy = meanBy;\n    lodash.min = min;\n    lodash.minBy = minBy;\n    lodash.stubArray = stubArray;\n    lodash.stubFalse = stubFalse;\n    lodash.stubObject = stubObject;\n    lodash.stubString = stubString;\n    lodash.stubTrue = stubTrue;\n    lodash.multiply = multiply;\n    lodash.nth = nth;\n    lodash.noConflict = noConflict;\n    lodash.noop = noop;\n    lodash.now = now;\n    lodash.pad = pad;\n    lodash.padEnd = padEnd;\n    lodash.padStart = padStart;\n    lodash.parseInt = parseInt;\n    lodash.random = random;\n    lodash.reduce = reduce;\n    lodash.reduceRight = reduceRight;\n    lodash.repeat = repeat;\n    lodash.replace = replace;\n    lodash.result = result;\n    lodash.round = round;\n    lodash.runInContext = runInContext;\n    lodash.sample = sample;\n    lodash.size = size;\n    lodash.snakeCase = snakeCase;\n    lodash.some = some;\n    lodash.sortedIndex = sortedIndex;\n    lodash.sortedIndexBy = sortedIndexBy;\n    lodash.sortedIndexOf = sortedIndexOf;\n    lodash.sortedLastIndex = sortedLastIndex;\n    lodash.sortedLastIndexBy = sortedLastIndexBy;\n    lodash.sortedLastIndexOf = sortedLastIndexOf;\n    lodash.startCase = startCase;\n    lodash.startsWith = startsWith;\n    lodash.subtract = subtract;\n    lodash.sum = sum;\n    lodash.sumBy = sumBy;\n    lodash.template = template;\n    lodash.times = times;\n    lodash.toFinite = toFinite;\n    lodash.toInteger = toInteger;\n    lodash.toLength = toLength;\n    lodash.toLower = toLower;\n    lodash.toNumber = toNumber;\n    lodash.toSafeInteger = toSafeInteger;\n    lodash.toString = toString;\n    lodash.toUpper = toUpper;\n    lodash.trim = trim;\n    lodash.trimEnd = trimEnd;\n    lodash.trimStart = trimStart;\n    lodash.truncate = truncate;\n    lodash.unescape = unescape;\n    lodash.uniqueId = uniqueId;\n    lodash.upperCase = upperCase;\n    lodash.upperFirst = upperFirst;\n\n    // Add aliases.\n    lodash.each = forEach;\n    lodash.eachRight = forEachRight;\n    lodash.first = head;\n\n    mixin(lodash, (function() {\n      var source = {};\n      baseForOwn(lodash, function(func, methodName) {\n        if (!hasOwnProperty.call(lodash.prototype, methodName)) {\n          source[methodName] = func;\n        }\n      });\n      return source;\n    }()), { 'chain': false });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The semantic version number.\n     *\n     * @static\n     * @memberOf _\n     * @type {string}\n     */\n    lodash.VERSION = VERSION;\n\n    // Assign default placeholders.\n    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {\n      lodash[methodName].placeholder = lodash;\n    });\n\n    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.\n    arrayEach(['drop', 'take'], function(methodName, index) {\n      LazyWrapper.prototype[methodName] = function(n) {\n        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);\n\n        var result = (this.__filtered__ && !index)\n          ? new LazyWrapper(this)\n          : this.clone();\n\n        if (result.__filtered__) {\n          result.__takeCount__ = nativeMin(n, result.__takeCount__);\n        } else {\n          result.__views__.push({\n            'size': nativeMin(n, MAX_ARRAY_LENGTH),\n            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')\n          });\n        }\n        return result;\n      };\n\n      LazyWrapper.prototype[methodName + 'Right'] = function(n) {\n        return this.reverse()[methodName](n).reverse();\n      };\n    });\n\n    // Add `LazyWrapper` methods that accept an `iteratee` value.\n    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {\n      var type = index + 1,\n          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;\n\n      LazyWrapper.prototype[methodName] = function(iteratee) {\n        var result = this.clone();\n        result.__iteratees__.push({\n          'iteratee': getIteratee(iteratee, 3),\n          'type': type\n        });\n        result.__filtered__ = result.__filtered__ || isFilter;\n        return result;\n      };\n    });\n\n    // Add `LazyWrapper` methods for `_.head` and `_.last`.\n    arrayEach(['head', 'last'], function(methodName, index) {\n      var takeName = 'take' + (index ? 'Right' : '');\n\n      LazyWrapper.prototype[methodName] = function() {\n        return this[takeName](1).value()[0];\n      };\n    });\n\n    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.\n    arrayEach(['initial', 'tail'], function(methodName, index) {\n      var dropName = 'drop' + (index ? '' : 'Right');\n\n      LazyWrapper.prototype[methodName] = function() {\n        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);\n      };\n    });\n\n    LazyWrapper.prototype.compact = function() {\n      return this.filter(identity);\n    };\n\n    LazyWrapper.prototype.find = function(predicate) {\n      return this.filter(predicate).head();\n    };\n\n    LazyWrapper.prototype.findLast = function(predicate) {\n      return this.reverse().find(predicate);\n    };\n\n    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {\n      if (typeof path == 'function') {\n        return new LazyWrapper(this);\n      }\n      return this.map(function(value) {\n        return baseInvoke(value, path, args);\n      });\n    });\n\n    LazyWrapper.prototype.reject = function(predicate) {\n      return this.filter(negate(getIteratee(predicate)));\n    };\n\n    LazyWrapper.prototype.slice = function(start, end) {\n      start = toInteger(start);\n\n      var result = this;\n      if (result.__filtered__ && (start > 0 || end < 0)) {\n        return new LazyWrapper(result);\n      }\n      if (start < 0) {\n        result = result.takeRight(-start);\n      } else if (start) {\n        result = result.drop(start);\n      }\n      if (end !== undefined) {\n        end = toInteger(end);\n        result = end < 0 ? result.dropRight(-end) : result.take(end - start);\n      }\n      return result;\n    };\n\n    LazyWrapper.prototype.takeRightWhile = function(predicate) {\n      return this.reverse().takeWhile(predicate).reverse();\n    };\n\n    LazyWrapper.prototype.toArray = function() {\n      return this.take(MAX_ARRAY_LENGTH);\n    };\n\n    // Add `LazyWrapper` methods to `lodash.prototype`.\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),\n          isTaker = /^(?:head|last)$/.test(methodName),\n          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],\n          retUnwrapped = isTaker || /^find/.test(methodName);\n\n      if (!lodashFunc) {\n        return;\n      }\n      lodash.prototype[methodName] = function() {\n        var value = this.__wrapped__,\n            args = isTaker ? [1] : arguments,\n            isLazy = value instanceof LazyWrapper,\n            iteratee = args[0],\n            useLazy = isLazy || isArray(value);\n\n        var interceptor = function(value) {\n          var result = lodashFunc.apply(lodash, arrayPush([value], args));\n          return (isTaker && chainAll) ? result[0] : result;\n        };\n\n        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {\n          // Avoid lazy use if the iteratee has a \"length\" value other than `1`.\n          isLazy = useLazy = false;\n        }\n        var chainAll = this.__chain__,\n            isHybrid = !!this.__actions__.length,\n            isUnwrapped = retUnwrapped && !chainAll,\n            onlyLazy = isLazy && !isHybrid;\n\n        if (!retUnwrapped && useLazy) {\n          value = onlyLazy ? value : new LazyWrapper(this);\n          var result = func.apply(value, args);\n          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });\n          return new LodashWrapper(result, chainAll);\n        }\n        if (isUnwrapped && onlyLazy) {\n          return func.apply(this, args);\n        }\n        result = this.thru(interceptor);\n        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;\n      };\n    });\n\n    // Add `Array` methods to `lodash.prototype`.\n    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {\n      var func = arrayProto[methodName],\n          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',\n          retUnwrapped = /^(?:pop|shift)$/.test(methodName);\n\n      lodash.prototype[methodName] = function() {\n        var args = arguments;\n        if (retUnwrapped && !this.__chain__) {\n          var value = this.value();\n          return func.apply(isArray(value) ? value : [], args);\n        }\n        return this[chainName](function(value) {\n          return func.apply(isArray(value) ? value : [], args);\n        });\n      };\n    });\n\n    // Map minified method names to their real names.\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n      var lodashFunc = lodash[methodName];\n      if (lodashFunc) {\n        var key = lodashFunc.name + '';\n        if (!hasOwnProperty.call(realNames, key)) {\n          realNames[key] = [];\n        }\n        realNames[key].push({ 'name': methodName, 'func': lodashFunc });\n      }\n    });\n\n    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{\n      'name': 'wrapper',\n      'func': undefined\n    }];\n\n    // Add methods to `LazyWrapper`.\n    LazyWrapper.prototype.clone = lazyClone;\n    LazyWrapper.prototype.reverse = lazyReverse;\n    LazyWrapper.prototype.value = lazyValue;\n\n    // Add chain sequence methods to the `lodash` wrapper.\n    lodash.prototype.at = wrapperAt;\n    lodash.prototype.chain = wrapperChain;\n    lodash.prototype.commit = wrapperCommit;\n    lodash.prototype.next = wrapperNext;\n    lodash.prototype.plant = wrapperPlant;\n    lodash.prototype.reverse = wrapperReverse;\n    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;\n\n    // Add lazy aliases.\n    lodash.prototype.first = lodash.prototype.head;\n\n    if (symIterator) {\n      lodash.prototype[symIterator] = wrapperToIterator;\n    }\n    return lodash;\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  // Export lodash.\n  var _ = runInContext();\n\n  // Some AMD build optimizers, like r.js, check for condition patterns like:\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n    // Expose Lodash on the global object to prevent errors when Lodash is\n    // loaded by a script tag in the presence of an AMD loader.\n    // See http://requirejs.org/docs/errors.html#mismatch for more details.\n    // Use `_.noConflict` to remove Lodash from the global object.\n    root._ = _;\n\n    // Define as an anonymous module so, through path mapping, it can be\n    // referenced as the \"underscore\" module.\n    define(function() {\n      return _;\n    });\n  }\n  // Check for `exports` after `define` in case a build optimizer adds it.\n  else if (freeModule) {\n    // Export for Node.js.\n    (freeModule.exports = _)._ = _;\n    // Export for CommonJS support.\n    freeExports._ = _;\n  }\n  else {\n    // Export to the global object.\n    root._ = _;\n  }\n}.call(this));\n","import { SessionTypes } from \"@walletconnect/types\";\nimport {\n  isCaipNamespace,\n  isValidObject,\n  mergeArrays,\n  parseChainId,\n  parseNamespaceKey,\n} from \"@walletconnect/utils\";\nimport { RPC_URL } from \"../constants\";\nimport { Namespace, NamespaceConfig } from \"../types\";\nimport { merge } from \"lodash\";\n\nexport function getRpcUrl(chainId: string, rpc: Namespace, projectId?: string): string | undefined {\n  const chain = parseChainId(chainId);\n  return (\n    rpc.rpcMap?.[chain.reference] ||\n    `${RPC_URL}?chainId=${chain.namespace}:${chain.reference}&projectId=${projectId}`\n  );\n}\n\nexport function getChainId(chain: string): string {\n  return chain.includes(\":\") ? chain.split(\":\")[1] : chain;\n}\n\nexport function validateChainApproval(chain: string, chains: string[]): void {\n  if (!chains.includes(chain)) {\n    throw new Error(\n      `Chain '${chain}' not approved. Please use one of the following: ${chains.toString()}`,\n    );\n  }\n}\n\nexport function getChainsFromApprovedSession(accounts: string[]): string[] {\n  return accounts.map((address) => `${address.split(\":\")[0]}:${address.split(\":\")[1]}`);\n}\n\nexport function getAccountsFromSession(namespace: string, session: SessionTypes.Struct): string[] {\n  // match namespaces e.g. eip155 with eip155:1\n  const matchedNamespaceKeys = Object.keys(session.namespaces).filter((key) =>\n    key.includes(namespace),\n  );\n  if (!matchedNamespaceKeys.length) return [];\n  const accounts: string[] = [];\n  matchedNamespaceKeys.forEach((key) => {\n    const accountsForNamespace = session.namespaces[key].accounts;\n    accounts.push(...accountsForNamespace);\n  });\n  return accounts;\n}\n\nexport function mergeRequiredOptionalNamespaces(\n  required: NamespaceConfig = {},\n  optional: NamespaceConfig = {},\n) {\n  const requiredNamespaces = normalizeNamespaces(required);\n  const optionalNamespaces = normalizeNamespaces(optional);\n  return merge(requiredNamespaces, optionalNamespaces);\n}\n\n/**\n * Converts\n * {\n *  \"eip155:1\": {...},\n *  \"eip155:2\": {...},\n * }\n * into\n * {\n *  \"eip155\": {\n *      chains: [\"eip155:1\", \"eip155:2\"],\n *      ...\n *    }\n * }\n *\n */\nexport function normalizeNamespaces(namespaces: NamespaceConfig): NamespaceConfig {\n  const normalizedNamespaces: NamespaceConfig = {};\n  if (!isValidObject(namespaces)) return normalizedNamespaces;\n\n  for (const [key, values] of Object.entries(namespaces)) {\n    const chains = isCaipNamespace(key) ? [key] : values.chains;\n    const methods = values.methods || [];\n    const events = values.events || [];\n    const rpcMap = values.rpcMap || {};\n    const normalizedKey = parseNamespaceKey(key);\n    normalizedNamespaces[normalizedKey] = {\n      ...normalizedNamespaces[normalizedKey],\n      ...values,\n      chains: mergeArrays(chains, normalizedNamespaces[normalizedKey]?.chains),\n      methods: mergeArrays(methods, normalizedNamespaces[normalizedKey]?.methods),\n      events: mergeArrays(events, normalizedNamespaces[normalizedKey]?.events),\n      rpcMap: { ...rpcMap, ...normalizedNamespaces[normalizedKey]?.rpcMap },\n    };\n  }\n  return normalizedNamespaces;\n}\n\nexport function parseCaip10Account(caip10Account: string): string {\n  return caip10Account.includes(\":\") ? caip10Account.split(\":\")[2] : caip10Account;\n}\n\n/**\n * Populates the chains array for each namespace with the chains extracted from the accounts if are otherwise missing\n */\nexport function populateNamespacesChains(\n  namespaces: SessionTypes.Namespaces,\n): Record<string, SessionTypes.Namespace> {\n  const parsedNamespaces: Record<string, SessionTypes.Namespace> = {};\n  for (const [key, values] of Object.entries(namespaces)) {\n    const methods = values.methods || [];\n    const events = values.events || [];\n    const accounts = values.accounts || [];\n    // If the key includes a CAIP separator `:` we know it's a namespace + chainId (e.g. `eip155:1`)\n    const chains = isCaipNamespace(key)\n      ? [key]\n      : values.chains\n      ? values.chains\n      : getChainsFromApprovedSession(values.accounts);\n    parsedNamespaces[key] = {\n      chains,\n      methods,\n      events,\n      accounts,\n    };\n  }\n  return parsedNamespaces;\n}\n\nexport function convertChainIdToNumber(chainId: string | number): number | string {\n  if (typeof chainId === \"number\") return chainId;\n  if (chainId.includes(\"0x\")) {\n    return parseInt(chainId, 16);\n  }\n\n  chainId = chainId.includes(\":\") ? chainId.split(\":\")[1] : chainId;\n  return isNaN(Number(chainId)) ? chainId : Number(chainId);\n}\n","const globals = {};\nexport const getGlobal = (key: string) => {\n  return globals[key];\n};\n\nexport const setGlobal = (key: string, value: unknown) => {\n  globals[key] = value;\n};\n","import HttpConnection from \"@walletconnect/jsonrpc-http-connection\";\nimport { JsonRpcProvider } from \"@walletconnect/jsonrpc-provider\";\nimport Client from \"@walletconnect/sign-client\";\nimport { EngineTypes, SessionTypes } from \"@walletconnect/types\";\nimport EventEmitter from \"events\";\nimport { PROVIDER_EVENTS } from \"../constants\";\nimport {\n  IProvider,\n  RequestParams,\n  RpcProvidersMap,\n  SessionNamespace,\n  SubProviderOpts,\n} from \"../types\";\n\nimport { getChainId, getGlobal, getRpcUrl } from \"../utils\";\n\nclass PolkadotProvider implements IProvider {\n  public name = \"polkadot\";\n  public client: Client;\n  public httpProviders: RpcProvidersMap;\n  public events: EventEmitter;\n  public namespace: SessionNamespace;\n  public chainId: string;\n\n  constructor(opts: SubProviderOpts) {\n    this.namespace = opts.namespace;\n    this.events = getGlobal(\"events\");\n    this.client = getGlobal(\"client\");\n    this.chainId = this.getDefaultChain();\n    this.httpProviders = this.createHttpProviders();\n  }\n\n  public updateNamespace(namespace: SessionTypes.Namespace) {\n    this.namespace = Object.assign(this.namespace, namespace);\n  }\n\n  public requestAccounts(): string[] {\n    return this.getAccounts();\n  }\n\n  public getDefaultChain(): string {\n    if (this.chainId) return this.chainId;\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n\n    const chainId = this.namespace.chains[0];\n\n    if (!chainId) throw new Error(`ChainId not found`);\n\n    return chainId.split(\":\")[1];\n  }\n\n  public request<T = unknown>(args: RequestParams): Promise<T> {\n    if (this.namespace.methods.includes(args.request.method)) {\n      return this.client.request(args as EngineTypes.RequestParams);\n    }\n    return this.getHttpProvider().request(args.request);\n  }\n\n  public setDefaultChain(chainId: string, rpcUrl?: string | undefined) {\n    // http provider exists so just set the chainId\n    if (!this.httpProviders[chainId]) {\n      this.setHttpProvider(chainId, rpcUrl);\n    }\n    this.chainId = chainId;\n    this.events.emit(PROVIDER_EVENTS.DEFAULT_CHAIN_CHANGED, `${this.name}:${chainId}`);\n  }\n\n  // ---------------- PRIVATE ---------------- //\n\n  private getAccounts(): string[] {\n    const accounts = this.namespace.accounts;\n    if (!accounts) {\n      return [];\n    }\n\n    return (\n      accounts\n        // get the accounts from the active chain\n        .filter((account) => account.split(\":\")[1] === this.chainId.toString())\n        // remove namespace & chainId from the string\n        .map((account) => account.split(\":\")[2]) || []\n    );\n  }\n\n  private createHttpProviders(): RpcProvidersMap {\n    const http = {};\n    this.namespace.chains.forEach((chain) => {\n      const parsedChainId = getChainId(chain);\n      http[parsedChainId] = this.createHttpProvider(parsedChainId, this.namespace.rpcMap?.[chain]);\n    });\n    return http;\n  }\n\n  private getHttpProvider(): JsonRpcProvider {\n    const chain = `${this.name}:${this.chainId}`;\n    const http = this.httpProviders[chain];\n    if (typeof http === \"undefined\") {\n      throw new Error(`JSON-RPC provider for ${chain} not found`);\n    }\n    return http;\n  }\n\n  private setHttpProvider(chainId: string, rpcUrl?: string): void {\n    const http = this.createHttpProvider(chainId, rpcUrl);\n    if (http) {\n      this.httpProviders[chainId] = http;\n    }\n  }\n\n  private createHttpProvider(\n    chainId: string,\n    rpcUrl?: string | undefined,\n  ): JsonRpcProvider | undefined {\n    const rpc = rpcUrl || getRpcUrl(chainId, this.namespace, this.client.core.projectId);\n    if (!rpc) {\n      throw new Error(`No RPC url provided for chainId: ${chainId}`);\n    }\n    const http = new JsonRpcProvider(new HttpConnection(rpc, getGlobal(\"disableProviderPing\")));\n    return http;\n  }\n}\n\nexport default PolkadotProvider;\n","import Client from \"@walletconnect/sign-client\";\nimport { JsonRpcProvider } from \"@walletconnect/jsonrpc-provider\";\nimport { HttpConnection } from \"@walletconnect/jsonrpc-http-connection\";\nimport { EngineTypes, SessionTypes } from \"@walletconnect/types\";\n\nimport {\n  IProvider,\n  RpcProvidersMap,\n  SubProviderOpts,\n  RequestParams,\n  SessionNamespace,\n} from \"../types\";\n\nimport { getChainId, getGlobal, getRpcUrl } from \"../utils\";\nimport EventEmitter from \"events\";\nimport { PROVIDER_EVENTS } from \"../constants\";\n\nclass Eip155Provider implements IProvider {\n  public name = \"eip155\";\n  public client: Client;\n  // the active chainId on the dapp\n  public chainId: number;\n  public namespace: SessionNamespace;\n  public httpProviders: RpcProvidersMap;\n  public events: EventEmitter;\n\n  constructor(opts: SubProviderOpts) {\n    this.namespace = opts.namespace;\n    this.events = getGlobal(\"events\");\n    this.client = getGlobal(\"client\");\n    this.httpProviders = this.createHttpProviders();\n    this.chainId = parseInt(this.getDefaultChain());\n  }\n\n  public async request<T = unknown>(args: RequestParams): Promise<T> {\n    switch (args.request.method) {\n      case \"eth_requestAccounts\":\n        return this.getAccounts() as any;\n      case \"eth_accounts\":\n        return this.getAccounts() as any;\n      case \"wallet_switchEthereumChain\": {\n        return await this.handleSwitchChain(args);\n      }\n      case \"eth_chainId\":\n        return parseInt(this.getDefaultChain()) as any;\n      default:\n        break;\n    }\n    if (this.namespace.methods.includes(args.request.method)) {\n      return await this.client.request(args as EngineTypes.RequestParams);\n    }\n    return this.getHttpProvider().request(args.request);\n  }\n\n  public updateNamespace(namespace: SessionTypes.Namespace) {\n    this.namespace = Object.assign(this.namespace, namespace);\n  }\n\n  public setDefaultChain(chainId: string, rpcUrl?: string | undefined) {\n    // http provider exists so just set the chainId\n    if (!this.httpProviders[chainId]) {\n      this.setHttpProvider(parseInt(chainId), rpcUrl);\n    }\n    this.chainId = parseInt(chainId);\n    this.events.emit(PROVIDER_EVENTS.DEFAULT_CHAIN_CHANGED, `${this.name}:${chainId}`);\n  }\n\n  public requestAccounts(): string[] {\n    return this.getAccounts();\n  }\n\n  public getDefaultChain(): string {\n    if (this.chainId) return this.chainId.toString();\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n\n    const chainId = this.namespace.chains[0];\n    if (!chainId) throw new Error(`ChainId not found`);\n\n    return chainId.split(\":\")[1];\n  }\n\n  // ---------- Private ----------------------------------------------- //\n\n  private createHttpProvider(\n    chainId: number,\n    rpcUrl?: string | undefined,\n  ): JsonRpcProvider | undefined {\n    const rpc =\n      rpcUrl || getRpcUrl(`${this.name}:${chainId}`, this.namespace, this.client.core.projectId);\n    if (!rpc) {\n      throw new Error(`No RPC url provided for chainId: ${chainId}`);\n    }\n    const http = new JsonRpcProvider(new HttpConnection(rpc, getGlobal(\"disableProviderPing\")));\n    return http;\n  }\n\n  private setHttpProvider(chainId: number, rpcUrl?: string): void {\n    const http = this.createHttpProvider(chainId, rpcUrl);\n    if (http) {\n      this.httpProviders[chainId] = http;\n    }\n  }\n\n  private createHttpProviders(): RpcProvidersMap {\n    const http = {};\n    this.namespace.chains.forEach((chain) => {\n      const parsedChain = parseInt(getChainId(chain));\n      http[parsedChain] = this.createHttpProvider(parsedChain, this.namespace.rpcMap?.[chain]);\n    });\n    return http;\n  }\n\n  private getAccounts(): string[] {\n    const accounts = this.namespace.accounts;\n    if (!accounts) {\n      return [];\n    }\n    return [\n      ...new Set(\n        accounts\n          // get the accounts from the active chain\n          .filter((account) => account.split(\":\")[1] === this.chainId.toString())\n          // remove namespace & chainId from the string\n          .map((account) => account.split(\":\")[2]),\n      ),\n    ];\n  }\n\n  private getHttpProvider(): JsonRpcProvider {\n    const chain = this.chainId;\n    const http = this.httpProviders[chain];\n    if (typeof http === \"undefined\") {\n      throw new Error(`JSON-RPC provider for ${chain} not found`);\n    }\n    return http;\n  }\n\n  private async handleSwitchChain(args: RequestParams): Promise<any> {\n    let hexChainId = args.request.params ? args.request.params[0]?.chainId : \"0x0\";\n    hexChainId = hexChainId.startsWith(\"0x\") ? hexChainId : `0x${hexChainId}`;\n    const parsedChainId = parseInt(hexChainId, 16);\n    // if chainId is already approved, switch locally\n    if (this.isChainApproved(parsedChainId)) {\n      this.setDefaultChain(`${parsedChainId}`);\n    } else if (this.namespace.methods.includes(\"wallet_switchEthereumChain\")) {\n      // try to switch chain within the wallet\n      await this.client.request({\n        topic: args.topic,\n        request: {\n          method: args.request.method,\n          params: [\n            {\n              chainId: hexChainId,\n            },\n          ],\n        },\n        chainId: this.namespace.chains?.[0], // Sending a previously unapproved chainId will cause namespace validation failure so we must set request chainId to the first chainId in the namespace to avoid it\n      } as EngineTypes.RequestParams);\n      this.setDefaultChain(`${parsedChainId}`);\n    } else {\n      throw new Error(\n        `Failed to switch to chain 'eip155:${parsedChainId}'. The chain is not approved or the wallet does not support 'wallet_switchEthereumChain' method.`,\n      );\n    }\n    return null;\n  }\n\n  private isChainApproved(chainId: number): boolean {\n    return this.namespace.chains.includes(`${this.name}:${chainId}`);\n  }\n}\n\nexport default Eip155Provider;\n","import HttpConnection from \"@walletconnect/jsonrpc-http-connection\";\nimport { JsonRpcProvider } from \"@walletconnect/jsonrpc-provider\";\nimport Client from \"@walletconnect/sign-client\";\nimport { EngineTypes, SessionTypes } from \"@walletconnect/types\";\nimport EventEmitter from \"events\";\nimport { PROVIDER_EVENTS } from \"../constants\";\nimport {\n  IProvider,\n  RequestParams,\n  RpcProvidersMap,\n  SessionNamespace,\n  SubProviderOpts,\n} from \"../types\";\nimport { getChainId, getGlobal, getRpcUrl } from \"../utils\";\n\nclass SolanaProvider implements IProvider {\n  public name = \"solana\";\n  public client: Client;\n  public httpProviders: RpcProvidersMap;\n  public events: EventEmitter;\n  public namespace: SessionNamespace;\n  public chainId: string;\n\n  constructor(opts: SubProviderOpts) {\n    this.namespace = opts.namespace;\n    this.events = getGlobal(\"events\");\n    this.client = getGlobal(\"client\");\n    this.chainId = this.getDefaultChain();\n    this.httpProviders = this.createHttpProviders();\n  }\n\n  public updateNamespace(namespace: SessionTypes.Namespace) {\n    this.namespace = Object.assign(this.namespace, namespace);\n  }\n\n  public requestAccounts(): string[] {\n    return this.getAccounts();\n  }\n\n  public request<T = unknown>(args: RequestParams): Promise<T> {\n    if (this.namespace.methods.includes(args.request.method)) {\n      return this.client.request(args as EngineTypes.RequestParams);\n    }\n    return this.getHttpProvider().request(args.request);\n  }\n\n  public setDefaultChain(chainId: string, rpcUrl?: string | undefined) {\n    // http provider exists so just set the chainId\n    if (!this.httpProviders[chainId]) {\n      this.setHttpProvider(chainId, rpcUrl);\n    }\n    this.chainId = chainId;\n    this.events.emit(PROVIDER_EVENTS.DEFAULT_CHAIN_CHANGED, `${this.name}:${chainId}`);\n  }\n\n  public getDefaultChain(): string {\n    if (this.chainId) return this.chainId;\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n\n    const chainId = this.namespace.chains[0];\n    if (!chainId) throw new Error(`ChainId not found`);\n\n    return chainId.split(\":\")[1];\n  }\n\n  // --------- PRIVATE --------- //\n\n  private getAccounts(): string[] {\n    const accounts = this.namespace.accounts;\n    if (!accounts) {\n      return [];\n    }\n\n    return [\n      ...new Set(\n        accounts\n          // get the accounts from the active chain\n          .filter((account) => account.split(\":\")[1] === this.chainId.toString())\n          // remove namespace & chainId from the string\n          .map((account) => account.split(\":\")[2]),\n      ),\n    ];\n  }\n\n  private createHttpProviders(): RpcProvidersMap {\n    const http = {};\n    this.namespace.chains.forEach((chain) => {\n      const parsedChainId = getChainId(chain);\n      http[parsedChainId] = this.createHttpProvider(parsedChainId, this.namespace.rpcMap?.[chain]);\n    });\n    return http;\n  }\n\n  private getHttpProvider(): JsonRpcProvider {\n    const chain = `${this.name}:${this.chainId}`;\n    const http = this.httpProviders[chain];\n    if (typeof http === \"undefined\") {\n      throw new Error(`JSON-RPC provider for ${chain} not found`);\n    }\n    return http;\n  }\n\n  private setHttpProvider(chainId: string, rpcUrl?: string): void {\n    const http = this.createHttpProvider(chainId, rpcUrl);\n    if (http) {\n      this.httpProviders[chainId] = http;\n    }\n  }\n\n  private createHttpProvider(\n    chainId: string,\n    rpcUrl?: string | undefined,\n  ): JsonRpcProvider | undefined {\n    const rpc = rpcUrl || getRpcUrl(chainId, this.namespace, this.client.core.projectId);\n    if (!rpc) {\n      throw new Error(`No RPC url provided for chainId: ${chainId}`);\n    }\n    const http = new JsonRpcProvider(new HttpConnection(rpc, getGlobal(\"disableProviderPing\")));\n    return http;\n  }\n}\n\nexport default SolanaProvider;\n","import HttpConnection from \"@walletconnect/jsonrpc-http-connection\";\nimport { JsonRpcProvider } from \"@walletconnect/jsonrpc-provider\";\nimport Client from \"@walletconnect/sign-client\";\nimport { EngineTypes, SessionTypes } from \"@walletconnect/types\";\nimport EventEmitter from \"events\";\nimport { PROVIDER_EVENTS } from \"../constants\";\nimport {\n  IProvider,\n  RequestParams,\n  RpcProvidersMap,\n  SessionNamespace,\n  SubProviderOpts,\n} from \"../types\";\nimport { getChainId, getGlobal, getRpcUrl } from \"../utils\";\n\nclass CosmosProvider implements IProvider {\n  public name = \"cosmos\";\n  public client: Client;\n  public httpProviders: RpcProvidersMap;\n  public events: EventEmitter;\n  public namespace: SessionNamespace;\n  public chainId: string;\n\n  constructor(opts: SubProviderOpts) {\n    this.namespace = opts.namespace;\n    this.events = getGlobal(\"events\");\n    this.client = getGlobal(\"client\");\n    this.chainId = this.getDefaultChain();\n    this.httpProviders = this.createHttpProviders();\n  }\n\n  public updateNamespace(namespace: SessionTypes.Namespace) {\n    this.namespace = Object.assign(this.namespace, namespace);\n  }\n\n  public requestAccounts(): string[] {\n    return this.getAccounts();\n  }\n\n  public getDefaultChain(): string {\n    if (this.chainId) return this.chainId;\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n\n    const chainId = this.namespace.chains[0];\n\n    if (!chainId) throw new Error(`ChainId not found`);\n\n    return chainId.split(\":\")[1];\n  }\n\n  public request<T = unknown>(args: RequestParams): Promise<T> {\n    if (this.namespace.methods.includes(args.request.method)) {\n      return this.client.request(args as EngineTypes.RequestParams);\n    }\n    return this.getHttpProvider().request(args.request);\n  }\n\n  public setDefaultChain(chainId: string, rpcUrl?: string | undefined) {\n    // http provider exists so just set the chainId\n    if (!this.httpProviders[chainId]) {\n      this.setHttpProvider(chainId, rpcUrl);\n    }\n    this.chainId = chainId;\n    this.events.emit(PROVIDER_EVENTS.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);\n  }\n\n  // ---------------- PRIVATE ---------------- //\n\n  private getAccounts(): string[] {\n    const accounts = this.namespace.accounts;\n    if (!accounts) {\n      return [];\n    }\n\n    return [\n      ...new Set(\n        accounts\n          // get the accounts from the active chain\n          .filter((account) => account.split(\":\")[1] === this.chainId.toString())\n          // remove namespace & chainId from the string\n          .map((account) => account.split(\":\")[2]),\n      ),\n    ];\n  }\n\n  private createHttpProviders(): RpcProvidersMap {\n    const http = {};\n    this.namespace.chains.forEach((chain) => {\n      const parsedChainId = getChainId(chain);\n      http[parsedChainId] = this.createHttpProvider(parsedChainId, this.namespace.rpcMap?.[chain]);\n    });\n    return http;\n  }\n\n  private getHttpProvider(): JsonRpcProvider {\n    const chain = `${this.name}:${this.chainId}`;\n    const http = this.httpProviders[chain];\n    if (typeof http === \"undefined\") {\n      throw new Error(`JSON-RPC provider for ${chain} not found`);\n    }\n    return http;\n  }\n\n  private setHttpProvider(chainId: string, rpcUrl?: string): void {\n    const http = this.createHttpProvider(chainId, rpcUrl);\n    if (http) {\n      this.httpProviders[chainId] = http;\n    }\n  }\n\n  private createHttpProvider(\n    chainId: string,\n    rpcUrl?: string | undefined,\n  ): JsonRpcProvider | undefined {\n    const rpc = rpcUrl || getRpcUrl(chainId, this.namespace, this.client.core.projectId);\n    if (!rpc) {\n      throw new Error(`No RPC url provided for chainId: ${chainId}`);\n    }\n    const http = new JsonRpcProvider(new HttpConnection(rpc, getGlobal(\"disableProviderPing\")));\n    return http;\n  }\n}\n\nexport default CosmosProvider;\n","import HttpConnection from \"@walletconnect/jsonrpc-http-connection\";\nimport { JsonRpcProvider } from \"@walletconnect/jsonrpc-provider\";\nimport Client from \"@walletconnect/sign-client\";\nimport { EngineTypes, SessionTypes } from \"@walletconnect/types\";\nimport EventEmitter from \"events\";\nimport { PROVIDER_EVENTS } from \"../constants\";\nimport {\n  IProvider,\n  RequestParams,\n  RpcProvidersMap,\n  SessionNamespace,\n  SubProviderOpts,\n} from \"../types\";\nimport { getChainId, getGlobal } from \"../utils\";\n\nclass CardanoProvider implements IProvider {\n  public name = \"cip34\";\n  public client: Client;\n  public httpProviders: RpcProvidersMap;\n  public events: EventEmitter;\n  public namespace: SessionNamespace;\n  public chainId: string;\n\n  constructor(opts: SubProviderOpts) {\n    this.namespace = opts.namespace;\n    this.events = getGlobal(\"events\");\n    this.client = getGlobal(\"client\");\n    this.chainId = this.getDefaultChain();\n    this.httpProviders = this.createHttpProviders();\n  }\n\n  public updateNamespace(namespace: SessionTypes.Namespace) {\n    this.namespace = Object.assign(this.namespace, namespace);\n  }\n\n  public requestAccounts(): string[] {\n    return this.getAccounts();\n  }\n\n  public getDefaultChain(): string {\n    if (this.chainId) return this.chainId;\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n\n    const chainId = this.namespace.chains[0];\n    if (!chainId) throw new Error(`ChainId not found`);\n\n    return chainId.split(\":\")[1];\n  }\n\n  public request<T = unknown>(args: RequestParams): Promise<T> {\n    if (this.namespace.methods.includes(args.request.method)) {\n      return this.client.request(args as EngineTypes.RequestParams);\n    }\n    return this.getHttpProvider().request(args.request);\n  }\n\n  public setDefaultChain(chainId: string, rpcUrl?: string | undefined) {\n    // http provider exists so just set the chainId\n    if (!this.httpProviders[chainId]) {\n      this.setHttpProvider(chainId, rpcUrl);\n    }\n    this.chainId = chainId;\n    this.events.emit(PROVIDER_EVENTS.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);\n  }\n\n  // ------------- PRIVATE -------------- /\n\n  private getAccounts(): string[] {\n    const accounts = this.namespace.accounts;\n    if (!accounts) {\n      return [];\n    }\n\n    return [\n      ...new Set(\n        accounts\n          // get the accounts from the active chain\n          .filter((account) => account.split(\":\")[1] === this.chainId.toString())\n          // remove namespace & chainId from the string\n          .map((account) => account.split(\":\")[2]),\n      ),\n    ];\n  }\n\n  private createHttpProviders(): RpcProvidersMap {\n    const http = {};\n    this.namespace.chains.forEach((chain) => {\n      const rpcURL = this.getCardanoRPCUrl(chain);\n      const parsedChain = getChainId(chain);\n      http[parsedChain] = this.createHttpProvider(parsedChain, rpcURL);\n    });\n    return http;\n  }\n\n  private getHttpProvider(): JsonRpcProvider {\n    const chain = `${this.name}:${this.chainId}`;\n    const http = this.httpProviders[chain];\n    if (typeof http === \"undefined\") {\n      throw new Error(`JSON-RPC provider for ${chain} not found`);\n    }\n    return http;\n  }\n\n  private getCardanoRPCUrl(chainId: string): string | undefined {\n    const rpcMap = this.namespace.rpcMap;\n    if (!rpcMap) return undefined;\n    return rpcMap[chainId];\n  }\n\n  private setHttpProvider(chainId: string, rpcUrl?: string): void {\n    const http = this.createHttpProvider(chainId, rpcUrl);\n    if (http) {\n      this.httpProviders[chainId] = http;\n    }\n  }\n\n  private createHttpProvider(\n    chainId: string,\n    rpcUrl?: string | undefined,\n  ): JsonRpcProvider | undefined {\n    const rpc = rpcUrl || this.getCardanoRPCUrl(chainId);\n    if (!rpc) {\n      throw new Error(`No RPC url provided for chainId: ${chainId}`);\n    }\n    const http = new JsonRpcProvider(new HttpConnection(rpc, getGlobal(\"disableProviderPing\")));\n    return http;\n  }\n}\n\nexport default CardanoProvider;\n","import HttpConnection from \"@walletconnect/jsonrpc-http-connection\";\nimport { JsonRpcProvider } from \"@walletconnect/jsonrpc-provider\";\nimport Client from \"@walletconnect/sign-client\";\nimport { EngineTypes, SessionTypes } from \"@walletconnect/types\";\nimport EventEmitter from \"events\";\nimport { PROVIDER_EVENTS } from \"../constants\";\nimport {\n  IProvider,\n  RequestParams,\n  RpcProvidersMap,\n  SessionNamespace,\n  SubProviderOpts,\n} from \"../types\";\nimport { getChainId, getGlobal, getRpcUrl } from \"../utils\";\n\n// Old wallet connect provider for Elrond\nclass ElrondProvider implements IProvider {\n  public name = \"elrond\";\n  public client: Client;\n  public httpProviders: RpcProvidersMap;\n  public events: EventEmitter;\n  public namespace: SessionNamespace;\n  public chainId: string;\n\n  constructor(opts: SubProviderOpts) {\n    this.namespace = opts.namespace;\n    this.events = getGlobal(\"events\");\n    this.client = getGlobal(\"client\");\n    this.chainId = this.getDefaultChain();\n    this.httpProviders = this.createHttpProviders();\n  }\n\n  public updateNamespace(namespace: SessionTypes.Namespace) {\n    this.namespace = Object.assign(this.namespace, namespace);\n  }\n\n  public requestAccounts(): string[] {\n    return this.getAccounts();\n  }\n\n  public request<T = unknown>(args: RequestParams): Promise<T> {\n    if (this.namespace.methods.includes(args.request.method)) {\n      return this.client.request(args as EngineTypes.RequestParams);\n    }\n    return this.getHttpProvider().request(args.request);\n  }\n\n  public setDefaultChain(chainId: string, rpcUrl?: string | undefined) {\n    // http provider exists so just set the chainId\n    if (!this.httpProviders[chainId]) {\n      this.setHttpProvider(chainId, rpcUrl);\n    }\n    this.chainId = chainId;\n    this.events.emit(PROVIDER_EVENTS.DEFAULT_CHAIN_CHANGED, `${this.name}:${chainId}`);\n  }\n\n  public getDefaultChain(): string {\n    if (this.chainId) return this.chainId;\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n\n    const chainId = this.namespace.chains[0];\n    if (!chainId) throw new Error(`ChainId not found`);\n\n    return chainId.split(\":\")[1];\n  }\n\n  // --------- PRIVATE --------- //\n\n  private getAccounts(): string[] {\n    const accounts = this.namespace.accounts;\n    if (!accounts) {\n      return [];\n    }\n\n    return [\n      ...new Set(\n        accounts\n          // get the accounts from the active chain\n          .filter((account) => account.split(\":\")[1] === this.chainId.toString())\n          // remove namespace & chainId from the string\n          .map((account) => account.split(\":\")[2]),\n      ),\n    ];\n  }\n\n  private createHttpProviders(): RpcProvidersMap {\n    const http = {};\n    this.namespace.chains.forEach((chain) => {\n      const parsedChainId = getChainId(chain);\n      http[parsedChainId] = this.createHttpProvider(parsedChainId, this.namespace.rpcMap?.[chain]);\n    });\n    return http;\n  }\n\n  private getHttpProvider(): JsonRpcProvider {\n    const chain = `${this.name}:${this.chainId}`;\n    const http = this.httpProviders[chain];\n    if (typeof http === \"undefined\") {\n      throw new Error(`JSON-RPC provider for ${chain} not found`);\n    }\n    return http;\n  }\n\n  private setHttpProvider(chainId: string, rpcUrl?: string): void {\n    const http = this.createHttpProvider(chainId, rpcUrl);\n    if (http) {\n      this.httpProviders[chainId] = http;\n    }\n  }\n\n  private createHttpProvider(\n    chainId: string,\n    rpcUrl?: string | undefined,\n  ): JsonRpcProvider | undefined {\n    const rpc = rpcUrl || getRpcUrl(chainId, this.namespace, this.client.core.projectId);\n    if (!rpc) {\n      throw new Error(`No RPC url provided for chainId: ${chainId}`);\n    }\n    const http = new JsonRpcProvider(new HttpConnection(rpc, getGlobal(\"disableProviderPing\")));\n    return http;\n  }\n}\n\nexport default ElrondProvider;\n","import HttpConnection from \"@walletconnect/jsonrpc-http-connection\";\nimport { JsonRpcProvider } from \"@walletconnect/jsonrpc-provider\";\nimport Client from \"@walletconnect/sign-client\";\nimport { EngineTypes, SessionTypes } from \"@walletconnect/types\";\nimport EventEmitter from \"events\";\nimport { PROVIDER_EVENTS } from \"../constants\";\nimport {\n  IProvider,\n  RequestParams,\n  RpcProvidersMap,\n  SessionNamespace,\n  SubProviderOpts,\n} from \"../types\";\nimport { getChainId, getGlobal, getRpcUrl } from \"../utils\";\n\nclass MultiversXProvider implements IProvider {\n  public name = \"multiversx\";\n  public client: Client;\n  public httpProviders: RpcProvidersMap;\n  public events: EventEmitter;\n  public namespace: SessionNamespace;\n  public chainId: string;\n\n  constructor(opts: SubProviderOpts) {\n    this.namespace = opts.namespace;\n    this.events = getGlobal(\"events\");\n    this.client = getGlobal(\"client\");\n    this.chainId = this.getDefaultChain();\n    this.httpProviders = this.createHttpProviders();\n  }\n\n  public updateNamespace(namespace: SessionTypes.Namespace) {\n    this.namespace = Object.assign(this.namespace, namespace);\n  }\n\n  public requestAccounts(): string[] {\n    return this.getAccounts();\n  }\n\n  public request<T = unknown>(args: RequestParams): Promise<T> {\n    if (this.namespace.methods.includes(args.request.method)) {\n      return this.client.request(args as EngineTypes.RequestParams);\n    }\n    return this.getHttpProvider().request(args.request);\n  }\n\n  public setDefaultChain(chainId: string, rpcUrl?: string | undefined) {\n    // http provider exists so just set the chainId\n    if (!this.httpProviders[chainId]) {\n      this.setHttpProvider(chainId, rpcUrl);\n    }\n    this.chainId = chainId;\n    this.events.emit(PROVIDER_EVENTS.DEFAULT_CHAIN_CHANGED, `${this.name}:${chainId}`);\n  }\n\n  public getDefaultChain(): string {\n    if (this.chainId) return this.chainId;\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n\n    const chainId = this.namespace.chains[0];\n    if (!chainId) throw new Error(`ChainId not found`);\n\n    return chainId.split(\":\")[1];\n  }\n\n  // --------- PRIVATE --------- //\n\n  private getAccounts(): string[] {\n    const accounts = this.namespace.accounts;\n    if (!accounts) {\n      return [];\n    }\n\n    return [\n      ...new Set(\n        accounts\n          // get the accounts from the active chain\n          .filter((account) => account.split(\":\")[1] === this.chainId.toString())\n          // remove namespace & chainId from the string\n          .map((account) => account.split(\":\")[2]),\n      ),\n    ];\n  }\n\n  private createHttpProviders(): RpcProvidersMap {\n    const http = {};\n    this.namespace.chains.forEach((chain) => {\n      const parsedChainId = getChainId(chain);\n      http[parsedChainId] = this.createHttpProvider(parsedChainId, this.namespace.rpcMap?.[chain]);\n    });\n    return http;\n  }\n\n  private getHttpProvider(): JsonRpcProvider {\n    const chain = `${this.name}:${this.chainId}`;\n    const http = this.httpProviders[chain];\n    if (typeof http === \"undefined\") {\n      throw new Error(`JSON-RPC provider for ${chain} not found`);\n    }\n    return http;\n  }\n\n  private setHttpProvider(chainId: string, rpcUrl?: string): void {\n    const http = this.createHttpProvider(chainId, rpcUrl);\n    if (http) {\n      this.httpProviders[chainId] = http;\n    }\n  }\n\n  private createHttpProvider(\n    chainId: string,\n    rpcUrl?: string | undefined,\n  ): JsonRpcProvider | undefined {\n    const rpc = rpcUrl || getRpcUrl(chainId, this.namespace, this.client.core.projectId);\n    if (!rpc) {\n      throw new Error(`No RPC url provided for chainId: ${chainId}`);\n    }\n    const http = new JsonRpcProvider(new HttpConnection(rpc, getGlobal(\"disableProviderPing\")));\n    return http;\n  }\n}\n\nexport default MultiversXProvider;\n","import HttpConnection from \"@walletconnect/jsonrpc-http-connection\";\nimport { JsonRpcProvider } from \"@walletconnect/jsonrpc-provider\";\nimport Client from \"@walletconnect/sign-client\";\nimport { EngineTypes, SessionTypes } from \"@walletconnect/types\";\nimport EventEmitter from \"events\";\nimport { PROVIDER_EVENTS } from \"../constants\";\nimport {\n  IProvider,\n  RequestParams,\n  RpcProvidersMap,\n  SessionNamespace,\n  SubProviderOpts,\n} from \"../types\";\nimport { getGlobal, getRpcUrl } from \"../utils\";\n\nclass NearProvider implements IProvider {\n  public name = \"near\";\n  public client: Client;\n  public httpProviders: RpcProvidersMap;\n  public events: EventEmitter;\n  public namespace: SessionNamespace;\n  public chainId: string;\n\n  constructor(opts: SubProviderOpts) {\n    this.namespace = opts.namespace;\n    this.events = getGlobal(\"events\");\n    this.client = getGlobal(\"client\");\n    this.chainId = this.getDefaultChain();\n    this.httpProviders = this.createHttpProviders();\n  }\n\n  public updateNamespace(namespace: SessionTypes.Namespace) {\n    this.namespace = Object.assign(this.namespace, namespace);\n  }\n\n  public requestAccounts(): string[] {\n    return this.getAccounts();\n  }\n\n  public getDefaultChain(): string {\n    if (this.chainId) return this.chainId;\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n\n    const chainId = this.namespace.chains[0];\n\n    if (!chainId) throw new Error(`ChainId not found`);\n\n    return chainId.split(\":\")[1];\n  }\n\n  public request<T = unknown>(args: RequestParams): Promise<T> {\n    if (this.namespace.methods.includes(args.request.method)) {\n      return this.client.request(args as EngineTypes.RequestParams);\n    }\n    return this.getHttpProvider().request(args.request);\n  }\n\n  public setDefaultChain(chainId: string, rpcUrl?: string | undefined) {\n    this.chainId = chainId;\n    // http provider exists so just set the chainId\n    if (!this.httpProviders[chainId]) {\n      const rpc = rpcUrl || getRpcUrl(`${this.name}:${chainId}`, this.namespace);\n      if (!rpc) {\n        throw new Error(`No RPC url provided for chainId: ${chainId}`);\n      }\n      this.setHttpProvider(chainId, rpc);\n    }\n\n    this.events.emit(PROVIDER_EVENTS.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);\n  }\n\n  // ---------------- PRIVATE ---------------- //\n\n  private getAccounts(): string[] {\n    const accounts = this.namespace.accounts;\n    if (!accounts) {\n      return [];\n    }\n\n    return (\n      accounts\n        // get the accounts from the active chain\n        .filter((account) => account.split(\":\")[1] === this.chainId.toString())\n        // remove namespace & chainId from the string\n        .map((account) => account.split(\":\")[2]) || []\n    );\n  }\n\n  private createHttpProviders(): RpcProvidersMap {\n    const http = {};\n    this.namespace.chains.forEach((chain) => {\n      http[chain] = this.createHttpProvider(chain, this.namespace.rpcMap?.[chain]);\n    });\n    return http;\n  }\n\n  private getHttpProvider(): JsonRpcProvider {\n    const chain = `${this.name}:${this.chainId}`;\n    const http = this.httpProviders[chain];\n    if (typeof http === \"undefined\") {\n      throw new Error(`JSON-RPC provider for ${chain} not found`);\n    }\n    return http;\n  }\n\n  private setHttpProvider(chainId: string, rpcUrl?: string): void {\n    const http = this.createHttpProvider(chainId, rpcUrl);\n    if (http) {\n      this.httpProviders[chainId] = http;\n    }\n  }\n\n  private createHttpProvider(\n    chainId: string,\n    rpcUrl?: string | undefined,\n  ): JsonRpcProvider | undefined {\n    const rpc = rpcUrl || getRpcUrl(chainId, this.namespace);\n    if (typeof rpc === \"undefined\") return undefined;\n    const http = new JsonRpcProvider(new HttpConnection(rpc, getGlobal(\"disableProviderPing\")));\n    return http;\n  }\n}\n\nexport default NearProvider;\n","import SignClient, { PROPOSAL_EXPIRY_MESSAGE } from \"@walletconnect/sign-client\";\nimport { SessionTypes } from \"@walletconnect/types\";\nimport { JsonRpcResult } from \"@walletconnect/jsonrpc-types\";\nimport { getSdkError, isValidArray, parseNamespaceKey } from \"@walletconnect/utils\";\nimport { getDefaultLoggerOptions, Logger, pino } from \"@walletconnect/logger\";\nimport {\n  convertChainIdToNumber,\n  getAccountsFromSession,\n  getChainsFromApprovedSession,\n  mergeRequiredOptionalNamespaces,\n  parseCaip10Account,\n  populateNamespacesChains,\n  setGlobal,\n} from \"./utils\";\nimport PolkadotProvider from \"./providers/polkadot\";\nimport Eip155Provider from \"./providers/eip155\";\nimport SolanaProvider from \"./providers/solana\";\nimport CosmosProvider from \"./providers/cosmos\";\nimport CardanoProvider from \"./providers/cardano\";\nimport ElrondProvider from \"./providers/elrond\";\nimport MultiversXProvider from \"./providers/multiversx\";\nimport NearProvider from \"./providers/near\";\n\nimport {\n  IUniversalProvider,\n  IProvider,\n  RpcProviderMap,\n  ConnectParams,\n  RequestArguments,\n  UniversalProviderOpts,\n  NamespaceConfig,\n  PairingsCleanupOpts,\n  ProviderAccounts,\n} from \"./types\";\n\nimport { RELAY_URL, LOGGER, STORAGE, PROVIDER_EVENTS } from \"./constants\";\nimport EventEmitter from \"events\";\nimport { formatJsonRpcResult } from \"@walletconnect/jsonrpc-utils\";\n\nexport class UniversalProvider implements IUniversalProvider {\n  public client!: SignClient;\n  public namespaces?: NamespaceConfig;\n  public optionalNamespaces?: NamespaceConfig;\n  public sessionProperties?: Record<string, string>;\n  public events: EventEmitter = new EventEmitter();\n  public rpcProviders: RpcProviderMap = {};\n  public session?: SessionTypes.Struct;\n  public providerOpts: UniversalProviderOpts;\n  public logger: Logger;\n  public uri: string | undefined;\n\n  private shouldAbortPairingAttempt = false;\n  private maxPairingAttempts = 10;\n  private disableProviderPing = false;\n\n  static async init(opts: UniversalProviderOpts) {\n    const provider = new UniversalProvider(opts);\n    await provider.initialize();\n    return provider;\n  }\n\n  constructor(opts: UniversalProviderOpts) {\n    this.providerOpts = opts;\n    this.logger =\n      typeof opts?.logger !== \"undefined\" && typeof opts?.logger !== \"string\"\n        ? opts.logger\n        : pino(getDefaultLoggerOptions({ level: opts?.logger || LOGGER }));\n    this.disableProviderPing = opts?.disableProviderPing || false;\n  }\n\n  public async request<T = unknown>(\n    args: RequestArguments,\n    chain?: string | undefined,\n    expiry?: number | undefined,\n  ): Promise<T> {\n    const [namespace, chainId] = this.validateChain(chain);\n\n    if (!this.session) {\n      throw new Error(\"Please call connect() before request()\");\n    }\n\n    return await this.getProvider(namespace).request({\n      request: {\n        ...args,\n      },\n      chainId: `${namespace}:${chainId}`,\n      topic: this.session.topic,\n      expiry,\n    });\n  }\n\n  public sendAsync(\n    args: RequestArguments,\n    callback: (error: Error | null, response: JsonRpcResult) => void,\n    chain?: string | undefined,\n    expiry?: number | undefined,\n  ): void {\n    const id = new Date().getTime();\n    this.request(args, chain, expiry)\n      .then((response) => callback(null, formatJsonRpcResult(id, response)))\n      .catch((error) => callback(error, undefined as any));\n  }\n\n  public async enable(): Promise<ProviderAccounts> {\n    if (!this.client) {\n      throw new Error(\"Sign Client not initialized\");\n    }\n    if (!this.session) {\n      await this.connect({\n        namespaces: this.namespaces,\n        optionalNamespaces: this.optionalNamespaces,\n        sessionProperties: this.sessionProperties,\n      });\n    }\n    const accounts = await this.requestAccounts();\n    return accounts as ProviderAccounts;\n  }\n\n  public async disconnect(): Promise<void> {\n    if (!this.session) {\n      throw new Error(\"Please call connect() before enable()\");\n    }\n    await this.client.disconnect({\n      topic: this.session?.topic,\n      reason: getSdkError(\"USER_DISCONNECTED\"),\n    });\n    await this.cleanup();\n  }\n\n  public async connect(opts: ConnectParams): Promise<SessionTypes.Struct | undefined> {\n    if (!this.client) {\n      throw new Error(\"Sign Client not initialized\");\n    }\n    this.setNamespaces(opts);\n    await this.cleanupPendingPairings();\n    if (opts.skipPairing) return;\n\n    return await this.pair(opts.pairingTopic);\n  }\n\n  public on(event: any, listener: any): void {\n    this.events.on(event, listener);\n  }\n\n  public once(event: string, listener: any): void {\n    this.events.once(event, listener);\n  }\n\n  public removeListener(event: string, listener: any): void {\n    this.events.removeListener(event, listener);\n  }\n\n  public off(event: string, listener: any): void {\n    this.events.off(event, listener);\n  }\n\n  get isWalletConnect() {\n    return true;\n  }\n\n  public async pair(pairingTopic: string | undefined): Promise<SessionTypes.Struct> {\n    this.shouldAbortPairingAttempt = false;\n    let pairingAttempts = 0;\n    do {\n      if (this.shouldAbortPairingAttempt) {\n        throw new Error(\"Pairing aborted\");\n      }\n\n      if (pairingAttempts >= this.maxPairingAttempts) {\n        throw new Error(\"Max auto pairing attempts reached\");\n      }\n\n      const { uri, approval } = await this.client.connect({\n        pairingTopic,\n        requiredNamespaces: this.namespaces,\n        optionalNamespaces: this.optionalNamespaces,\n        sessionProperties: this.sessionProperties,\n      });\n\n      if (uri) {\n        this.uri = uri;\n        this.events.emit(\"display_uri\", uri);\n      }\n\n      await approval()\n        .then((session) => {\n          this.session = session;\n          // assign namespaces from session if not already defined\n          const approved = populateNamespacesChains(session.namespaces) as NamespaceConfig;\n          this.namespaces = mergeRequiredOptionalNamespaces(this.namespaces, approved);\n          this.persist(\"namespaces\", this.namespaces);\n        })\n        .catch((error) => {\n          if (error.message !== PROPOSAL_EXPIRY_MESSAGE) {\n            throw error;\n          }\n          pairingAttempts++;\n        });\n    } while (!this.session);\n    this.onConnect();\n    return this.session;\n  }\n\n  public setDefaultChain(chain: string, rpcUrl?: string | undefined) {\n    try {\n      // ignore without active session\n      if (!this.session) return;\n      const [namespace, chainId] = this.validateChain(chain);\n      this.getProvider(namespace).setDefaultChain(chainId, rpcUrl);\n    } catch (error) {\n      // ignore the error if the fx is used prematurely before namespaces are set\n      if (!/Please call connect/.test((error as Error).message)) throw error;\n    }\n  }\n\n  public async cleanupPendingPairings(opts: PairingsCleanupOpts = {}): Promise<void> {\n    this.logger.info(\"Cleaning up inactive pairings...\");\n    const inactivePairings = this.client.pairing.getAll();\n\n    if (!isValidArray(inactivePairings)) return;\n\n    for (const pairing of inactivePairings) {\n      if (opts.deletePairings) {\n        this.client.core.expirer.set(pairing.topic, 0);\n      } else {\n        await this.client.core.relayer.subscriber.unsubscribe(pairing.topic);\n      }\n    }\n\n    this.logger.info(`Inactive pairings cleared: ${inactivePairings.length}`);\n  }\n\n  public abortPairingAttempt() {\n    this.shouldAbortPairingAttempt = true;\n  }\n\n  // ---------- Private ----------------------------------------------- //\n\n  private async checkStorage() {\n    this.namespaces = await this.getFromStore(\"namespaces\");\n    this.optionalNamespaces = (await this.getFromStore(\"optionalNamespaces\")) || {};\n    if (this.client.session.length) {\n      const lastKeyIndex = this.client.session.keys.length - 1;\n      this.session = this.client.session.get(this.client.session.keys[lastKeyIndex]);\n      this.createProviders();\n    }\n  }\n\n  private async initialize() {\n    this.logger.trace(`Initialized`);\n    await this.createClient();\n    await this.checkStorage();\n    this.registerEventListeners();\n  }\n\n  private async createClient() {\n    this.client =\n      this.providerOpts.client ||\n      (await SignClient.init({\n        logger: this.providerOpts.logger || LOGGER,\n        relayUrl: this.providerOpts.relayUrl || RELAY_URL,\n        projectId: this.providerOpts.projectId,\n        metadata: this.providerOpts.metadata,\n        storageOptions: this.providerOpts.storageOptions,\n        storage: this.providerOpts.storage,\n        name: this.providerOpts.name,\n      }));\n\n    this.logger.trace(`SignClient Initialized`);\n  }\n\n  private createProviders(): void {\n    if (!this.client) {\n      throw new Error(\"Sign Client not initialized\");\n    }\n\n    if (!this.session) {\n      throw new Error(\"Session not initialized. Please call connect() before enable()\");\n    }\n\n    const providersToCreate = [\n      ...new Set(\n        Object.keys(this.session.namespaces).map((namespace) => parseNamespaceKey(namespace)),\n      ),\n    ];\n\n    setGlobal(\"client\", this.client);\n    setGlobal(\"events\", this.events);\n    setGlobal(\"disableProviderPing\", this.disableProviderPing);\n\n    providersToCreate.forEach((namespace) => {\n      if (!this.session) return;\n      const accounts = getAccountsFromSession(namespace, this.session);\n      const approvedChains = getChainsFromApprovedSession(accounts);\n      const mergedNamespaces = mergeRequiredOptionalNamespaces(\n        this.namespaces,\n        this.optionalNamespaces,\n      );\n      const combinedNamespace = {\n        ...mergedNamespaces[namespace],\n        accounts,\n        chains: approvedChains,\n      };\n      switch (namespace) {\n        case \"eip155\":\n          this.rpcProviders[namespace] = new Eip155Provider({\n            namespace: combinedNamespace,\n          });\n          break;\n        case \"solana\":\n          this.rpcProviders[namespace] = new SolanaProvider({\n            namespace: combinedNamespace,\n          });\n          break;\n        case \"cosmos\":\n          this.rpcProviders[namespace] = new CosmosProvider({\n            namespace: combinedNamespace,\n          });\n          break;\n        case \"polkadot\":\n          this.rpcProviders[namespace] = new PolkadotProvider({\n            namespace: combinedNamespace,\n          });\n          break;\n        case \"cip34\":\n          this.rpcProviders[namespace] = new CardanoProvider({\n            namespace: combinedNamespace,\n          });\n          break;\n        case \"elrond\":\n          this.rpcProviders[namespace] = new ElrondProvider({\n            namespace: combinedNamespace,\n          });\n          break;\n        case \"multiversx\":\n          this.rpcProviders[namespace] = new MultiversXProvider({\n            namespace: combinedNamespace,\n          });\n          break;\n        case \"near\":\n          this.rpcProviders[namespace] = new NearProvider({\n            namespace: combinedNamespace,\n          });\n          break;\n      }\n    });\n  }\n\n  private registerEventListeners(): void {\n    if (typeof this.client === \"undefined\") {\n      throw new Error(\"Sign Client is not initialized\");\n    }\n\n    this.client.on(\"session_ping\", (args) => {\n      this.events.emit(\"session_ping\", args);\n    });\n\n    this.client.on(\"session_event\", (args) => {\n      const { params } = args;\n      const { event } = params;\n      if (event.name === \"accountsChanged\") {\n        const accounts = event.data;\n        if (accounts && isValidArray(accounts))\n          this.events.emit(\"accountsChanged\", accounts.map(parseCaip10Account));\n      } else if (event.name === \"chainChanged\") {\n        const requestChainId = params.chainId;\n        const payloadChainId = params.event.data as number;\n        const namespace = parseNamespaceKey(requestChainId);\n        // chainIds might differ between the request & payload - request is always in CAIP2 format, while payload might be string, number, CAIP2 or hex\n        // take priority of the payload chainId\n        const chainIdToProcess =\n          convertChainIdToNumber(requestChainId) !== convertChainIdToNumber(payloadChainId)\n            ? `${namespace}:${convertChainIdToNumber(payloadChainId)}`\n            : requestChainId;\n\n        this.onChainChanged(chainIdToProcess);\n      } else {\n        this.events.emit(event.name, event.data);\n      }\n\n      this.events.emit(\"session_event\", args);\n    });\n\n    this.client.on(\"session_update\", ({ topic, params }) => {\n      const { namespaces } = params;\n      const _session = this.client?.session.get(topic);\n      this.session = { ..._session, namespaces } as SessionTypes.Struct;\n      this.onSessionUpdate();\n      this.events.emit(\"session_update\", { topic, params });\n    });\n\n    this.client.on(\"session_delete\", async (payload) => {\n      await this.cleanup();\n      this.events.emit(\"session_delete\", payload);\n      this.events.emit(\"disconnect\", {\n        ...getSdkError(\"USER_DISCONNECTED\"),\n        data: payload.topic,\n      });\n    });\n\n    this.on(PROVIDER_EVENTS.DEFAULT_CHAIN_CHANGED, (caip2ChainId: string) => {\n      this.onChainChanged(caip2ChainId, true);\n    });\n  }\n\n  private getProvider(namespace: string): IProvider {\n    if (!this.rpcProviders[namespace]) {\n      throw new Error(`Provider not found: ${namespace}`);\n    }\n    return this.rpcProviders[namespace];\n  }\n\n  private onSessionUpdate(): void {\n    Object.keys(this.rpcProviders).forEach((namespace: string) => {\n      this.getProvider(namespace).updateNamespace(\n        this.session?.namespaces[namespace] as SessionTypes.BaseNamespace,\n      );\n    });\n  }\n\n  private setNamespaces(params: ConnectParams): void {\n    const { namespaces, optionalNamespaces, sessionProperties } = params;\n\n    if (namespaces && Object.keys(namespaces).length) {\n      this.namespaces = namespaces;\n    }\n    if (optionalNamespaces && Object.keys(optionalNamespaces).length) {\n      this.optionalNamespaces = optionalNamespaces;\n    }\n    this.sessionProperties = sessionProperties;\n    this.persist(\"namespaces\", namespaces);\n    this.persist(\"optionalNamespaces\", optionalNamespaces);\n  }\n\n  private validateChain(chain?: string): [string, string] {\n    const [namespace, chainId] = chain?.split(\":\") || [\"\", \"\"];\n    if (!this.namespaces || !Object.keys(this.namespaces).length) return [namespace, chainId];\n    // validate namespace\n    if (namespace) {\n      if (\n        // some namespaces might be defined with inline chainId e.g. eip155:1\n        // and we need to parse them\n        !Object.keys(this.namespaces || {})\n          .map((key) => parseNamespaceKey(key))\n          .includes(namespace)\n      ) {\n        throw new Error(\n          `Namespace '${namespace}' is not configured. Please call connect() first with namespace config.`,\n        );\n      }\n    }\n    if (namespace && chainId) {\n      return [namespace, chainId];\n    }\n    const defaultNamespace = parseNamespaceKey(Object.keys(this.namespaces)[0]);\n    const defaultChain = this.rpcProviders[defaultNamespace].getDefaultChain();\n    return [defaultNamespace, defaultChain];\n  }\n\n  private async requestAccounts(): Promise<string[]> {\n    const [namespace] = this.validateChain();\n    return await this.getProvider(namespace).requestAccounts();\n  }\n\n  private onChainChanged(caip2Chain: string, internal = false): void {\n    if (!this.namespaces) return;\n\n    const [namespace, chainId] = this.validateChain(caip2Chain);\n\n    if (!chainId) return;\n\n    if (!internal) {\n      this.getProvider(namespace).setDefaultChain(chainId);\n    }\n\n    if (this.namespaces[namespace]) {\n      this.namespaces[namespace].defaultChain = chainId;\n    } else if (this.namespaces[`${namespace}:${chainId}`]) {\n      this.namespaces[`${namespace}:${chainId}`].defaultChain = chainId;\n    } else {\n      // @ts-ignore\n      this.namespaces[`${namespace}:${chainId}`] = { defaultChain: chainId };\n    }\n\n    this.persist(\"namespaces\", this.namespaces);\n    this.events.emit(\"chainChanged\", chainId);\n  }\n\n  private onConnect() {\n    this.createProviders();\n    this.events.emit(\"connect\", { session: this.session });\n  }\n\n  private async cleanup() {\n    this.session = undefined;\n    this.namespaces = undefined;\n    this.optionalNamespaces = undefined;\n    this.sessionProperties = undefined;\n    this.persist(\"namespaces\", undefined);\n    this.persist(\"optionalNamespaces\", undefined);\n    this.persist(\"sessionProperties\", undefined);\n    await this.cleanupPendingPairings({ deletePairings: true });\n  }\n\n  private persist(key: string, data: unknown) {\n    this.client.core.storage.setItem(`${STORAGE}/${key}`, data);\n  }\n\n  private async getFromStore(key: string) {\n    return await this.client.core.storage.getItem(`${STORAGE}/${key}`);\n  }\n}\nexport default UniversalProvider;\n","import { UniversalProvider as Provider } from \"./UniversalProvider\";\nexport * from \"./types\";\nexport const UniversalProvider = Provider;\nexport default Provider;\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}