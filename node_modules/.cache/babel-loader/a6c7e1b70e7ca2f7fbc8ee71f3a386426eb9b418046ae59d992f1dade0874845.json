{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setStorageAt = void 0;\nconst toHex_js_1 = require(\"../../utils/encoding/toHex.js\");\nasync function setStorageAt(client, {\n  address,\n  index,\n  value\n}) {\n  await client.request({\n    method: `${client.mode}_setStorageAt`,\n    params: [address, typeof index === 'number' ? (0, toHex_js_1.numberToHex)(index) : index, value]\n  });\n}\nexports.setStorageAt = setStorageAt;","map":{"version":3,"names":["toHex_js_1","require","setStorageAt","client","address","index","value","request","method","mode","params","numberToHex","exports"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/test/setStorageAt.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport type {\n  TestClient,\n  TestClientMode,\n} from '../../clients/createTestClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hash, Hex } from '../../types/misc.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport { numberToHex } from '../../utils/encoding/toHex.js'\n\nexport type SetStorageAtParameters = {\n  /** The account address. */\n  address: Address\n  /** The storage slot (index). Can either be a number or hash value. */\n  index: number | Hash\n  /** The value to store as a 32 byte hex string. */\n  value: Hex\n}\n\nexport type SetStorageAtErrorType = RequestErrorType | ErrorType\n\n/**\n * Writes to a slot of an account's storage.\n *\n * - Docs: https://viem.sh/docs/actions/test/setStorageAt.html\n *\n * @param client - Client to use\n * @param parameters â€“ {@link SetStorageAtParameters}\n *\n * @example\n * import { createTestClient, http } from 'viem'\n * import { foundry } from 'viem/chains'\n * import { setStorageAt } from 'viem/test'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: 'foundry',\n *   transport: http(),\n * })\n * await setStorageAt(client, {\n *   address: '0xe846c6fcf817734ca4527b28ccb4aea2b6663c79',\n *   index: 2,\n *   value: '0x0000000000000000000000000000000000000000000000000000000000000069',\n * })\n */\nexport async function setStorageAt<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(\n  client: TestClient<TestClientMode, Transport, TChain, TAccount, false>,\n  { address, index, value }: SetStorageAtParameters,\n) {\n  await client.request({\n    method: `${client.mode}_setStorageAt`,\n    params: [\n      address,\n      typeof index === 'number' ? numberToHex(index) : index,\n      value,\n    ],\n  })\n}\n"],"mappings":";;;;;;AAYA,MAAAA,UAAA,GAAAC,OAAA;AAqCO,eAAeC,YAAYA,CAIhCC,MAAsE,EACtE;EAAEC,OAAO;EAAEC,KAAK;EAAEC;AAAK,CAA0B;EAEjD,MAAMH,MAAM,CAACI,OAAO,CAAC;IACnBC,MAAM,EAAE,GAAGL,MAAM,CAACM,IAAI,eAAe;IACrCC,MAAM,EAAE,CACNN,OAAO,EACP,OAAOC,KAAK,KAAK,QAAQ,GAAG,IAAAL,UAAA,CAAAW,WAAW,EAACN,KAAK,CAAC,GAAGA,KAAK,EACtDC,KAAK;GAER,CAAC;AACJ;AAfAM,OAAA,CAAAV,YAAA,GAAAA,YAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}