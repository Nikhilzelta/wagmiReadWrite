{"ast":null,"code":"'use client';\n\nimport { watchBlockNumber } from '@wagmi/core';\nimport '@wagmi/core/internal';\nimport { useEffect } from 'react';\nimport { useChainId } from './useChainId.js';\nimport { useConfig } from './useConfig.js';\n/** https://wagmi.sh/react/api/hooks/useWatchBlockNumber */\nexport function useWatchBlockNumber(parameters = {}) {\n  const {\n    enabled = true,\n    onBlockNumber,\n    config: _,\n    ...rest\n  } = parameters;\n  const config = useConfig(parameters);\n  const configChainId = useChainId({\n    config\n  });\n  const chainId = parameters.chainId ?? configChainId;\n  useEffect(() => {\n    if (!enabled) return;\n    if (!onBlockNumber) return;\n    return watchBlockNumber(config, {\n      ...rest,\n      chainId,\n      onBlockNumber\n    });\n  }, [chainId, config, enabled, onBlockNumber, rest]);\n}","map":{"version":3,"names":["watchBlockNumber","useEffect","useChainId","useConfig","useWatchBlockNumber","parameters","enabled","onBlockNumber","config","_","rest","configChainId","chainId"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/wagmi/src/hooks/useWatchBlockNumber.ts"],"sourcesContent":["'use client'\n\nimport {\n  type Config,\n  type ResolvedRegister,\n  type WatchBlockNumberParameters,\n  watchBlockNumber,\n} from '@wagmi/core'\nimport { type UnionEvaluate, type UnionPartial } from '@wagmi/core/internal'\nimport { useEffect } from 'react'\n\nimport type { ConfigParameter, EnabledParameter } from '../types/properties.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseWatchBlockNumberParameters<\n  config extends Config = Config,\n  chainId extends config['chains'][number]['id'] = config['chains'][number]['id'],\n> = UnionEvaluate<\n  UnionPartial<WatchBlockNumberParameters<config, chainId>> &\n    ConfigParameter<config> &\n    EnabledParameter\n>\n\nexport type UseWatchBlockNumberReturnType = void\n\n/** https://wagmi.sh/react/api/hooks/useWatchBlockNumber */\nexport function useWatchBlockNumber<\n  config extends Config = ResolvedRegister['config'],\n  chainId extends config['chains'][number]['id'] = config['chains'][number]['id'],\n>(\n  parameters: UseWatchBlockNumberParameters<config, chainId> = {} as any,\n): UseWatchBlockNumberReturnType {\n  const { enabled = true, onBlockNumber, config: _, ...rest } = parameters\n\n  const config = useConfig(parameters)\n  const configChainId = useChainId({ config })\n  const chainId = parameters.chainId ?? configChainId\n\n  useEffect(() => {\n    if (!enabled) return\n    if (!onBlockNumber) return\n    return watchBlockNumber(config, {\n      ...(rest as any),\n      chainId,\n      onBlockNumber,\n    })\n  }, [chainId, config, enabled, onBlockNumber, rest])\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,SAIEA,gBAAgB,QACX,aAAa;AACpB,OAAsD,sBAAsB;AAC5E,SAASC,SAAS,QAAQ,OAAO;AAGjC,SAASC,UAAU,QAAQ,iBAAiB;AAC5C,SAASC,SAAS,QAAQ,gBAAgB;AAa1C;AACA,OAAM,SAAUC,mBAAmBA,CAIjCC,UAAA,GAA6D,EAAS;EAEtE,MAAM;IAAEC,OAAO,GAAG,IAAI;IAAEC,aAAa;IAAEC,MAAM,EAAEC,CAAC;IAAE,GAAGC;EAAI,CAAE,GAAGL,UAAU;EAExE,MAAMG,MAAM,GAAGL,SAAS,CAACE,UAAU,CAAC;EACpC,MAAMM,aAAa,GAAGT,UAAU,CAAC;IAAEM;EAAM,CAAE,CAAC;EAC5C,MAAMI,OAAO,GAAGP,UAAU,CAACO,OAAO,IAAID,aAAa;EAEnDV,SAAS,CAAC,MAAK;IACb,IAAI,CAACK,OAAO,EAAE;IACd,IAAI,CAACC,aAAa,EAAE;IACpB,OAAOP,gBAAgB,CAACQ,MAAM,EAAE;MAC9B,GAAIE,IAAY;MAChBE,OAAO;MACPL;KACD,CAAC;EACJ,CAAC,EAAE,CAACK,OAAO,EAAEJ,MAAM,EAAEF,OAAO,EAAEC,aAAa,EAAEG,IAAI,CAAC,CAAC;AACrD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}