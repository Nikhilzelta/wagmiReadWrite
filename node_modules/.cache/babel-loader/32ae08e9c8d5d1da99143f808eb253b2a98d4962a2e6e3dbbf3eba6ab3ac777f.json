{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.verifyMessage = void 0;\nconst getAddress_js_1 = require(\"../address/getAddress.js\");\nconst isAddressEqual_js_1 = require(\"../address/isAddressEqual.js\");\nconst recoverMessageAddress_js_1 = require(\"./recoverMessageAddress.js\");\nasync function verifyMessage({\n  address,\n  message,\n  signature\n}) {\n  return (0, isAddressEqual_js_1.isAddressEqual)((0, getAddress_js_1.getAddress)(address), await (0, recoverMessageAddress_js_1.recoverMessageAddress)({\n    message,\n    signature\n  }));\n}\nexports.verifyMessage = verifyMessage;","map":{"version":3,"names":["getAddress_js_1","require","isAddressEqual_js_1","recoverMessageAddress_js_1","verifyMessage","address","message","signature","isAddressEqual","getAddress","recoverMessageAddress","exports"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/signature/verifyMessage.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport type { ByteArray, Hex, SignableMessage } from '../../types/misc.js'\nimport { type GetAddressErrorType, getAddress } from '../address/getAddress.js'\nimport {\n  type IsAddressEqualErrorType,\n  isAddressEqual,\n} from '../address/isAddressEqual.js'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport {\n  type RecoverMessageAddressErrorType,\n  recoverMessageAddress,\n} from './recoverMessageAddress.js'\n\nexport type VerifyMessageParameters = {\n  /** The address that signed the original message. */\n  address: Address\n  /** The message to be verified. */\n  message: SignableMessage\n  /** The signature that was generated by signing the message with the address's private key. */\n  signature: Hex | ByteArray\n}\n\nexport type VerifyMessageReturnType = boolean\n\nexport type VerifyMessageErrorType =\n  | IsAddressEqualErrorType\n  | GetAddressErrorType\n  | RecoverMessageAddressErrorType\n  | ErrorType\n\n/**\n * Verify that a message was signed by the provided address.\n *\n * Note:  Only supports Externally Owned Accounts. Does not support Contract Accounts.\n *        It is highly recommended to use `publicClient.verifyMessage` instead to ensure\n *        wallet interoperability.\n *\n * - Docs {@link https://viem.sh/docs/utilities/verifyMessage.html}\n *\n * @param parameters - {@link VerifyMessageParameters}\n * @returns Whether or not the signature is valid. {@link VerifyMessageReturnType}\n */\nexport async function verifyMessage({\n  address,\n  message,\n  signature,\n}: VerifyMessageParameters): Promise<VerifyMessageReturnType> {\n  return isAddressEqual(\n    getAddress(address),\n    await recoverMessageAddress({ message, signature }),\n  )\n}\n"],"mappings":";;;;;;AAGA,MAAAA,eAAA,GAAAC,OAAA;AACA,MAAAC,mBAAA,GAAAD,OAAA;AAMA,MAAAE,0BAAA,GAAAF,OAAA;AAkCO,eAAeG,aAAaA,CAAC;EAClCC,OAAO;EACPC,OAAO;EACPC;AAAS,CACe;EACxB,OAAO,IAAAL,mBAAA,CAAAM,cAAc,EACnB,IAAAR,eAAA,CAAAS,UAAU,EAACJ,OAAO,CAAC,EACnB,MAAM,IAAAF,0BAAA,CAAAO,qBAAqB,EAAC;IAAEJ,OAAO;IAAEC;EAAS,CAAE,CAAC,CACpD;AACH;AATAI,OAAA,CAAAP,aAAA,GAAAA,aAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}