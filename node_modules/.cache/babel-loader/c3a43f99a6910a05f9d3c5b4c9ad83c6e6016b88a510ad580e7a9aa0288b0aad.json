{"ast":null,"code":"'use client';\n\nimport '@wagmi/core';\nimport '@wagmi/core/internal';\nimport { readContractsQueryOptions } from '@wagmi/core/query';\nimport { useMemo } from 'react';\nimport 'viem';\nimport '../types/properties.js';\nimport { structuralSharing, useQuery } from '../utils/query.js';\nimport { useChainId } from './useChainId.js';\nimport { useConfig } from './useConfig.js';\n/** https://wagmi.sh/react/api/hooks/useReadContracts */\nexport function useReadContracts(parameters = {}) {\n  const {\n    contracts = [],\n    query = {}\n  } = parameters;\n  const config = useConfig(parameters);\n  const chainId = useChainId({\n    config\n  });\n  const options = readContractsQueryOptions(config, {\n    ...parameters,\n    chainId\n  });\n  const enabled = useMemo(() => {\n    let isContractsValid = false;\n    for (const contract of contracts) {\n      const {\n        abi,\n        address,\n        functionName\n      } = contract;\n      if (!abi || !address || !functionName) {\n        isContractsValid = false;\n        break;\n      }\n      isContractsValid = true;\n    }\n    return Boolean(isContractsValid && (query.enabled ?? true));\n  }, [contracts, query.enabled]);\n  return useQuery({\n    ...options,\n    ...query,\n    enabled,\n    structuralSharing: query.structuralSharing ?? structuralSharing\n  });\n}","map":{"version":3,"names":["readContractsQueryOptions","useMemo","structuralSharing","useQuery","useChainId","useConfig","useReadContracts","parameters","contracts","query","config","chainId","options","enabled","isContractsValid","contract","abi","address","functionName","Boolean"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/wagmi/src/hooks/useReadContracts.ts"],"sourcesContent":["'use client'\n\nimport {\n  type Config,\n  type ReadContractsErrorType,\n  type ResolvedRegister,\n} from '@wagmi/core'\nimport { type Evaluate } from '@wagmi/core/internal'\nimport {\n  type ReadContractsData,\n  type ReadContractsOptions,\n  type ReadContractsQueryFnData,\n  type ReadContractsQueryKey,\n  readContractsQueryOptions,\n} from '@wagmi/core/query'\nimport { useMemo } from 'react'\nimport { type ContractFunctionParameters } from 'viem'\n\nimport {\n  type ConfigParameter,\n  type QueryParameter,\n} from '../types/properties.js'\nimport {\n  type UseQueryReturnType,\n  structuralSharing,\n  useQuery,\n} from '../utils/query.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseReadContractsParameters<\n  contracts extends readonly unknown[] = readonly ContractFunctionParameters[],\n  allowFailure extends boolean = true,\n  config extends Config = Config,\n  selectData = ReadContractsData<contracts, allowFailure>,\n> = Evaluate<\n  ReadContractsOptions<contracts, allowFailure, config> &\n    ConfigParameter<config> &\n    QueryParameter<\n      ReadContractsQueryFnData<contracts, allowFailure>,\n      ReadContractsErrorType,\n      selectData,\n      ReadContractsQueryKey<contracts, allowFailure, config>\n    >\n>\n\nexport type UseReadContractsReturnType<\n  contracts extends readonly unknown[] = readonly ContractFunctionParameters[],\n  allowFailure extends boolean = true,\n  selectData = ReadContractsData<contracts, allowFailure>,\n> = UseQueryReturnType<selectData, ReadContractsErrorType>\n\n/** https://wagmi.sh/react/api/hooks/useReadContracts */\nexport function useReadContracts<\n  const contracts extends readonly unknown[],\n  allowFailure extends boolean = true,\n  config extends Config = ResolvedRegister['config'],\n  selectData = ReadContractsData<contracts, allowFailure>,\n>(\n  parameters: UseReadContractsParameters<\n    contracts,\n    allowFailure,\n    config,\n    selectData\n  > = {},\n): UseReadContractsReturnType<contracts, allowFailure, selectData> {\n  const { contracts = [], query = {} } = parameters\n\n  const config = useConfig(parameters)\n  const chainId = useChainId({ config })\n\n  const options = readContractsQueryOptions<config, contracts, allowFailure>(\n    config,\n    { ...parameters, chainId },\n  )\n\n  const enabled = useMemo(() => {\n    let isContractsValid = false\n    for (const contract of contracts) {\n      const { abi, address, functionName } =\n        contract as ContractFunctionParameters\n      if (!abi || !address || !functionName) {\n        isContractsValid = false\n        break\n      }\n      isContractsValid = true\n    }\n    return Boolean(isContractsValid && (query.enabled ?? true))\n  }, [contracts, query.enabled])\n\n  return useQuery({\n    ...options,\n    ...query,\n    enabled,\n    structuralSharing: query.structuralSharing ?? structuralSharing,\n  })\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,OAIO,aAAa;AACpB,OAA8B,sBAAsB;AACpD,SAKEA,yBAAyB,QACpB,mBAAmB;AAC1B,SAASC,OAAO,QAAQ,OAAO;AAC/B,OAAgD,MAAM;AAEtD,OAGO,wBAAwB;AAC/B,SAEEC,iBAAiB,EACjBC,QAAQ,QACH,mBAAmB;AAC1B,SAASC,UAAU,QAAQ,iBAAiB;AAC5C,SAASC,SAAS,QAAQ,gBAAgB;AAwB1C;AACA,OAAM,SAAUC,gBAAgBA,CAM9BC,UAAA,GAKI,EAAE;EAEN,MAAM;IAAEC,SAAS,GAAG,EAAE;IAAEC,KAAK,GAAG;EAAE,CAAE,GAAGF,UAAU;EAEjD,MAAMG,MAAM,GAAGL,SAAS,CAACE,UAAU,CAAC;EACpC,MAAMI,OAAO,GAAGP,UAAU,CAAC;IAAEM;EAAM,CAAE,CAAC;EAEtC,MAAME,OAAO,GAAGZ,yBAAyB,CACvCU,MAAM,EACN;IAAE,GAAGH,UAAU;IAAEI;EAAO,CAAE,CAC3B;EAED,MAAME,OAAO,GAAGZ,OAAO,CAAC,MAAK;IAC3B,IAAIa,gBAAgB,GAAG,KAAK;IAC5B,KAAK,MAAMC,QAAQ,IAAIP,SAAS,EAAE;MAChC,MAAM;QAAEQ,GAAG;QAAEC,OAAO;QAAEC;MAAY,CAAE,GAClCH,QAAsC;MACxC,IAAI,CAACC,GAAG,IAAI,CAACC,OAAO,IAAI,CAACC,YAAY,EAAE;QACrCJ,gBAAgB,GAAG,KAAK;QACxB;MACF;MACAA,gBAAgB,GAAG,IAAI;IACzB;IACA,OAAOK,OAAO,CAACL,gBAAgB,KAAKL,KAAK,CAACI,OAAO,IAAI,IAAI,CAAC,CAAC;EAC7D,CAAC,EAAE,CAACL,SAAS,EAAEC,KAAK,CAACI,OAAO,CAAC,CAAC;EAE9B,OAAOV,QAAQ,CAAC;IACd,GAAGS,OAAO;IACV,GAAGH,KAAK;IACRI,OAAO;IACPX,iBAAiB,EAAEO,KAAK,CAACP,iBAAiB,IAAIA;GAC/C,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}