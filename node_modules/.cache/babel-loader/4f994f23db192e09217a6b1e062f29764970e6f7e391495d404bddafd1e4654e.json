{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.InvalidChainIdError = exports.ClientChainNotConfiguredError = exports.ChainNotFoundError = exports.ChainMismatchError = exports.ChainDoesNotSupportContract = void 0;\nconst base_js_1 = require(\"./base.js\");\nclass ChainDoesNotSupportContract extends base_js_1.BaseError {\n  constructor({\n    blockNumber,\n    chain,\n    contract\n  }) {\n    super(`Chain \"${chain.name}\" does not support contract \"${contract.name}\".`, {\n      metaMessages: ['This could be due to any of the following:', ...(blockNumber && contract.blockCreated && contract.blockCreated > blockNumber ? [`- The contract \"${contract.name}\" was not deployed until block ${contract.blockCreated} (current block ${blockNumber}).`] : [`- The chain does not have the contract \"${contract.name}\" configured.`])]\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'ChainDoesNotSupportContract'\n    });\n  }\n}\nexports.ChainDoesNotSupportContract = ChainDoesNotSupportContract;\nclass ChainMismatchError extends base_js_1.BaseError {\n  constructor({\n    chain,\n    currentChainId\n  }) {\n    super(`The current chain of the wallet (id: ${currentChainId}) does not match the target chain for the transaction (id: ${chain.id} – ${chain.name}).`, {\n      metaMessages: [`Current Chain ID:  ${currentChainId}`, `Expected Chain ID: ${chain.id} – ${chain.name}`]\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'ChainMismatchError'\n    });\n  }\n}\nexports.ChainMismatchError = ChainMismatchError;\nclass ChainNotFoundError extends base_js_1.BaseError {\n  constructor() {\n    super(['No chain was provided to the request.', 'Please provide a chain with the `chain` argument on the Action, or by supplying a `chain` to WalletClient.'].join('\\n'));\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'ChainNotFoundError'\n    });\n  }\n}\nexports.ChainNotFoundError = ChainNotFoundError;\nclass ClientChainNotConfiguredError extends base_js_1.BaseError {\n  constructor() {\n    super('No chain was provided to the Client.');\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'ClientChainNotConfiguredError'\n    });\n  }\n}\nexports.ClientChainNotConfiguredError = ClientChainNotConfiguredError;\nclass InvalidChainIdError extends base_js_1.BaseError {\n  constructor({\n    chainId\n  }) {\n    super(`Chain ID \"${chainId}\" is invalid.`);\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'InvalidChainIdError'\n    });\n  }\n}\nexports.InvalidChainIdError = InvalidChainIdError;","map":{"version":3,"names":["base_js_1","require","ChainDoesNotSupportContract","BaseError","constructor","blockNumber","chain","contract","name","metaMessages","blockCreated","Object","defineProperty","exports","ChainMismatchError","currentChainId","id","ChainNotFoundError","join","ClientChainNotConfiguredError","InvalidChainIdError","chainId"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@safe-global/safe-apps-sdk/node_modules/viem/errors/chain.ts"],"sourcesContent":["import type { Chain } from '../types/chain.js'\n\nimport { BaseError } from './base.js'\n\nexport type ChainDoesNotSupportContractErrorType =\n  ChainDoesNotSupportContract & {\n    name: 'ChainDoesNotSupportContract'\n  }\nexport class ChainDoesNotSupportContract extends BaseError {\n  override name = 'ChainDoesNotSupportContract'\n  constructor({\n    blockNumber,\n    chain,\n    contract,\n  }: {\n    blockNumber?: bigint\n    chain: Chain\n    contract: { name: string; blockCreated?: number }\n  }) {\n    super(\n      `Chain \"${chain.name}\" does not support contract \"${contract.name}\".`,\n      {\n        metaMessages: [\n          'This could be due to any of the following:',\n          ...(blockNumber &&\n          contract.blockCreated &&\n          contract.blockCreated > blockNumber\n            ? [\n                `- The contract \"${contract.name}\" was not deployed until block ${contract.blockCreated} (current block ${blockNumber}).`,\n              ]\n            : [\n                `- The chain does not have the contract \"${contract.name}\" configured.`,\n              ]),\n        ],\n      },\n    )\n  }\n}\n\nexport type ChainMismatchErrorType = ChainMismatchError & {\n  name: 'ChainMismatchError'\n}\nexport class ChainMismatchError extends BaseError {\n  override name = 'ChainMismatchError'\n\n  constructor({\n    chain,\n    currentChainId,\n  }: {\n    chain: Chain\n    currentChainId: number\n  }) {\n    super(\n      `The current chain of the wallet (id: ${currentChainId}) does not match the target chain for the transaction (id: ${chain.id} – ${chain.name}).`,\n      {\n        metaMessages: [\n          `Current Chain ID:  ${currentChainId}`,\n          `Expected Chain ID: ${chain.id} – ${chain.name}`,\n        ],\n      },\n    )\n  }\n}\n\nexport type ChainNotFoundErrorType = ChainNotFoundError & {\n  name: 'ChainNotFoundError'\n}\nexport class ChainNotFoundError extends BaseError {\n  override name = 'ChainNotFoundError'\n\n  constructor() {\n    super(\n      [\n        'No chain was provided to the request.',\n        'Please provide a chain with the `chain` argument on the Action, or by supplying a `chain` to WalletClient.',\n      ].join('\\n'),\n    )\n  }\n}\n\nexport type ClientChainNotConfiguredErrorType =\n  ClientChainNotConfiguredError & {\n    name: 'ClientChainNotConfiguredError'\n  }\nexport class ClientChainNotConfiguredError extends BaseError {\n  override name = 'ClientChainNotConfiguredError'\n\n  constructor() {\n    super('No chain was provided to the Client.')\n  }\n}\n\nexport type InvalidChainIdErrorType = InvalidChainIdError & {\n  name: 'InvalidChainIdError'\n}\nexport class InvalidChainIdError extends BaseError {\n  override name = 'InvalidChainIdError'\n\n  constructor({ chainId }: { chainId: number }) {\n    super(`Chain ID \"${chainId}\" is invalid.`)\n  }\n}\n"],"mappings":";;;;;;AAEA,MAAAA,SAAA,GAAAC,OAAA;AAMA,MAAaC,2BAA4B,SAAQF,SAAA,CAAAG,SAAS;EAExDC,YAAY;IACVC,WAAW;IACXC,KAAK;IACLC;EAAQ,CAKT;IACC,KAAK,CACH,UAAUD,KAAK,CAACE,IAAI,gCAAgCD,QAAQ,CAACC,IAAI,IAAI,EACrE;MACEC,YAAY,EAAE,CACZ,4CAA4C,EAC5C,IAAIJ,WAAW,IACfE,QAAQ,CAACG,YAAY,IACrBH,QAAQ,CAACG,YAAY,GAAGL,WAAW,GAC/B,CACE,mBAAmBE,QAAQ,CAACC,IAAI,kCAAkCD,QAAQ,CAACG,YAAY,mBAAmBL,WAAW,IAAI,CAC1H,GACD,CACE,2CAA2CE,QAAQ,CAACC,IAAI,eAAe,CACxE,CAAC;KAET,CACF;IA1BMG,MAAA,CAAAC,cAAA;;;;aAAO;;EA2BhB;;AA5BFC,OAAA,CAAAX,2BAAA,GAAAA,2BAAA;AAkCA,MAAaY,kBAAmB,SAAQd,SAAA,CAAAG,SAAS;EAG/CC,YAAY;IACVE,KAAK;IACLS;EAAc,CAIf;IACC,KAAK,CACH,wCAAwCA,cAAc,8DAA8DT,KAAK,CAACU,EAAE,MAAMV,KAAK,CAACE,IAAI,IAAI,EAChJ;MACEC,YAAY,EAAE,CACZ,sBAAsBM,cAAc,EAAE,EACtC,sBAAsBT,KAAK,CAACU,EAAE,MAAMV,KAAK,CAACE,IAAI,EAAE;KAEnD,CACF;IAjBMG,MAAA,CAAAC,cAAA;;;;aAAO;;EAkBhB;;AAnBFC,OAAA,CAAAC,kBAAA,GAAAA,kBAAA;AAyBA,MAAaG,kBAAmB,SAAQjB,SAAA,CAAAG,SAAS;EAG/CC,YAAA;IACE,KAAK,CACH,CACE,uCAAuC,EACvC,4GAA4G,CAC7G,CAACc,IAAI,CAAC,IAAI,CAAC,CACb;IARMP,MAAA,CAAAC,cAAA;;;;aAAO;;EAShB;;AAVFC,OAAA,CAAAI,kBAAA,GAAAA,kBAAA;AAiBA,MAAaE,6BAA8B,SAAQnB,SAAA,CAAAG,SAAS;EAG1DC,YAAA;IACE,KAAK,CAAC,sCAAsC,CAAC;IAHtCO,MAAA,CAAAC,cAAA;;;;aAAO;;EAIhB;;AALFC,OAAA,CAAAM,6BAAA,GAAAA,6BAAA;AAWA,MAAaC,mBAAoB,SAAQpB,SAAA,CAAAG,SAAS;EAGhDC,YAAY;IAAEiB;EAAO,CAAuB;IAC1C,KAAK,CAAC,aAAaA,OAAO,eAAe,CAAC;IAHnCV,MAAA,CAAAC,cAAA;;;;aAAO;;EAIhB;;AALFC,OAAA,CAAAO,mBAAA,GAAAA,mBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}