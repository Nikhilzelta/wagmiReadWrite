{"ast":null,"code":"import '@tanstack/query-core';\nimport { getEnsAvatar } from '../actions/getEnsAvatar.js';\nimport '../createConfig.js';\nimport { filterQueryOptions } from './utils.js';\nexport function getEnsAvatarQueryOptions(config, options = {}) {\n  return {\n    async queryFn({\n      queryKey\n    }) {\n      const {\n        name,\n        scopeKey: _,\n        ...parameters\n      } = queryKey[1];\n      if (!name) throw new Error('name is required');\n      return getEnsAvatar(config, {\n        ...parameters,\n        name\n      });\n    },\n    queryKey: getEnsAvatarQueryKey(options)\n  };\n}\nexport function getEnsAvatarQueryKey(options = {}) {\n  return ['ensAvatar', filterQueryOptions(options)];\n}","map":{"version":3,"names":["getEnsAvatar","filterQueryOptions","getEnsAvatarQueryOptions","config","options","queryFn","queryKey","name","scopeKey","_","parameters","Error","getEnsAvatarQueryKey"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/wagmi/node_modules/@wagmi/core/src/query/getEnsAvatar.ts"],"sourcesContent":["import { type QueryOptions } from '@tanstack/query-core'\n\nimport {\n  type GetEnsAvatarErrorType,\n  type GetEnsAvatarParameters,\n  type GetEnsAvatarReturnType,\n  getEnsAvatar,\n} from '../actions/getEnsAvatar.js'\nimport { type Config } from '../createConfig.js'\nimport type { ScopeKeyParameter } from '../types/properties.js'\nimport type { Evaluate, ExactPartial } from '../types/utils.js'\nimport { filterQueryOptions } from './utils.js'\n\nexport type GetEnsAvatarOptions<config extends Config> = Evaluate<\n  ExactPartial<GetEnsAvatarParameters<config>> & ScopeKeyParameter\n>\n\nexport function getEnsAvatarQueryOptions<config extends Config>(\n  config: config,\n  options: GetEnsAvatarOptions<config> = {},\n) {\n  return {\n    async queryFn({ queryKey }) {\n      const { name, scopeKey: _, ...parameters } = queryKey[1]\n      if (!name) throw new Error('name is required')\n      return getEnsAvatar(config, { ...parameters, name })\n    },\n    queryKey: getEnsAvatarQueryKey(options),\n  } as const satisfies QueryOptions<\n    GetEnsAvatarQueryFnData,\n    GetEnsAvatarErrorType,\n    GetEnsAvatarData,\n    GetEnsAvatarQueryKey<config>\n  >\n}\n\nexport type GetEnsAvatarQueryFnData = GetEnsAvatarReturnType\n\nexport type GetEnsAvatarData = GetEnsAvatarQueryFnData\n\nexport function getEnsAvatarQueryKey<config extends Config>(\n  options: GetEnsAvatarOptions<config> = {},\n) {\n  return ['ensAvatar', filterQueryOptions(options)] as const\n}\n\nexport type GetEnsAvatarQueryKey<config extends Config> = ReturnType<\n  typeof getEnsAvatarQueryKey<config>\n>\n"],"mappings":"AAAA,OAAkC,sBAAsB;AAExD,SAIEA,YAAY,QACP,4BAA4B;AACnC,OAA4B,oBAAoB;AAGhD,SAASC,kBAAkB,QAAQ,YAAY;AAM/C,OAAM,SAAUC,wBAAwBA,CACtCC,MAAc,EACdC,OAAA,GAAuC,EAAE;EAEzC,OAAO;IACL,MAAMC,OAAOA,CAAC;MAAEC;IAAQ,CAAE;MACxB,MAAM;QAAEC,IAAI;QAAEC,QAAQ,EAAEC,CAAC;QAAE,GAAGC;MAAU,CAAE,GAAGJ,QAAQ,CAAC,CAAC,CAAC;MACxD,IAAI,CAACC,IAAI,EAAE,MAAM,IAAII,KAAK,CAAC,kBAAkB,CAAC;MAC9C,OAAOX,YAAY,CAACG,MAAM,EAAE;QAAE,GAAGO,UAAU;QAAEH;MAAI,CAAE,CAAC;IACtD,CAAC;IACDD,QAAQ,EAAEM,oBAAoB,CAACR,OAAO;GAMvC;AACH;AAMA,OAAM,SAAUQ,oBAAoBA,CAClCR,OAAA,GAAuC,EAAE;EAEzC,OAAO,CAAC,WAAW,EAAEH,kBAAkB,CAACG,OAAO,CAAC,CAAU;AAC5D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}