{"ast":null,"code":"import { parseAccount } from '../../accounts/utils/parseAccount.js';\nimport { internal_estimateFeesPerGas } from '../../actions/public/estimateFeesPerGas.js';\nimport { estimateGas } from '../../actions/public/estimateGas.js';\nimport { getBlock as getBlock_ } from '../../actions/public/getBlock.js';\nimport { getTransactionCount } from '../../actions/public/getTransactionCount.js';\nimport '../../errors/account.js';\nimport { Eip1559FeesNotSupportedError, MaxFeePerGasTooLowError } from '../../errors/fee.js';\nimport { blobsToCommitments } from '../../utils/blob/blobsToCommitments.js';\nimport { blobsToProofs } from '../../utils/blob/blobsToProofs.js';\nimport { commitmentsToVersionedHashes } from '../../utils/blob/commitmentsToVersionedHashes.js';\nimport { toBlobSidecars } from '../../utils/blob/toBlobSidecars.js';\nimport { getAction } from '../../utils/getAction.js';\nimport { assertRequest } from '../../utils/transaction/assertRequest.js';\nimport { getTransactionType } from '../../utils/transaction/getTransactionType.js';\nimport { getChainId } from '../public/getChainId.js';\nexport const defaultParameters = ['blobVersionedHashes', 'chainId', 'fees', 'gas', 'nonce', 'type'];\n/**\n * Prepares a transaction request for signing.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/prepareTransactionRequest\n *\n * @param args - {@link PrepareTransactionRequestParameters}\n * @returns The transaction request. {@link PrepareTransactionRequestReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { prepareTransactionRequest } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const request = await prepareTransactionRequest(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: 1n,\n * })\n *\n * @example\n * // Account Hoisting\n * import { createWalletClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { prepareTransactionRequest } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0xâ€¦'),\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const request = await prepareTransactionRequest(client, {\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: 1n,\n * })\n */\nexport async function prepareTransactionRequest(client, args) {\n  const {\n    account: account_ = client.account,\n    blobs,\n    chain,\n    chainId,\n    gas,\n    kzg,\n    nonce,\n    parameters = defaultParameters,\n    type\n  } = args;\n  const account = account_ ? parseAccount(account_) : undefined;\n  const request = {\n    ...args,\n    ...(account ? {\n      from: account?.address\n    } : {})\n  };\n  let block;\n  async function getBlock() {\n    if (block) return block;\n    block = await getAction(client, getBlock_, 'getBlock')({\n      blockTag: 'latest'\n    });\n    return block;\n  }\n  if ((parameters.includes('blobVersionedHashes') || parameters.includes('sidecars')) && blobs && kzg) {\n    const commitments = blobsToCommitments({\n      blobs,\n      kzg\n    });\n    if (parameters.includes('blobVersionedHashes')) {\n      const versionedHashes = commitmentsToVersionedHashes({\n        commitments,\n        to: 'hex'\n      });\n      request.blobVersionedHashes = versionedHashes;\n    }\n    if (parameters.includes('sidecars')) {\n      const proofs = blobsToProofs({\n        blobs,\n        commitments,\n        kzg\n      });\n      const sidecars = toBlobSidecars({\n        blobs,\n        commitments,\n        proofs,\n        to: 'hex'\n      });\n      request.sidecars = sidecars;\n    }\n  }\n  if (parameters.includes('chainId')) {\n    if (chain) request.chainId = chain.id;else if (typeof chainId !== 'undefined') request.chainId = chainId;else request.chainId = await getAction(client, getChainId, 'getChainId')({});\n  }\n  if (parameters.includes('nonce') && typeof nonce === 'undefined' && account) request.nonce = await getAction(client, getTransactionCount, 'getTransactionCount')({\n    address: account.address,\n    blockTag: 'pending'\n  });\n  if ((parameters.includes('fees') || parameters.includes('type')) && typeof type === 'undefined') {\n    try {\n      request.type = getTransactionType(request);\n    } catch {\n      // infer type from block\n      const block = await getBlock();\n      request.type = typeof block?.baseFeePerGas === 'bigint' ? 'eip1559' : 'legacy';\n    }\n  }\n  if (parameters.includes('fees')) {\n    // TODO(4844): derive blob base fees once https://github.com/ethereum/execution-apis/pull/486 is merged.\n    if (request.type === 'eip1559' || request.type === 'eip4844') {\n      // EIP-1559 fees\n      if (typeof request.maxFeePerGas === 'undefined' || typeof request.maxPriorityFeePerGas === 'undefined') {\n        const block = await getBlock();\n        const {\n          maxFeePerGas,\n          maxPriorityFeePerGas\n        } = await internal_estimateFeesPerGas(client, {\n          block: block,\n          chain,\n          request: request\n        });\n        if (typeof args.maxPriorityFeePerGas === 'undefined' && args.maxFeePerGas && args.maxFeePerGas < maxPriorityFeePerGas) throw new MaxFeePerGasTooLowError({\n          maxPriorityFeePerGas\n        });\n        request.maxPriorityFeePerGas = maxPriorityFeePerGas;\n        request.maxFeePerGas = maxFeePerGas;\n      }\n    } else {\n      // Legacy fees\n      if (typeof args.maxFeePerGas !== 'undefined' || typeof args.maxPriorityFeePerGas !== 'undefined') throw new Eip1559FeesNotSupportedError();\n      const block = await getBlock();\n      const {\n        gasPrice: gasPrice_\n      } = await internal_estimateFeesPerGas(client, {\n        block: block,\n        chain,\n        request: request,\n        type: 'legacy'\n      });\n      request.gasPrice = gasPrice_;\n    }\n  }\n  if (parameters.includes('gas') && typeof gas === 'undefined') request.gas = await getAction(client, estimateGas, 'estimateGas')({\n    ...request,\n    account: account ? {\n      address: account.address,\n      type: 'json-rpc'\n    } : undefined\n  });\n  assertRequest(request);\n  delete request.parameters;\n  return request;\n}","map":{"version":3,"names":["parseAccount","internal_estimateFeesPerGas","estimateGas","getBlock","getBlock_","getTransactionCount","Eip1559FeesNotSupportedError","MaxFeePerGasTooLowError","blobsToCommitments","blobsToProofs","commitmentsToVersionedHashes","toBlobSidecars","getAction","assertRequest","getTransactionType","getChainId","defaultParameters","prepareTransactionRequest","client","args","account","account_","blobs","chain","chainId","gas","kzg","nonce","parameters","type","undefined","request","from","address","block","blockTag","includes","commitments","versionedHashes","to","blobVersionedHashes","proofs","sidecars","id","baseFeePerGas","maxFeePerGas","maxPriorityFeePerGas","gasPrice","gasPrice_"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/viem/actions/wallet/prepareTransactionRequest.ts"],"sourcesContent":["import type { Address } from 'abitype'\nimport type { Account } from '../../accounts/types.js'\nimport {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../../accounts/utils/parseAccount.js'\nimport {\n  type EstimateFeesPerGasErrorType,\n  internal_estimateFeesPerGas,\n} from '../../actions/public/estimateFeesPerGas.js'\nimport {\n  type EstimateGasErrorType,\n  type EstimateGasParameters,\n  estimateGas,\n} from '../../actions/public/estimateGas.js'\nimport {\n  type GetBlockErrorType,\n  getBlock as getBlock_,\n} from '../../actions/public/getBlock.js'\nimport {\n  type GetTransactionCountErrorType,\n  getTransactionCount,\n} from '../../actions/public/getTransactionCount.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { type AccountNotFoundErrorType } from '../../errors/account.js'\nimport {\n  Eip1559FeesNotSupportedError,\n  MaxFeePerGasTooLowError,\n} from '../../errors/fee.js'\nimport type { DeriveAccount, GetAccountParameter } from '../../types/account.js'\nimport type { Block } from '../../types/block.js'\nimport type { Chain, DeriveChain } from '../../types/chain.js'\nimport type { GetChainParameter } from '../../types/chain.js'\nimport type { GetTransactionRequestKzgParameter } from '../../types/kzg.js'\nimport type {\n  TransactionRequest,\n  TransactionRequestEIP1559,\n  TransactionRequestEIP2930,\n  TransactionRequestEIP4844,\n  TransactionRequestLegacy,\n  TransactionSerializable,\n} from '../../types/transaction.js'\nimport type {\n  ExactPartial,\n  IsNever,\n  Prettify,\n  UnionOmit,\n  UnionRequiredBy,\n} from '../../types/utils.js'\nimport { blobsToCommitments } from '../../utils/blob/blobsToCommitments.js'\nimport { blobsToProofs } from '../../utils/blob/blobsToProofs.js'\nimport { commitmentsToVersionedHashes } from '../../utils/blob/commitmentsToVersionedHashes.js'\nimport { toBlobSidecars } from '../../utils/blob/toBlobSidecars.js'\nimport type { FormattedTransactionRequest } from '../../utils/formatters/transactionRequest.js'\nimport { getAction } from '../../utils/getAction.js'\nimport {\n  type AssertRequestErrorType,\n  type AssertRequestParameters,\n  assertRequest,\n} from '../../utils/transaction/assertRequest.js'\nimport {\n  type GetTransactionType,\n  getTransactionType,\n} from '../../utils/transaction/getTransactionType.js'\nimport { getChainId } from '../public/getChainId.js'\n\nexport const defaultParameters = [\n  'blobVersionedHashes',\n  'chainId',\n  'fees',\n  'gas',\n  'nonce',\n  'type',\n] as const\n\nexport type PrepareTransactionRequestParameterType =\n  | 'blobVersionedHashes'\n  | 'chainId'\n  | 'fees'\n  | 'gas'\n  | 'nonce'\n  | 'sidecars'\n  | 'type'\ntype ParameterTypeToParameters<\n  parameterType extends PrepareTransactionRequestParameterType,\n> = parameterType extends 'fees'\n  ? 'maxFeePerGas' | 'maxPriorityFeePerGas' | 'gasPrice'\n  : parameterType\n\nexport type PrepareTransactionRequestRequest<\n  chain extends Chain | undefined = Chain | undefined,\n  chainOverride extends Chain | undefined = Chain | undefined,\n  ///\n  _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>,\n> = UnionOmit<FormattedTransactionRequest<_derivedChain>, 'from'> &\n  GetTransactionRequestKzgParameter & {\n    parameters?: readonly PrepareTransactionRequestParameterType[] | undefined\n  }\n\nexport type PrepareTransactionRequestParameters<\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n  chainOverride extends Chain | undefined = Chain | undefined,\n  accountOverride extends Account | Address | undefined =\n    | Account\n    | Address\n    | undefined,\n  request extends PrepareTransactionRequestRequest<\n    chain,\n    chainOverride\n  > = PrepareTransactionRequestRequest<chain, chainOverride>,\n> = request &\n  GetAccountParameter<account, accountOverride, false> &\n  GetChainParameter<chain, chainOverride> &\n  GetTransactionRequestKzgParameter<request> & { chainId?: number | undefined }\n\nexport type PrepareTransactionRequestReturnType_<\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n  chainOverride extends Chain | undefined = Chain | undefined,\n  accountOverride extends Account | Address | undefined =\n    | Account\n    | Address\n    | undefined,\n  ///\n  _derivedAccount extends Account | Address | undefined = DeriveAccount<\n    account,\n    accountOverride\n  >,\n  _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>,\n> = UnionOmit<FormattedTransactionRequest<_derivedChain>, 'from'> &\n  GetChainParameter<chain, chainOverride> &\n  (_derivedAccount extends Account\n    ? { account: _derivedAccount; from: Address }\n    : { account?: undefined; from?: undefined })\n\nexport type PrepareTransactionRequestReturnType<\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n  chainOverride extends Chain | undefined = Chain | undefined,\n  accountOverride extends Account | Address | undefined =\n    | Account\n    | Address\n    | undefined,\n  request extends PrepareTransactionRequestRequest<\n    chain,\n    chainOverride\n  > = PrepareTransactionRequestRequest<chain, chainOverride>,\n  ///\n  _derivedAccount extends Account | Address | undefined = DeriveAccount<\n    account,\n    accountOverride\n  >,\n  _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>,\n  _transactionType = request['type'] extends string | undefined\n    ? request['type']\n    : GetTransactionType<request> extends 'legacy'\n      ? unknown\n      : GetTransactionType<request>,\n  _transactionRequest extends TransactionRequest =\n    | (_transactionType extends 'legacy' ? TransactionRequestLegacy : never)\n    | (_transactionType extends 'eip1559' ? TransactionRequestEIP1559 : never)\n    | (_transactionType extends 'eip2930' ? TransactionRequestEIP2930 : never)\n    | (_transactionType extends 'eip4844' ? TransactionRequestEIP4844 : never),\n> = Prettify<\n  UnionRequiredBy<\n    Extract<\n      UnionOmit<FormattedTransactionRequest<_derivedChain>, 'from'> &\n        (_derivedChain extends Chain\n          ? { chain: _derivedChain }\n          : { chain?: undefined }) &\n        (_derivedAccount extends Account\n          ? { account: _derivedAccount; from: Address }\n          : { account?: undefined; from?: undefined }),\n      IsNever<_transactionRequest> extends true\n        ? unknown\n        : ExactPartial<_transactionRequest>\n    > & { chainId?: number | undefined },\n    ParameterTypeToParameters<\n      request['parameters'] extends readonly PrepareTransactionRequestParameterType[]\n        ? request['parameters'][number]\n        : (typeof defaultParameters)[number]\n    >\n  > &\n    (unknown extends request['kzg'] ? {} : Pick<request, 'kzg'>)\n>\n\nexport type PrepareTransactionRequestErrorType =\n  | AccountNotFoundErrorType\n  | AssertRequestErrorType\n  | ParseAccountErrorType\n  | GetBlockErrorType\n  | GetTransactionCountErrorType\n  | EstimateGasErrorType\n  | EstimateFeesPerGasErrorType\n\n/**\n * Prepares a transaction request for signing.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/prepareTransactionRequest\n *\n * @param args - {@link PrepareTransactionRequestParameters}\n * @returns The transaction request. {@link PrepareTransactionRequestReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { prepareTransactionRequest } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const request = await prepareTransactionRequest(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: 1n,\n * })\n *\n * @example\n * // Account Hoisting\n * import { createWalletClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { prepareTransactionRequest } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0xâ€¦'),\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const request = await prepareTransactionRequest(client, {\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: 1n,\n * })\n */\nexport async function prepareTransactionRequest<\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n  const request extends PrepareTransactionRequestRequest<chain, chainOverride>,\n  accountOverride extends Account | Address | undefined = undefined,\n  chainOverride extends Chain | undefined = undefined,\n>(\n  client: Client<Transport, chain, account>,\n  args: PrepareTransactionRequestParameters<\n    chain,\n    account,\n    chainOverride,\n    accountOverride,\n    request\n  >,\n): Promise<\n  PrepareTransactionRequestReturnType<\n    chain,\n    account,\n    chainOverride,\n    accountOverride,\n    request\n  >\n> {\n  const {\n    account: account_ = client.account,\n    blobs,\n    chain,\n    chainId,\n    gas,\n    kzg,\n    nonce,\n    parameters = defaultParameters,\n    type,\n  } = args\n  const account = account_ ? parseAccount(account_) : undefined\n\n  const request = { ...args, ...(account ? { from: account?.address } : {}) }\n\n  let block: Block | undefined\n  async function getBlock(): Promise<Block> {\n    if (block) return block\n    block = await getAction(\n      client,\n      getBlock_,\n      'getBlock',\n    )({ blockTag: 'latest' })\n    return block\n  }\n\n  if (\n    (parameters.includes('blobVersionedHashes') ||\n      parameters.includes('sidecars')) &&\n    blobs &&\n    kzg\n  ) {\n    const commitments = blobsToCommitments({ blobs, kzg })\n\n    if (parameters.includes('blobVersionedHashes')) {\n      const versionedHashes = commitmentsToVersionedHashes({\n        commitments,\n        to: 'hex',\n      })\n      request.blobVersionedHashes = versionedHashes\n    }\n    if (parameters.includes('sidecars')) {\n      const proofs = blobsToProofs({ blobs, commitments, kzg })\n      const sidecars = toBlobSidecars({\n        blobs,\n        commitments,\n        proofs,\n        to: 'hex',\n      })\n      request.sidecars = sidecars\n    }\n  }\n\n  if (parameters.includes('chainId')) {\n    if (chain) request.chainId = chain.id\n    else if (typeof chainId !== 'undefined') request.chainId = chainId\n    else request.chainId = await getAction(client, getChainId, 'getChainId')({})\n  }\n\n  if (parameters.includes('nonce') && typeof nonce === 'undefined' && account)\n    request.nonce = await getAction(\n      client,\n      getTransactionCount,\n      'getTransactionCount',\n    )({\n      address: account.address,\n      blockTag: 'pending',\n    })\n\n  if (\n    (parameters.includes('fees') || parameters.includes('type')) &&\n    typeof type === 'undefined'\n  ) {\n    try {\n      request.type = getTransactionType(\n        request as TransactionSerializable,\n      ) as any\n    } catch {\n      // infer type from block\n      const block = await getBlock()\n      request.type =\n        typeof block?.baseFeePerGas === 'bigint' ? 'eip1559' : 'legacy'\n    }\n  }\n\n  if (parameters.includes('fees')) {\n    // TODO(4844): derive blob base fees once https://github.com/ethereum/execution-apis/pull/486 is merged.\n\n    if (request.type === 'eip1559' || request.type === 'eip4844') {\n      // EIP-1559 fees\n      if (\n        typeof request.maxFeePerGas === 'undefined' ||\n        typeof request.maxPriorityFeePerGas === 'undefined'\n      ) {\n        const block = await getBlock()\n        const { maxFeePerGas, maxPriorityFeePerGas } =\n          await internal_estimateFeesPerGas(client, {\n            block: block as Block,\n            chain,\n            request: request as PrepareTransactionRequestParameters,\n          })\n\n        if (\n          typeof args.maxPriorityFeePerGas === 'undefined' &&\n          args.maxFeePerGas &&\n          args.maxFeePerGas < maxPriorityFeePerGas\n        )\n          throw new MaxFeePerGasTooLowError({\n            maxPriorityFeePerGas,\n          })\n\n        request.maxPriorityFeePerGas = maxPriorityFeePerGas\n        request.maxFeePerGas = maxFeePerGas\n      }\n    } else {\n      // Legacy fees\n      if (\n        typeof args.maxFeePerGas !== 'undefined' ||\n        typeof args.maxPriorityFeePerGas !== 'undefined'\n      )\n        throw new Eip1559FeesNotSupportedError()\n\n      const block = await getBlock()\n      const { gasPrice: gasPrice_ } = await internal_estimateFeesPerGas(\n        client,\n        {\n          block: block as Block,\n          chain,\n          request: request as PrepareTransactionRequestParameters,\n          type: 'legacy',\n        },\n      )\n      request.gasPrice = gasPrice_\n    }\n  }\n\n  if (parameters.includes('gas') && typeof gas === 'undefined')\n    request.gas = await getAction(\n      client,\n      estimateGas,\n      'estimateGas',\n    )({\n      ...request,\n      account: account\n        ? { address: account.address, type: 'json-rpc' }\n        : undefined,\n    } as EstimateGasParameters)\n\n  assertRequest(request as AssertRequestParameters)\n\n  delete request.parameters\n\n  return request as any\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}