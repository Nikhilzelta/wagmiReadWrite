{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.estimateGas = void 0;\nconst parseAccount_js_1 = require(\"../../accounts/utils/parseAccount.js\");\nconst account_js_1 = require(\"../../errors/account.js\");\nconst toHex_js_1 = require(\"../../utils/encoding/toHex.js\");\nconst getEstimateGasError_js_1 = require(\"../../utils/errors/getEstimateGasError.js\");\nconst extract_js_1 = require(\"../../utils/formatters/extract.js\");\nconst transactionRequest_js_1 = require(\"../../utils/formatters/transactionRequest.js\");\nconst assertRequest_js_1 = require(\"../../utils/transaction/assertRequest.js\");\nconst prepareTransactionRequest_js_1 = require(\"../wallet/prepareTransactionRequest.js\");\nasync function estimateGas(client, args) {\n  const account_ = args.account ?? client.account;\n  if (!account_) throw new account_js_1.AccountNotFoundError({\n    docsPath: '/docs/actions/public/estimateGas'\n  });\n  const account = (0, parseAccount_js_1.parseAccount)(account_);\n  try {\n    const {\n      accessList,\n      blockNumber,\n      blockTag,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value,\n      ...rest\n    } = account.type === 'local' ? await (0, prepareTransactionRequest_js_1.prepareTransactionRequest)(client, args) : args;\n    const blockNumberHex = blockNumber ? (0, toHex_js_1.numberToHex)(blockNumber) : undefined;\n    const block = blockNumberHex || blockTag;\n    (0, assertRequest_js_1.assertRequest)(args);\n    const chainFormat = client.chain?.formatters?.transactionRequest?.format;\n    const format = chainFormat || transactionRequest_js_1.formatTransactionRequest;\n    const request = format({\n      ...(0, extract_js_1.extract)(rest, {\n        format: chainFormat\n      }),\n      from: account.address,\n      accessList,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value\n    });\n    const balance = await client.request({\n      method: 'eth_estimateGas',\n      params: block ? [request, block] : [request]\n    });\n    return BigInt(balance);\n  } catch (err) {\n    throw (0, getEstimateGasError_js_1.getEstimateGasError)(err, {\n      ...args,\n      account,\n      chain: client.chain\n    });\n  }\n}\nexports.estimateGas = estimateGas;","map":{"version":3,"names":["parseAccount_js_1","require","account_js_1","toHex_js_1","getEstimateGasError_js_1","extract_js_1","transactionRequest_js_1","assertRequest_js_1","prepareTransactionRequest_js_1","estimateGas","client","args","account_","account","AccountNotFoundError","docsPath","parseAccount","accessList","blockNumber","blockTag","data","gas","gasPrice","maxFeePerGas","maxPriorityFeePerGas","nonce","to","value","rest","type","prepareTransactionRequest","blockNumberHex","numberToHex","undefined","block","assertRequest","chainFormat","chain","formatters","transactionRequest","format","formatTransactionRequest","request","extract","from","address","balance","method","params","BigInt","err","getEstimateGasError","exports"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/public/estimateGas.ts"],"sourcesContent":["import type { Account } from '../../accounts/types.js'\nimport {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../../accounts/utils/parseAccount.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { AccountNotFoundError } from '../../errors/account.js'\nimport type { BaseError } from '../../errors/base.js'\nimport type { GetAccountParameter } from '../../types/account.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { TransactionRequest } from '../../types/transaction.js'\nimport type { UnionOmit } from '../../types/utils.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\nimport {\n  type GetEstimateGasErrorReturnType,\n  getEstimateGasError,\n} from '../../utils/errors/getEstimateGasError.js'\nimport { extract } from '../../utils/formatters/extract.js'\nimport {\n  type FormattedTransactionRequest,\n  formatTransactionRequest,\n} from '../../utils/formatters/transactionRequest.js'\nimport {\n  type AssertRequestErrorType,\n  type AssertRequestParameters,\n  assertRequest,\n} from '../../utils/transaction/assertRequest.js'\nimport {\n  type PrepareTransactionRequestParameters,\n  prepareTransactionRequest,\n} from '../wallet/prepareTransactionRequest.js'\n\nexport type FormattedEstimateGas<\n  TChain extends Chain | undefined = Chain | undefined,\n> = FormattedTransactionRequest<TChain>\n\nexport type EstimateGasParameters<\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends Account | undefined = undefined,\n> = UnionOmit<FormattedEstimateGas<TChain>, 'from'> &\n  GetAccountParameter<TAccount> &\n  (\n    | {\n        /** The balance of the account at a block number. */\n        blockNumber?: bigint\n        blockTag?: never\n      }\n    | {\n        blockNumber?: never\n        /**\n         * The balance of the account at a block tag.\n         * @default 'latest'\n         */\n        blockTag?: BlockTag\n      }\n  )\n\nexport type EstimateGasReturnType = bigint\n\nexport type EstimateGasErrorType = GetEstimateGasErrorReturnType<\n  | ParseAccountErrorType\n  | NumberToHexErrorType\n  | RequestErrorType\n  | AssertRequestErrorType\n>\n\n/**\n * Estimates the gas necessary to complete a transaction without submitting it to the network.\n *\n * - Docs: https://viem.sh/docs/actions/public/estimateGas.html\n * - JSON-RPC Methods: [`eth_estimateGas`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_estimategas)\n *\n * @param client - Client to use\n * @param parameters - {@link EstimateGasParameters}\n * @returns The gas estimate (in wei). {@link EstimateGasReturnType}\n *\n * @example\n * import { createPublicClient, http, parseEther } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { estimateGas } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const gasEstimate = await estimateGas(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: parseEther('1'),\n * })\n */\nexport async function estimateGas<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined = undefined,\n>(\n  client: Client<Transport, TChain, TAccount>,\n  args: EstimateGasParameters<TChain, TAccount>,\n): Promise<EstimateGasReturnType> {\n  const account_ = args.account ?? client.account\n  if (!account_)\n    throw new AccountNotFoundError({\n      docsPath: '/docs/actions/public/estimateGas',\n    })\n  const account = parseAccount(account_)\n\n  try {\n    const {\n      accessList,\n      blockNumber,\n      blockTag,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value,\n      ...rest\n    } =\n      account.type === 'local'\n        ? ((await prepareTransactionRequest(\n            client,\n            args as PrepareTransactionRequestParameters,\n          )) as EstimateGasParameters)\n        : args\n\n    const blockNumberHex = blockNumber ? numberToHex(blockNumber) : undefined\n    const block = blockNumberHex || blockTag\n\n    assertRequest(args as AssertRequestParameters)\n\n    const chainFormat = client.chain?.formatters?.transactionRequest?.format\n    const format = chainFormat || formatTransactionRequest\n\n    const request = format({\n      // Pick out extra data that might exist on the chain's transaction request type.\n      ...extract(rest, { format: chainFormat }),\n      from: account.address,\n      accessList,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value,\n    } as TransactionRequest)\n\n    const balance = await client.request({\n      method: 'eth_estimateGas',\n      params: block ? [request, block] : [request],\n    })\n    return BigInt(balance)\n  } catch (err) {\n    throw getEstimateGasError(err as BaseError, {\n      ...args,\n      account,\n      chain: client.chain,\n    })\n  }\n}\n"],"mappings":";;;;;;AACA,MAAAA,iBAAA,GAAAC,OAAA;AAMA,MAAAC,YAAA,GAAAD,OAAA;AAQA,MAAAE,UAAA,GAAAF,OAAA;AAIA,MAAAG,wBAAA,GAAAH,OAAA;AAIA,MAAAI,YAAA,GAAAJ,OAAA;AACA,MAAAK,uBAAA,GAAAL,OAAA;AAIA,MAAAM,kBAAA,GAAAN,OAAA;AAKA,MAAAO,8BAAA,GAAAP,OAAA;AAgEO,eAAeQ,WAAWA,CAI/BC,MAA2C,EAC3CC,IAA6C;EAE7C,MAAMC,QAAQ,GAAGD,IAAI,CAACE,OAAO,IAAIH,MAAM,CAACG,OAAO;EAC/C,IAAI,CAACD,QAAQ,EACX,MAAM,IAAIV,YAAA,CAAAY,oBAAoB,CAAC;IAC7BC,QAAQ,EAAE;GACX,CAAC;EACJ,MAAMF,OAAO,GAAG,IAAAb,iBAAA,CAAAgB,YAAY,EAACJ,QAAQ,CAAC;EAEtC,IAAI;IACF,MAAM;MACJK,UAAU;MACVC,WAAW;MACXC,QAAQ;MACRC,IAAI;MACJC,GAAG;MACHC,QAAQ;MACRC,YAAY;MACZC,oBAAoB;MACpBC,KAAK;MACLC,EAAE;MACFC,KAAK;MACL,GAAGC;IAAI,CACR,GACCf,OAAO,CAACgB,IAAI,KAAK,OAAO,GAClB,MAAM,IAAArB,8BAAA,CAAAsB,yBAAyB,EAC/BpB,MAAM,EACNC,IAA2C,CAC5C,GACDA,IAAI;IAEV,MAAMoB,cAAc,GAAGb,WAAW,GAAG,IAAAf,UAAA,CAAA6B,WAAW,EAACd,WAAW,CAAC,GAAGe,SAAS;IACzE,MAAMC,KAAK,GAAGH,cAAc,IAAIZ,QAAQ;IAExC,IAAAZ,kBAAA,CAAA4B,aAAa,EAACxB,IAA+B,CAAC;IAE9C,MAAMyB,WAAW,GAAG1B,MAAM,CAAC2B,KAAK,EAAEC,UAAU,EAAEC,kBAAkB,EAAEC,MAAM;IACxE,MAAMA,MAAM,GAAGJ,WAAW,IAAI9B,uBAAA,CAAAmC,wBAAwB;IAEtD,MAAMC,OAAO,GAAGF,MAAM,CAAC;MAErB,GAAG,IAAAnC,YAAA,CAAAsC,OAAO,EAACf,IAAI,EAAE;QAAEY,MAAM,EAAEJ;MAAW,CAAE,CAAC;MACzCQ,IAAI,EAAE/B,OAAO,CAACgC,OAAO;MACrB5B,UAAU;MACVG,IAAI;MACJC,GAAG;MACHC,QAAQ;MACRC,YAAY;MACZC,oBAAoB;MACpBC,KAAK;MACLC,EAAE;MACFC;KACqB,CAAC;IAExB,MAAMmB,OAAO,GAAG,MAAMpC,MAAM,CAACgC,OAAO,CAAC;MACnCK,MAAM,EAAE,iBAAiB;MACzBC,MAAM,EAAEd,KAAK,GAAG,CAACQ,OAAO,EAAER,KAAK,CAAC,GAAG,CAACQ,OAAO;KAC5C,CAAC;IACF,OAAOO,MAAM,CAACH,OAAO,CAAC;GACvB,CAAC,OAAOI,GAAG,EAAE;IACZ,MAAM,IAAA9C,wBAAA,CAAA+C,mBAAmB,EAACD,GAAgB,EAAE;MAC1C,GAAGvC,IAAI;MACPE,OAAO;MACPwB,KAAK,EAAE3B,MAAM,CAAC2B;KACf,CAAC;;AAEN;AAvEAe,OAAA,CAAA3C,WAAA,GAAAA,WAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}