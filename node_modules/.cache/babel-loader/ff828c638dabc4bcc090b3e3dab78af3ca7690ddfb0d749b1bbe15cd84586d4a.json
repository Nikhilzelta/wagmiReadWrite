{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.watchBlocks = void 0;\nconst block_js_1 = require(\"../../utils/formatters/block.js\");\nconst getAction_js_1 = require(\"../../utils/getAction.js\");\nconst observe_js_1 = require(\"../../utils/observe.js\");\nconst poll_js_1 = require(\"../../utils/poll.js\");\nconst stringify_js_1 = require(\"../../utils/stringify.js\");\nconst getBlock_js_1 = require(\"./getBlock.js\");\nfunction watchBlocks(client, {\n  blockTag = 'latest',\n  emitMissed = false,\n  emitOnBegin = false,\n  onBlock,\n  onError,\n  includeTransactions: includeTransactions_,\n  poll: poll_,\n  pollingInterval = client.pollingInterval\n}) {\n  const enablePolling = typeof poll_ !== 'undefined' ? poll_ : client.transport.type !== 'webSocket';\n  const includeTransactions = includeTransactions_ ?? false;\n  let prevBlock;\n  const pollBlocks = () => {\n    const observerId = (0, stringify_js_1.stringify)(['watchBlocks', client.uid, emitMissed, emitOnBegin, includeTransactions, pollingInterval]);\n    return (0, observe_js_1.observe)(observerId, {\n      onBlock,\n      onError\n    }, emit => (0, poll_js_1.poll)(async () => {\n      try {\n        const block = await (0, getAction_js_1.getAction)(client, getBlock_js_1.getBlock, 'getBlock')({\n          blockTag,\n          includeTransactions\n        });\n        if (block.number && prevBlock?.number) {\n          if (block.number === prevBlock.number) return;\n          if (block.number - prevBlock.number > 1 && emitMissed) {\n            for (let i = prevBlock?.number + 1n; i < block.number; i++) {\n              const block = await (0, getAction_js_1.getAction)(client, getBlock_js_1.getBlock, 'getBlock')({\n                blockNumber: i,\n                includeTransactions\n              });\n              emit.onBlock(block, prevBlock);\n              prevBlock = block;\n            }\n          }\n        }\n        if (!prevBlock?.number || blockTag === 'pending' && !block?.number || block.number && block.number > prevBlock.number) {\n          emit.onBlock(block, prevBlock);\n          prevBlock = block;\n        }\n      } catch (err) {\n        emit.onError?.(err);\n      }\n    }, {\n      emitOnBegin,\n      interval: pollingInterval\n    }));\n  };\n  const subscribeBlocks = () => {\n    let active = true;\n    let unsubscribe = () => active = false;\n    (async () => {\n      try {\n        const {\n          unsubscribe: unsubscribe_\n        } = await client.transport.subscribe({\n          params: ['newHeads'],\n          onData(data) {\n            if (!active) return;\n            const format = client.chain?.formatters?.block?.format || block_js_1.formatBlock;\n            const block = format(data.result);\n            onBlock(block, prevBlock);\n            prevBlock = block;\n          },\n          onError(error) {\n            onError?.(error);\n          }\n        });\n        unsubscribe = unsubscribe_;\n        if (!active) unsubscribe();\n      } catch (err) {\n        onError?.(err);\n      }\n    })();\n    return unsubscribe;\n  };\n  return enablePolling ? pollBlocks() : subscribeBlocks();\n}\nexports.watchBlocks = watchBlocks;","map":{"version":3,"names":["block_js_1","require","getAction_js_1","observe_js_1","poll_js_1","stringify_js_1","getBlock_js_1","watchBlocks","client","blockTag","emitMissed","emitOnBegin","onBlock","onError","includeTransactions","includeTransactions_","poll","poll_","pollingInterval","enablePolling","transport","type","prevBlock","pollBlocks","observerId","stringify","uid","observe","emit","block","getAction","getBlock","number","i","blockNumber","err","interval","subscribeBlocks","active","unsubscribe","unsubscribe_","subscribe","params","onData","data","format","chain","formatters","formatBlock","result","error","exports"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@safe-global/safe-apps-sdk/node_modules/viem/actions/public/watchBlocks.ts"],"sourcesContent":["import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { GetTransportConfig } from '../../types/transport.js'\nimport { formatBlock } from '../../utils/formatters/block.js'\nimport { getAction } from '../../utils/getAction.js'\nimport { observe } from '../../utils/observe.js'\nimport { type PollErrorType, poll } from '../../utils/poll.js'\nimport { type StringifyErrorType, stringify } from '../../utils/stringify.js'\n\nimport { type GetBlockReturnType, getBlock } from './getBlock.js'\n\nexport type OnBlockParameter<\n  TChain extends Chain | undefined = Chain,\n  TIncludeTransactions extends boolean = false,\n  TBlockTag extends BlockTag = 'latest',\n> = GetBlockReturnType<TChain, TIncludeTransactions, TBlockTag>\n\nexport type OnBlock<\n  TChain extends Chain | undefined = Chain,\n  TIncludeTransactions extends boolean = false,\n  TBlockTag extends BlockTag = 'latest',\n> = (\n  block: OnBlockParameter<TChain, TIncludeTransactions, TBlockTag>,\n  prevBlock:\n    | OnBlockParameter<TChain, TIncludeTransactions, TBlockTag>\n    | undefined,\n) => void\n\ntype PollOptions<\n  TIncludeTransactions extends boolean = false,\n  TBlockTag extends BlockTag = 'latest',\n> = {\n  /** The block tag. Defaults to \"latest\". */\n  blockTag?: TBlockTag | BlockTag\n  /** Whether or not to emit the missed blocks to the callback. */\n  emitMissed?: boolean\n  /** Whether or not to emit the block to the callback when the subscription opens. */\n  emitOnBegin?: boolean\n  /** Whether or not to include transaction data in the response. */\n  includeTransactions?: TIncludeTransactions\n  /** Polling frequency (in ms). Defaults to the client's pollingInterval config. */\n  pollingInterval?: number\n}\n\nexport type WatchBlocksParameters<\n  TTransport extends Transport = Transport,\n  TChain extends Chain | undefined = Chain,\n  TIncludeTransactions extends boolean = false,\n  TBlockTag extends BlockTag = 'latest',\n> = {\n  /** The callback to call when a new block is received. */\n  onBlock: OnBlock<TChain, TIncludeTransactions, TBlockTag>\n  /** The callback to call when an error occurred when trying to get for a new block. */\n  onError?: (error: Error) => void\n} & (GetTransportConfig<TTransport>['type'] extends 'webSocket'\n  ?\n      | {\n          blockTag?: never\n          emitMissed?: never\n          emitOnBegin?: never\n          includeTransactions?: never\n          /** Whether or not the WebSocket Transport should poll the JSON-RPC, rather than using `eth_subscribe`. */\n          poll?: false\n          pollingInterval?: never\n        }\n      | (PollOptions<TIncludeTransactions, TBlockTag> & { poll?: true })\n  : PollOptions<TIncludeTransactions, TBlockTag> & { poll?: true })\n\nexport type WatchBlocksReturnType = () => void\n\nexport type WatchBlocksErrorType =\n  | StringifyErrorType\n  | PollErrorType\n  | ErrorType\n\n/**\n * Watches and returns information for incoming blocks.\n *\n * - Docs: https://viem.sh/docs/actions/public/watchBlocks.html\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/blocks/watching-blocks\n * - JSON-RPC Methods:\n *   - When `poll: true`, calls [`eth_getBlockByNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getBlockByNumber) on a polling interval.\n *   - When `poll: false` & WebSocket Transport, uses a WebSocket subscription via [`eth_subscribe`](https://docs.alchemy.com/reference/eth-subscribe-polygon) and the `\"newHeads\"` event.\n *\n * @param client - Client to use\n * @param parameters - {@link WatchBlocksParameters}\n * @returns A function that can be invoked to stop watching for new block numbers. {@link WatchBlocksReturnType}\n *\n * @example\n * import { createPublicClient, watchBlocks, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const unwatch = watchBlocks(client, {\n *   onBlock: (block) => console.log(block),\n * })\n */\nexport function watchBlocks<\n  TTransport extends Transport,\n  TChain extends Chain | undefined,\n  TIncludeTransactions extends boolean = false,\n  TBlockTag extends BlockTag = 'latest',\n>(\n  client: Client<TTransport, TChain>,\n  {\n    blockTag = 'latest',\n    emitMissed = false,\n    emitOnBegin = false,\n    onBlock,\n    onError,\n    includeTransactions: includeTransactions_,\n    poll: poll_,\n    pollingInterval = client.pollingInterval,\n  }: WatchBlocksParameters<TTransport, TChain, TIncludeTransactions, TBlockTag>,\n): WatchBlocksReturnType {\n  const enablePolling =\n    typeof poll_ !== 'undefined' ? poll_ : client.transport.type !== 'webSocket'\n  const includeTransactions = includeTransactions_ ?? false\n\n  let prevBlock:\n    | GetBlockReturnType<TChain, false | TIncludeTransactions, 'latest'>\n    | undefined\n\n  const pollBlocks = () => {\n    const observerId = stringify([\n      'watchBlocks',\n      client.uid,\n      emitMissed,\n      emitOnBegin,\n      includeTransactions,\n      pollingInterval,\n    ])\n\n    return observe(observerId, { onBlock, onError }, (emit) =>\n      poll(\n        async () => {\n          try {\n            const block = await getAction(\n              client,\n              getBlock,\n              'getBlock',\n            )({\n              blockTag,\n              includeTransactions,\n            })\n            if (block.number && prevBlock?.number) {\n              // If the current block number is the same as the previous,\n              // we can skip.\n              if (block.number === prevBlock.number) return\n\n              // If we have missed out on some previous blocks, and the\n              // `emitMissed` flag is truthy, let's emit those blocks.\n              if (block.number - prevBlock.number > 1 && emitMissed) {\n                for (let i = prevBlock?.number + 1n; i < block.number; i++) {\n                  const block = (await getAction(\n                    client,\n                    getBlock,\n                    'getBlock',\n                  )({\n                    blockNumber: i,\n                    includeTransactions,\n                  })) as GetBlockReturnType<TChain>\n                  emit.onBlock(block as any, prevBlock as any)\n                  prevBlock = block\n                }\n              }\n            }\n\n            if (\n              // If no previous block exists, emit.\n              !prevBlock?.number ||\n              // If the block tag is \"pending\" with no block number, emit.\n              (blockTag === 'pending' && !block?.number) ||\n              // If the next block number is greater than the previous block number, emit.\n              // We don't want to emit blocks in the past.\n              (block.number && block.number > prevBlock.number)\n            ) {\n              emit.onBlock(block as any, prevBlock as any)\n              prevBlock = block as any\n            }\n          } catch (err) {\n            emit.onError?.(err as Error)\n          }\n        },\n        {\n          emitOnBegin,\n          interval: pollingInterval,\n        },\n      ),\n    )\n  }\n\n  const subscribeBlocks = () => {\n    let active = true\n    let unsubscribe = () => (active = false)\n    ;(async () => {\n      try {\n        const { unsubscribe: unsubscribe_ } = await client.transport.subscribe({\n          params: ['newHeads'],\n          onData(data: any) {\n            if (!active) return\n            const format =\n              client.chain?.formatters?.block?.format || formatBlock\n            const block = format(data.result)\n            onBlock(block, prevBlock as any)\n            prevBlock = block\n          },\n          onError(error: Error) {\n            onError?.(error)\n          },\n        })\n        unsubscribe = unsubscribe_\n        if (!active) unsubscribe()\n      } catch (err) {\n        onError?.(err as Error)\n      }\n    })()\n    return unsubscribe\n  }\n\n  return enablePolling ? pollBlocks() : subscribeBlocks()\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}