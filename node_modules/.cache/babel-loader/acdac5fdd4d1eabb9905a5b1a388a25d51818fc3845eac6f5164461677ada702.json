{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseAvatarRecord = void 0;\nconst utils_js_1 = require(\"./utils.js\");\nasync function parseAvatarRecord(client, {\n  gatewayUrls,\n  record\n}) {\n  if (/eip155:/i.test(record)) return parseNftAvatarUri(client, {\n    gatewayUrls,\n    record\n  });\n  return (0, utils_js_1.parseAvatarUri)({\n    uri: record,\n    gatewayUrls\n  });\n}\nexports.parseAvatarRecord = parseAvatarRecord;\nasync function parseNftAvatarUri(client, {\n  gatewayUrls,\n  record\n}) {\n  const nft = (0, utils_js_1.parseNftUri)(record);\n  const nftUri = await (0, utils_js_1.getNftTokenUri)(client, {\n    nft\n  });\n  const {\n    uri: resolvedNftUri,\n    isOnChain,\n    isEncoded\n  } = (0, utils_js_1.resolveAvatarUri)({\n    uri: nftUri,\n    gatewayUrls\n  });\n  if (isOnChain && (resolvedNftUri.includes('data:application/json;base64,') || resolvedNftUri.startsWith('{'))) {\n    const encodedJson = isEncoded ? atob(resolvedNftUri.replace('data:application/json;base64,', '')) : resolvedNftUri;\n    const decoded = JSON.parse(encodedJson);\n    return (0, utils_js_1.parseAvatarUri)({\n      uri: (0, utils_js_1.getJsonImage)(decoded),\n      gatewayUrls\n    });\n  }\n  let uriTokenId = nft.tokenID;\n  if (nft.namespace === 'erc1155') uriTokenId = uriTokenId.replace('0x', '').padStart(64, '0');\n  return (0, utils_js_1.getMetadataAvatarUri)({\n    gatewayUrls,\n    uri: resolvedNftUri.replace(/(?:0x)?{id}/, uriTokenId)\n  });\n}","map":{"version":3,"names":["utils_js_1","require","parseAvatarRecord","client","gatewayUrls","record","test","parseNftAvatarUri","parseAvatarUri","uri","exports","nft","parseNftUri","nftUri","getNftTokenUri","resolvedNftUri","isOnChain","isEncoded","resolveAvatarUri","includes","startsWith","encodedJson","atob","replace","decoded","JSON","parse","getJsonImage","uriTokenId","tokenID","namespace","padStart","getMetadataAvatarUri"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/ens/avatar/parseAvatarRecord.ts"],"sourcesContent":["import type { Client } from '../../../clients/createClient.js'\nimport type { Transport } from '../../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../../errors/utils.js'\nimport type { Chain } from '../../../types/chain.js'\nimport type { AssetGatewayUrls } from '../../../types/ens.js'\n\nimport {\n  type GetJsonImageErrorType,\n  type GetMetadataAvatarUriErrorType,\n  type GetNftTokenUriErrorType,\n  type ParseAvatarUriErrorType,\n  type ParseNftUriErrorType,\n  type ResolveAvatarUriErrorType,\n  getJsonImage,\n  getMetadataAvatarUri,\n  getNftTokenUri,\n  parseAvatarUri,\n  parseNftUri,\n  resolveAvatarUri,\n} from './utils.js'\n\nexport type ParseAvatarRecordErrorType =\n  | ParseNftAvatarUriErrorType\n  | ParseAvatarUriErrorType\n  | ErrorType\n\nexport async function parseAvatarRecord<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  {\n    gatewayUrls,\n    record,\n  }: {\n    gatewayUrls?: AssetGatewayUrls\n    record: string\n  },\n): Promise<string> {\n  if (/eip155:/i.test(record))\n    return parseNftAvatarUri(client, { gatewayUrls, record })\n  return parseAvatarUri({ uri: record, gatewayUrls })\n}\n\nexport type ParseNftAvatarUriErrorType =\n  | ParseNftUriErrorType\n  | GetNftTokenUriErrorType\n  | ResolveAvatarUriErrorType\n  | ParseAvatarUriErrorType\n  | GetJsonImageErrorType\n  | GetMetadataAvatarUriErrorType\n  | ErrorType\n\nasync function parseNftAvatarUri<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  {\n    gatewayUrls,\n    record,\n  }: {\n    gatewayUrls?: AssetGatewayUrls\n    record: string\n  },\n): Promise<string> {\n  // parse NFT URI into properties\n  const nft = parseNftUri(record)\n  // fetch tokenURI from the NFT contract\n  const nftUri = await getNftTokenUri(client, { nft })\n  // resolve the URI from the fetched tokenURI\n  const {\n    uri: resolvedNftUri,\n    isOnChain,\n    isEncoded,\n  } = resolveAvatarUri({ uri: nftUri, gatewayUrls })\n\n  // if the resolved URI is on chain, return the data\n  if (\n    isOnChain &&\n    (resolvedNftUri.includes('data:application/json;base64,') ||\n      resolvedNftUri.startsWith('{'))\n  ) {\n    const encodedJson = isEncoded\n      ? // if it is encoded, decode it\n        atob(resolvedNftUri.replace('data:application/json;base64,', ''))\n      : // if it isn't encoded assume it is a JSON string, but it could be anything (it will error if it is)\n        resolvedNftUri\n\n    const decoded = JSON.parse(encodedJson)\n    return parseAvatarUri({ uri: getJsonImage(decoded), gatewayUrls })\n  }\n\n  let uriTokenId = nft.tokenID\n  if (nft.namespace === 'erc1155')\n    uriTokenId = uriTokenId.replace('0x', '').padStart(64, '0')\n\n  return getMetadataAvatarUri({\n    gatewayUrls,\n    uri: resolvedNftUri.replace(/(?:0x)?{id}/, uriTokenId),\n  })\n}\n"],"mappings":";;;;;;AAMA,MAAAA,UAAA,GAAAC,OAAA;AAoBO,eAAeC,iBAAiBA,CACrCC,MAAiC,EACjC;EACEC,WAAW;EACXC;AAAM,CAIP;EAED,IAAI,UAAU,CAACC,IAAI,CAACD,MAAM,CAAC,EACzB,OAAOE,iBAAiB,CAACJ,MAAM,EAAE;IAAEC,WAAW;IAAEC;EAAM,CAAE,CAAC;EAC3D,OAAO,IAAAL,UAAA,CAAAQ,cAAc,EAAC;IAAEC,GAAG,EAAEJ,MAAM;IAAED;EAAW,CAAE,CAAC;AACrD;AAbAM,OAAA,CAAAR,iBAAA,GAAAA,iBAAA;AAwBA,eAAeK,iBAAiBA,CAC9BJ,MAAiC,EACjC;EACEC,WAAW;EACXC;AAAM,CAIP;EAGD,MAAMM,GAAG,GAAG,IAAAX,UAAA,CAAAY,WAAW,EAACP,MAAM,CAAC;EAE/B,MAAMQ,MAAM,GAAG,MAAM,IAAAb,UAAA,CAAAc,cAAc,EAACX,MAAM,EAAE;IAAEQ;EAAG,CAAE,CAAC;EAEpD,MAAM;IACJF,GAAG,EAAEM,cAAc;IACnBC,SAAS;IACTC;EAAS,CACV,GAAG,IAAAjB,UAAA,CAAAkB,gBAAgB,EAAC;IAAET,GAAG,EAAEI,MAAM;IAAET;EAAW,CAAE,CAAC;EAGlD,IACEY,SAAS,KACRD,cAAc,CAACI,QAAQ,CAAC,+BAA+B,CAAC,IACvDJ,cAAc,CAACK,UAAU,CAAC,GAAG,CAAC,CAAC,EACjC;IACA,MAAMC,WAAW,GAAGJ,SAAS,GAEzBK,IAAI,CAACP,cAAc,CAACQ,OAAO,CAAC,+BAA+B,EAAE,EAAE,CAAC,CAAC,GAEjER,cAAc;IAElB,MAAMS,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACL,WAAW,CAAC;IACvC,OAAO,IAAArB,UAAA,CAAAQ,cAAc,EAAC;MAAEC,GAAG,EAAE,IAAAT,UAAA,CAAA2B,YAAY,EAACH,OAAO,CAAC;MAAEpB;IAAW,CAAE,CAAC;;EAGpE,IAAIwB,UAAU,GAAGjB,GAAG,CAACkB,OAAO;EAC5B,IAAIlB,GAAG,CAACmB,SAAS,KAAK,SAAS,EAC7BF,UAAU,GAAGA,UAAU,CAACL,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAACQ,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAC;EAE7D,OAAO,IAAA/B,UAAA,CAAAgC,oBAAoB,EAAC;IAC1B5B,WAAW;IACXK,GAAG,EAAEM,cAAc,CAACQ,OAAO,CAAC,aAAa,EAAEK,UAAU;GACtD,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}