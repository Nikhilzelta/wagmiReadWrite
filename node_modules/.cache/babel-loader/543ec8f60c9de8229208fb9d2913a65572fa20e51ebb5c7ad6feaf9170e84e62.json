{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createTestClient = void 0;\nconst createClient_js_1 = require(\"./createClient.js\");\nconst test_js_1 = require(\"./decorators/test.js\");\nfunction createTestClient(parameters) {\n  const {\n    key = 'test',\n    name = 'Test Client',\n    mode\n  } = parameters;\n  const client = (0, createClient_js_1.createClient)({\n    ...parameters,\n    key,\n    name,\n    type: 'testClient'\n  });\n  return client.extend(config => ({\n    mode,\n    ...(0, test_js_1.testActions)({\n      mode\n    })(config)\n  }));\n}\nexports.createTestClient = createTestClient;","map":{"version":3,"names":["createClient_js_1","require","test_js_1","createTestClient","parameters","key","name","mode","client","createClient","type","extend","config","testActions","exports"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@safe-global/safe-apps-sdk/node_modules/viem/clients/createTestClient.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport type { Account } from '../accounts/types.js'\nimport type { ErrorType } from '../errors/utils.js'\nimport type { ParseAccount } from '../types/account.js'\nimport type { Chain } from '../types/chain.js'\nimport type { TestRpcSchema } from '../types/eip1193.js'\nimport type { Prettify } from '../types/utils.js'\nimport {\n  type Client,\n  type ClientConfig,\n  type CreateClientErrorType,\n  createClient,\n} from './createClient.js'\nimport { type TestActions, testActions } from './decorators/test.js'\nimport type { Transport } from './transports/createTransport.js'\n\nexport type TestClientMode = 'anvil' | 'hardhat' | 'ganache'\n\nexport type TestClientConfig<\n  mode extends TestClientMode = TestClientMode,\n  transport extends Transport = Transport,\n  chain extends Chain | undefined = Chain | undefined,\n  accountOrAddress extends Account | Address | undefined =\n    | Account\n    | Address\n    | undefined,\n> = Prettify<\n  Pick<\n    ClientConfig<transport, chain, accountOrAddress>,\n    | 'account'\n    | 'cacheTime'\n    | 'chain'\n    | 'key'\n    | 'name'\n    | 'pollingInterval'\n    | 'transport'\n  > & {\n    /** Mode of the test client. */\n    mode: mode | ('anvil' | 'hardhat' | 'ganache') // TODO: Type utility that expands `TestClientMode`\n  }\n>\n\nexport type TestClient<\n  TMode extends TestClientMode = TestClientMode,\n  transport extends Transport = Transport,\n  chain extends Chain | undefined = Chain | undefined,\n  TAccount extends Account | undefined = Account | undefined,\n  TIncludeActions extends boolean = true,\n> = Prettify<\n  { mode: TMode } & Client<\n    transport,\n    chain,\n    TAccount,\n    TestRpcSchema<TMode>,\n    TIncludeActions extends true ? TestActions : Record<string, unknown>\n  >\n>\n\nexport type CreateTestClientErrorType = CreateClientErrorType | ErrorType\n\n/**\n * @description Creates a test client with a given transport.\n */\n/**\n * Creates a Test Client with a given [Transport](https://viem.sh/docs/clients/intro.html) configured for a [Chain](https://viem.sh/docs/clients/chains.html).\n *\n * - Docs: https://viem.sh/docs/clients/test.html\n *\n * A Test Client is an interface to \"test\" JSON-RPC API methods accessible through a local Ethereum test node such as [Anvil](https://book.getfoundry.sh/anvil/) or [Hardhat](https://hardhat.org/) such as mining blocks, impersonating accounts, setting fees, etc through [Test Actions](https://viem.sh/docs/actions/test/introduction.html).\n *\n * @param config - {@link TestClientConfig}\n * @returns A Test Client. {@link TestClient}\n *\n * @example\n * import { createTestClient, custom } from 'viem'\n * import { foundry } from 'viem/chains'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: foundry,\n *   transport: http(),\n * })\n */\nexport function createTestClient<\n  mode extends 'anvil' | 'hardhat' | 'ganache', // TODO: Type utility that expands `TestClientMode`\n  transport extends Transport,\n  chain extends Chain | undefined = undefined,\n  accountOrAddress extends Account | Address | undefined = undefined,\n>(\n  parameters: TestClientConfig<mode, transport, chain, accountOrAddress>,\n): TestClient<mode, transport, chain, ParseAccount<accountOrAddress>>\n\nexport function createTestClient(parameters: TestClientConfig): TestClient {\n  const { key = 'test', name = 'Test Client', mode } = parameters\n  const client = createClient({\n    ...parameters,\n    key,\n    name,\n    type: 'testClient',\n  })\n  return client.extend((config) => ({\n    mode,\n    ...testActions({ mode })(config),\n  }))\n}\n"],"mappings":";;;;;;AAQA,MAAAA,iBAAA,GAAAC,OAAA;AAMA,MAAAC,SAAA,GAAAD,OAAA;AA+EA,SAAgBE,gBAAgBA,CAACC,UAA4B;EAC3D,MAAM;IAAEC,GAAG,GAAG,MAAM;IAAEC,IAAI,GAAG,aAAa;IAAEC;EAAI,CAAE,GAAGH,UAAU;EAC/D,MAAMI,MAAM,GAAG,IAAAR,iBAAA,CAAAS,YAAY,EAAC;IAC1B,GAAGL,UAAU;IACbC,GAAG;IACHC,IAAI;IACJI,IAAI,EAAE;GACP,CAAC;EACF,OAAOF,MAAM,CAACG,MAAM,CAAEC,MAAM,KAAM;IAChCL,IAAI;IACJ,GAAG,IAAAL,SAAA,CAAAW,WAAW,EAAC;MAAEN;IAAI,CAAE,CAAC,CAACK,MAAM;GAChC,CAAC,CAAC;AACL;AAZAE,OAAA,CAAAX,gBAAA,GAAAA,gBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}