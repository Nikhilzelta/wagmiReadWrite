{"ast":null,"code":"import { keccak256 } from '../hash/keccak256.js';\nimport { parseTransaction } from '../transaction/parseTransaction.js';\nimport { serializeTransaction } from '../transaction/serializeTransaction.js';\nimport { recoverAddress } from './recoverAddress.js';\nimport { signatureToHex } from './signatureToHex.js';\nexport async function recoverTransactionAddress(parameters) {\n  const {\n    serializedTransaction,\n    signature: signature_\n  } = parameters;\n  const transaction = parseTransaction(serializedTransaction);\n  const signature = signature_ ?? signatureToHex({\n    r: transaction.r,\n    s: transaction.s,\n    v: transaction.v,\n    yParity: transaction.yParity\n  });\n  const serialized = serializeTransaction({\n    ...transaction,\n    r: undefined,\n    s: undefined,\n    v: undefined,\n    yParity: undefined\n  });\n  return await recoverAddress({\n    hash: keccak256(serialized),\n    signature\n  });\n}","map":{"version":3,"names":["keccak256","parseTransaction","serializeTransaction","recoverAddress","signatureToHex","recoverTransactionAddress","parameters","serializedTransaction","signature","signature_","transaction","r","s","v","yParity","serialized","undefined","hash"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/viem/utils/signature/recoverTransactionAddress.ts"],"sourcesContent":["import type { Address } from 'abitype'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport type { TransactionSerialized } from '../../types/transaction.js'\nimport { type Keccak256ErrorType, keccak256 } from '../hash/keccak256.js'\nimport { parseTransaction } from '../transaction/parseTransaction.js'\nimport {\n  type SerializeTransactionErrorType,\n  serializeTransaction,\n} from '../transaction/serializeTransaction.js'\nimport {\n  type RecoverAddressErrorType,\n  recoverAddress,\n} from './recoverAddress.js'\nimport {\n  type SignatureToHexErrorType,\n  signatureToHex,\n} from './signatureToHex.js'\n\nexport type RecoverTransactionAddressParameters = {\n  serializedTransaction: TransactionSerialized\n  signature?: Hex | ByteArray\n}\n\nexport type RecoverTransactionAddressReturnType = Address\n\nexport type RecoverTransactionAddressErrorType =\n  | SerializeTransactionErrorType\n  | RecoverAddressErrorType\n  | Keccak256ErrorType\n  | SignatureToHexErrorType\n  | ErrorType\n\nexport async function recoverTransactionAddress(\n  parameters: RecoverTransactionAddressParameters,\n): Promise<RecoverTransactionAddressReturnType> {\n  const { serializedTransaction, signature: signature_ } = parameters\n\n  const transaction = parseTransaction(serializedTransaction)\n\n  const signature =\n    signature_ ??\n    signatureToHex({\n      r: transaction.r!,\n      s: transaction.s!,\n      v: transaction.v!,\n      yParity: transaction.yParity!,\n    })\n\n  const serialized = serializeTransaction({\n    ...transaction,\n    r: undefined,\n    s: undefined,\n    v: undefined,\n    yParity: undefined,\n  })\n\n  return await recoverAddress({\n    hash: keccak256(serialized),\n    signature,\n  })\n}\n"],"mappings":"AAIA,SAAkCA,SAAS,QAAQ,sBAAsB;AACzE,SAASC,gBAAgB,QAAQ,oCAAoC;AACrE,SAEEC,oBAAoB,QACf,wCAAwC;AAC/C,SAEEC,cAAc,QACT,qBAAqB;AAC5B,SAEEC,cAAc,QACT,qBAAqB;AAgB5B,OAAO,eAAeC,yBAAyBA,CAC7CC,UAA+C;EAE/C,MAAM;IAAEC,qBAAqB;IAAEC,SAAS,EAAEC;EAAU,CAAE,GAAGH,UAAU;EAEnE,MAAMI,WAAW,GAAGT,gBAAgB,CAACM,qBAAqB,CAAC;EAE3D,MAAMC,SAAS,GACbC,UAAU,IACVL,cAAc,CAAC;IACbO,CAAC,EAAED,WAAW,CAACC,CAAE;IACjBC,CAAC,EAAEF,WAAW,CAACE,CAAE;IACjBC,CAAC,EAAEH,WAAW,CAACG,CAAE;IACjBC,OAAO,EAAEJ,WAAW,CAACI;GACtB,CAAC;EAEJ,MAAMC,UAAU,GAAGb,oBAAoB,CAAC;IACtC,GAAGQ,WAAW;IACdC,CAAC,EAAEK,SAAS;IACZJ,CAAC,EAAEI,SAAS;IACZH,CAAC,EAAEG,SAAS;IACZF,OAAO,EAAEE;GACV,CAAC;EAEF,OAAO,MAAMb,cAAc,CAAC;IAC1Bc,IAAI,EAAEjB,SAAS,CAACe,UAAU,CAAC;IAC3BP;GACD,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}