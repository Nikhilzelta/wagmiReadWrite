{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getSerializedTransactionType = void 0;\nconst transaction_js_1 = require(\"../../errors/transaction.js\");\nconst slice_js_1 = require(\"../data/slice.js\");\nconst fromHex_js_1 = require(\"../encoding/fromHex.js\");\nfunction getSerializedTransactionType(serializedTransaction) {\n  const serializedType = (0, slice_js_1.sliceHex)(serializedTransaction, 0, 1);\n  if (serializedType === '0x02') return 'eip1559';\n  if (serializedType === '0x01') return 'eip2930';\n  if (serializedType !== '0x' && (0, fromHex_js_1.hexToNumber)(serializedType) >= 0xc0) return 'legacy';\n  throw new transaction_js_1.InvalidSerializedTransactionTypeError({\n    serializedType\n  });\n}\nexports.getSerializedTransactionType = getSerializedTransactionType;","map":{"version":3,"names":["transaction_js_1","require","slice_js_1","fromHex_js_1","getSerializedTransactionType","serializedTransaction","serializedType","sliceHex","hexToNumber","InvalidSerializedTransactionTypeError","exports"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/transaction/getSerializedTransactionType.ts"],"sourcesContent":["import {\n  InvalidSerializedTransactionTypeError,\n  type InvalidSerializedTransactionTypeErrorType,\n} from '../../errors/transaction.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type {\n  TransactionSerialized,\n  TransactionSerializedEIP1559,\n  TransactionSerializedEIP2930,\n} from '../../types/transaction.js'\nimport { type SliceHexErrorType, sliceHex } from '../data/slice.js'\nimport { type HexToNumberErrorType, hexToNumber } from '../encoding/fromHex.js'\n\nexport type GetSerializedTransactionType<\n  TTransactionSerialized extends TransactionSerialized = TransactionSerialized,\n> = TTransactionSerialized extends TransactionSerializedEIP1559\n  ? 'eip1559'\n  : TTransactionSerialized extends TransactionSerializedEIP2930\n    ? 'eip2930'\n    : 'legacy'\n\nexport type GetSerializedTransactionTypeErrorType =\n  | HexToNumberErrorType\n  | InvalidSerializedTransactionTypeErrorType\n  | SliceHexErrorType\n  | ErrorType\n\nexport function getSerializedTransactionType<\n  TSerialized extends TransactionSerialized,\n>(\n  serializedTransaction: TSerialized,\n): GetSerializedTransactionType<TSerialized> {\n  const serializedType = sliceHex(serializedTransaction, 0, 1)\n\n  if (serializedType === '0x02')\n    return 'eip1559' as GetSerializedTransactionType<TSerialized>\n\n  if (serializedType === '0x01')\n    return 'eip2930' as GetSerializedTransactionType<TSerialized>\n\n  if (serializedType !== '0x' && hexToNumber(serializedType) >= 0xc0)\n    return 'legacy' as GetSerializedTransactionType<TSerialized>\n\n  throw new InvalidSerializedTransactionTypeError({ serializedType })\n}\n"],"mappings":";;;;;;AAAA,MAAAA,gBAAA,GAAAC,OAAA;AAUA,MAAAC,UAAA,GAAAD,OAAA;AACA,MAAAE,YAAA,GAAAF,OAAA;AAgBA,SAAgBG,4BAA4BA,CAG1CC,qBAAkC;EAElC,MAAMC,cAAc,GAAG,IAAAJ,UAAA,CAAAK,QAAQ,EAACF,qBAAqB,EAAE,CAAC,EAAE,CAAC,CAAC;EAE5D,IAAIC,cAAc,KAAK,MAAM,EAC3B,OAAO,SAAsD;EAE/D,IAAIA,cAAc,KAAK,MAAM,EAC3B,OAAO,SAAsD;EAE/D,IAAIA,cAAc,KAAK,IAAI,IAAI,IAAAH,YAAA,CAAAK,WAAW,EAACF,cAAc,CAAC,IAAI,IAAI,EAChE,OAAO,QAAqD;EAE9D,MAAM,IAAIN,gBAAA,CAAAS,qCAAqC,CAAC;IAAEH;EAAc,CAAE,CAAC;AACrE;AAjBAI,OAAA,CAAAN,4BAAA,GAAAA,4BAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}