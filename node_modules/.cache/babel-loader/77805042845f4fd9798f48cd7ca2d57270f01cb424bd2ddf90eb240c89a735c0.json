{"ast":null,"code":"import { writeContract as viem_writeContract } from 'viem/actions';\nimport '../createConfig.js';\nimport '../errors/base.js';\nimport '../types/chain.js';\nimport '../types/properties.js';\nimport { getAction } from '../utils/getAction.js';\nimport { getConnectorClient } from './getConnectorClient.js';\nimport { simulateContract } from './simulateContract.js';\n/** https://wagmi.sh/core/api/actions/writeContract */\nexport async function writeContract(config, parameters) {\n  const {\n    account,\n    chainId,\n    connector,\n    __mode,\n    ...rest\n  } = parameters;\n  let client;\n  if (typeof account === 'object' && account.type === 'local') client = config.getClient({\n    chainId\n  });else client = await getConnectorClient(config, {\n    account,\n    chainId,\n    connector\n  });\n  let request;\n  if (__mode === 'prepared') request = rest;else {\n    const {\n      request: simulateRequest\n    } = await simulateContract(config, {\n      ...rest,\n      account,\n      chainId\n    });\n    request = simulateRequest;\n  }\n  const action = getAction(client, viem_writeContract, 'writeContract');\n  const hash = await action({\n    ...request,\n    ...(account ? {\n      account\n    } : {}),\n    chain: chainId ? {\n      id: chainId\n    } : null\n  });\n  return hash;\n}","map":{"version":3,"names":["writeContract","viem_writeContract","getAction","getConnectorClient","simulateContract","config","parameters","account","chainId","connector","__mode","rest","client","type","getClient","request","simulateRequest","action","hash","chain","id"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/wagmi/node_modules/@wagmi/core/src/actions/writeContract.ts"],"sourcesContent":["import type {\n  Abi,\n  Account,\n  Chain,\n  ContractFunctionArgs,\n  ContractFunctionName,\n} from 'viem'\nimport {\n  type WriteContractErrorType as viem_WriteContractErrorType,\n  type WriteContractParameters as viem_WriteContractParameters,\n  type WriteContractReturnType as viem_WriteContractReturnType,\n  writeContract as viem_writeContract,\n} from 'viem/actions'\n\nimport { type Config } from '../createConfig.js'\nimport { type BaseErrorType, type ErrorType } from '../errors/base.js'\nimport { type SelectChains } from '../types/chain.js'\nimport {\n  type ChainIdParameter,\n  type ConnectorParameter,\n} from '../types/properties.js'\nimport type { Evaluate, UnionEvaluate, UnionOmit } from '../types/utils.js'\nimport { getAction } from '../utils/getAction.js'\nimport {\n  type GetConnectorClientErrorType,\n  getConnectorClient,\n} from './getConnectorClient.js'\nimport {\n  type SimulateContractErrorType,\n  simulateContract,\n} from './simulateContract.js'\n\nexport type WriteContractParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  functionName extends ContractFunctionName<\n    abi,\n    'nonpayable' | 'payable'\n  > = ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n  args extends ContractFunctionArgs<\n    abi,\n    'nonpayable' | 'payable',\n    functionName\n  > = ContractFunctionArgs<abi, 'nonpayable' | 'payable', functionName>,\n  config extends Config = Config,\n  chainId extends config['chains'][number]['id'] = config['chains'][number]['id'],\n  ///\n  allFunctionNames = ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n  chains extends readonly Chain[] = SelectChains<config, chainId>,\n> = UnionEvaluate<\n  {\n    [key in keyof chains]: UnionOmit<\n      viem_WriteContractParameters<\n        abi,\n        functionName,\n        args,\n        chains[key],\n        Account,\n        chains[key],\n        allFunctionNames\n      >,\n      'chain'\n    >\n  }[number] &\n    Evaluate<ChainIdParameter<config, chainId>> &\n    ConnectorParameter & { __mode?: 'prepared' }\n>\n\nexport type WriteContractReturnType = viem_WriteContractReturnType\n\nexport type WriteContractErrorType =\n  // getConnectorClient()\n  | GetConnectorClientErrorType\n  // simulateContract()\n  | SimulateContractErrorType\n  // base\n  | BaseErrorType\n  | ErrorType\n  // viem\n  | viem_WriteContractErrorType\n\n/** https://wagmi.sh/core/api/actions/writeContract */\nexport async function writeContract<\n  config extends Config,\n  const abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n  args extends ContractFunctionArgs<\n    abi,\n    'nonpayable' | 'payable',\n    functionName\n  >,\n  chainId extends config['chains'][number]['id'],\n>(\n  config: config,\n  parameters: WriteContractParameters<abi, functionName, args, config, chainId>,\n): Promise<WriteContractReturnType> {\n  const { account, chainId, connector, __mode, ...rest } = parameters\n\n  let client\n  if (typeof account === 'object' && account.type === 'local')\n    client = config.getClient({ chainId })\n  else\n    client = await getConnectorClient(config, { account, chainId, connector })\n\n  let request\n  if (__mode === 'prepared') request = rest\n  else {\n    const { request: simulateRequest } = await simulateContract(config, {\n      ...rest,\n      account,\n      chainId,\n    } as any)\n    request = simulateRequest\n  }\n\n  const action = getAction(client, viem_writeContract, 'writeContract')\n  const hash = await action({\n    ...(request as any),\n    ...(account ? { account } : {}),\n    chain: chainId ? { id: chainId } : null,\n  })\n\n  return hash\n}\n"],"mappings":"AAOA,SAIEA,aAAa,IAAIC,kBAAkB,QAC9B,cAAc;AAErB,OAA4B,oBAAoB;AAChD,OAAmD,mBAAmB;AACtE,OAAkC,mBAAmB;AACrD,OAGO,wBAAwB;AAE/B,SAASC,SAAS,QAAQ,uBAAuB;AACjD,SAEEC,kBAAkB,QACb,yBAAyB;AAChC,SAEEC,gBAAgB,QACX,uBAAuB;AAkD9B;AACA,OAAO,eAAeJ,aAAaA,CAWjCK,MAAc,EACdC,UAA6E;EAE7E,MAAM;IAAEC,OAAO;IAAEC,OAAO;IAAEC,SAAS;IAAEC,MAAM;IAAE,GAAGC;EAAI,CAAE,GAAGL,UAAU;EAEnE,IAAIM,MAAM;EACV,IAAI,OAAOL,OAAO,KAAK,QAAQ,IAAIA,OAAO,CAACM,IAAI,KAAK,OAAO,EACzDD,MAAM,GAAGP,MAAM,CAACS,SAAS,CAAC;IAAEN;EAAO,CAAE,CAAC,MAEtCI,MAAM,GAAG,MAAMT,kBAAkB,CAACE,MAAM,EAAE;IAAEE,OAAO;IAAEC,OAAO;IAAEC;EAAS,CAAE,CAAC;EAE5E,IAAIM,OAAO;EACX,IAAIL,MAAM,KAAK,UAAU,EAAEK,OAAO,GAAGJ,IAAI,MACpC;IACH,MAAM;MAAEI,OAAO,EAAEC;IAAe,CAAE,GAAG,MAAMZ,gBAAgB,CAACC,MAAM,EAAE;MAClE,GAAGM,IAAI;MACPJ,OAAO;MACPC;KACM,CAAC;IACTO,OAAO,GAAGC,eAAe;EAC3B;EAEA,MAAMC,MAAM,GAAGf,SAAS,CAACU,MAAM,EAAEX,kBAAkB,EAAE,eAAe,CAAC;EACrE,MAAMiB,IAAI,GAAG,MAAMD,MAAM,CAAC;IACxB,GAAIF,OAAe;IACnB,IAAIR,OAAO,GAAG;MAAEA;IAAO,CAAE,GAAG,EAAE,CAAC;IAC/BY,KAAK,EAAEX,OAAO,GAAG;MAAEY,EAAE,EAAEZ;IAAO,CAAE,GAAG;GACpC,CAAC;EAEF,OAAOU,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}