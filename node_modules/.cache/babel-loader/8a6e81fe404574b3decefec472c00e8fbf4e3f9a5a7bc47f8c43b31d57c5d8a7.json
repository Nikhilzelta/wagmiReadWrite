{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.encodeDeployData = void 0;\nconst abi_js_1 = require(\"../../errors/abi.js\");\nconst concat_js_1 = require(\"../data/concat.js\");\nconst encodeAbiParameters_js_1 = require(\"./encodeAbiParameters.js\");\nconst docsPath = '/docs/contract/encodeDeployData';\nfunction encodeDeployData({\n  abi,\n  args,\n  bytecode\n}) {\n  if (!args || args.length === 0) return bytecode;\n  const description = abi.find(x => 'type' in x && x.type === 'constructor');\n  if (!description) throw new abi_js_1.AbiConstructorNotFoundError({\n    docsPath\n  });\n  if (!('inputs' in description)) throw new abi_js_1.AbiConstructorParamsNotFoundError({\n    docsPath\n  });\n  if (!description.inputs || description.inputs.length === 0) throw new abi_js_1.AbiConstructorParamsNotFoundError({\n    docsPath\n  });\n  const data = (0, encodeAbiParameters_js_1.encodeAbiParameters)(description.inputs, args);\n  return (0, concat_js_1.concatHex)([bytecode, data]);\n}\nexports.encodeDeployData = encodeDeployData;","map":{"version":3,"names":["abi_js_1","require","concat_js_1","encodeAbiParameters_js_1","docsPath","encodeDeployData","abi","args","bytecode","length","description","find","x","type","AbiConstructorNotFoundError","AbiConstructorParamsNotFoundError","inputs","data","encodeAbiParameters","concatHex","exports"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/abi/encodeDeployData.ts"],"sourcesContent":["import type { Abi } from 'abitype'\n\nimport {\n  AbiConstructorNotFoundError,\n  type AbiConstructorNotFoundErrorType,\n  AbiConstructorParamsNotFoundError,\n} from '../../errors/abi.js'\nimport type { GetConstructorArgs } from '../../types/contract.js'\nimport type { Hex } from '../../types/misc.js'\nimport { type ConcatHexErrorType, concatHex } from '../data/concat.js'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport {\n  type EncodeAbiParametersErrorType,\n  encodeAbiParameters,\n} from './encodeAbiParameters.js'\n\nconst docsPath = '/docs/contract/encodeDeployData'\n\nexport type EncodeDeployDataParameters<\n  TAbi extends Abi | readonly unknown[] = Abi,\n> = {\n  abi: TAbi\n  bytecode: Hex\n} & GetConstructorArgs<TAbi>\n\nexport type EncodeDeployDataErrorType =\n  | AbiConstructorNotFoundErrorType\n  | ConcatHexErrorType\n  | EncodeAbiParametersErrorType\n  | ErrorType\n\nexport function encodeDeployData<const TAbi extends Abi | readonly unknown[]>({\n  abi,\n  args,\n  bytecode,\n}: EncodeDeployDataParameters<TAbi>) {\n  if (!args || args.length === 0) return bytecode\n\n  const description = (abi as Abi).find(\n    (x) => 'type' in x && x.type === 'constructor',\n  )\n  if (!description) throw new AbiConstructorNotFoundError({ docsPath })\n  if (!('inputs' in description))\n    throw new AbiConstructorParamsNotFoundError({ docsPath })\n  if (!description.inputs || description.inputs.length === 0)\n    throw new AbiConstructorParamsNotFoundError({ docsPath })\n\n  const data = encodeAbiParameters(\n    description.inputs,\n    args as readonly unknown[],\n  )\n  return concatHex([bytecode, data!])\n}\n"],"mappings":";;;;;;AAEA,MAAAA,QAAA,GAAAC,OAAA;AAOA,MAAAC,WAAA,GAAAD,OAAA;AAGA,MAAAE,wBAAA,GAAAF,OAAA;AAKA,MAAMG,QAAQ,GAAG,iCAAiC;AAelD,SAAgBC,gBAAgBA,CAA8C;EAC5EC,GAAG;EACHC,IAAI;EACJC;AAAQ,CACyB;EACjC,IAAI,CAACD,IAAI,IAAIA,IAAI,CAACE,MAAM,KAAK,CAAC,EAAE,OAAOD,QAAQ;EAE/C,MAAME,WAAW,GAAIJ,GAAW,CAACK,IAAI,CAClCC,CAAC,IAAK,MAAM,IAAIA,CAAC,IAAIA,CAAC,CAACC,IAAI,KAAK,aAAa,CAC/C;EACD,IAAI,CAACH,WAAW,EAAE,MAAM,IAAIV,QAAA,CAAAc,2BAA2B,CAAC;IAAEV;EAAQ,CAAE,CAAC;EACrE,IAAI,EAAE,QAAQ,IAAIM,WAAW,CAAC,EAC5B,MAAM,IAAIV,QAAA,CAAAe,iCAAiC,CAAC;IAAEX;EAAQ,CAAE,CAAC;EAC3D,IAAI,CAACM,WAAW,CAACM,MAAM,IAAIN,WAAW,CAACM,MAAM,CAACP,MAAM,KAAK,CAAC,EACxD,MAAM,IAAIT,QAAA,CAAAe,iCAAiC,CAAC;IAAEX;EAAQ,CAAE,CAAC;EAE3D,MAAMa,IAAI,GAAG,IAAAd,wBAAA,CAAAe,mBAAmB,EAC9BR,WAAW,CAACM,MAAM,EAClBT,IAA0B,CAC3B;EACD,OAAO,IAAAL,WAAA,CAAAiB,SAAS,EAAC,CAACX,QAAQ,EAAES,IAAK,CAAC,CAAC;AACrC;AArBAG,OAAA,CAAAf,gBAAA,GAAAA,gBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}