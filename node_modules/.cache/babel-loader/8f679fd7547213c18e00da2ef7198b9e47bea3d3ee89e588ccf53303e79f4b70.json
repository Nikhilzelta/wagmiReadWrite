{"ast":null,"code":"import { WebSocketRequestError } from '../../errors/request.js';\nimport { getSocketRpcClient } from './socket.js';\nexport async function getWebSocketRpcClient(url, options = {}) {\n  const {\n    reconnect\n  } = options;\n  return getSocketRpcClient({\n    async getSocket({\n      onError,\n      onOpen,\n      onResponse\n    }) {\n      const WebSocket = await import('isows').then(module => module.WebSocket);\n      const socket = new WebSocket(url);\n      function onClose() {\n        socket.removeEventListener('close', onClose);\n        socket.removeEventListener('message', onMessage);\n        socket.removeEventListener('error', onError);\n        socket.removeEventListener('open', onOpen);\n      }\n      function onMessage({\n        data\n      }) {\n        onResponse(JSON.parse(data));\n      }\n      // Setup event listeners for RPC & subscription responses.\n      socket.addEventListener('close', onClose);\n      socket.addEventListener('message', onMessage);\n      socket.addEventListener('error', onError);\n      socket.addEventListener('open', onOpen);\n      // Wait for the socket to open.\n      if (socket.readyState === WebSocket.CONNECTING) {\n        await new Promise((resolve, reject) => {\n          if (!socket) return;\n          socket.onopen = resolve;\n          socket.onerror = reject;\n        });\n      }\n      const {\n        close: close_\n      } = socket;\n      return Object.assign(socket, {\n        close() {\n          close_.bind(socket)();\n          onClose();\n        },\n        request({\n          body\n        }) {\n          if (socket.readyState === socket.CLOSED || socket.readyState === socket.CLOSING) throw new WebSocketRequestError({\n            body,\n            url: socket.url,\n            details: 'Socket is closed.'\n          });\n          return socket.send(JSON.stringify(body));\n        }\n      });\n    },\n    reconnect,\n    url\n  });\n}","map":{"version":3,"names":["WebSocketRequestError","getSocketRpcClient","getWebSocketRpcClient","url","options","reconnect","getSocket","onError","onOpen","onResponse","WebSocket","then","module","socket","onClose","removeEventListener","onMessage","data","JSON","parse","addEventListener","readyState","CONNECTING","Promise","resolve","reject","onopen","onerror","close","close_","Object","assign","bind","request","body","CLOSED","CLOSING","details","send","stringify"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/viem/utils/rpc/webSocket.ts"],"sourcesContent":["import type { MessageEvent } from 'isows'\n\nimport { WebSocketRequestError } from '../../errors/request.js'\nimport {\n  type GetSocketRpcClientParameters,\n  type Socket,\n  type SocketRpcClient,\n  getSocketRpcClient,\n} from './socket.js'\n\nexport type GetWebSocketRpcClientOptions = Pick<\n  GetSocketRpcClientParameters,\n  'reconnect'\n>\n\nexport async function getWebSocketRpcClient(\n  url: string,\n  options: GetWebSocketRpcClientOptions | undefined = {},\n): Promise<SocketRpcClient<WebSocket>> {\n  const { reconnect } = options\n\n  return getSocketRpcClient({\n    async getSocket({ onError, onOpen, onResponse }) {\n      const WebSocket = await import('isows').then((module) => module.WebSocket)\n      const socket = new WebSocket(url)\n\n      function onClose() {\n        socket.removeEventListener('close', onClose)\n        socket.removeEventListener('message', onMessage)\n        socket.removeEventListener('error', onError)\n        socket.removeEventListener('open', onOpen)\n      }\n      function onMessage({ data }: MessageEvent) {\n        onResponse(JSON.parse(data))\n      }\n\n      // Setup event listeners for RPC & subscription responses.\n      socket.addEventListener('close', onClose)\n      socket.addEventListener('message', onMessage)\n      socket.addEventListener('error', onError)\n      socket.addEventListener('open', onOpen)\n\n      // Wait for the socket to open.\n      if (socket.readyState === WebSocket.CONNECTING) {\n        await new Promise((resolve, reject) => {\n          if (!socket) return\n          socket.onopen = resolve\n          socket.onerror = reject\n        })\n      }\n\n      const { close: close_ } = socket\n\n      return Object.assign(socket, {\n        close() {\n          close_.bind(socket)()\n          onClose()\n        },\n        request({ body }) {\n          if (\n            socket.readyState === socket.CLOSED ||\n            socket.readyState === socket.CLOSING\n          )\n            throw new WebSocketRequestError({\n              body,\n              url: socket.url,\n              details: 'Socket is closed.',\n            })\n\n          return socket.send(JSON.stringify(body))\n        },\n      } as Socket<WebSocket>)\n    },\n    reconnect,\n    url,\n  })\n}\n"],"mappings":"AAEA,SAASA,qBAAqB,QAAQ,yBAAyB;AAC/D,SAIEC,kBAAkB,QACb,aAAa;AAOpB,OAAO,eAAeC,qBAAqBA,CACzCC,GAAW,EACXC,OAAA,GAAoD,EAAE;EAEtD,MAAM;IAAEC;EAAS,CAAE,GAAGD,OAAO;EAE7B,OAAOH,kBAAkB,CAAC;IACxB,MAAMK,SAASA,CAAC;MAAEC,OAAO;MAAEC,MAAM;MAAEC;IAAU,CAAE;MAC7C,MAAMC,SAAS,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,CAACC,IAAI,CAAEC,MAAM,IAAKA,MAAM,CAACF,SAAS,CAAC;MAC1E,MAAMG,MAAM,GAAG,IAAIH,SAAS,CAACP,GAAG,CAAC;MAEjC,SAASW,OAAOA,CAAA;QACdD,MAAM,CAACE,mBAAmB,CAAC,OAAO,EAAED,OAAO,CAAC;QAC5CD,MAAM,CAACE,mBAAmB,CAAC,SAAS,EAAEC,SAAS,CAAC;QAChDH,MAAM,CAACE,mBAAmB,CAAC,OAAO,EAAER,OAAO,CAAC;QAC5CM,MAAM,CAACE,mBAAmB,CAAC,MAAM,EAAEP,MAAM,CAAC;MAC5C;MACA,SAASQ,SAASA,CAAC;QAAEC;MAAI,CAAgB;QACvCR,UAAU,CAACS,IAAI,CAACC,KAAK,CAACF,IAAI,CAAC,CAAC;MAC9B;MAEA;MACAJ,MAAM,CAACO,gBAAgB,CAAC,OAAO,EAAEN,OAAO,CAAC;MACzCD,MAAM,CAACO,gBAAgB,CAAC,SAAS,EAAEJ,SAAS,CAAC;MAC7CH,MAAM,CAACO,gBAAgB,CAAC,OAAO,EAAEb,OAAO,CAAC;MACzCM,MAAM,CAACO,gBAAgB,CAAC,MAAM,EAAEZ,MAAM,CAAC;MAEvC;MACA,IAAIK,MAAM,CAACQ,UAAU,KAAKX,SAAS,CAACY,UAAU,EAAE;QAC9C,MAAM,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;UACpC,IAAI,CAACZ,MAAM,EAAE;UACbA,MAAM,CAACa,MAAM,GAAGF,OAAO;UACvBX,MAAM,CAACc,OAAO,GAAGF,MAAM;QACzB,CAAC,CAAC;MACJ;MAEA,MAAM;QAAEG,KAAK,EAAEC;MAAM,CAAE,GAAGhB,MAAM;MAEhC,OAAOiB,MAAM,CAACC,MAAM,CAAClB,MAAM,EAAE;QAC3Be,KAAKA,CAAA;UACHC,MAAM,CAACG,IAAI,CAACnB,MAAM,CAAC,EAAE;UACrBC,OAAO,EAAE;QACX,CAAC;QACDmB,OAAOA,CAAC;UAAEC;QAAI,CAAE;UACd,IACErB,MAAM,CAACQ,UAAU,KAAKR,MAAM,CAACsB,MAAM,IACnCtB,MAAM,CAACQ,UAAU,KAAKR,MAAM,CAACuB,OAAO,EAEpC,MAAM,IAAIpC,qBAAqB,CAAC;YAC9BkC,IAAI;YACJ/B,GAAG,EAAEU,MAAM,CAACV,GAAG;YACfkC,OAAO,EAAE;WACV,CAAC;UAEJ,OAAOxB,MAAM,CAACyB,IAAI,CAACpB,IAAI,CAACqB,SAAS,CAACL,IAAI,CAAC,CAAC;QAC1C;OACoB,CAAC;IACzB,CAAC;IACD7B,SAAS;IACTF;GACD,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}