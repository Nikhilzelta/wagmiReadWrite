{"ast":null,"code":"'use client';\n\nimport { useQueryClient } from '@tanstack/react-query';\nimport '@wagmi/core/internal';\nimport { getConnectorClientQueryOptions } from '@wagmi/core/query';\nimport { useEffect, useRef } from 'react';\nimport { useQuery } from '../utils/query.js';\nimport { useAccount } from './useAccount.js';\nimport { useChainId } from './useChainId.js';\nimport { useConfig } from './useConfig.js';\n/** https://wagmi.sh/react/api/hooks/useConnectorClient */\nexport function useConnectorClient(parameters = {}) {\n  const {\n    query = {},\n    ...rest\n  } = parameters;\n  const config = useConfig(rest);\n  const queryClient = useQueryClient();\n  const {\n    address,\n    connector,\n    status\n  } = useAccount({\n    config\n  });\n  const chainId = useChainId({\n    config\n  });\n  const {\n    queryKey,\n    ...options\n  } = getConnectorClientQueryOptions(config, {\n    ...parameters,\n    chainId: parameters.chainId ?? chainId,\n    connector: parameters.connector ?? connector\n  });\n  const enabled = Boolean(status !== 'disconnected' && (query.enabled ?? true));\n  const addressRef = useRef(address);\n  // biome-ignore lint/nursery/useExhaustiveDependencies: `queryKey` not required\n  useEffect(() => {\n    const previousAddress = addressRef.current;\n    if (!address && previousAddress) {\n      // remove when account is disconnected\n      queryClient.removeQueries({\n        queryKey\n      });\n      addressRef.current = undefined;\n    } else if (address !== previousAddress) {\n      // invalidate when address changes\n      queryClient.invalidateQueries({\n        queryKey\n      });\n      addressRef.current = address;\n    }\n  }, [address, queryClient]);\n  return useQuery({\n    ...query,\n    ...options,\n    queryKey,\n    enabled,\n    staleTime: Infinity\n  });\n}","map":{"version":3,"names":["useQueryClient","getConnectorClientQueryOptions","useEffect","useRef","useQuery","useAccount","useChainId","useConfig","useConnectorClient","parameters","query","rest","config","queryClient","address","connector","status","chainId","queryKey","options","enabled","Boolean","addressRef","previousAddress","current","removeQueries","undefined","invalidateQueries","staleTime","Infinity"],"sources":["/Users/nikhilbhatia/NIkhil/ZT-Prejects/wagmi-react-app/node_modules/wagmi/src/hooks/useConnectorClient.ts"],"sourcesContent":["'use client'\n\nimport { useQueryClient } from '@tanstack/react-query'\nimport type {\n  Config,\n  GetConnectorClientErrorType,\n  ResolvedRegister,\n} from '@wagmi/core'\nimport { type Evaluate, type Omit } from '@wagmi/core/internal'\nimport {\n  type GetConnectorClientData,\n  type GetConnectorClientOptions,\n  type GetConnectorClientQueryFnData,\n  type GetConnectorClientQueryKey,\n  getConnectorClientQueryOptions,\n} from '@wagmi/core/query'\nimport { useEffect, useRef } from 'react'\n\nimport type { ConfigParameter } from '../types/properties.js'\nimport {\n  type UseQueryParameters,\n  type UseQueryReturnType,\n  useQuery,\n} from '../utils/query.js'\nimport { useAccount } from './useAccount.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseConnectorClientParameters<\n  config extends Config = Config,\n  chainId extends config['chains'][number]['id'] = config['chains'][number]['id'],\n  selectData = GetConnectorClientData<config, chainId>,\n> = Evaluate<\n  GetConnectorClientOptions<config, chainId> &\n    ConfigParameter<config> & {\n      query?:\n        | Evaluate<\n            Omit<\n              UseQueryParameters<\n                GetConnectorClientQueryFnData<config, chainId>,\n                GetConnectorClientErrorType,\n                selectData,\n                GetConnectorClientQueryKey<config, chainId>\n              >,\n              'gcTime' | 'staleTime'\n            >\n          >\n        | undefined\n    }\n>\n\nexport type UseConnectorClientReturnType<\n  config extends Config = Config,\n  chainId extends config['chains'][number]['id'] = config['chains'][number]['id'],\n  selectData = GetConnectorClientData<config, chainId>,\n> = UseQueryReturnType<selectData, GetConnectorClientErrorType>\n\n/** https://wagmi.sh/react/api/hooks/useConnectorClient */\nexport function useConnectorClient<\n  config extends Config = ResolvedRegister['config'],\n  chainId extends config['chains'][number]['id'] = config['chains'][number]['id'],\n  selectData = GetConnectorClientData<config, chainId>,\n>(\n  parameters: UseConnectorClientParameters<config, chainId, selectData> = {},\n): UseConnectorClientReturnType<config, chainId, selectData> {\n  const { query = {}, ...rest } = parameters\n\n  const config = useConfig(rest)\n  const queryClient = useQueryClient()\n  const { address, connector, status } = useAccount({ config })\n  const chainId = useChainId({ config })\n\n  const { queryKey, ...options } = getConnectorClientQueryOptions<\n    config,\n    chainId\n  >(config, {\n    ...parameters,\n    chainId: parameters.chainId ?? chainId,\n    connector: parameters.connector ?? connector,\n  })\n  const enabled = Boolean(status !== 'disconnected' && (query.enabled ?? true))\n\n  const addressRef = useRef(address)\n  // biome-ignore lint/nursery/useExhaustiveDependencies: `queryKey` not required\n  useEffect(() => {\n    const previousAddress = addressRef.current\n    if (!address && previousAddress) {\n      // remove when account is disconnected\n      queryClient.removeQueries({ queryKey })\n      addressRef.current = undefined\n    } else if (address !== previousAddress) {\n      // invalidate when address changes\n      queryClient.invalidateQueries({ queryKey })\n      addressRef.current = address\n    }\n  }, [address, queryClient])\n\n  return useQuery({\n    ...query,\n    ...options,\n    queryKey,\n    enabled,\n    staleTime: Infinity,\n  })\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,SAASA,cAAc,QAAQ,uBAAuB;AAMtD,OAAyC,sBAAsB;AAC/D,SAKEC,8BAA8B,QACzB,mBAAmB;AAC1B,SAASC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAGzC,SAGEC,QAAQ,QACH,mBAAmB;AAC1B,SAASC,UAAU,QAAQ,iBAAiB;AAC5C,SAASC,UAAU,QAAQ,iBAAiB;AAC5C,SAASC,SAAS,QAAQ,gBAAgB;AA+B1C;AACA,OAAM,SAAUC,kBAAkBA,CAKhCC,UAAA,GAAwE,EAAE;EAE1E,MAAM;IAAEC,KAAK,GAAG,EAAE;IAAE,GAAGC;EAAI,CAAE,GAAGF,UAAU;EAE1C,MAAMG,MAAM,GAAGL,SAAS,CAACI,IAAI,CAAC;EAC9B,MAAME,WAAW,GAAGb,cAAc,EAAE;EACpC,MAAM;IAAEc,OAAO;IAAEC,SAAS;IAAEC;EAAM,CAAE,GAAGX,UAAU,CAAC;IAAEO;EAAM,CAAE,CAAC;EAC7D,MAAMK,OAAO,GAAGX,UAAU,CAAC;IAAEM;EAAM,CAAE,CAAC;EAEtC,MAAM;IAAEM,QAAQ;IAAE,GAAGC;EAAO,CAAE,GAAGlB,8BAA8B,CAG7DW,MAAM,EAAE;IACR,GAAGH,UAAU;IACbQ,OAAO,EAAER,UAAU,CAACQ,OAAO,IAAIA,OAAO;IACtCF,SAAS,EAAEN,UAAU,CAACM,SAAS,IAAIA;GACpC,CAAC;EACF,MAAMK,OAAO,GAAGC,OAAO,CAACL,MAAM,KAAK,cAAc,KAAKN,KAAK,CAACU,OAAO,IAAI,IAAI,CAAC,CAAC;EAE7E,MAAME,UAAU,GAAGnB,MAAM,CAACW,OAAO,CAAC;EAClC;EACAZ,SAAS,CAAC,MAAK;IACb,MAAMqB,eAAe,GAAGD,UAAU,CAACE,OAAO;IAC1C,IAAI,CAACV,OAAO,IAAIS,eAAe,EAAE;MAC/B;MACAV,WAAW,CAACY,aAAa,CAAC;QAAEP;MAAQ,CAAE,CAAC;MACvCI,UAAU,CAACE,OAAO,GAAGE,SAAS;IAChC,CAAC,MAAM,IAAIZ,OAAO,KAAKS,eAAe,EAAE;MACtC;MACAV,WAAW,CAACc,iBAAiB,CAAC;QAAET;MAAQ,CAAE,CAAC;MAC3CI,UAAU,CAACE,OAAO,GAAGV,OAAO;IAC9B;EACF,CAAC,EAAE,CAACA,OAAO,EAAED,WAAW,CAAC,CAAC;EAE1B,OAAOT,QAAQ,CAAC;IACd,GAAGM,KAAK;IACR,GAAGS,OAAO;IACVD,QAAQ;IACRE,OAAO;IACPQ,SAAS,EAAEC;GACZ,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}